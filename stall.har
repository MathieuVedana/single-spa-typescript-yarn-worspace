{
  "log": {
    "version": "1.2",
    "creator": {
      "name": "WebInspector",
      "version": "537.36"
    },
    "pages": [
      {
        "startedDateTime": "2023-04-10T17:57:09.407Z",
        "id": "page_38",
        "title": "http://localhost:9000/",
        "pageTimings": {
          "onContentLoad": 171.47300000033283,
          "onLoad": 495.6499999989319
        }
      },
      {
        "startedDateTime": "2023-04-10T17:57:16.595Z",
        "id": "page_39",
        "title": "http://localhost:9000/",
        "pageTimings": {
          "onContentLoad": 207.28500000041095,
          "onLoad": 619.2179999998189
        }
      }
    ],
    "entries": [
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "__webpack_require__.hmrM",
                "scriptId": "1341",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 4594,
                "columnNumber": 19
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "hotCheck",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 3939,
                  "columnNumber": 14
                },
                {
                  "functionName": "check",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 2411,
                  "columnNumber": 4
                },
                {
                  "functionName": "",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 2465,
                  "columnNumber": 3
                },
                {
                  "functionName": "emit",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 2955,
                  "columnNumber": 4
                },
                {
                  "functionName": "reloadApp",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 2301,
                  "columnNumber": 66
                },
                {
                  "functionName": "ok",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 462,
                  "columnNumber": 67
                },
                {
                  "functionName": "",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 1965,
                  "columnNumber": 28
                },
                {
                  "functionName": "client.onmessage",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 234,
                  "columnNumber": 8
                }
              ]
            }
          }
        },
        "_priority": "High",
        "_resourceType": "fetch",
        "cache": {},
        "connection": "65305",
        "pageref": "page_38",
        "request": {
          "method": "GET",
          "url": "http://localhost:9002/main.01c6e80bf21987525eab.hot-update.json",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "Host",
              "value": "localhost:9002"
            },
            {
              "name": "Origin",
              "value": "http://localhost:9000"
            },
            {
              "name": "Referer",
              "value": "http://localhost:9000/"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "empty"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 626,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Length",
              "value": "28"
            },
            {
              "name": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "name": "Date",
              "value": "Mon, 10 Apr 2023 17:57:16 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"1c-+jn3vwqtJl4fnYXbPmX3jvyLyTI\""
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 28,
            "mimeType": "application/json",
            "compression": 0
          },
          "redirectURL": "",
          "headersSize": 312,
          "bodySize": 28,
          "_transferSize": 340,
          "_error": null
        },
        "serverIPAddress": "[::1]",
        "startedDateTime": "2023-04-10T17:57:16.535Z",
        "time": 17.62400000044785,
        "timings": {
          "blocked": 8.734000000035508,
          "dns": 0.015000000000000124,
          "ssl": -1,
          "connect": 0.6040000000000001,
          "send": 0.242,
          "wait": 7.593000000148895,
          "receive": 0.4360000002634479,
          "_blocked_queueing": 6.335000000035507
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "__webpack_require__.l",
                "scriptId": "1341",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 3677,
                "columnNumber": 40
              },
              {
                "functionName": "",
                "scriptId": "1341",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 4130,
                "columnNumber": 33
              },
              {
                "functionName": "loadUpdateChunk",
                "scriptId": "1341",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 4112,
                "columnNumber": 19
              },
              {
                "functionName": "",
                "scriptId": "1341",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 4572,
                "columnNumber": 28
              },
              {
                "functionName": "__webpack_require__.hmrC.jsonp",
                "scriptId": "1341",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 4567,
                "columnNumber": 21
              },
              {
                "functionName": "",
                "scriptId": "1341",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 3958,
                "columnNumber": 46
              },
              {
                "functionName": "",
                "scriptId": "1341",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 3954,
                "columnNumber": 54
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 3949,
                  "columnNumber": 42
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "hotCheck",
                    "scriptId": "1341",
                    "url": "http://localhost:9002/mma-utils1.js",
                    "lineNumber": 3940,
                    "columnNumber": 14
                  },
                  {
                    "functionName": "check",
                    "scriptId": "1341",
                    "url": "http://localhost:9002/mma-utils1.js",
                    "lineNumber": 2411,
                    "columnNumber": 4
                  },
                  {
                    "functionName": "",
                    "scriptId": "1341",
                    "url": "http://localhost:9002/mma-utils1.js",
                    "lineNumber": 2465,
                    "columnNumber": 3
                  },
                  {
                    "functionName": "emit",
                    "scriptId": "1341",
                    "url": "http://localhost:9002/mma-utils1.js",
                    "lineNumber": 2955,
                    "columnNumber": 4
                  },
                  {
                    "functionName": "reloadApp",
                    "scriptId": "1341",
                    "url": "http://localhost:9002/mma-utils1.js",
                    "lineNumber": 2301,
                    "columnNumber": 66
                  },
                  {
                    "functionName": "ok",
                    "scriptId": "1341",
                    "url": "http://localhost:9002/mma-utils1.js",
                    "lineNumber": 462,
                    "columnNumber": 67
                  },
                  {
                    "functionName": "",
                    "scriptId": "1341",
                    "url": "http://localhost:9002/mma-utils1.js",
                    "lineNumber": 1965,
                    "columnNumber": 28
                  },
                  {
                    "functionName": "client.onmessage",
                    "scriptId": "1341",
                    "url": "http://localhost:9002/mma-utils1.js",
                    "lineNumber": 234,
                    "columnNumber": 8
                  }
                ]
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "connection": "65311",
        "pageref": "page_38",
        "request": {
          "method": "GET",
          "url": "http://localhost:9002/main.01c6e80bf21987525eab.hot-update.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "Host",
              "value": "localhost:9002"
            },
            {
              "name": "Referer",
              "value": "http://localhost:9000/"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 597,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "Date",
              "value": "Mon, 10 Apr 2023 17:57:16 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"4af-ph+GI8RTw6cJ9cJ5nUOgx0azwX4\""
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 1199,
            "mimeType": "application/javascript",
            "compression": 671
          },
          "redirectURL": "",
          "headersSize": 351,
          "bodySize": 528,
          "_transferSize": 879,
          "_error": null
        },
        "serverIPAddress": "[::1]",
        "startedDateTime": "2023-04-10T17:57:16.557Z",
        "time": 21.19199999973108,
        "timings": {
          "blocked": 7.968000000446336,
          "dns": 0.01200000000000001,
          "ssl": -1,
          "connect": 0.8489999999999999,
          "send": 0.31500000000000017,
          "wait": 11.36900000043062,
          "receive": 0.678999998854124,
          "_blocked_queueing": 7.298000000446336
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "1341",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 2453,
                "columnNumber": 22
              }
            ],
            "parent": {
              "description": "Promise.catch",
              "callFrames": [
                {
                  "functionName": "check",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 2441,
                  "columnNumber": 9
                },
                {
                  "functionName": "",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 2465,
                  "columnNumber": 3
                },
                {
                  "functionName": "emit",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 2955,
                  "columnNumber": 4
                },
                {
                  "functionName": "reloadApp",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 2301,
                  "columnNumber": 66
                },
                {
                  "functionName": "ok",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 462,
                  "columnNumber": 67
                },
                {
                  "functionName": "",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 1965,
                  "columnNumber": 28
                },
                {
                  "functionName": "client.onmessage",
                  "scriptId": "1341",
                  "url": "http://localhost:9002/mma-utils1.js",
                  "lineNumber": 234,
                  "columnNumber": 8
                }
              ]
            }
          }
        },
        "_priority": "VeryHigh",
        "_resourceType": "document",
        "cache": {},
        "connection": "65187",
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "http://localhost:9000/",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Cache-Control",
              "value": "max-age=0"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "Host",
              "value": "localhost:9000"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"fca-SrEVO3V+ShJ7ht+ZneOKu3V4cwc\""
            },
            {
              "name": "Referer",
              "value": "http://localhost:9000/"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "document"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "navigate"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "Upgrade-Insecure-Requests",
              "value": "1"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 803,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Mon, 10 Apr 2023 17:57:16 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"fca-SrEVO3V+ShJ7ht+ZneOKu3V4cwc\""
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 4042,
            "mimeType": "text/html",
            "text": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>Root Config</title>\n  <!--\n    Remove this if you only support browsers that support async/await.\n    This is needed by babel to share largeish helper code for compiling async/await in older\n    browsers. More information at https://github.com/single-spa/create-single-spa/issues/112\n  -->\n  <script src=\"https://cdn.jsdelivr.net/npm/regenerator-runtime@0.13.7/runtime.min.js\"></script>\n  <!--\n    This CSP allows any SSL-enabled host and for arbitrary eval(), but you should limit these directives further to increase your app's security.\n    Learn more about CSP policies at https://content-security-policy.com/#directive\n  -->\n  <meta http-equiv=\"Content-Security-Policy\"\n    content=\"default-src 'self' https: localhost:*; script-src 'unsafe-inline' 'unsafe-eval' https: localhost:*; connect-src https: localhost:* ws://localhost:*; style-src 'unsafe-inline' https:; object-src 'none';\">\n  <meta name=\"importmap-type\" content=\"systemjs-importmap\" />\n  <!-- If you wish to turn off import-map-overrides for specific environments (prod), uncomment the line below -->\n  <!-- More info at https://github.com/joeldenning/import-map-overrides/blob/master/docs/configuration.md#domain-list -->\n  <!-- <meta name=\"import-map-overrides-domains\" content=\"denylist:prod.example.com\" /> -->\n\n  <!-- Shared dependencies go into this import map. Your shared dependencies must be of one of the following formats:\n\n    1. System.register (preferred when possible) - https://github.com/systemjs/systemjs/blob/master/docs/system-register.md\n    2. UMD - https://github.com/umdjs/umd\n    3. Global variable\n\n    More information about shared dependencies can be found at https://single-spa.js.org/docs/recommended-setup#sharing-with-import-maps.\n  -->\n  <script type=\"systemjs-importmap\">\n    {\n      \"imports\": {\n        \"single-spa\": \"https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js\",\n        \"react\": \"https://cdn.jsdelivr.net/npm/react@17.0.2/umd/react.production.min.js\",\n\"react-dom\": \"https://cdn.jsdelivr.net/npm/react-dom@17.0.2/umd/react-dom.production.min.js\"\n      }\n    }\n  </script>\n  <link rel=\"preload\" href=\"https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js\" as=\"script\">\n\n  <!-- Add your organization's prod import map URL to this script's src  -->\n  <!-- <script type=\"systemjs-importmap\" src=\"/importmap.json\"></script> -->\n\n  \n    <script type=\"systemjs-importmap\">\n    {\n      \"imports\": {\n        \"@mma/root-config\": \"//localhost:9000/mma-root-config.js\",\n        \"@mma/app1\": \"//localhost:9001/mma-app1.js\",\n        \"@mma/utils1\": \"//localhost:9002/mma-utils1.js\",\n        \"@mma/utils2\": \"//localhost:9003/mma-utils2.js\",\n        \"react\": \"https://cdn.jsdelivr.net/npm/react@17.0.2/umd/react.development.min.js\",\n\"react-dom\": \"https://cdn.jsdelivr.net/npm/react-dom@17.0.2/umd/react-dom.development.min.js\"\n      }\n    }\n  </script>\n    \n\n      <!--\n    If you need to support Angular applications, uncomment the script tag below to ensure only one instance of ZoneJS is loaded\n    Learn more about why at https://single-spa.js.org/docs/ecosystem-angular/#zonejs\n  -->\n      <!-- <script src=\"https://cdn.jsdelivr.net/npm/zone.js@0.11.3/dist/zone.min.js\"></script> -->\n\n      <script src=\"https://cdn.jsdelivr.net/npm/import-map-overrides@2.2.0/dist/import-map-overrides.js\"></script>\n      \n        <script src=\"https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js\"></script>\n        <script src=\"https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js\"></script>\n        \n</head>\n\n<body>\n  <noscript>\n    You need to enable JavaScript to run this app.\n  </noscript>\n  <main></main>\n  <script>\n    System.import('@mma/root-config');\n  </script>\n  <import-map-overrides-full show-when-local-storage=\"devtools\" dev-libs></import-map-overrides-full>\n</body>\n\n</html>\n"
          },
          "redirectURL": "",
          "headersSize": 233,
          "bodySize": 0,
          "_transferSize": 233,
          "_error": null
        },
        "serverIPAddress": "[::1]",
        "startedDateTime": "2023-04-10T17:57:16.586Z",
        "time": 14.515999999275664,
        "timings": {
          "blocked": 10.67100000010105,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.28200000000000003,
          "wait": 3.0790000008513454,
          "receive": 0.4839999983232701,
          "_blocked_queueing": 9.371000000101048
        }
      },
      {
        "_fromCache": "memory",
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:9000/",
          "lineNumber": 13
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "https://cdn.jsdelivr.net/npm/regenerator-runtime@0.13.7/runtime.min.js",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
            },
            {
              "name": "Referer",
              "value": "http://localhost:9000/"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 10 Apr 2023 14:52:10 GMT"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "age",
              "value": "1170043"
            },
            {
              "name": "x-jsd-version",
              "value": "0.13.7"
            },
            {
              "name": "x-cache",
              "value": "HIT, HIT"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "content-length",
              "value": "2743"
            },
            {
              "name": "x-served-by",
              "value": "cache-fra-eddf8230046-FRA, cache-lon420123-LON"
            },
            {
              "name": "x-jsd-version-type",
              "value": "version"
            },
            {
              "name": "etag",
              "value": "W/\"1a73-bnmptAFfOvFXhGrxwrCcGHiq7DM\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000, s-maxage=31536000, immutable"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            }
          ],
          "cookies": [],
          "content": {
            "size": 6771,
            "mimeType": "application/javascript",
            "text": "/**\n * Minified by jsDelivr using Terser v3.14.1.\n * Original file: /npm/regenerator-runtime@0.13.7/runtime.js\n *\n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\nvar runtime=function(t){\"use strict\";var r,e=Object.prototype,n=e.hasOwnProperty,o=\"function\"==typeof Symbol?Symbol:{},i=o.iterator||\"@@iterator\",a=o.asyncIterator||\"@@asyncIterator\",c=o.toStringTag||\"@@toStringTag\";function u(t,r,e){return Object.defineProperty(t,r,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[r]}try{u({},\"\")}catch(t){u=function(t,r,e){return t[r]=e}}function h(t,r,e,n){var o=r&&r.prototype instanceof d?r:d,i=Object.create(o.prototype),a=new G(n||[]);return i._invoke=function(t,r,e){var n=l;return function(o,i){if(n===p)throw new Error(\"Generator is already running\");if(n===y){if(\"throw\"===o)throw i;return F()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var c=j(a,e);if(c){if(c===v)continue;return c}}if(\"next\"===e.method)e.sent=e._sent=e.arg;else if(\"throw\"===e.method){if(n===l)throw n=y,e.arg;e.dispatchException(e.arg)}else\"return\"===e.method&&e.abrupt(\"return\",e.arg);n=p;var u=f(t,r,e);if(\"normal\"===u.type){if(n=e.done?y:s,u.arg===v)continue;return{value:u.arg,done:e.done}}\"throw\"===u.type&&(n=y,e.method=\"throw\",e.arg=u.arg)}}}(t,e,a),i}function f(t,r,e){try{return{type:\"normal\",arg:t.call(r,e)}}catch(t){return{type:\"throw\",arg:t}}}t.wrap=h;var l=\"suspendedStart\",s=\"suspendedYield\",p=\"executing\",y=\"completed\",v={};function d(){}function g(){}function m(){}var w={};w[i]=function(){return this};var L=Object.getPrototypeOf,x=L&&L(L(N([])));x&&x!==e&&n.call(x,i)&&(w=x);var b=m.prototype=d.prototype=Object.create(w);function E(t){[\"next\",\"throw\",\"return\"].forEach(function(r){u(t,r,function(t){return this._invoke(r,t)})})}function _(t,r){var e;this._invoke=function(o,i){function a(){return new r(function(e,a){!function e(o,i,a,c){var u=f(t[o],t,i);if(\"throw\"!==u.type){var h=u.arg,l=h.value;return l&&\"object\"==typeof l&&n.call(l,\"__await\")?r.resolve(l.__await).then(function(t){e(\"next\",t,a,c)},function(t){e(\"throw\",t,a,c)}):r.resolve(l).then(function(t){h.value=t,a(h)},function(t){return e(\"throw\",t,a,c)})}c(u.arg)}(o,i,e,a)})}return e=e?e.then(a,a):a()}}function j(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,\"throw\"===e.method){if(t.iterator.return&&(e.method=\"return\",e.arg=r,j(t,e),\"throw\"===e.method))return v;e.method=\"throw\",e.arg=new TypeError(\"The iterator does not provide a 'throw' method\")}return v}var o=f(n,t.iterator,e.arg);if(\"throw\"===o.type)return e.method=\"throw\",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,\"return\"!==e.method&&(e.method=\"next\",e.arg=r),e.delegate=null,v):i:(e.method=\"throw\",e.arg=new TypeError(\"iterator result is not an object\"),e.delegate=null,v)}function O(t){var r={tryLoc:t[0]};1 in t&&(r.catchLoc=t[1]),2 in t&&(r.finallyLoc=t[2],r.afterLoc=t[3]),this.tryEntries.push(r)}function k(t){var r=t.completion||{};r.type=\"normal\",delete r.arg,t.completion=r}function G(t){this.tryEntries=[{tryLoc:\"root\"}],t.forEach(O,this),this.reset(!0)}function N(t){if(t){var e=t[i];if(e)return e.call(t);if(\"function\"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function e(){for(;++o<t.length;)if(n.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=r,e.done=!0,e};return a.next=a}}return{next:F}}function F(){return{value:r,done:!0}}return g.prototype=b.constructor=m,m.constructor=g,g.displayName=u(m,c,\"GeneratorFunction\"),t.isGeneratorFunction=function(t){var r=\"function\"==typeof t&&t.constructor;return!!r&&(r===g||\"GeneratorFunction\"===(r.displayName||r.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u(t,c,\"GeneratorFunction\")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},E(_.prototype),_.prototype[a]=function(){return this},t.AsyncIterator=_,t.async=function(r,e,n,o,i){void 0===i&&(i=Promise);var a=new _(h(r,e,n,o),i);return t.isGeneratorFunction(e)?a:a.next().then(function(t){return t.done?t.value:a.next()})},E(b),u(b,c,\"Generator\"),b[i]=function(){return this},b.toString=function(){return\"[object Generator]\"},t.keys=function(t){var r=[];for(var e in t)r.push(e);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=N,G.prototype={constructor:G,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method=\"next\",this.arg=r,this.tryEntries.forEach(k),!t)for(var e in this)\"t\"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if(\"throw\"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(n,o){return c.type=\"throw\",c.arg=t,e.next=n,o&&(e.method=\"next\",e.arg=r),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if(\"root\"===a.tryLoc)return o(\"end\");if(a.tryLoc<=this.prev){var u=n.call(a,\"catchLoc\"),h=n.call(a,\"finallyLoc\");if(u&&h){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!h)throw new Error(\"try statement without catch or finally\");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,r){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&n.call(o,\"finallyLoc\")&&this.prev<o.finallyLoc){var i=o;break}}i&&(\"break\"===t||\"continue\"===t)&&i.tryLoc<=r&&r<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=r,i?(this.method=\"next\",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,r){if(\"throw\"===t.type)throw t.arg;return\"break\"===t.type||\"continue\"===t.type?this.next=t.arg:\"return\"===t.type?(this.rval=this.arg=t.arg,this.method=\"return\",this.next=\"end\"):\"normal\"===t.type&&r&&(this.next=r),v},finish:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),k(e),v}},catch:function(t){for(var r=this.tryEntries.length-1;r>=0;--r){var e=this.tryEntries[r];if(e.tryLoc===t){var n=e.completion;if(\"throw\"===n.type){var o=n.arg;k(e)}return o}}throw new Error(\"illegal catch attempt\")},delegateYield:function(t,e,n){return this.delegate={iterator:N(t),resultName:e,nextLoc:n},\"next\"===this.method&&(this.arg=r),v}},t}(\"object\"==typeof module?module.exports:{});try{regeneratorRuntime=runtime}catch(t){Function(\"r\",\"regeneratorRuntime = r\")(runtime)}\n//# sourceMappingURL=/sm/0316f3d3f224ce13d2aa4cdd18f007c105d07b559b34a647cbdc815624704866.map"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "[2a04:4e42:4b::485]",
        "startedDateTime": "2023-04-10T17:57:16.619Z",
        "time": 0.20600000061676838,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.1830000001064036,
          "receive": 0.02300000051036477,
          "_blocked_queueing": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:9000/",
          "lineNumber": 42
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
          "httpVersion": "h3",
          "headers": [],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "*"
            },
            {
              "name": "age",
              "value": "2253144"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000, s-maxage=31536000, immutable"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "content-length",
              "value": "6739"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "date",
              "value": "Mon, 10 Apr 2023 14:52:10 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"4fc6-mRlSM6aBLpNvAuv1hQj2EMUzY8E\""
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-cache",
              "value": "HIT, HIT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "x-jsd-version",
              "value": "5.9.0"
            },
            {
              "name": "x-jsd-version-type",
              "value": "version"
            },
            {
              "name": "x-served-by",
              "value": "cache-fra-eddf8230108-FRA, cache-lon420123-LON"
            }
          ],
          "cookies": [],
          "content": {
            "size": 20422,
            "mimeType": "application/javascript",
            "text": "/* single-spa@5.9.0 - SystemJS - prod */\nSystem.register([],(function(t){\"use strict\";return{execute:function(){t({addErrorHandler:c,checkActivityFunctions:bt,ensureJQuerySupport:lt,getAppNames:Ot,getAppStatus:Tt,getMountedApps:yt,mountRootParcel:W,navigateToUrl:et,pathToActiveWhen:Ut,registerApplication:Pt,removeErrorHandler:s,setBootstrapMaxTime:H,setMountMaxTime:J,setUnloadMaxTime:V,setUnmountMaxTime:Q,start:Bt,triggerAppChange:Lt,unloadApplication:Nt,unregisterApplication:At});var n=Object.freeze({__proto__:null,get start(){return Bt},get ensureJQuerySupport(){return lt},get setBootstrapMaxTime(){return H},get setMountMaxTime(){return J},get setUnmountMaxTime(){return Q},get setUnloadMaxTime(){return V},get registerApplication(){return Pt},get unregisterApplication(){return At},get getMountedApps(){return yt},get getAppStatus(){return Tt},get unloadApplication(){return Nt},get checkActivityFunctions(){return bt},get getAppNames(){return Ot},get pathToActiveWhen(){return Ut},get navigateToUrl(){return et},get triggerAppChange(){return Lt},get addErrorHandler(){return c},get removeErrorHandler(){return s},get mountRootParcel(){return W},get NOT_LOADED(){return p},get LOADING_SOURCE_CODE(){return h},get NOT_BOOTSTRAPPED(){return m},get BOOTSTRAPPING(){return d},get NOT_MOUNTED(){return v},get MOUNTING(){return w},get UPDATING(){return E},get LOAD_ERROR(){return O},get MOUNTED(){return g},get UNMOUNTING(){return y},get SKIP_BECAUSE_BROKEN(){return T}});function e(t){return(e=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var o=(\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{}).CustomEvent,i=function(){try{var t=new o(\"cat\",{detail:{foo:\"bar\"}});return\"cat\"===t.type&&\"bar\"===t.detail.foo}catch(t){}return!1}()?o:\"undefined\"!=typeof document&&\"function\"==typeof document.createEvent?function(t,n){var e=document.createEvent(\"CustomEvent\");return n?e.initCustomEvent(t,n.bubbles,n.cancelable,n.detail):e.initCustomEvent(t,!1,!1,void 0),e}:function(t,n){var e=document.createEventObject();return e.type=t,n?(e.bubbles=Boolean(n.bubbles),e.cancelable=Boolean(n.cancelable),e.detail=n.detail):(e.bubbles=!1,e.cancelable=!1,e.detail=void 0),e},u=[];function a(t,n,e){var r=l(t,n,e);u.length?u.forEach((function(t){return t(r)})):setTimeout((function(){throw r}))}function c(t){if(\"function\"!=typeof t)throw Error(f(28,!1));u.push(t)}function s(t){if(\"function\"!=typeof t)throw Error(f(29,!1));var n=!1;return u=u.filter((function(e){var r=e===t;return n=n||r,!r})),n}function f(t,n){for(var e=arguments.length,r=new Array(e>2?e-2:0),o=2;o<e;o++)r[o-2]=arguments[o];return\"single-spa minified message #\".concat(t,\": \").concat(n?n+\" \":\"\",\"See https://single-spa.js.org/error/?code=\").concat(t).concat(r.length?\"&arg=\".concat(r.join(\"&arg=\")):\"\")}function l(t,n,e){var r,o=\"\".concat(S(n),\" '\").concat(A(n),\"' died in status \").concat(n.status,\": \");if(t instanceof Error){try{t.message=o+t.message}catch(t){}r=t}else{console.warn(f(30,!1,n.status,A(n)));try{r=Error(o+JSON.stringify(t))}catch(n){r=t}}return r.appOrParcelName=A(n),n.status=e,r}var p=t(\"NOT_LOADED\",\"NOT_LOADED\"),h=t(\"LOADING_SOURCE_CODE\",\"LOADING_SOURCE_CODE\"),m=t(\"NOT_BOOTSTRAPPED\",\"NOT_BOOTSTRAPPED\"),d=t(\"BOOTSTRAPPING\",\"BOOTSTRAPPING\"),v=t(\"NOT_MOUNTED\",\"NOT_MOUNTED\"),w=t(\"MOUNTING\",\"MOUNTING\"),g=t(\"MOUNTED\",\"MOUNTED\"),E=t(\"UPDATING\",\"UPDATING\"),y=t(\"UNMOUNTING\",\"UNMOUNTING\"),O=t(\"LOAD_ERROR\",\"LOAD_ERROR\"),T=t(\"SKIP_BECAUSE_BROKEN\",\"SKIP_BECAUSE_BROKEN\");function P(t){return t.status===g}function b(t){try{return t.activeWhen(window.location)}catch(n){return a(n,t,T),!1}}function A(t){return t.name}function N(t){return Boolean(t.unmountThisParcel)}function S(t){return N(t)?\"parcel\":\"application\"}function _(){for(var t=arguments.length-1;t>0;t--)for(var n in arguments[t])\"__proto__\"!==n&&(arguments[t-1][n]=arguments[t][n]);return arguments[0]}function U(t,n){for(var e=0;e<t.length;e++)if(n(t[e]))return t[e];return null}function D(t){return t&&(\"function\"==typeof t||(n=t,Array.isArray(n)&&!U(n,(function(t){return\"function\"!=typeof t}))));var n}function M(t,n){var e=t[n]||[];0===(e=Array.isArray(e)?e:[e]).length&&(e=[function(){return Promise.resolve()}]);var r=S(t),o=A(t);return function(t){return e.reduce((function(e,i,u){return e.then((function(){var e=i(t);return j(e)?e:Promise.reject(f(15,!1,r,o,n,u))}))}),Promise.resolve())}}function j(t){return t&&\"function\"==typeof t.then&&\"function\"==typeof t.catch}function L(t,n){return Promise.resolve().then((function(){return t.status!==m?t:(t.status=d,t.bootstrap?q(t,\"bootstrap\").then(e).catch((function(e){if(n)throw l(e,t,T);return a(e,t,T),t})):Promise.resolve().then(e))}));function e(){return t.status=v,t}}function R(t,n){return Promise.resolve().then((function(){if(t.status!==g)return t;t.status=y;var e=Object.keys(t.parcels).map((function(n){return t.parcels[n].unmountThisParcel()}));return Promise.all(e).then(r,(function(e){return r().then((function(){var r=Error(e.message);if(n)throw l(r,t,T);a(r,t,T)}))})).then((function(){return t}));function r(){return q(t,\"unmount\").then((function(){t.status=v})).catch((function(e){if(n)throw l(e,t,T);a(e,t,T)}))}}))}var I=!1,x=!1;function B(t,n){return Promise.resolve().then((function(){return t.status!==v?t:(I||(window.dispatchEvent(new i(\"single-spa:before-first-mount\")),I=!0),q(t,\"mount\").then((function(){return t.status=g,x||(window.dispatchEvent(new i(\"single-spa:first-mount\")),x=!0),t})).catch((function(e){return t.status=g,R(t,!0).then(r,r);function r(){if(n)throw l(e,t,T);return a(e,t,T),t}})))}))}var G=0,C={parcels:{}};function W(){return $.apply(C,arguments)}function $(t,n){var r=this;if(!t||\"object\"!==e(t)&&\"function\"!=typeof t)throw Error(f(2,!1));if(t.name&&\"string\"!=typeof t.name)throw Error(f(3,!1,e(t.name)));if(\"object\"!==e(n))throw Error(f(4,!1,name,e(n)));if(!n.domElement)throw Error(f(5,!1,name));var o,i=G++,u=\"function\"==typeof t,a=u?t:function(){return Promise.resolve(t)},c={id:i,parcels:{},status:u?h:m,customProps:n,parentName:A(r),unmountThisParcel:function(){return y.then((function(){if(c.status!==g)throw Error(f(6,!1,name,c.status));return R(c,!0)})).then((function(t){return c.parentName&&delete r.parcels[c.id],t})).then((function(t){return p(t),t})).catch((function(t){throw c.status=T,d(t),t}))}};r.parcels[i]=c;var s=a();if(!s||\"function\"!=typeof s.then)throw Error(f(7,!1));var p,d,w=(s=s.then((function(t){if(!t)throw Error(f(8,!1));var n=t.name||\"parcel-\".concat(i);if(Object.prototype.hasOwnProperty.call(t,\"bootstrap\")&&!D(t.bootstrap))throw Error(f(9,!1,n));if(!D(t.mount))throw Error(f(10,!1,n));if(!D(t.unmount))throw Error(f(11,!1,n));if(t.update&&!D(t.update))throw Error(f(12,!1,n));var e=M(t,\"bootstrap\"),r=M(t,\"mount\"),u=M(t,\"unmount\");c.status=m,c.name=n,c.bootstrap=e,c.mount=r,c.unmount=u,c.timeouts=z(t.timeouts),t.update&&(c.update=M(t,\"update\"),o.update=function(t){return c.customProps=t,k(function(t){return Promise.resolve().then((function(){if(t.status!==g)throw Error(f(32,!1,A(t)));return t.status=E,q(t,\"update\").then((function(){return t.status=g,t})).catch((function(n){throw l(n,t,T)}))}))}(c))})}))).then((function(){return L(c,!0)})),y=w.then((function(){return B(c,!0)})),O=new Promise((function(t,n){p=t,d=n}));return o={mount:function(){return k(Promise.resolve().then((function(){if(c.status!==v)throw Error(f(13,!1,name,c.status));return r.parcels[i]=c,B(c)})))},unmount:function(){return k(c.unmountThisParcel())},getStatus:function(){return c.status},loadPromise:k(s),bootstrapPromise:k(w),mountPromise:k(y),unmountPromise:k(O)}}function k(t){return t.then((function(){return null}))}function K(t){var r=A(t),o=\"function\"==typeof t.customProps?t.customProps(r,window.location):t.customProps;(\"object\"!==e(o)||null===o||Array.isArray(o))&&(o={},console.warn(f(40,!1),r,o));var i=_({},o,{name:r,mountParcel:$.bind(t),singleSpa:n});return N(t)&&(i.unmountSelf=t.unmountThisParcel),i}var F={bootstrap:{millis:4e3,dieOnTimeout:!1,warningMillis:1e3},mount:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3},unmount:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3},unload:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3},update:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3}};function H(t,n,e){if(\"number\"!=typeof t||t<=0)throw Error(f(16,!1));F.bootstrap={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function J(t,n,e){if(\"number\"!=typeof t||t<=0)throw Error(f(17,!1));F.mount={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function Q(t,n,e){if(\"number\"!=typeof t||t<=0)throw Error(f(18,!1));F.unmount={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function V(t,n,e){if(\"number\"!=typeof t||t<=0)throw Error(f(19,!1));F.unload={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function q(t,n){var e=t.timeouts[n],r=e.warningMillis,o=S(t);return new Promise((function(i,u){var a=!1,c=!1;t[n](K(t)).then((function(t){a=!0,i(t)})).catch((function(t){a=!0,u(t)})),setTimeout((function(){return l(1)}),r),setTimeout((function(){return l(!0)}),e.millis);var s=f(31,!1,n,o,A(t),e.millis);function l(t){if(!a)if(!0===t)c=!0,e.dieOnTimeout?u(Error(s)):console.error(s);else if(!c){var n=t,o=n*r;console.warn(s),o+r<e.millis&&setTimeout((function(){return l(n+1)}),r)}}}))}function z(t){var n={};for(var e in F)n[e]=_({},F[e],t&&t[e]||{});return n}function X(t){return Promise.resolve().then((function(){return t.loadPromise?t.loadPromise:t.status!==p&&t.status!==O?t:(t.status=h,t.loadPromise=Promise.resolve().then((function(){var o=t.loadApp(K(t));if(!j(o))throw r=!0,Error(f(33,!1,A(t)));return o.then((function(r){var o;t.loadErrorTime=null,\"object\"!==e(n=r)&&(o=34),Object.prototype.hasOwnProperty.call(n,\"bootstrap\")&&!D(n.bootstrap)&&(o=35),D(n.mount)||(o=36),D(n.unmount)||(o=37);var i=S(n);if(o){var u;try{u=JSON.stringify(n)}catch(t){}return console.error(f(o,!1,i,A(t),u),n),a(void 0,t,T),t}return n.devtools&&n.devtools.overlays&&(t.devtools.overlays=_({},t.devtools.overlays,n.devtools.overlays)),t.status=m,t.bootstrap=M(n,\"bootstrap\"),t.mount=M(n,\"mount\"),t.unmount=M(n,\"unmount\"),t.unload=M(n,\"unload\"),t.timeouts=z(n.timeouts),delete t.loadPromise,t}))})).catch((function(n){var e;return delete t.loadPromise,r?e=T:(e=O,t.loadErrorTime=(new Date).getTime()),a(n,t,e),t})));var n,r}))}var Y,Z=\"undefined\"!=typeof window,tt={hashchange:[],popstate:[]},nt=[\"hashchange\",\"popstate\"];function et(t){var n;if(\"string\"==typeof t)n=t;else if(this&&this.href)n=this.href;else{if(!(t&&t.currentTarget&&t.currentTarget.href&&t.preventDefault))throw Error(f(14,!1));n=t.currentTarget.href,t.preventDefault()}var e=st(window.location.href),r=st(n);0===n.indexOf(\"#\")?window.location.hash=r.hash:e.host!==r.host&&r.host?window.location.href=n:r.pathname===e.pathname&&r.search===e.search?window.location.hash=r.hash:window.history.pushState(null,null,n)}function rt(t){var n=this;if(t){var e=t[0].type;nt.indexOf(e)>=0&&tt[e].forEach((function(e){try{e.apply(n,t)}catch(t){setTimeout((function(){throw t}))}}))}}function ot(){Rt([],arguments)}function it(t,n){return function(){var e=window.location.href,r=t.apply(this,arguments),o=window.location.href;return Y&&e===o||(Gt()?window.dispatchEvent(ut(window.history.state,n)):Rt([])),r}}function ut(t,n){var e;try{e=new PopStateEvent(\"popstate\",{state:t})}catch(n){(e=document.createEvent(\"PopStateEvent\")).initPopStateEvent(\"popstate\",!1,!1,t)}return e.singleSpa=!0,e.singleSpaTrigger=n,e}if(Z){window.addEventListener(\"hashchange\",ot),window.addEventListener(\"popstate\",ot);var at=window.addEventListener,ct=window.removeEventListener;window.addEventListener=function(t,n){if(!(\"function\"==typeof n&&nt.indexOf(t)>=0)||U(tt[t],(function(t){return t===n})))return at.apply(this,arguments);tt[t].push(n)},window.removeEventListener=function(t,n){if(!(\"function\"==typeof n&&nt.indexOf(t)>=0))return ct.apply(this,arguments);tt[t]=tt[t].filter((function(t){return t!==n}))},window.history.pushState=it(window.history.pushState,\"pushState\"),window.history.replaceState=it(window.history.replaceState,\"replaceState\"),window.singleSpaNavigate?console.warn(f(41,!1)):window.singleSpaNavigate=et}function st(t){var n=document.createElement(\"a\");return n.href=t,n}var ft=!1;function lt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.jQuery;if(t||window.$&&window.$.fn&&window.$.fn.jquery&&(t=window.$),t&&!ft){var n=t.fn.on,e=t.fn.off;t.fn.on=function(t,e){return pt.call(this,n,window.addEventListener,t,e,arguments)},t.fn.off=function(t,n){return pt.call(this,e,window.removeEventListener,t,n,arguments)},ft=!0}}function pt(t,n,e,r,o){return\"string\"!=typeof e?t.apply(this,o):(e.split(/\\s+/).forEach((function(t){nt.indexOf(t)>=0&&(n(t,r),e=e.replace(t,\"\"))})),\"\"===e.trim()?this:t.apply(this,o))}var ht={};function mt(t){return Promise.resolve().then((function(){var n=ht[A(t)];return n?t.status===p?(dt(t,n),t):\"UNLOADING\"===t.status?n.promise.then((function(){return t})):t.status!==v?t:(t.status=\"UNLOADING\",q(t,\"unload\").then((function(){return dt(t,n),t})).catch((function(e){return function(t,n,e){delete ht[A(t)],delete t.bootstrap,delete t.mount,delete t.unmount,delete t.unload,a(e,t,T),n.reject(e)}(t,n,e),t}))):t}))}function dt(t,n){delete ht[A(t)],delete t.bootstrap,delete t.mount,delete t.unmount,delete t.unload,t.status=p,n.resolve()}function vt(t,n,e,r){ht[A(t)]={app:t,resolve:e,reject:r},Object.defineProperty(ht[A(t)],\"promise\",{get:n})}function wt(t){return ht[t]}var gt=[];function Et(){var t=[],n=[],e=[],r=[],o=(new Date).getTime();return gt.forEach((function(i){var u=i.status!==T&&b(i);switch(i.status){case O:u&&o-i.loadErrorTime>=200&&e.push(i);break;case p:case h:u&&e.push(i);break;case m:case v:!u&&wt(A(i))?t.push(i):u&&r.push(i);break;case g:u||n.push(i)}})),{appsToUnload:t,appsToUnmount:n,appsToLoad:e,appsToMount:r}}function yt(){return gt.filter(P).map(A)}function Ot(){return gt.map(A)}function Tt(t){var n=U(gt,(function(n){return A(n)===t}));return n?n.status:null}function Pt(t,n,r,o){var i=function(t,n,r,o){var i,u={name:null,loadApp:null,activeWhen:null,customProps:null};return\"object\"===e(t)?(function(t){if(Array.isArray(t)||null===t)throw Error(f(39,!1));var n=[\"name\",\"app\",\"activeWhen\",\"customProps\"],r=Object.keys(t).reduce((function(t,e){return n.indexOf(e)>=0?t:t.concat(e)}),[]);if(0!==r.length)throw Error(f(38,!1,n.join(\", \"),r.join(\", \")));if(\"string\"!=typeof t.name||0===t.name.length)throw Error(f(20,!1));if(\"object\"!==e(t.app)&&\"function\"!=typeof t.app)throw Error(f(20,!1));var o=function(t){return\"string\"==typeof t||\"function\"==typeof t};if(!(o(t.activeWhen)||Array.isArray(t.activeWhen)&&t.activeWhen.every(o)))throw Error(f(24,!1));if(!_t(t.customProps))throw Error(f(22,!1))}(t),u.name=t.name,u.loadApp=t.app,u.activeWhen=t.activeWhen,u.customProps=t.customProps):(function(t,n,e,r){if(\"string\"!=typeof t||0===t.length)throw Error(f(20,!1));if(!n)throw Error(f(23,!1));if(\"function\"!=typeof e)throw Error(f(24,!1));if(!_t(r))throw Error(f(22,!1))}(t,n,r,o),u.name=t,u.loadApp=n,u.activeWhen=r,u.customProps=o),u.loadApp=\"function\"!=typeof(i=u.loadApp)?function(){return Promise.resolve(i)}:i,u.customProps=function(t){return t||{}}(u.customProps),u.activeWhen=function(t){var n=Array.isArray(t)?t:[t];return n=n.map((function(t){return\"function\"==typeof t?t:Ut(t)})),function(t){return n.some((function(n){return n(t)}))}}(u.activeWhen),u}(t,n,r,o);if(-1!==Ot().indexOf(i.name))throw Error(f(21,!1,i.name));gt.push(_({loadErrorTime:null,status:p,parcels:{},devtools:{overlays:{options:{},selectors:[]}}},i)),Z&&(lt(),Rt())}function bt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.location;return gt.filter((function(n){return n.activeWhen(t)})).map(A)}function At(t){if(0===gt.filter((function(n){return A(n)===t})).length)throw Error(f(25,!1,t));return Nt(t).then((function(){var n=gt.map(A).indexOf(t);gt.splice(n,1)}))}function Nt(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{waitForUnmount:!1};if(\"string\"!=typeof t)throw Error(f(26,!1));var e=U(gt,(function(n){return A(n)===t}));if(!e)throw Error(f(27,!1,t));var r,o=wt(A(e));if(n&&n.waitForUnmount){if(o)return o.promise;var i=new Promise((function(t,n){vt(e,(function(){return i}),t,n)}));return i}return o?(r=o.promise,St(e,o.resolve,o.reject)):r=new Promise((function(t,n){vt(e,(function(){return r}),t,n),St(e,t,n)})),r}function St(t,n,e){R(t).then(mt).then((function(){n(),setTimeout((function(){Rt()}))})).catch(e)}function _t(t){return!t||\"function\"==typeof t||\"object\"===e(t)&&null!==t&&!Array.isArray(t)}function Ut(t,n){var e=function(t,n){var e=0,r=!1,o=\"^\";\"/\"!==t[0]&&(t=\"/\"+t);for(var i=0;i<t.length;i++){var u=t[i];(!r&&\":\"===u||r&&\"/\"===u)&&a(i)}return a(t.length),new RegExp(o,\"i\");function a(i){var u=t.slice(e,i).replace(/[|\\\\{}()[\\]^$+*?.]/g,\"\\\\$&\");if(o+=r?\"[^/]+/?\":u,i===t.length)if(r)n&&(o+=\"$\");else{var a=n?\"\":\".*\";o=\"/\"===o.charAt(o.length-1)?\"\".concat(o).concat(a,\"$\"):\"\".concat(o,\"(/\").concat(a,\")?(#.*)?$\")}r=!r,e=i}}(t,n);return function(t){var n=t.href.replace(t.origin,\"\").replace(t.search,\"\").split(\"?\")[0];return e.test(n)}}var Dt=!1,Mt=[],jt=Z&&window.location.href;function Lt(){return Rt()}function Rt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0;if(Dt)return new Promise((function(t,e){Mt.push({resolve:t,reject:e,eventArguments:n})}));var e,o=Et(),u=o.appsToUnload,a=o.appsToUnmount,c=o.appsToLoad,s=o.appsToMount,f=!1,l=jt,h=jt=window.location.href;return Gt()?(Dt=!0,e=u.concat(c,a,s),w()):(e=c,d());function m(){f=!0}function d(){return Promise.resolve().then((function(){var t=c.map(X);return Promise.all(t).then(y).then((function(){return[]})).catch((function(t){throw y(),t}))}))}function w(){return Promise.resolve().then((function(){if(window.dispatchEvent(new i(0===e.length?\"single-spa:before-no-app-change\":\"single-spa:before-app-change\",O(!0))),window.dispatchEvent(new i(\"single-spa:before-routing-event\",O(!0,{cancelNavigation:m}))),f)return window.dispatchEvent(new i(\"single-spa:before-mount-routing-event\",O(!0))),E(),void et(l);var n=u.map(mt),r=a.map(R).map((function(t){return t.then(mt)})).concat(n),o=Promise.all(r);o.then((function(){window.dispatchEvent(new i(\"single-spa:before-mount-routing-event\",O(!0)))}));var p=c.map((function(t){return X(t).then((function(t){return It(t,o)}))})),h=s.filter((function(t){return c.indexOf(t)<0})).map((function(t){return It(t,o)}));return o.catch((function(t){throw y(),t})).then((function(){return y(),Promise.all(p.concat(h)).catch((function(n){throw t.forEach((function(t){return t.reject(n)})),n})).then(E)}))}))}function E(){var n=yt();t.forEach((function(t){return t.resolve(n)}));try{var r=0===e.length?\"single-spa:no-app-change\":\"single-spa:app-change\";window.dispatchEvent(new i(r,O())),window.dispatchEvent(new i(\"single-spa:routing-event\",O()))}catch(t){setTimeout((function(){throw t}))}if(Dt=!1,Mt.length>0){var o=Mt;Mt=[],Rt(o)}return n}function y(){t.forEach((function(t){rt(t.eventArguments)})),rt(n)}function O(){var t,o=arguments.length>0&&void 0!==arguments[0]&&arguments[0],i=arguments.length>1?arguments[1]:void 0,m={},d=(r(t={},g,[]),r(t,v,[]),r(t,p,[]),r(t,T,[]),t);o?(c.concat(s).forEach((function(t,n){E(t,g)})),u.forEach((function(t){E(t,p)})),a.forEach((function(t){E(t,v)}))):e.forEach((function(t){E(t)}));var w={detail:{newAppStatuses:m,appsByNewStatus:d,totalAppChanges:e.length,originalEvent:null==n?void 0:n[0],oldUrl:l,newUrl:h,navigationIsCanceled:f}};return i&&_(w.detail,i),w;function E(t,n){var e=A(t);n=n||Tt(e),m[e]=n,(d[n]=d[n]||[]).push(e)}}}function It(t,n){return b(t)?L(t).then((function(t){return n.then((function(){return b(t)?B(t):t}))})):n.then((function(){return t}))}var xt=!1;function Bt(t){var n;xt=!0,t&&t.urlRerouteOnly&&(n=t.urlRerouteOnly,Y=n),Z&&Rt()}function Gt(){return xt}Z&&setTimeout((function(){xt||console.warn(f(1,!1))}),5e3);var Ct={getRawAppData:function(){return[].concat(gt)},reroute:Rt,NOT_LOADED:p,toLoadPromise:X,toBootstrapPromise:L,unregisterApplication:At};Z&&window.__SINGLE_SPA_DEVTOOLS__&&(window.__SINGLE_SPA_DEVTOOLS__.exposedMethods=Ct)}}}));\n//# sourceMappingURL=single-spa.min.js.map\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "[2a04:4e42:4b::485]",
        "startedDateTime": "2023-04-10T17:57:16.766Z",
        "time": 4.1430000001128064,
        "timings": {
          "blocked": 3.005999999585329,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.39799999955110255,
          "receive": 0.7390000009763753,
          "_blocked_queueing": 2.9109999995853286
        }
      },
      {
        "_fromCache": "memory",
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:9000/",
          "lineNumber": 68
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "https://cdn.jsdelivr.net/npm/import-map-overrides@2.2.0/dist/import-map-overrides.js",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
            },
            {
              "name": "Referer",
              "value": "http://localhost:9000/"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 10 Apr 2023 14:52:10 GMT"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "age",
              "value": "2253145"
            },
            {
              "name": "x-jsd-version",
              "value": "2.2.0"
            },
            {
              "name": "x-cache",
              "value": "HIT, HIT"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "content-length",
              "value": "13221"
            },
            {
              "name": "x-served-by",
              "value": "cache-fra-eddf8230113-FRA, cache-lon420123-LON"
            },
            {
              "name": "x-jsd-version-type",
              "value": "version"
            },
            {
              "name": "etag",
              "value": "W/\"af61-/QXMy/3aRblSUh1Rz5IDzUNVYkI\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000, s-maxage=31536000, immutable"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            }
          ],
          "cookies": [],
          "content": {
            "size": 44897,
            "mimeType": "application/javascript",
            "text": "/* import-map-overrides@2.2.0 */\n!function(){\"use strict\";function e(t){return(e=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&\"function\"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?\"symbol\":typeof e})(t)}function t(e,t){if(!(e instanceof t))throw new TypeError(\"Cannot call a class as a function\")}function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function r(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){if(\"function\"!=typeof t&&null!==t)throw new TypeError(\"Super expression must either be null or a function\");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&a(e,t)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function a(e,t){return(a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(){if(\"undefined\"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if(\"function\"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function s(e,t,n){return(s=u()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&a(o,n.prototype),o}).apply(null,arguments)}function d(e){var t=\"function\"==typeof Map?new Map:void 0;return(d=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf(\"[native code]\")))return e;var n;if(\"function\"!=typeof e)throw new TypeError(\"Super expression must either be null or a function\");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return s(e,arguments,l(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),a(r,e)})(e)}function p(e){if(void 0===e)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return e}function c(e,t){return!t||\"object\"!=typeof t&&\"function\"!=typeof t?p(e):t}function m(e){var t=u();return function(){var n,r=l(e);if(t){var o=l(this).constructor;n=Reflect.construct(r,arguments,o)}else n=r.apply(this,arguments);return c(this,n)}}function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(\"undefined\"!=typeof Symbol&&Symbol.iterator in Object(e)){var n=[],r=!0,o=!1,i=void 0;try{for(var l,a=e[Symbol.iterator]();!(r=(l=a.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}}(e,t)||v(e,t)||function(){throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}()}function v(e,t){if(e){if(\"string\"==typeof e)return h(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return\"Object\"===n&&e.constructor&&(n=e.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(e):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?h(e,t):void 0}}function h(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function g(t,n){if(Array.isArray(t)){for(var r=0;r<t.length;r++)if(t[r]===n)return!0;return!1}if(\"string\"==typeof t)return t.indexOf(n)>=0;throw Error(\"Can't call includes on \".concat(e(t)))}function _(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:window.location.href;e=e.replace(/[\\[\\]]/g,\"\\\\$&\");var n=new RegExp(\"[?&]\"+e+\"(=([^&#]*)|&|#|$)\"),r=n.exec(t);return r?r[2]?decodeURIComponent(r[2].replace(/\\+/g,\" \")):\"\":null}var y,b=\"import-map-overrides-domains\",w=/^\\d+$/g,x=document.querySelector('meta[name=\"importmap-type\"]'),M=document.querySelector('meta[name=\"'.concat(b,'\"]')),k={},O=x?x.getAttribute(\"content\"):\"importmap\";if(M){var E=M.getAttribute(\"content\");E||console.warn(\"Invalid \".concat(b,\" meta element - content required.\"));var N=function(e){return new RegExp(function(e){if(\"string\"!=typeof e)throw new TypeError(\"Expected a string\");return e.replace(/[|\\\\{}()[\\]^$+*?.]/g,\"\\\\$&\").replace(/-/g,\"\\\\x2d\")}(e).replace(\"\\\\*\",\".+\")).test(window.location.hostname)};0===E.indexOf(\"allowlist:\")?y=!E.slice(\"allowlist:\".length).split(\",\").some(N):0===E.indexOf(\"denylist:\")?y=E.slice(\"denylist:\".length).split(\",\").some(N):console.log(\"Invalid \".concat(b,\" meta content attribute - must start with \").concat(\"allowlist:\",\" or \").concat(\"denylist:\"))}else y=!1;(function(){try{return localStorage.getItem(\"test\"),!0}catch(e){return!1}})()||(console.warn(\"Disabling import-map-overrides, since local storage is not readable\"),y=!0),y||function(){var e,t=!!x&&x.hasAttribute(\"server-cookie\"),n=!!x&&x.hasAttribute(\"server-only\");window.importMapOverrides={addOverride:function(e,n){w.test(n)&&(n=r.getUrlFromPort(e,n));var o=\"import-map-override:\"+e;return localStorage.setItem(o,n),t&&(document.cookie=\"\".concat(o,\"=\").concat(n)),i(),r.getOverrideMap()},getOverrideMap:function(){for(var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t={imports:{},scopes:{}},n=r.getDisabledOverrides(),o=function(r,o){!e&&n.indexOf(r)>=0||(t.imports[r]=o)},i=0;i<localStorage.length;i++){var l=localStorage.key(i);0===l.indexOf(\"import-map-override:\")&&o(l.slice(\"import-map-override:\".length),localStorage.getItem(l))}var a=_(\"imo\",window.parent?window.parent.location.href:window.location.href);if(a){var u;try{u=JSON.parse(a)}catch(e){throw Error(\"Invalid importMap query param - text content must be json\")}Object.keys(u.imports).forEach((function(e){o(e,u.imports[e])}))}return t},removeOverride:function(e){var n=\"import-map-override:\"+e,o=null!==localStorage.getItem(n);return localStorage.removeItem(n),t&&(document.cookie=\"\".concat(n,\"=; expires=Thu, 01 Jan 1970 00:00:01 GMT;\")),r.enableOverride(e),i(),o},resetOverrides:function(){return Object.keys(r.getOverrideMap(!0).imports).forEach((function(e){r.removeOverride(e)})),localStorage.removeItem(\"import-map-overrides-disabled\"),localStorage.removeItem(\"import-map-overrides-external-maps\"),i(),r.getOverrideMap()},hasOverrides:function(){return Object.keys(r.getOverrideMap().imports).length>0},getUrlFromPort:function(e,t){var n=e.replace(/@/g,\"\").replace(/\\//g,\"-\");return\"//localhost:\".concat(t,\"/\").concat(n,\".js\")},enableUI:function(){var e=document.querySelector(\"import-map-overrides-full\");e||((e=document.createElement(\"import-map-overrides-full\")).setAttribute(\"show-when-local-storage\",\"true\"),document.body.appendChild(e));var t=e.getAttribute(\"show-when-local-storage\");t&&(localStorage.setItem(t,!0),e.renderWithPreact())},mergeImportMap:function(e,t){var n={imports:{},scopes:{}};for(var r in e.imports)n.imports[r]=e.imports[r];for(var o in t.imports)n.imports[o]=t.imports[o];for(var i in e.scopes)n.scopes[i]=e.scopes[i];for(var l in t.scopes)n.scopes[l]=t.scopes[l];return n},getDefaultMap:function(){return e||(e=Array.prototype.reduce.call(document.querySelectorAll('script[type=\"'.concat(O,'\"], script[type=\"overridable-importmap\"]')),(function(e,t){return t.hasAttribute(\"data-is-importmap-override\")?e:(n=t.src?m(t.src):Promise.resolve(JSON.parse(t.textContent)),Promise.all([e,n]).then((function(e){var t=f(e,2),n=t[0],o=t[1];return r.mergeImportMap(n,o)})));var n}),Promise.resolve({imports:{},scopes:{}})))},getCurrentPageMap:function(){return Promise.all([r.getDefaultMap(),r.getExternalOverrideMap(r.getCurrentPageExternalOverrides())]).then((function(e){var t=f(e,2),n=t[0],o=t[1];return r.mergeImportMap(r.mergeImportMap(n,o),a)}))},getCurrentPageExternalOverrides:function(){var e=[];return document.querySelectorAll(\"[\".concat(\"data-is-importmap-override\",']:not([id=\"import-map-overrides\"])')).forEach((function(t){e.push(t.src)})),e},getNextPageMap:function(){return Promise.all([r.getDefaultMap(),r.getExternalOverrideMap()]).then((function(e){var t=f(e,2),n=t[0],o=t[1];return r.mergeImportMap(r.mergeImportMap(n,o),r.getOverrideMap())}))},disableOverride:function(e){var t=r.getDisabledOverrides();return!g(t,e)&&(localStorage.setItem(\"import-map-overrides-disabled\",JSON.stringify(t.concat(e))),i(),!0)},enableOverride:function(e){var t=r.getDisabledOverrides(),n=t.indexOf(e);return n>=0&&(t.splice(n,1),localStorage.setItem(\"import-map-overrides-disabled\",JSON.stringify(t)),i(),!0)},getDisabledOverrides:function(){var e=localStorage.getItem(\"import-map-overrides-disabled\");return e?JSON.parse(e):[]},isDisabled:function(e){return g(r.getDisabledOverrides(),e)},getExternalOverrides:function(){var e=localStorage.getItem(\"import-map-overrides-external-maps\");return e?JSON.parse(e).sort():[]},addExternalOverride:function(e){e=new URL(e,document.baseURI).href;var t=r.getExternalOverrides();return!g(t,e)&&(localStorage.setItem(\"import-map-overrides-external-maps\",JSON.stringify(t.concat(e))),i(),!0)},removeExternalOverride:function(e){var t=r.getExternalOverrides();return!!g(t,e)&&(localStorage.setItem(\"import-map-overrides-external-maps\",JSON.stringify(t.filter((function(t){return t!==e})))),i(),!0)},getExternalOverrideMap:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:r.getExternalOverrides();return e.reduce((function(e,t){var n=k[t]||(k[t]=m(t));return Promise.all([e,n]).then((function(e){var t=f(e,2),n=t[0],o=t[1];return r.mergeImportMap(n,o)}))}),Promise.resolve({imports:{},scopes:{}}))},isExternalMapValid:function(e){return(k[e]||(k[e]=m(e))).then((function(){return g(r.invalidExternalMaps,e)}))},invalidExternalMaps:[]};var r=window.importMapOverrides,o=!0;try{CustomEvent?new CustomEvent(\"a\"):o=!1}catch(e){o=!1}function i(){setTimeout((function(){o&&window.dispatchEvent(new CustomEvent(\"import-map-overrides:change\"))}))}var l,a=r.getOverrideMap(),u=r.getExternalOverrides();if(!n){var s=document.querySelector('script[type=\"overridable-importmap\"]');if(!(l=s)){var d=document.querySelectorAll('script[type=\"'.concat(O,'\"]'));l=d?d[d.length-1]:null}if(s){if(s.src)throw Error('import-map-overrides: external import maps with type=\"overridable-importmap\" are not supported');var p;try{p=JSON.parse(s.textContent)}catch(e){throw Error('Invalid <script type=\"overridable-importmap\"> - text content must be json')}l=c(r.mergeImportMap(p,a),\"import-map-overrides\",l),v()}else v(),Object.keys(a.imports).length>0&&(l=c(a,\"import-map-overrides\",l))}function c(e,t,n){var r=document.createElement(\"script\");return r.type=O,r.id=t,r.setAttribute(\"data-is-importmap-override\",\"\"),\"string\"==typeof e?r.src=e:r.textContent=JSON.stringify(e,null,2),n?n.insertAdjacentElement(\"afterend\",r):document.head.appendChild(r),r}function m(e){return fetch(e).then((function(e){return e.ok?e.json().catch((function(t){return console.warn(Error(\"External override import map contained invalid json, at url \".concat(e.url,\". \").concat(t))),r.invalidExternalMaps.push(e.url),{imports:{},scopes:{}}})):(console.warn(Error(\"Unable to download external override import map from url \".concat(e.url,\". Server responded with status \").concat(e.status))),r.invalidExternalMaps.push(e.url),{imports:{},scopes:{}})}),(function(){return console.warn(Error(\"Unable to download external import map at url '\".concat(e,\"'\"))),r.invalidExternalMaps.push(new URL(e,document.baseURI).href),{imports:{},scopes:{}}}))}function v(){u.length>0&&u.forEach((function(e,t){l=c(e,\"import-map-overrides-external-\".concat(t))}))}}(),function(e,t){void 0===t&&(t={});var n=t.insertAt;if(\"undefined\"!=typeof document){var r=document.head||document.getElementsByTagName(\"head\")[0],o=document.createElement(\"style\");o.type=\"text/css\",\"top\"===n&&r.firstChild?r.insertBefore(o,r.firstChild):r.appendChild(o),o.styleSheet?o.styleSheet.cssText=e:o.appendChild(document.createTextNode(e))}}('.imo-unstyled {\\n  border: none;\\n  padding: 0;\\n  width: auto;\\n  overflow: visible;\\n  background: transparent;\\n  color: inherit;\\n  font: inherit;\\n  line-height: normal;\\n  cursor: pointer;\\n  -webkit-font-smoothing: inherit;\\n  -moz-osx-font-smoothing: inherit;\\n  -webkit-appearance: none;\\n}\\n\\n.imo-unstyled::-moz-focus-inner {\\n  border: 0;\\n  padding: 0;\\n}\\n\\n.imo-trigger {\\n  position: fixed;\\n  bottom: 0;\\n  right: 0;\\n  margin: 10px;\\n  border-radius: 5px;\\n  background-color: navajowhite;\\n  height: 50px;\\n  width: 50px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  font-size: 18px;\\n  font-family: sans-serif;\\n  z-index: 10500;\\n}\\n\\n.imo-popup {\\n  box-sizing: border-box;\\n  position: fixed;\\n  bottom: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 50%;\\n  z-index: 10000;\\n  background-color: black;\\n  color: white;\\n  font-family: sans-serif;\\n  padding: 24px;\\n  overflow-y: auto;\\n}\\n\\n.imo-popup a:visited,\\nimo-popup a {\\n  color: white;\\n}\\n\\n.imo-popup .imo-module-dialog {\\n  left: calc(50% - 200px);\\n}\\n\\n.imo-header {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: flex-start;\\n}\\n\\n.imo-list {\\n  margin-left: 16px;\\n}\\n\\n.imo-list > *:not(:last-child) {\\n  margin-bottom: 8px;\\n}\\n\\n.imo-list-container *,\\n.imo-modal-container * {\\n  font-family: sans-serif;\\n  box-sizing: border-box;\\n}\\n\\n.imo-module-dialog {\\n  position: fixed;\\n  z-index: 30000000;\\n  top: 30%;\\n  max-width: 600px;\\n  margin: 0 auto;\\n  border: 4px solid navajowhite;\\n  background-color: white;\\n  padding: 1em;\\n  left: 50%;\\n  right: auto;\\n  transform: translateX(-50%);\\n}\\n\\n.imo-module-dialog input {\\n  width: 100%;\\n  font-size: 16px;\\n  box-sizing: border-box;\\n  padding-right: 20px;\\n}\\n\\n.imo-module-dialog table {\\n  margin-bottom: 16px;\\n}\\n\\n.imo-module-dialog table td:first-child {\\n  text-align: right;\\n  padding-right: 16px;\\n  word-break: keep-all;\\n}\\n\\n.imo-module-dialog table td {\\n  word-break: break-all;\\n}\\n\\n.imo-module-dialog.imo-overridden {\\n  border: 4px solid salmon;\\n}\\n\\n.imo-table-header-actions {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.imo-overrides-table {\\n  border-collapse: collapse;\\n  margin-top: 32px;\\n}\\n\\n.imo-overrides-table tr td:first-child {\\n  display: flex;\\n  align-items: center;\\n  padding-right: 32px;\\n  position: relative;\\n}\\n\\n.imo-needs-refresh {\\n  position: absolute;\\n  right: 8px;\\n  font-size: 32px;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n}\\n\\n.imo-needs-refresh::before {\\n  content: \"\\\\27F2\";\\n}\\n\\n.imo-status {\\n  height: 16px;\\n  width: 16px;\\n  border-radius: 8px;\\n  border: 1px solid white;\\n  margin-right: 8px;\\n}\\n\\n.imo-disabled-override {\\n  background-color: lightblue;\\n}\\n\\n.imo-next-override {\\n  background-color: darkred;\\n}\\n\\n.imo-current-override {\\n  background-color: salmon;\\n}\\n\\n.imo-default-module {\\n  background-color: lightgoldenrodyellow;\\n}\\n\\n.imo-external-override {\\n  background-color: orange;\\n}\\n\\n.imo-next-default {\\n  background-color: darkgoldenrod;\\n}\\n\\n.imo-dev-lib-override {\\n  background-color: lightpink;\\n}\\n\\n.imo-overrides-table tbody tr:hover {\\n  cursor: pointer;\\n  background-color: #404040;\\n}\\n\\n.imo-overrides-table td,\\n.imo-overrides-table th {\\n  line-height: 18px;\\n  padding: 16px;\\n  border: 1px solid white;\\n}\\n\\n.imo-add-new {\\n  margin-left: 16px;\\n}\\n\\n.imo-clear-input {\\n  position: absolute;\\n  top: 0;\\n  right: 4px;\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  height: 100%;\\n}\\n\\n.imo-modal-container {\\n  font-family: sans-serif;\\n}\\n\\n.imo-modal {\\n  background-color: rgba(61, 70, 77, 0.6);\\n  position: fixed;\\n  width: 100vw;\\n  height: 100vh;\\n  top: 0;\\n  left: 0;\\n  z-index: 20000000;\\n}\\n\\n.imo-list-search,\\n.imo-list-container button,\\n.imo-modal-container button {\\n  font-size: 14px;\\n  height: 27px;\\n  line-height: 27px;\\n}\\n\\n.imo-list-search {\\n  line-height: 22px;\\n  border: none;\\n  padding: 5px;\\n}\\n');var S,C,U,I,P,D={},A=[],j=/acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;function L(e,t){for(var n in t)e[n]=t[n];return e}function R(e){var t=e.parentNode;t&&t.removeChild(e)}function T(e,t,n){var r,o,i,l=arguments,a={};for(i in t)\"key\"==i?r=t[i]:\"ref\"==i?o=t[i]:a[i]=t[i];if(arguments.length>3)for(n=[n],i=3;i<arguments.length;i++)n.push(l[i]);if(null!=n&&(a.children=n),\"function\"==typeof e&&null!=e.defaultProps)for(i in e.defaultProps)void 0===a[i]&&(a[i]=e.defaultProps[i]);return F(e,a,r,o,null)}function F(e,t,n,r,o){var i={type:e,props:t,key:n,ref:r,__k:null,__:null,__b:0,__e:null,__d:void 0,__c:null,__h:null,constructor:void 0,__v:null==o?++S.__v:o};return null!=S.vnode&&S.vnode(i),i}function W(e){return e.children}function z(e,t){this.props=e,this.context=t}function q(e,t){if(null==t)return e.__?q(e.__,e.__.__k.indexOf(e)+1):null;for(var n;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e)return n.__e;return\"function\"==typeof e.type?q(e):null}function J(e){var t,n;if(null!=(e=e.__)&&null!=e.__c){for(e.__e=e.__c.base=null,t=0;t<e.__k.length;t++)if(null!=(n=e.__k[t])&&null!=n.__e){e.__e=e.__c.base=n.__e;break}return J(e)}}function $(e){(!e.__d&&(e.__d=!0)&&C.push(e)&&!V.__r++||I!==S.debounceRendering)&&((I=S.debounceRendering)||U)(V)}function V(){for(var e;V.__r=C.length;)e=C.sort((function(e,t){return e.__v.__b-t.__v.__b})),C=[],e.some((function(e){var t,n,r,o,i,l,a;e.__d&&(l=(i=(t=e).__v).__e,(a=t.__P)&&(n=[],(r=L({},i)).__v=i.__v+1,o=Z(a,i,r,t.__n,void 0!==a.ownerSVGElement,null!=i.__h?[l]:null,n,null==l?q(i):l,i.__h),ee(n,i),o!=l&&J(i)))}))}function B(e,t,n,r,o,i,l,a,u,s){var d,p,c,m,f,v,h,g=r&&r.__k||A,_=g.length;for(u==D&&(u=null!=l?l[0]:_?q(r,0):null),n.__k=[],d=0;d<t.length;d++)if(null!=(m=n.__k[d]=null==(m=t[d])||\"boolean\"==typeof m?null:\"string\"==typeof m||\"number\"==typeof m?F(null,m,null,null,m):Array.isArray(m)?F(W,{children:m},null,null,null):null!=m.__e||null!=m.__c?F(m.type,m.props,m.key,null,m.__v):m)){if(m.__=n,m.__b=n.__b+1,null===(c=g[d])||c&&m.key==c.key&&m.type===c.type)g[d]=void 0;else for(p=0;p<_;p++){if((c=g[p])&&m.key==c.key&&m.type===c.type){g[p]=void 0;break}c=null}f=Z(e,m,c=c||D,o,i,l,a,u,s),(p=m.ref)&&c.ref!=p&&(h||(h=[]),c.ref&&h.push(c.ref,null,m),h.push(p,m.__c||f,m)),null!=f?(null==v&&(v=f),u=H(e,m,c,g,l,f,u),s||\"option\"!=n.type?\"function\"==typeof n.type&&(n.__d=u):e.value=\"\"):u&&c.__e==u&&u.parentNode!=e&&(u=q(c))}if(n.__e=v,null!=l&&\"function\"!=typeof n.type)for(d=l.length;d--;)null!=l[d]&&R(l[d]);for(d=_;d--;)null!=g[d]&&re(g[d],g[d]);if(h)for(d=0;d<h.length;d++)ne(h[d],h[++d],h[++d])}function H(e,t,n,r,o,i,l){var a,u,s;if(void 0!==t.__d)a=t.__d,t.__d=void 0;else if(o==n||i!=l||null==i.parentNode)e:if(null==l||l.parentNode!==e)e.appendChild(i),a=null;else{for(u=l,s=0;(u=u.nextSibling)&&s<r.length;s+=2)if(u==i)break e;e.insertBefore(i,l),a=l}return void 0!==a?a:i.nextSibling}function G(e,t,n){\"-\"===t[0]?e.setProperty(t,n):e[t]=null==n?\"\":\"number\"!=typeof n||j.test(t)?n:n+\"px\"}function X(e,t,n,r,o){var i,l,a;if(o&&\"className\"==t&&(t=\"class\"),\"style\"===t)if(\"string\"==typeof n)e.style.cssText=n;else{if(\"string\"==typeof r&&(e.style.cssText=r=\"\"),r)for(t in r)n&&t in n||G(e.style,t,\"\");if(n)for(t in n)r&&n[t]===r[t]||G(e.style,t,n[t])}else\"o\"===t[0]&&\"n\"===t[1]?(i=t!==(t=t.replace(/Capture$/,\"\")),(l=t.toLowerCase())in e&&(t=l),t=t.slice(2),e.l||(e.l={}),e.l[t+i]=n,a=i?Q:K,n?r||e.addEventListener(t,a,i):e.removeEventListener(t,a,i)):\"list\"!==t&&\"tagName\"!==t&&\"form\"!==t&&\"type\"!==t&&\"size\"!==t&&\"download\"!==t&&\"href\"!==t&&!o&&t in e?e[t]=null==n?\"\":n:\"function\"!=typeof n&&\"dangerouslySetInnerHTML\"!==t&&(t!==(t=t.replace(/xlink:?/,\"\"))?null==n||!1===n?e.removeAttributeNS(\"http://www.w3.org/1999/xlink\",t.toLowerCase()):e.setAttributeNS(\"http://www.w3.org/1999/xlink\",t.toLowerCase(),n):null==n||!1===n&&!/^ar/.test(t)?e.removeAttribute(t):e.setAttribute(t,n))}function K(e){this.l[e.type+!1](S.event?S.event(e):e)}function Q(e){this.l[e.type+!0](S.event?S.event(e):e)}function Y(e,t,n){var r,o;for(r=0;r<e.__k.length;r++)(o=e.__k[r])&&(o.__=e,o.__e&&(\"function\"==typeof o.type&&o.__k.length>1&&Y(o,t,n),t=H(n,o,o,e.__k,null,o.__e,t),\"function\"==typeof e.type&&(e.__d=t)))}function Z(e,t,n,r,o,i,l,a,u){var s,d,p,c,m,f,v,h,g,_,y,b=t.type;if(void 0!==t.constructor)return null;null!=n.__h&&(u=n.__h,a=t.__e=n.__e,t.__h=null,i=[a]),(s=S.__b)&&s(t);try{e:if(\"function\"==typeof b){if(h=t.props,g=(s=b.contextType)&&r[s.__c],_=s?g?g.props.value:s.__:r,n.__c?v=(d=t.__c=n.__c).__=d.__E:(\"prototype\"in b&&b.prototype.render?t.__c=d=new b(h,_):(t.__c=d=new z(h,_),d.constructor=b,d.render=oe),g&&g.sub(d),d.props=h,d.state||(d.state={}),d.context=_,d.__n=r,p=d.__d=!0,d.__h=[]),null==d.__s&&(d.__s=d.state),null!=b.getDerivedStateFromProps&&(d.__s==d.state&&(d.__s=L({},d.__s)),L(d.__s,b.getDerivedStateFromProps(h,d.__s))),c=d.props,m=d.state,p)null==b.getDerivedStateFromProps&&null!=d.componentWillMount&&d.componentWillMount(),null!=d.componentDidMount&&d.__h.push(d.componentDidMount);else{if(null==b.getDerivedStateFromProps&&h!==c&&null!=d.componentWillReceiveProps&&d.componentWillReceiveProps(h,_),!d.__e&&null!=d.shouldComponentUpdate&&!1===d.shouldComponentUpdate(h,d.__s,_)||t.__v===n.__v){d.props=h,d.state=d.__s,t.__v!==n.__v&&(d.__d=!1),d.__v=t,t.__e=n.__e,t.__k=n.__k,d.__h.length&&l.push(d),Y(t,a,e);break e}null!=d.componentWillUpdate&&d.componentWillUpdate(h,d.__s,_),null!=d.componentDidUpdate&&d.__h.push((function(){d.componentDidUpdate(c,m,f)}))}d.context=_,d.props=h,d.state=d.__s,(s=S.__r)&&s(t),d.__d=!1,d.__v=t,d.__P=e,s=d.render(d.props,d.state,d.context),d.state=d.__s,null!=d.getChildContext&&(r=L(L({},r),d.getChildContext())),p||null==d.getSnapshotBeforeUpdate||(f=d.getSnapshotBeforeUpdate(c,m)),y=null!=s&&s.type==W&&null==s.key?s.props.children:s,B(e,Array.isArray(y)?y:[y],t,n,r,o,i,l,a,u),d.base=t.__e,t.__h=null,d.__h.length&&l.push(d),v&&(d.__E=d.__=null),d.__e=!1}else null==i&&t.__v===n.__v?(t.__k=n.__k,t.__e=n.__e):t.__e=te(n.__e,t,n,r,o,i,l,u);(s=S.diffed)&&s(t)}catch(e){t.__v=null,(u||null!=i)&&(t.__e=a,t.__h=!!u,i[i.indexOf(a)]=null),S.__e(e,t,n)}return t.__e}function ee(e,t){S.__c&&S.__c(t,e),e.some((function(t){try{e=t.__h,t.__h=[],e.some((function(e){e.call(t)}))}catch(e){S.__e(e,t.__v)}}))}function te(e,t,n,r,o,i,l,a){var u,s,d,p,c,m=n.props,f=t.props;if(o=\"svg\"===t.type||o,null!=i)for(u=0;u<i.length;u++)if(null!=(s=i[u])&&((null===t.type?3===s.nodeType:s.localName===t.type)||e==s)){e=s,i[u]=null;break}if(null==e){if(null===t.type)return document.createTextNode(f);e=o?document.createElementNS(\"http://www.w3.org/2000/svg\",t.type):document.createElement(t.type,f.is&&{is:f.is}),i=null,a=!1}if(null===t.type)m===f||a&&e.data===f||(e.data=f);else{if(null!=i&&(i=A.slice.call(e.childNodes)),d=(m=n.props||D).dangerouslySetInnerHTML,p=f.dangerouslySetInnerHTML,!a){if(null!=i)for(m={},c=0;c<e.attributes.length;c++)m[e.attributes[c].name]=e.attributes[c].value;(p||d)&&(p&&(d&&p.__html==d.__html||p.__html===e.innerHTML)||(e.innerHTML=p&&p.__html||\"\"))}(function(e,t,n,r,o){var i;for(i in n)\"children\"===i||\"key\"===i||i in t||X(e,i,null,n[i],r);for(i in t)o&&\"function\"!=typeof t[i]||\"children\"===i||\"key\"===i||\"value\"===i||\"checked\"===i||n[i]===t[i]||X(e,i,t[i],n[i],r)})(e,f,m,o,a),p?t.__k=[]:(u=t.props.children,B(e,Array.isArray(u)?u:[u],t,n,r,\"foreignObject\"!==t.type&&o,i,l,D,a)),a||(\"value\"in f&&void 0!==(u=f.value)&&(u!==e.value||\"progress\"===t.type&&!u)&&X(e,\"value\",u,m.value,!1),\"checked\"in f&&void 0!==(u=f.checked)&&u!==e.checked&&X(e,\"checked\",u,m.checked,!1))}return e}function ne(e,t,n){try{\"function\"==typeof e?e(t):e.current=t}catch(e){S.__e(e,n)}}function re(e,t,n){var r,o,i;if(S.unmount&&S.unmount(e),(r=e.ref)&&(r.current&&r.current!==e.__e||ne(r,null,t)),n||\"function\"==typeof e.type||(n=null!=(o=e.__e)),e.__e=e.__d=void 0,null!=(r=e.__c)){if(r.componentWillUnmount)try{r.componentWillUnmount()}catch(e){S.__e(e,t)}r.base=r.__P=null}if(r=e.__k)for(i=0;i<r.length;i++)r[i]&&re(r[i],t,n);null!=o&&R(o)}function oe(e,t,n){return this.constructor(e,n)}function ie(e,t,n){var r,o,i;S.__&&S.__(e,t),o=(r=n===P)?null:n&&n.__k||t.__k,e=T(W,null,[e]),i=[],Z(t,(r?t:n||t).__k=e,o||D,D,void 0!==t.ownerSVGElement,n&&!r?[n]:o?null:t.childNodes.length?A.slice.call(t.childNodes):null,i,n||D,r),ee(i,e)}S={__e:function(e,t){for(var n,r,o,i=t.__h;t=t.__;)if((n=t.__c)&&!n.__)try{if((r=n.constructor)&&null!=r.getDerivedStateFromError&&(n.setState(r.getDerivedStateFromError(e)),o=n.__d),null!=n.componentDidCatch&&(n.componentDidCatch(e),o=n.__d),o)return t.__h=i,n.__E=n}catch(t){e=t}throw e},__v:0},z.prototype.setState=function(e,t){var n;n=null!=this.__s&&this.__s!==this.state?this.__s:this.__s=L({},this.state),\"function\"==typeof e&&(e=e(L({},n),this.props)),e&&L(n,e),null!=e&&this.__v&&(t&&this.__h.push(t),$(this))},z.prototype.forceUpdate=function(e){this.__v&&(this.__e=!0,e&&this.__h.push(e),$(this))},z.prototype.render=W,C=[],U=\"function\"==typeof Promise?Promise.prototype.then.bind(Promise.resolve()):setTimeout,V.__r=0,P=D;var le=function(e){i(l,e);var n=m(l);function l(){var e;t(this,l);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return o(p(e=n.call.apply(n,[this].concat(i))),\"getInitialOverrideUrl\",(function(){var t=new RegExp(\"//localhost:([0-9]+)/\").exec(e.props.module.overrideUrl);return t&&e.props.module.overrideUrl===window.importMapOverrides.getUrlFromPort(e.props.module.moduleName,t[1])?t[1]:e.props.module.overrideUrl?e.props.module.overrideUrl:\"\"})),o(p(e),\"state\",{overrideUrl:e.getInitialOverrideUrl(),moduleName:\"\"}),o(p(e),\"inputEl\",null),o(p(e),\"moduleNameEl\",null),o(p(e),\"handleInputRef\",(function(t){e.inputEl=t})),o(p(e),\"handleModuleNameRef\",(function(t){e.moduleNameEl=t})),o(p(e),\"dialogRef\",(function(t){e.dialogEl=t})),o(p(e),\"handleSubmit\",(function(t){t.preventDefault(),e.props.module.moduleName&&window.importMapOverrides.isDisabled(e.props.module.moduleName)&&window.importMapOverrides.enableOverride(e.props.module.moduleName),e.props.module.isNew?e.props.addNewModule(e.state.moduleName,e.state.overrideUrl):e.props.updateModuleUrl(e.state.overrideUrl)})),o(p(e),\"getDerivedUrl\",(function(){var t=e.props.module.isNew?e.state.moduleName:e.props.module.moduleName;return ae.test(e.state.overrideUrl)?window.importMapOverrides.getUrlFromPort(t,e.state.overrideUrl):e.state.overrideUrl})),o(p(e),\"keyDown\",(function(t){\"Escape\"===t.key&&(t.stopPropagation(),e.props.cancel())})),o(p(e),\"focusFirstInput\",(function(){(e.moduleNameEl||e.inputEl).select()})),o(p(e),\"clearModuleName\",(function(){e.setState({moduleName:\"\"},(function(){e.focusFirstInput()}))})),o(p(e),\"clearInput\",(function(){e.setState({overrideUrl:\"\"},(function(){e.focusFirstInput()}))})),e}return r(l,[{key:\"componentDidMount\",value:function(){this.focusFirstInput(),this.dialogEl.addEventListener(\"keydown\",this.keyDown)}},{key:\"componentDidUpdate\",value:function(e,t){var n=this;this.props.module!==e.module&&this.setState({overrideUrl:this.props.module.overrideUrl||\"\"},(function(){n.focusFirstInput()}))}},{key:\"componentWillUnmount\",value:function(){this.dialogEl.removeEventListener(\"keydown\",this.keyDown)}},{key:\"render\",value:function(e){var t=this,n=e.module;return T(\"div\",{className:\"imo-modal-container\"},T(\"div\",{className:\"imo-modal\"}),T(\"dialog\",{className:\"imo-module-dialog \".concat(this.state.overrideUrl.length>0?\"imo-overridden\":\"imo-default\"),open:!0,ref:this.dialogRef},T(\"form\",{method:\"dialog\",onSubmit:this.handleSubmit},T(\"h3\",{style:{marginTop:0}},n.moduleName),T(\"table\",null,T(\"tbody\",null,!n.isNew&&T(\"tr\",null,T(\"td\",null,\"Default URL:\"),T(\"td\",null,n.defaultUrl)),n.isNew&&T(\"tr\",null,T(\"td\",null,T(\"span\",{id:\"module-name-label\"},\"Module Name:\")),T(\"td\",{style:{position:\"relative\"}},T(\"input\",{type:\"text\",tabIndex:1,value:this.state.moduleName,\"aria-labelledby\":\"module-name-label\",onInput:function(e){return t.setState({moduleName:e.target.value})},ref:this.handleModuleNameRef,required:!0}),T(\"div\",{role:\"button\",tabIndex:3,className:\"imo-clear-input\",onClick:this.clearModuleName},T(\"div\",null,\"ⓧ\")))),T(\"tr\",null,T(\"td\",null,T(\"span\",{id:\"override-url-label\"},\"Override URL:\")),T(\"td\",{style:{position:\"relative\"}},T(\"input\",{ref:this.handleInputRef,type:\"text\",value:this.state.overrideUrl,\"aria-labelledby\":\"override-url-label\",tabIndex:2,onInput:function(e){return t.setState({overrideUrl:e.target.value})}}),T(\"div\",{role:\"button\",tabIndex:4,className:\"imo-clear-input\",onClick:this.clearInput},T(\"div\",null,\"ⓧ\")))),ae.test(this.state.overrideUrl)&&T(\"tr\",null,T(\"td\",null,\"Derived url:\"),T(\"td\",null,this.getDerivedUrl())))),T(\"div\",{className:\"imo-dialog-actions\"},T(\"button\",{type:\"button\",tabIndex:5,onClick:this.props.cancel,style:{marginRight:\"16px\"}},\"Cancel\"),this.props.module.overrideUrl&&!this.props.module.disabled&&T(\"button\",{type:\"button\",onClick:function(){t.props.module.disabled?window.importMapOverrides.enableOverride(t.props.module.moduleName):window.importMapOverrides.disableOverride(t.props.module.moduleName),t.props.cancel()},tabIndex:6,style:{marginRight:\"16px\"}},this.props.module.disabled?\"Enable\":\"Disable\",\" Override\"),T(\"button\",{type:\"submit\",tabIndex:7,className:this.state.overrideUrl?\"imo-overridden\":\"imo-default\"},this.state.overrideUrl?\"Apply override\":\"Reset to default\")))))}}]),l}(z),ae=/^\\d+$/,ue=function(e){i(l,e);var n=m(l);function l(){var e;t(this,l);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return o(p(e=n.call.apply(n,[this].concat(i))),\"state\",{url:e.props.dialogExternalMap.isNew?\"\":e.props.dialogExternalMap.url}),o(p(e),\"inputEl\",null),o(p(e),\"handleSubmit\",(function(t){t.preventDefault(),e.props.dialogExternalMap.isNew||window.importMapOverrides.removeExternalOverride(e.props.dialogExternalMap.url),e.state.url&&window.importMapOverrides.addExternalOverride(e.state.url),e.props.cancel()})),o(p(e),\"keyDown\",(function(t){\"Escape\"===t.key&&(t.stopPropagation(),e.props.cancel())})),e}return r(l,[{key:\"componentDidMount\",value:function(){this.inputEl.focus(),this.dialogEl.addEventListener(\"keydown\",this.keyDown)}},{key:\"componentWillUnmount\",value:function(){this.dialogEl.removeEventListener(\"keydown\",this.keyDown)}},{key:\"render\",value:function(){var e=this;return T(\"div\",{className:\"imo-modal-container\"},T(\"div\",{className:\"imo-modal\"}),T(\"dialog\",{className:\"imo-module-dialog\",open:!0,ref:function(t){return e.dialogEl=t}},T(\"form\",{method:\"dialog\",onSubmit:this.handleSubmit},T(\"h3\",{style:{marginTop:0}},this.props.dialogExternalMap.isNew?\"Add External Import Map\":\"Edit External Import Map\"),T(\"div\",{style:{marginBottom:\"20px\"}},T(\"label\",{htmlFor:\"external-importmap-url\"},\"URL to import map:\"),T(\"span\",{style:{position:\"relative\"}},T(\"input\",{id:\"external-importmap-url\",type:\"text\",value:this.state.url,onInput:function(t){return e.setState({url:t.target.value})},ref:function(t){return e.inputEl=t},required:this.props.dialogExternalMap.isNew}),T(\"div\",{role:\"button\",tabIndex:0,className:\"imo-clear-input\",onClick:function(){return e.setState({url:\"\"})}},T(\"div\",null,\"ⓧ\")))),T(\"div\",{className:\"imo-dialog-actions\"},T(\"button\",{type:\"button\",onClick:this.props.cancel,style:{marginRight:\"16px\"}},\"Cancel\"),T(\"button\",{type:\"submit\",className:this.state.url?\"imo-overridden\":\"imo-default\"},this.state.url||this.props.dialogExternalMap.isNew?\"Apply override\":\"Remove override\")))))}}]),l}(z),se=function(e){i(o,e);var n=m(o);function o(){return t(this,o),n.apply(this,arguments)}return r(o,[{key:\"componentDidMount\",value:function(){window.importMapOverrides.getCurrentPageMap().then(ce)}},{key:\"render\",value:function(){return null}}]),o}(z),de=function(e){return e.replace(\".min.js\",\".js\")},pe={react:function(e){return e.replace(\"production.min\",\"development\")},\"react-dom\":function(e){return e.replace(\"production.min\",\"development\")},\"single-spa\":function(e){return e.replace(\"single-spa.min.js\",\"single-spa.dev.js\")},vue:de,\"vue-router\":de,\"@angular/core\":de,\"@angular/common\":de,\"@angular/router\":de,\"@angular/platform-browser\":de};function ce(e){Object.keys(e.imports).filter((function(e){return pe[e]})).forEach((function(t){window.importMapOverrides.addOverride(t,pe[t](e.imports[t]))}))}function me(){return Object.keys(window.importMapOverrides.getOverrideMap().imports).filter((function(e){return!pe[e]})).length>0}var fe=function(e){i(l,e);var n=m(l);function l(){var e;t(this,l);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return o(p(e=n.call.apply(n,[this].concat(i))),\"state\",{notOverriddenMap:{imports:{}},currentPageMap:{imports:{}},nextPageMap:{imports:{}},dialogModule:null,dialogExternalMap:null,searchVal:\"\"}),o(p(e),\"cancel\",(function(){e.setState({dialogModule:null,dialogExternalMap:null})})),o(p(e),\"updateModuleUrl\",(function(t){null===(t=t||null)?window.importMapOverrides.removeOverride(e.state.dialogModule.moduleName):window.importMapOverrides.addOverride(e.state.dialogModule.moduleName,t),e.setState({dialogModule:null})})),o(p(e),\"doUpdate\",(function(){e.forceUpdate(),window.importMapOverrides.getNextPageMap().then((function(t){e.setState({nextPageMap:t})}))})),o(p(e),\"addNewModule\",(function(t,n){t&&n&&window.importMapOverrides.addOverride(t,n),e.setState({dialogModule:null})})),o(p(e),\"filterModuleNames\",(function(t){return!(e.state.searchVal.trim().length>0)||g(t,e.state.searchVal)})),e}return r(l,[{key:\"componentDidMount\",value:function(){var e=this;window.importMapOverrides.getDefaultMap().then((function(t){e.setState({notOverriddenMap:t})})),window.importMapOverrides.getCurrentPageMap().then((function(t){e.setState({currentPageMap:t})})),window.importMapOverrides.getNextPageMap().then((function(t){e.setState({nextPageMap:t})})),window.addEventListener(\"import-map-overrides:change\",this.doUpdate),this.inputRef.focus()}},{key:\"componentWillUnmount\",value:function(){window.removeEventListener(\"import-map-overrides:change\",this.doUpdate)}},{key:\"componentDidUpdate\",value:function(e,t){!t.dialogModule&&this.state.dialogModule?(this.dialogContainer=document.createElement(\"div\"),document.body.appendChild(this.dialogContainer),ie(T(le,{module:this.state.dialogModule,cancel:this.cancel,updateModuleUrl:this.updateModuleUrl,addNewModule:this.addNewModule}),this.dialogContainer)):t.dialogModule&&!this.state.dialogModule&&(ie(null,this.dialogContainer),this.dialogContainer.remove(),delete this.dialogContainer),!t.dialogExternalMap&&this.state.dialogExternalMap?(this.dialogContainer=document.createElement(\"div\"),document.body.appendChild(this.dialogContainer),ie(T(ue,{dialogExternalMap:this.state.dialogExternalMap,cancel:this.cancel}),this.dialogContainer)):t.dialogExternalMap&&!this.state.dialogExternalMap&&(ie(null,this.dialogContainer),this.dialogContainer.remove(),delete this.dialogContainer)}},{key:\"render\",value:function(){var e=this,t=[],n=[],r=[],o=[],i=[],l=[],a=[],u=window.importMapOverrides.getOverrideMap(!0).imports,s=Object.keys(this.state.notOverriddenMap.imports),d=window.importMapOverrides.getDisabledOverrides();s.filter(this.filterModuleNames).forEach((function(s){var p={moduleName:s,defaultUrl:e.state.notOverriddenMap.imports[s],overrideUrl:u[s],disabled:g(d,s)};p.disabled?r.push(p):u[s]?e.state.currentPageMap.imports[s]===u[s]?pe[s]&&pe[s](e.state.currentPageMap.imports[s])===u[s]?a.push(p):t.push(p):n.push(p):e.state.notOverriddenMap.imports[s]===e.state.currentPageMap.imports[s]?o.push(p):e.state.notOverriddenMap.imports[s]===e.state.nextPageMap.imports[s]?l.push(p):i.push(p)})),Object.keys(u).filter(this.filterModuleNames).forEach((function(o){if(!g(s,o)){var i={moduleName:o,defaultUrl:null,overrideUrl:u[o],disabled:g(d,o)};i.disabled?r.push(i):e.state.currentPageMap.imports[o]===u[o]?t.push(i):n.push(i)}})),t.sort(ve),o.sort(ve),n.sort(ve);var p=function(){var e,t=window.importMapOverrides.getExternalOverrides(),n=window.importMapOverrides.getCurrentPageExternalOverrides(),r=[],o=[],i=[],l=function(e,t){var n;if(\"undefined\"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(n=v(e))){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}var i,l=!0,a=!1;return{s:function(){n=e[Symbol.iterator]()},n:function(){var e=n.next();return l=e.done,e},e:function(e){a=!0,i=e},f:function(){try{l||null==n.return||n.return()}finally{if(a)throw i}}}}(t);try{for(l.s();!(e=l.n()).done;){var a=e.value;g(window.importMapOverrides.invalidExternalMaps,a)?r.push(a):g(n,a)?o.push(a):i.push(a)}}catch(e){l.e(e)}finally{l.f()}return{brokenMaps:r,workingCurrentPageMaps:o,workingNextPageMaps:i}}(),c=p.brokenMaps,m=p.workingCurrentPageMaps,f=p.workingNextPageMaps;return T(\"div\",{className:\"imo-list-container\"},T(\"div\",{className:\"imo-table-header-actions\"},T(\"input\",{className:\"imo-list-search\",\"aria-label\":\"Search modules\",placeholder:\"Search modules\",value:this.state.searchVal,onInput:function(t){return e.setState({searchVal:t.target.value})},ref:function(t){return e.inputRef=t}}),T(\"div\",{className:\"imo-add-new\"},T(\"button\",{onClick:function(){return e.setState({dialogModule:{moduleName:\"New module\",isNew:!0}})}},\"Add new module\")),T(\"div\",{className:\"imo-add-new\"},T(\"button\",{onClick:function(){e.setState({dialogExternalMap:{url:\"\",isNew:!0}})}},\"Add import map\")),T(\"div\",{className:\"imo-add-new\"},T(\"button\",{onClick:function(){return window.importMapOverrides.resetOverrides()}},\"Reset all overrides\"))),T(\"table\",{className:\"imo-overrides-table\"},T(\"thead\",null,T(\"tr\",null,T(\"th\",null,\"Module Status\"),T(\"th\",null,\"Module Name\"),T(\"th\",null,\"Domain\"),T(\"th\",null,\"Filename\"))),T(\"tbody\",null,n.map((function(t){return T(\"tr\",{role:\"button\",tabIndex:0,onClick:function(){return e.setState({dialogModule:t})},key:t.moduleName},T(\"td\",null,T(\"div\",{className:\"imo-status imo-next-override\"}),T(\"div\",null,\"Inline Override\"),T(\"div\",{className:\"imo-needs-refresh\"})),T(\"td\",null,t.moduleName),T(\"td\",null,ge(t)),T(\"td\",null,_e(t)))})),l.map((function(t){return T(\"tr\",{role:\"button\",tabIndex:0,onClick:function(){return e.setState({dialogModule:t})},key:t.moduleName},T(\"td\",{style:{position:\"relative\"}},T(\"div\",{className:\"imo-status imo-next-default\"}),T(\"div\",null,\"Default\"),T(\"div\",{className:\"imo-needs-refresh\"})),T(\"td\",null,t.moduleName),T(\"td\",null,ge(t)),T(\"td\",null,_e(t)))})),r.map((function(t){return T(\"tr\",{role:\"button\",tabIndex:0,onClick:function(){return e.setState({dialogModule:t})},key:t.moduleName},T(\"td\",null,T(\"div\",{className:\"imo-status imo-disabled-override\"}),T(\"div\",null,\"Override disabled\")),T(\"td\",null,t.moduleName),T(\"td\",null,ge(t)),T(\"td\",null,_e(t)))})),t.map((function(t){return T(\"tr\",{role:\"button\",tabIndex:0,onClick:function(){return e.setState({dialogModule:t})},key:t.moduleName},T(\"td\",null,T(\"div\",{className:\"imo-status imo-current-override\"}),T(\"div\",null,\"Inline Override\")),T(\"td\",null,t.moduleName),T(\"td\",null,ge(t)),T(\"td\",null,_e(t)))})),i.map((function(t){return T(\"tr\",{role:\"button\",tabIndex:0,onClick:function(){return e.setState({dialogModule:t})},key:t.moduleName},T(\"td\",null,T(\"div\",{className:\"imo-status imo-external-override\"}),T(\"div\",null,\"External Override\")),T(\"td\",null,t.moduleName),T(\"td\",null,ge(t)),T(\"td\",null,_e(t)))})),a.map((function(t){return T(\"tr\",{role:\"button\",tabIndex:0,onClick:function(){return e.setState({dialogModule:t})},key:t.moduleName,title:\"Automatically use dev version of certain npm libs\"},T(\"td\",null,T(\"div\",{className:\"imo-status imo-dev-lib-override\"}),T(\"div\",null,\"Dev Lib Override\")),T(\"td\",null,t.moduleName),T(\"td\",null,ge(t)),T(\"td\",null,_e(t)))})),o.map((function(t){return T(\"tr\",{role:\"button\",tabIndex:0,onClick:function(){return e.setState({dialogModule:t})},key:t.moduleName},T(\"td\",null,T(\"div\",{className:\"imo-status imo-default-module\"}),T(\"div\",null,\"Default\")),T(\"td\",null,t.moduleName),T(\"td\",null,ge(t)),T(\"td\",null,_e(t)))})))),(c.length>0||m.length>0||f.length>0)&&T(\"table\",{className:\"imo-overrides-table\"},T(\"thead\",null,T(\"th\",null,\"Import Map Status\"),T(\"th\",null,\"URL\")),T(\"tbody\",null,c.map((function(t){return T(\"tr\",{role:\"button\",tabIndex:0,onClick:function(){return e.setState({dialogExternalMap:{isNew:!1,url:t}})},key:t},T(\"td\",null,T(\"div\",{className:\"imo-status imo-disabled-override\"}),T(\"div\",null,\"Invalid\")),T(\"td\",null,t))})),f.map((function(t){return T(\"tr\",{role:\"button\",tabIndex:0,onClick:function(){return e.setState({dialogExternalMap:{isNew:!1,url:t}})},key:t},T(\"td\",null,T(\"div\",{className:\"imo-status imo-next-override\"}),T(\"div\",null,\"Pending refresh\")),T(\"td\",null,t))})),m.map((function(t){return T(\"tr\",{role:\"button\",tabIndex:0,onClick:function(){return e.setState({dialogExternalMap:{isNew:!1,url:t}})},key:t},T(\"td\",null,T(\"div\",{className:\"imo-status imo-current-override\"}),T(\"div\",null,\"Override\")),T(\"td\",null,t))})))))}}]),l}(z);function ve(e,t){return e.moduleName>t.moduleName}var he=document.querySelector(\"base\")&&document.querySelector(\"base\").href||location.origin+\"/\";function ge(e){var t=ye(e),n=be(t);return n?n.host:t}function _e(e){var t=ye(e),n=be(t);return n?n.pathname.slice(n.pathname.lastIndexOf(\"/\")+1):t}function ye(e){return e.overrideUrl||e.defaultUrl}function be(e){try{return new URL(e,he)}catch(e){return null}}var we=function(e){i(l,e);var n=m(l);function l(){var e;t(this,l);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return o(p(e=n.call.apply(n,[this].concat(i))),\"doUpdate\",(function(){return e.forceUpdate()})),o(p(e),\"keydownListener\",(function(t){\"Escape\"===t.key&&e.props.close&&e.props.close()})),e}return r(l,[{key:\"componentDidMount\",value:function(){window.addEventListener(\"keydown\",this.keydownListener),window.addEventListener(\"import-map-overrides:change\",this.doUpdate)}},{key:\"componentWillUnmount\",value:function(){window.removeEventListener(\"keydown\",this.keydownListener),window.removeEventListener(\"import-map-overrides:change\",this.doUpdate)}},{key:\"render\",value:function(e){return T(\"div\",{className:\"imo-popup\"},T(\"div\",{className:\"imo-header\"},T(\"div\",null,T(\"h1\",null,\"Import Map Overrides\"),T(\"p\",null,\"This developer tool allows you to view and override your import maps. Start by clicking on a module that you'd like to override.\",\" \",T(\"a\",{target:\"_blank\",href:\"https://github.com/joeldenning/import-map-overrides\"},\"See documentation for more info\"),\".\")),T(\"button\",{className:\"imo-unstyled\",onClick:e.close},\"ⓧ\")),T(fe,{importMapChanged:this.props.importMapChanged}))}}]),l}(z),xe=function(e){i(l,e);var n=m(l);function l(){var e;t(this,l);for(var r=arguments.length,i=new Array(r),a=0;a<r;a++)i[a]=arguments[a];return o(p(e=n.call.apply(n,[this].concat(i))),\"state\",{showingPopup:!1}),o(p(e),\"doUpdate\",(function(){return e.forceUpdate()})),o(p(e),\"toggleTrigger\",(function(){e.setState((function(e){return{showingPopup:!e.showingPopup}}))})),o(p(e),\"importMapChanged\",(function(){e.forceUpdate()})),o(p(e),\"useDevLibs\",(function(){var t=localStorage.getItem(\"import-map-overrides-dev-libs\");return t?\"true\"===t:e.props.customElement.hasAttribute(\"dev-libs\")})),o(p(e),\"atLeastOneOverride\",(function(){return e.useDevLibs()?me():Object.keys(window.importMapOverrides.getOverrideMap().imports).length>0})),e}return r(l,[{key:\"componentDidMount\",value:function(){window.addEventListener(\"import-map-overrides:change\",this.doUpdate)}},{key:\"componentWillUnmount\",value:function(){window.removeEventListener(\"import-map-overrides:change\",this.doUpdate)}},{key:\"render\",value:function(e,t){return e.customElement.hasAttribute(\"show-when-local-storage\")&&\"true\"!==localStorage.getItem(e.customElement.getAttribute(\"show-when-local-storage\"))?null:T(\"div\",null,T(\"button\",{onClick:this.toggleTrigger,className:\"imo-unstyled imo-trigger \".concat(this.atLeastOneOverride()?\"imo-current-override\":\"\")},\"{···}\"),this.useDevLibs()&&T(se,null),t.showingPopup&&T(we,{close:this.toggleTrigger,importMapChanged:this.importMapChanged}))}}]),l}(z);function Me(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];return function(o){i(a,o);var l=m(a);function a(){return t(this,a),l.apply(this,arguments)}return r(a,[{key:\"connectedCallback\",value:function(){this.renderWithPreact()}},{key:\"disconnectedCallback\",value:function(){ie(null,this),this.renderedEl=null}},{key:\"attributeChangedCallback\",value:function(){this.renderWithPreact()}},{key:\"renderWithPreact\",value:function(){this.renderedEl=ie(T(e,{customElement:this}),this,this.renderedEl)}}],[{key:\"observedAttributes\",get:function(){return n}}]),a}(d(HTMLElement))}window.customElements&&!y&&(window.customElements.define(\"import-map-overrides-full\",Me(xe,[\"show-when-local-storage\"])),window.customElements.define(\"import-map-overrides-popup\",Me(we)),window.customElements.define(\"import-map-overrides-list\",Me(fe)))}();\n//# sourceMappingURL=import-map-overrides.js.map\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "[2a04:4e42:4b::485]",
        "startedDateTime": "2023-04-10T17:57:16.767Z",
        "time": 0.27600000066740904,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.2480000002833549,
          "receive": 0.028000000384054147,
          "_blocked_queueing": -1
        }
      },
      {
        "_fromCache": "memory",
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:9000/",
          "lineNumber": 70
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
            },
            {
              "name": "Referer",
              "value": "http://localhost:9000/"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 10 Apr 2023 14:52:10 GMT"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "age",
              "value": "1764330"
            },
            {
              "name": "x-jsd-version",
              "value": "6.8.3"
            },
            {
              "name": "x-cache",
              "value": "HIT, HIT"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "content-length",
              "value": "9800"
            },
            {
              "name": "x-served-by",
              "value": "cache-fra-eddf8230031-FRA, cache-lon420123-LON"
            },
            {
              "name": "x-jsd-version-type",
              "value": "version"
            },
            {
              "name": "etag",
              "value": "W/\"810b-gW0GTDPuAi+LzfTJvub7tgmboY0\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000, s-maxage=31536000, immutable"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            }
          ],
          "cookies": [],
          "content": {
            "size": 33035,
            "mimeType": "application/javascript",
            "text": "/*\n* SystemJS 6.8.3\n*/\n(function () {\n\n  function errMsg(errCode, msg) {\n    return (msg || \"\") + \" (SystemJS Error#\" + errCode + \" \" + \"https://git.io/JvFET#\" + errCode + \")\";\n  }\n\n  var hasSymbol = typeof Symbol !== 'undefined';\n  var hasSelf = typeof self !== 'undefined';\n  var hasDocument = typeof document !== 'undefined';\n\n  var envGlobal = hasSelf ? self : global;\n\n  var baseUrl;\n\n  if (hasDocument) {\n    var baseEl = document.querySelector('base[href]');\n    if (baseEl)\n      baseUrl = baseEl.href;\n  }\n\n  if (!baseUrl && typeof location !== 'undefined') {\n    baseUrl = location.href.split('#')[0].split('?')[0];\n    var lastSepIndex = baseUrl.lastIndexOf('/');\n    if (lastSepIndex !== -1)\n      baseUrl = baseUrl.slice(0, lastSepIndex + 1);\n  }\n\n  var backslashRegEx = /\\\\/g;\n  function resolveIfNotPlainOrUrl (relUrl, parentUrl) {\n    if (relUrl.indexOf('\\\\') !== -1)\n      relUrl = relUrl.replace(backslashRegEx, '/');\n    // protocol-relative\n    if (relUrl[0] === '/' && relUrl[1] === '/') {\n      return parentUrl.slice(0, parentUrl.indexOf(':') + 1) + relUrl;\n    }\n    // relative-url\n    else if (relUrl[0] === '.' && (relUrl[1] === '/' || relUrl[1] === '.' && (relUrl[2] === '/' || relUrl.length === 2 && (relUrl += '/')) ||\n        relUrl.length === 1  && (relUrl += '/')) ||\n        relUrl[0] === '/') {\n      var parentProtocol = parentUrl.slice(0, parentUrl.indexOf(':') + 1);\n      // Disabled, but these cases will give inconsistent results for deep backtracking\n      //if (parentUrl[parentProtocol.length] !== '/')\n      //  throw Error('Cannot resolve');\n      // read pathname from parent URL\n      // pathname taken to be part after leading \"/\"\n      var pathname;\n      if (parentUrl[parentProtocol.length + 1] === '/') {\n        // resolving to a :// so we need to read out the auth and host\n        if (parentProtocol !== 'file:') {\n          pathname = parentUrl.slice(parentProtocol.length + 2);\n          pathname = pathname.slice(pathname.indexOf('/') + 1);\n        }\n        else {\n          pathname = parentUrl.slice(8);\n        }\n      }\n      else {\n        // resolving to :/ so pathname is the /... part\n        pathname = parentUrl.slice(parentProtocol.length + (parentUrl[parentProtocol.length] === '/'));\n      }\n\n      if (relUrl[0] === '/')\n        return parentUrl.slice(0, parentUrl.length - pathname.length - 1) + relUrl;\n\n      // join together and split for removal of .. and . segments\n      // looping the string instead of anything fancy for perf reasons\n      // '../../../../../z' resolved to 'x/y' is just 'z'\n      var segmented = pathname.slice(0, pathname.lastIndexOf('/') + 1) + relUrl;\n\n      var output = [];\n      var segmentIndex = -1;\n      for (var i = 0; i < segmented.length; i++) {\n        // busy reading a segment - only terminate on '/'\n        if (segmentIndex !== -1) {\n          if (segmented[i] === '/') {\n            output.push(segmented.slice(segmentIndex, i + 1));\n            segmentIndex = -1;\n          }\n        }\n\n        // new segment - check if it is relative\n        else if (segmented[i] === '.') {\n          // ../ segment\n          if (segmented[i + 1] === '.' && (segmented[i + 2] === '/' || i + 2 === segmented.length)) {\n            output.pop();\n            i += 2;\n          }\n          // ./ segment\n          else if (segmented[i + 1] === '/' || i + 1 === segmented.length) {\n            i += 1;\n          }\n          else {\n            // the start of a new segment as below\n            segmentIndex = i;\n          }\n        }\n        // it is the start of a new segment\n        else {\n          segmentIndex = i;\n        }\n      }\n      // finish reading out the last segment\n      if (segmentIndex !== -1)\n        output.push(segmented.slice(segmentIndex));\n      return parentUrl.slice(0, parentUrl.length - pathname.length) + output.join('');\n    }\n  }\n\n  /*\n   * Import maps implementation\n   *\n   * To make lookups fast we pre-resolve the entire import map\n   * and then match based on backtracked hash lookups\n   *\n   */\n\n  function resolveUrl (relUrl, parentUrl) {\n    return resolveIfNotPlainOrUrl(relUrl, parentUrl) || (relUrl.indexOf(':') !== -1 ? relUrl : resolveIfNotPlainOrUrl('./' + relUrl, parentUrl));\n  }\n\n  function resolveAndComposePackages (packages, outPackages, baseUrl, parentMap, parentUrl) {\n    for (var p in packages) {\n      var resolvedLhs = resolveIfNotPlainOrUrl(p, baseUrl) || p;\n      var rhs = packages[p];\n      // package fallbacks not currently supported\n      if (typeof rhs !== 'string')\n        continue;\n      var mapped = resolveImportMap(parentMap, resolveIfNotPlainOrUrl(rhs, baseUrl) || rhs, parentUrl);\n      if (!mapped) {\n        targetWarning('W1', p, rhs, 'bare specifier did not resolve');\n      }\n      else\n        outPackages[resolvedLhs] = mapped;\n    }\n  }\n\n  function resolveAndComposeImportMap (json, baseUrl, outMap) {\n    if (json.imports)\n      resolveAndComposePackages(json.imports, outMap.imports, baseUrl, outMap, null);\n\n    var u;\n    for (u in json.scopes || {}) {\n      var resolvedScope = resolveUrl(u, baseUrl);\n      resolveAndComposePackages(json.scopes[u], outMap.scopes[resolvedScope] || (outMap.scopes[resolvedScope] = {}), baseUrl, outMap, resolvedScope);\n    }\n\n    for (u in json.depcache || {})\n      outMap.depcache[resolveUrl(u, baseUrl)] = json.depcache[u];\n    \n    for (u in json.integrity || {})\n      outMap.integrity[resolveUrl(u, baseUrl)] = json.integrity[u];\n  }\n\n  function getMatch (path, matchObj) {\n    if (matchObj[path])\n      return path;\n    var sepIndex = path.length;\n    do {\n      var segment = path.slice(0, sepIndex + 1);\n      if (segment in matchObj)\n        return segment;\n    } while ((sepIndex = path.lastIndexOf('/', sepIndex - 1)) !== -1)\n  }\n\n  function applyPackages (id, packages) {\n    var pkgName = getMatch(id, packages);\n    if (pkgName) {\n      var pkg = packages[pkgName];\n      if (pkg === null) return;\n      if (id.length > pkgName.length && pkg[pkg.length - 1] !== '/') {\n        targetWarning('W2', pkgName, pkg, \"should have a trailing '/'\");\n      }\n      else\n        return pkg + id.slice(pkgName.length);\n    }\n  }\n\n  function targetWarning (code, match, target, msg) {\n    console.warn(errMsg(code,  \"Package target \" + msg + \", resolving target '\" + target + \"' for \" + match));\n  }\n\n  function resolveImportMap (importMap, resolvedOrPlain, parentUrl) {\n    var scopes = importMap.scopes;\n    var scopeUrl = parentUrl && getMatch(parentUrl, scopes);\n    while (scopeUrl) {\n      var packageResolution = applyPackages(resolvedOrPlain, scopes[scopeUrl]);\n      if (packageResolution)\n        return packageResolution;\n      scopeUrl = getMatch(scopeUrl.slice(0, scopeUrl.lastIndexOf('/')), scopes);\n    }\n    return applyPackages(resolvedOrPlain, importMap.imports) || resolvedOrPlain.indexOf(':') !== -1 && resolvedOrPlain;\n  }\n\n  /*\n   * SystemJS Core\n   * \n   * Provides\n   * - System.import\n   * - System.register support for\n   *     live bindings, function hoisting through circular references,\n   *     reexports, dynamic import, import.meta.url, top-level await\n   * - System.getRegister to get the registration\n   * - Symbol.toStringTag support in Module objects\n   * - Hookable System.createContext to customize import.meta\n   * - System.onload(err, id, deps) handler for tracing / hot-reloading\n   * \n   * Core comes with no System.prototype.resolve or\n   * System.prototype.instantiate implementations\n   */\n\n  var toStringTag = hasSymbol && Symbol.toStringTag;\n  var REGISTRY = hasSymbol ? Symbol() : '@';\n\n  function SystemJS () {\n    this[REGISTRY] = {};\n  }\n\n  var systemJSPrototype = SystemJS.prototype;\n\n  systemJSPrototype.import = function (id, parentUrl) {\n    var loader = this;\n    return Promise.resolve(loader.prepareImport())\n    .then(function() {\n      return loader.resolve(id, parentUrl);\n    })\n    .then(function (id) {\n      var load = getOrCreateLoad(loader, id);\n      return load.C || topLevelLoad(loader, load);\n    });\n  };\n\n  // Hookable createContext function -> allowing eg custom import meta\n  systemJSPrototype.createContext = function (parentId) {\n    var loader = this;\n    return {\n      url: parentId,\n      resolve: function (id, parentUrl) {\n        return Promise.resolve(loader.resolve(id, parentUrl || parentId));\n      }\n    };\n  };\n\n  // onLoad(err, id, deps) provided for tracing / hot-reloading\n  systemJSPrototype.onload = function () {};\n  function loadToId (load) {\n    return load.id;\n  }\n  function triggerOnload (loader, load, err, isErrSource) {\n    loader.onload(err, load.id, load.d && load.d.map(loadToId), !!isErrSource);\n    if (err)\n      throw err;\n  }\n\n  var lastRegister;\n  systemJSPrototype.register = function (deps, declare) {\n    lastRegister = [deps, declare];\n  };\n\n  /*\n   * getRegister provides the last anonymous System.register call\n   */\n  systemJSPrototype.getRegister = function () {\n    var _lastRegister = lastRegister;\n    lastRegister = undefined;\n    return _lastRegister;\n  };\n\n  function getOrCreateLoad (loader, id, firstParentUrl) {\n    var load = loader[REGISTRY][id];\n    if (load)\n      return load;\n\n    var importerSetters = [];\n    var ns = Object.create(null);\n    if (toStringTag)\n      Object.defineProperty(ns, toStringTag, { value: 'Module' });\n    \n    var instantiatePromise = Promise.resolve()\n    .then(function () {\n      return loader.instantiate(id, firstParentUrl);\n    })\n    .then(function (registration) {\n      if (!registration)\n        throw Error(errMsg(2,  'Module ' + id + ' did not instantiate'));\n      function _export (name, value) {\n        // note if we have hoisted exports (including reexports)\n        load.h = true;\n        var changed = false;\n        if (typeof name === 'string') {\n          if (!(name in ns) || ns[name] !== value) {\n            ns[name] = value;\n            changed = true;\n          }\n        }\n        else {\n          for (var p in name) {\n            var value = name[p];\n            if (!(p in ns) || ns[p] !== value) {\n              ns[p] = value;\n              changed = true;\n            }\n          }\n\n          if (name.__esModule) {\n            ns.__esModule = name.__esModule;\n          }\n        }\n        if (changed)\n          for (var i = 0; i < importerSetters.length; i++) {\n            var setter = importerSetters[i];\n            if (setter) setter(ns);\n          }\n        return value;\n      }\n      var declared = registration[1](_export, registration[1].length === 2 ? {\n        import: function (importId) {\n          return loader.import(importId, id);\n        },\n        meta: loader.createContext(id)\n      } : undefined);\n      load.e = declared.execute || function () {};\n      return [registration[0], declared.setters || []];\n    }, function (err) {\n      load.e = null;\n      load.er = err;\n      triggerOnload(loader, load, err, true);\n      throw err;\n    });\n\n    var linkPromise = instantiatePromise\n    .then(function (instantiation) {\n      return Promise.all(instantiation[0].map(function (dep, i) {\n        var setter = instantiation[1][i];\n        return Promise.resolve(loader.resolve(dep, id))\n        .then(function (depId) {\n          var depLoad = getOrCreateLoad(loader, depId, id);\n          // depLoad.I may be undefined for already-evaluated\n          return Promise.resolve(depLoad.I)\n          .then(function () {\n            if (setter) {\n              depLoad.i.push(setter);\n              // only run early setters when there are hoisted exports of that module\n              // the timing works here as pending hoisted export calls will trigger through importerSetters\n              if (depLoad.h || !depLoad.I)\n                setter(depLoad.n);\n            }\n            return depLoad;\n          });\n        });\n      }))\n      .then(function (depLoads) {\n        load.d = depLoads;\n      });\n    });\n\n    // Capital letter = a promise function\n    return load = loader[REGISTRY][id] = {\n      id: id,\n      // importerSetters, the setters functions registered to this dependency\n      // we retain this to add more later\n      i: importerSetters,\n      // module namespace object\n      n: ns,\n\n      // instantiate\n      I: instantiatePromise,\n      // link\n      L: linkPromise,\n      // whether it has hoisted exports\n      h: false,\n\n      // On instantiate completion we have populated:\n      // dependency load records\n      d: undefined,\n      // execution function\n      e: undefined,\n\n      // On execution we have populated:\n      // the execution error if any\n      er: undefined,\n      // in the case of TLA, the execution promise\n      E: undefined,\n\n      // On execution, L, I, E cleared\n\n      // Promise for top-level completion\n      C: undefined,\n\n      // parent instantiator / executor\n      p: undefined\n    };\n  }\n\n  function instantiateAll (loader, load, parent, loaded) {\n    if (!loaded[load.id]) {\n      loaded[load.id] = true;\n      // load.L may be undefined for already-instantiated\n      return Promise.resolve(load.L)\n      .then(function () {\n        if (!load.p || load.p.e === null)\n          load.p = parent;\n        return Promise.all(load.d.map(function (dep) {\n          return instantiateAll(loader, dep, parent, loaded);\n        }));\n      })\n      .catch(function (err) {\n        if (load.er)\n          throw err;\n        load.e = null;\n        triggerOnload(loader, load, err, false);\n        throw err;\n      });\n    }\n  }\n\n  function topLevelLoad (loader, load) {\n    return load.C = instantiateAll(loader, load, load, {})\n    .then(function () {\n      return postOrderExec(loader, load, {});\n    })\n    .then(function () {\n      return load.n;\n    });\n  }\n\n  // the closest we can get to call(undefined)\n  var nullContext = Object.freeze(Object.create(null));\n\n  // returns a promise if and only if a top-level await subgraph\n  // throws on sync errors\n  function postOrderExec (loader, load, seen) {\n    if (seen[load.id])\n      return;\n    seen[load.id] = true;\n\n    if (!load.e) {\n      if (load.er)\n        throw load.er;\n      if (load.E)\n        return load.E;\n      return;\n    }\n\n    // deps execute first, unless circular\n    var depLoadPromises;\n    load.d.forEach(function (depLoad) {\n      try {\n        var depLoadPromise = postOrderExec(loader, depLoad, seen);\n        if (depLoadPromise) \n          (depLoadPromises = depLoadPromises || []).push(depLoadPromise);\n      }\n      catch (err) {\n        load.e = null;\n        load.er = err;\n        triggerOnload(loader, load, err, false);\n        throw err;\n      }\n    });\n    if (depLoadPromises)\n      return Promise.all(depLoadPromises).then(doExec);\n\n    return doExec();\n\n    function doExec () {\n      try {\n        var execPromise = load.e.call(nullContext);\n        if (execPromise) {\n          execPromise = execPromise.then(function () {\n            load.C = load.n;\n            load.E = null; // indicates completion\n            if (!false) triggerOnload(loader, load, null, true);\n          }, function (err) {\n            load.er = err;\n            load.E = null;\n            if (!false) triggerOnload(loader, load, err, true);\n            throw err;\n          });\n          return load.E = execPromise;\n        }\n        // (should be a promise, but a minify optimization to leave out Promise.resolve)\n        load.C = load.n;\n        load.L = load.I = undefined;\n      }\n      catch (err) {\n        load.er = err;\n        throw err;\n      }\n      finally {\n        load.e = null;\n        triggerOnload(loader, load, load.er, true);\n      }\n    }\n  }\n\n  envGlobal.System = new SystemJS();\n\n  /*\n   * SystemJS browser attachments for script and import map processing\n   */\n\n  var importMapPromise = Promise.resolve();\n  var importMap = { imports: {}, scopes: {}, depcache: {}, integrity: {} };\n\n  // Scripts are processed immediately, on the first System.import, and on DOMReady.\n  // Import map scripts are processed only once (by being marked) and in order for each phase.\n  // This is to avoid using DOM mutation observers in core, although that would be an alternative.\n  var processFirst = hasDocument;\n  systemJSPrototype.prepareImport = function (doProcessScripts) {\n    if (processFirst || doProcessScripts) {\n      processScripts();\n      processFirst = false;\n    }\n    return importMapPromise;\n  };\n  if (hasDocument) {\n    processScripts();\n    window.addEventListener('DOMContentLoaded', processScripts);\n  }\n\n  function processScripts () {\n    [].forEach.call(document.querySelectorAll('script'), function (script) {\n      if (script.sp) // sp marker = systemjs processed\n        return;\n      // TODO: deprecate systemjs-module in next major now that we have auto import\n      if (script.type === 'systemjs-module') {\n        script.sp = true;\n        if (!script.src)\n          return;\n        System.import(script.src.slice(0, 7) === 'import:' ? script.src.slice(7) : resolveUrl(script.src, baseUrl)).catch(function (e) {\n          // if there is a script load error, dispatch an \"error\" event\n          // on the script tag.\n          if (e.message.indexOf('https://git.io/JvFET#3') > -1) {\n            var event = document.createEvent('Event');\n            event.initEvent('error', false, false);\n            script.dispatchEvent(event);\n          }\n          return Promise.reject(e);\n        });\n      }\n      else if (script.type === 'systemjs-importmap') {\n        script.sp = true;\n        var fetchPromise = script.src ? fetch(script.src, { integrity: script.integrity }).then(function (res) {\n          if (!res.ok)\n            throw Error( 'Invalid status code: ' + res.status);\n          return res.text();\n        }).catch(function (err) {\n          err.message = errMsg('W4',  'Error fetching systemjs-import map ' + script.src) + '\\n' + err.message;\n          console.warn(err);\n          return '{}';\n        }) : script.innerHTML;\n        importMapPromise = importMapPromise.then(function () {\n          return fetchPromise;\n        }).then(function (text) {\n          extendImportMap(importMap, text, script.src || baseUrl);\n        });\n      }\n    });\n  }\n\n  function extendImportMap (importMap, newMapText, newMapUrl) {\n    var newMap = {};\n    try {\n      newMap = JSON.parse(newMapText);\n    } catch (err) {\n      console.warn(Error(( errMsg('W5', \"systemjs-importmap contains invalid JSON\") + '\\n\\n' + newMapText + '\\n' )));\n    }\n    resolveAndComposeImportMap(newMap, newMapUrl, importMap);\n  }\n\n  /*\n   * Script instantiation loading\n   */\n\n  if (hasDocument) {\n    window.addEventListener('error', function (evt) {\n      lastWindowErrorUrl = evt.filename;\n      lastWindowError = evt.error;\n    });\n    var baseOrigin = location.origin;\n  }\n\n  systemJSPrototype.createScript = function (url) {\n    var script = document.createElement('script');\n    script.async = true;\n    // Only add cross origin for actual cross origin\n    // this is because Safari triggers for all\n    // - https://bugs.webkit.org/show_bug.cgi?id=171566\n    if (url.indexOf(baseOrigin + '/'))\n      script.crossOrigin = 'anonymous';\n    var integrity = importMap.integrity[url];\n    if (integrity)\n      script.integrity = integrity;\n    script.src = url;\n    return script;\n  };\n\n  // Auto imports -> script tags can be inlined directly for load phase\n  var lastAutoImportUrl, lastAutoImportDeps, lastAutoImportTimeout;\n  var autoImportCandidates = {};\n  var systemRegister = systemJSPrototype.register;\n  systemJSPrototype.register = function (deps, declare) {\n    if (hasDocument && document.readyState === 'loading' && typeof deps !== 'string') {\n      var scripts = document.querySelectorAll('script[src]');\n      var lastScript = scripts[scripts.length - 1];\n      if (lastScript) {\n        lastAutoImportUrl = lastScript.src;\n        lastAutoImportDeps = deps;\n        // if this is already a System load, then the instantiate has already begun\n        // so this re-import has no consequence\n        var loader = this;\n        lastAutoImportTimeout = setTimeout(function () {\n          autoImportCandidates[lastScript.src] = [deps, declare];\n          loader.import(lastScript.src);\n        });\n      }\n    }\n    else {\n      lastAutoImportDeps = undefined;\n    }\n    return systemRegister.call(this, deps, declare);\n  };\n\n  var lastWindowErrorUrl, lastWindowError;\n  systemJSPrototype.instantiate = function (url, firstParentUrl) {\n    var autoImportRegistration = autoImportCandidates[url];\n    if (autoImportRegistration) {\n      delete autoImportCandidates[url];\n      return autoImportRegistration;\n    }\n    var loader = this;\n    return new Promise(function (resolve, reject) {\n      var script = systemJSPrototype.createScript(url);\n      script.addEventListener('error', function () {\n        reject(Error(errMsg(3,  'Error loading ' + url + (firstParentUrl ? ' from ' + firstParentUrl : ''))));\n      });\n      script.addEventListener('load', function () {\n        document.head.removeChild(script);\n        // Note that if an error occurs that isn't caught by this if statement,\n        // that getRegister will return null and a \"did not instantiate\" error will be thrown.\n        if (lastWindowErrorUrl === url) {\n          reject(lastWindowError);\n        }\n        else {\n          var register = loader.getRegister();\n          // Clear any auto import registration for dynamic import scripts during load\n          if (register && register[0] === lastAutoImportDeps)\n            clearTimeout(lastAutoImportTimeout);\n          resolve(register);\n        }\n      });\n      document.head.appendChild(script);\n    });\n  };\n\n  /*\n   * Fetch loader, sets up shouldFetch and fetch hooks\n   */\n  systemJSPrototype.shouldFetch = function () {\n    return false;\n  };\n  if (typeof fetch !== 'undefined')\n    systemJSPrototype.fetch = fetch;\n\n  var instantiate = systemJSPrototype.instantiate;\n  var jsContentTypeRegEx = /^(text|application)\\/(x-)?javascript(;|$)/;\n  systemJSPrototype.instantiate = function (url, parent) {\n    var loader = this;\n    if (!this.shouldFetch(url))\n      return instantiate.apply(this, arguments);\n    return this.fetch(url, {\n      credentials: 'same-origin',\n      integrity: importMap.integrity[url]\n    })\n    .then(function (res) {\n      if (!res.ok)\n        throw Error(errMsg(7,  res.status + ' ' + res.statusText + ', loading ' + url + (parent ? ' from ' + parent : '')));\n      var contentType = res.headers.get('content-type');\n      if (!contentType || !jsContentTypeRegEx.test(contentType))\n        throw Error(errMsg(4,  'Unknown Content-Type \"' + contentType + '\", loading ' + url + (parent ? ' from ' + parent : '')));\n      return res.text().then(function (source) {\n        if (source.indexOf('//# sourceURL=') < 0)\n          source += '\\n//# sourceURL=' + url;\n        (0, eval)(source);\n        return loader.getRegister();\n      });\n    });\n  };\n\n  systemJSPrototype.resolve = function (id, parentUrl) {\n    parentUrl = parentUrl || !true  || baseUrl;\n    return resolveImportMap(( importMap), resolveIfNotPlainOrUrl(id, parentUrl) || id, parentUrl) || throwUnresolved(id, parentUrl);\n  };\n\n  function throwUnresolved (id, parentUrl) {\n    throw Error(errMsg(8,  \"Unable to resolve bare specifier '\" + id + (parentUrl ? \"' from \" + parentUrl : \"'\")));\n  }\n\n  var systemInstantiate = systemJSPrototype.instantiate;\n  systemJSPrototype.instantiate = function (url, firstParentUrl) {\n    var preloads = ( importMap).depcache[url];\n    if (preloads) {\n      for (var i = 0; i < preloads.length; i++)\n        getOrCreateLoad(this, this.resolve(preloads[i], url), url);\n    }\n    return systemInstantiate.call(this, url, firstParentUrl);\n  };\n\n  /*\n   * Supports loading System.register in workers\n   */\n\n  if (hasSelf && typeof importScripts === 'function')\n    systemJSPrototype.instantiate = function (url) {\n      var loader = this;\n      return Promise.resolve().then(function () {\n        importScripts(url);\n        return loader.getRegister();\n      });\n    };\n\n  /*\n   * SystemJS global script loading support\n   * Extra for the s.js build only\n   * (Included by default in system.js build)\n   */\n  (function (global) {\n    var systemJSPrototype = global.System.constructor.prototype;\n\n    // safari unpredictably lists some new globals first or second in object order\n    var firstGlobalProp, secondGlobalProp, lastGlobalProp;\n    function getGlobalProp (useFirstGlobalProp) {\n      var cnt = 0;\n      var foundLastProp, result;\n      for (var p in global) {\n        // do not check frames cause it could be removed during import\n        if (shouldSkipProperty(p))\n          continue;\n        if (cnt === 0 && p !== firstGlobalProp || cnt === 1 && p !== secondGlobalProp)\n          return p;\n        if (foundLastProp) {\n          lastGlobalProp = p;\n          result = useFirstGlobalProp && result || p;\n        }\n        else {\n          foundLastProp = p === lastGlobalProp;\n        }\n        cnt++;\n      }\n      return result;\n    }\n\n    function noteGlobalProps () {\n      // alternatively Object.keys(global).pop()\n      // but this may be faster (pending benchmarks)\n      firstGlobalProp = secondGlobalProp = undefined;\n      for (var p in global) {\n        // do not check frames cause it could be removed during import\n        if (shouldSkipProperty(p))\n          continue;\n        if (!firstGlobalProp)\n          firstGlobalProp = p;\n        else if (!secondGlobalProp)\n          secondGlobalProp = p;\n        lastGlobalProp = p;\n      }\n      return lastGlobalProp;\n    }\n\n    var impt = systemJSPrototype.import;\n    systemJSPrototype.import = function (id, parentUrl) {\n      noteGlobalProps();\n      return impt.call(this, id, parentUrl);\n    };\n\n    var emptyInstantiation = [[], function () { return {} }];\n\n    var getRegister = systemJSPrototype.getRegister;\n    systemJSPrototype.getRegister = function () {\n      var lastRegister = getRegister.call(this);\n      if (lastRegister)\n        return lastRegister;\n\n      // no registration -> attempt a global detection as difference from snapshot\n      // when multiple globals, we take the global value to be the last defined new global object property\n      // for performance, this will not support multi-version / global collisions as previous SystemJS versions did\n      // note in Edge, deleting and re-adding a global does not change its ordering\n      var globalProp = getGlobalProp(this.firstGlobalProp);\n      if (!globalProp)\n        return emptyInstantiation;\n\n      var globalExport;\n      try {\n        globalExport = global[globalProp];\n      }\n      catch (e) {\n        return emptyInstantiation;\n      }\n\n      return [[], function (_export) {\n        return {\n          execute: function () {\n            _export(globalExport);\n            _export({ default: globalExport, __useDefault: true });\n          }\n        };\n      }];\n    };\n\n    var isIE11 = typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Trident') !== -1;\n\n    function shouldSkipProperty(p) {\n      return !global.hasOwnProperty(p)\n        || !isNaN(p) && p < global.length\n        || isIE11 && global[p] && typeof window !== 'undefined' && global[p].parent === window;\n    }\n  })(typeof self !== 'undefined' ? self : global);\n\n  /*\n   * Loads JSON, CSS, Wasm module types based on file extension\n   * filters and content type verifications\n   */\n  (function(global) {\n    var systemJSPrototype = global.System.constructor.prototype;\n\n    var moduleTypesRegEx = /^[^#?]+\\.(css|html|json|wasm)([?#].*)?$/;\n    systemJSPrototype.shouldFetch = function (url) {\n      return moduleTypesRegEx.test(url);\n    };\n\n    var jsonContentType = /^application\\/json(;|$)/;\n    var cssContentType = /^text\\/css(;|$)/;\n    var wasmContentType = /^application\\/wasm(;|$)/;\n\n    var fetch = systemJSPrototype.fetch;\n    systemJSPrototype.fetch = function (url, options) {\n      return fetch(url, options)\n      .then(function (res) {\n        if (!res.ok)\n          return res;\n        var contentType = res.headers.get('content-type');\n        if (jsonContentType.test(contentType))\n          return res.json()\n          .then(function (json) {\n            return new Response(new Blob([\n              'System.register([],function(e){return{execute:function(){e(\"default\",' + JSON.stringify(json) + ')}}})'\n            ], {\n              type: 'application/javascript'\n            }));\n          });\n        if (cssContentType.test(contentType))\n          return res.text()\n          .then(function (source) {\n            return new Response(new Blob([\n              'System.register([],function(e){return{execute:function(){var s=new CSSStyleSheet();s.replaceSync(' + JSON.stringify(source) + ');e(\"default\",s)}}})'\n            ], {\n              type: 'application/javascript'\n            }));\n          });\n        if (wasmContentType.test(contentType))\n          return (WebAssembly.compileStreaming ? WebAssembly.compileStreaming(res) : res.arrayBuffer().then(WebAssembly.compile))\n          .then(function (module) {\n            if (!global.System.wasmModules)\n              global.System.wasmModules = Object.create(null);\n            global.System.wasmModules[url] = module;\n            // we can only set imports if supported (eg early Safari doesnt support)\n            var deps = [];\n            var setterSources = [];\n            if (WebAssembly.Module.imports)\n              WebAssembly.Module.imports(module).forEach(function (impt) {\n                var key = JSON.stringify(impt.module);\n                if (deps.indexOf(key) === -1) {\n                  deps.push(key);\n                  setterSources.push('function(m){i[' + key + ']=m}');\n                }\n              });\n            return new Response(new Blob([\n              'System.register([' + deps.join(',') + '],function(e){var i={};return{setters:[' + setterSources.join(',') +\n              '],execute:function(){return WebAssembly.instantiate(System.wasmModules[' + JSON.stringify(url) +\n              '],i).then(function(m){e(m.exports)})}}})'\n            ], {\n              type: 'application/javascript'\n            }));\n          });\n        return res;\n      });\n    };\n  })(typeof self !== 'undefined' ? self : global);\n\n  var toStringTag$1 = typeof Symbol !== 'undefined' && Symbol.toStringTag;\n\n  systemJSPrototype.get = function (id) {\n    var load = this[REGISTRY][id];\n    if (load && load.e === null && !load.E) {\n      if (load.er)\n        return null;\n      return load.n;\n    }\n  };\n\n  systemJSPrototype.set = function (id, module) {\n    {\n      try {\n        // No page-relative URLs allowed\n        new URL(id);\n      } catch (err) {\n        console.warn(Error(errMsg('W3', '\"' + id + '\" is not a valid URL to set in the module registry')));\n      }\n    }\n    var ns;\n    if (toStringTag$1 && module[toStringTag$1] === 'Module') {\n      ns = module;\n    }\n    else {\n      ns = Object.assign(Object.create(null), module);\n      if (toStringTag$1)\n        Object.defineProperty(ns, toStringTag$1, { value: 'Module' });\n    }\n\n    var done = Promise.resolve(ns);\n\n    var load = this[REGISTRY][id] || (this[REGISTRY][id] = {\n      id: id,\n      i: [],\n      h: false,\n      d: [],\n      e: null,\n      er: undefined,\n      E: undefined\n    });\n\n    if (load.e || load.E)\n      return false;\n    \n    Object.assign(load, {\n      n: ns,\n      I: undefined,\n      L: undefined,\n      C: done\n    });\n    return ns;\n  };\n\n  systemJSPrototype.has = function (id) {\n    var load = this[REGISTRY][id];\n    return !!load;\n  };\n\n  // Delete function provided for hot-reloading use cases\n  systemJSPrototype.delete = function (id) {\n    var registry = this[REGISTRY];\n    var load = registry[id];\n    // in future we can support load.E case by failing load first\n    // but that will require TLA callbacks to be implemented\n    if (!load || (load.p && load.p.e !== null) || load.E)\n      return false;\n\n    var importerSetters = load.i;\n    // remove from importerSetters\n    // (release for gc)\n    if (load.d)\n      load.d.forEach(function (depLoad) {\n        var importerIndex = depLoad.i.indexOf(load);\n        if (importerIndex !== -1)\n          depLoad.i.splice(importerIndex, 1);\n      });\n    delete registry[id];\n    return function () {\n      var load = registry[id];\n      if (!load || !importerSetters || load.e !== null || load.E)\n        return false;\n      // add back the old setters\n      importerSetters.forEach(function (setter) {\n        load.i.push(setter);\n        setter(load.n);\n      });\n      importerSetters = null;\n    };\n  };\n\n  var iterator = typeof Symbol !== 'undefined' && Symbol.iterator;\n\n  systemJSPrototype.entries = function () {\n    var loader = this, keys = Object.keys(loader[REGISTRY]);\n    var index = 0, ns, key;\n    var result = {\n      next: function () {\n        while (\n          (key = keys[index++]) !== undefined && \n          (ns = loader.get(key)) === undefined\n        );\n        return {\n          done: key === undefined,\n          value: key !== undefined && [key, ns]\n        };\n      }\n    };\n\n    result[iterator] = function() { return this };\n\n    return result;\n  };\n\n}());\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "[2a04:4e42:4b::485]",
        "startedDateTime": "2023-04-10T17:57:16.775Z",
        "time": 0.2410000015515834,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.18700000146054663,
          "receive": 0.05400000009103678,
          "_blocked_queueing": -1
        }
      },
      {
        "_fromCache": "memory",
        "_initiator": {
          "type": "parser",
          "url": "http://localhost:9000/",
          "lineNumber": 71
        },
        "_priority": "High",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
            },
            {
              "name": "Referer",
              "value": "http://localhost:9000/"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "date",
              "value": "Mon, 10 Apr 2023 14:52:10 GMT"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "age",
              "value": "1676329"
            },
            {
              "name": "x-jsd-version",
              "value": "6.8.3"
            },
            {
              "name": "x-cache",
              "value": "HIT, HIT"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "content-length",
              "value": "1747"
            },
            {
              "name": "x-served-by",
              "value": "cache-fra-eddf8230027-FRA, cache-lon420123-LON"
            },
            {
              "name": "x-jsd-version-type",
              "value": "version"
            },
            {
              "name": "etag",
              "value": "W/\"149c-H+SNuoqTn0XClPMMldUM/HxM0NU\""
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "*"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000, s-maxage=31536000, immutable"
            },
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            }
          ],
          "cookies": [],
          "content": {
            "size": 5276,
            "mimeType": "application/javascript",
            "text": "(function(){function errMsg(errCode, msg) {\n  return (msg || \"\") + \" (SystemJS Error#\" + errCode + \" \" + \"https://git.io/JvFET#\" + errCode + \")\";\n}/*\n * Support for AMD loading\n */\n(function (global) {\n  var systemPrototype = global.System.constructor.prototype;\n\n  var emptyInstantiation = [[], function () { return {} }];\n\n  function unsupportedRequire () {\n    throw Error( errMsg(5, 'AMD require not supported.'));\n  }\n\n  var tmpRegister, firstNamedDefine;\n\n  function emptyFn () {}\n\n  var requireExportsModule = ['require', 'exports', 'module'];\n\n  function createAMDRegister (amdDefineDeps, amdDefineExec) {\n    var exports = {};\n    var module = { exports: exports };\n    var depModules = [];\n    var setters = [];\n    var splice = 0;\n    for (var i = 0; i < amdDefineDeps.length; i++) {\n      var id = amdDefineDeps[i];\n      var index = setters.length;\n      if (id === 'require') {\n        depModules[i] = unsupportedRequire;\n        splice++;\n      }\n      else if (id === 'module') {\n        depModules[i] = module;\n        splice++;\n      }\n      else if (id === 'exports') {\n        depModules[i] = exports;\n        splice++;\n      }\n      else {\n        createSetter(i);\n      }\n      if (splice)\n        amdDefineDeps[index] = id;\n    }\n    if (splice)\n      amdDefineDeps.length -= splice;\n    var amdExec = amdDefineExec;\n    return [amdDefineDeps, function (_export) {\n      _export({ default: exports, __useDefault: true });\n      return {\n        setters: setters,\n        execute: function () {\n          var amdResult = amdExec.apply(exports, depModules);\n          if (amdResult !== undefined)\n            module.exports = amdResult;\n          _export(module.exports);\n          _export('default', module.exports);\n        }\n      };\n    }];\n\n    // needed to avoid iteration scope issues\n    function createSetter(idx) {\n      setters.push(function (ns) {\n        depModules[idx] = ns.__useDefault ? ns.default : ns;\n      });\n    }\n  }\n\n  // hook System.register to know the last declaration binding\n  var lastRegisterDeclare;\n  var systemRegister = systemPrototype.register;\n  systemPrototype.register = function (name, deps, declare) {\n    lastRegisterDeclare = typeof name === 'string' ? declare : deps;\n    systemRegister.apply(this, arguments);\n  };\n\n  var instantiate = systemPrototype.instantiate;\n  systemPrototype.instantiate = function() {\n    // Reset \"currently executing script\"\n    amdDefineDeps = null;\n    return instantiate.apply(this, arguments);\n  };\n\n  var getRegister = systemPrototype.getRegister;\n  systemPrototype.getRegister = function () {\n    if (tmpRegister)\n      return tmpRegister;\n\n    var _firstNamedDefine = firstNamedDefine;\n    firstNamedDefine = null;\n\n    var register = getRegister.call(this);\n    // if its an actual System.register leave it\n    if (register && register[1] === lastRegisterDeclare)\n      return register;\n\n    var _amdDefineDeps = amdDefineDeps;\n    amdDefineDeps = null;\n\n    // If the script registered a named module, return that module instead of re-instantiating it.\n    if (_firstNamedDefine)\n      return _firstNamedDefine;\n\n    // otherwise AMD takes priority\n    // no registration -> attempt AMD detection\n    if (!_amdDefineDeps)\n      return register || emptyInstantiation;\n\n    return createAMDRegister(_amdDefineDeps, amdDefineExec);\n  };\n  var amdDefineDeps, amdDefineExec;\n  global.define = function (name, deps, execute) {\n    var depsAndExec;\n    // define('', [], function () {})\n    if (typeof name === 'string') {\n      depsAndExec = getDepsAndExec(deps, execute);\n      if (amdDefineDeps) {\n        if (!System.registerRegistry) {\n          throw Error( errMsg(6, 'Include the named register extension for SystemJS named AMD support.'));\n        }\n        addToRegisterRegistry(name, createAMDRegister(depsAndExec[0], depsAndExec[1]));\n        amdDefineDeps = [];\n        amdDefineExec = emptyFn;\n        return;\n      }\n      else {\n        if (System.registerRegistry)\n          addToRegisterRegistry(name, createAMDRegister([].concat(depsAndExec[0]), depsAndExec[1]));\n        name = deps;\n        deps = execute;\n      }\n    }\n    depsAndExec = getDepsAndExec(name, deps);\n    amdDefineDeps = depsAndExec[0];\n    amdDefineExec = depsAndExec[1];\n  };\n  global.define.amd = {};\n\n  function getDepsAndExec(arg1, arg2) {\n    // define([], function () {})\n    if (arg1 instanceof Array) {\n      return [arg1, arg2];\n    }\n    // define({})\n    else if (typeof arg1 === 'object') {\n      return [[], function () { return arg1 }];\n    }\n    // define(function () {})\n    else if (typeof arg1 === 'function') {\n      return [requireExportsModule, arg1];\n    }\n  }\n\n  function addToRegisterRegistry(name, define) {\n    if (!firstNamedDefine) {\n      firstNamedDefine = define;\n      Promise.resolve().then(function () {\n        firstNamedDefine = null;\n      });\n    }\n\n    // We must call System.getRegister() here to give other extras, such as the named-exports extra,\n    // a chance to modify the define before it's put into the registerRegistry.\n    // See https://github.com/systemjs/systemjs/issues/2073\n    tmpRegister = define;\n    System.registerRegistry[name] = System.getRegister();\n    tmpRegister = null;\n  }\n})(typeof self !== 'undefined' ? self : global);}());"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "[2a04:4e42:4b::485]",
        "startedDateTime": "2023-04-10T17:57:16.778Z",
        "time": 0.5330000003596069,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.5010000004403992,
          "receive": 0.03199999991920777,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 653,
                "columnNumber": 20
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 633,
                "columnNumber": 11
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 671,
                "columnNumber": 25
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 707,
                "columnNumber": 29
              },
              {
                "functionName": "systemPrototype.instantiate",
                "scriptId": "1360",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js",
                "lineNumber": 84,
                "columnNumber": 23
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 282,
                "columnNumber": 20
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "getOrCreateLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 281,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 229,
                  "columnNumber": 17
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 228,
                    "columnNumber": 5
                  },
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 774,
                    "columnNumber": 18
                  },
                  {
                    "functionName": "",
                    "scriptId": "1365",
                    "url": "http://localhost:9000/",
                    "lineNumber": 81,
                    "columnNumber": 17
                  }
                ]
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "connection": "65187",
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "http://localhost:9000/mma-root-config.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "Host",
              "value": "localhost:9000"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"40226-xlxG2K5we7NSX/rgQrucDvA8Vgg\""
            },
            {
              "name": "Referer",
              "value": "http://localhost:9000/"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "no-cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-origin"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 632,
          "bodySize": 0
        },
        "response": {
          "status": 304,
          "statusText": "Not Modified",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Date",
              "value": "Mon, 10 Apr 2023 17:57:16 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"40226-xlxG2K5we7NSX/rgQrucDvA8Vgg\""
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 262694,
            "mimeType": "application/javascript",
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 235,
          "bodySize": 0,
          "_transferSize": 235,
          "_error": null
        },
        "serverIPAddress": "[::1]",
        "startedDateTime": "2023-04-10T17:57:16.800Z",
        "time": 10.041999999884865,
        "timings": {
          "blocked": 5.287000000107102,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.2550000000000001,
          "wait": 2.795999999532476,
          "receive": 1.704000000245287,
          "_blocked_queueing": 3.740000000107102
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 653,
                "columnNumber": 20
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 633,
                "columnNumber": 11
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 671,
                "columnNumber": 25
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 707,
                "columnNumber": 29
              },
              {
                "functionName": "systemPrototype.instantiate",
                "scriptId": "1360",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js",
                "lineNumber": 84,
                "columnNumber": 23
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 282,
                "columnNumber": 20
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "getOrCreateLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 281,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 338,
                  "columnNumber": 24
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 337,
                    "columnNumber": 9
                  },
                  {
                    "functionName": "",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 334,
                    "columnNumber": 42
                  }
                ],
                "parent": {
                  "description": "Promise.then",
                  "callFrames": [
                    {
                      "functionName": "getOrCreateLoad",
                      "scriptId": "1359",
                      "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                      "lineNumber": 333,
                      "columnNumber": 5
                    },
                    {
                      "functionName": "",
                      "scriptId": "1359",
                      "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                      "lineNumber": 229,
                      "columnNumber": 17
                    }
                  ],
                  "parent": {
                    "description": "Promise.then",
                    "callFrames": [
                      {
                        "functionName": "systemJSPrototype.import",
                        "scriptId": "1359",
                        "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                        "lineNumber": 228,
                        "columnNumber": 5
                      },
                      {
                        "functionName": "systemJSPrototype.import",
                        "scriptId": "1359",
                        "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                        "lineNumber": 774,
                        "columnNumber": 18
                      },
                      {
                        "functionName": "",
                        "scriptId": "1365",
                        "url": "http://localhost:9000/",
                        "lineNumber": 81,
                        "columnNumber": 17
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
          "httpVersion": "h3",
          "headers": [],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "h3",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "*"
            },
            {
              "name": "age",
              "value": "2253144"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000, s-maxage=31536000, immutable"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "content-length",
              "value": "6739"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "date",
              "value": "Mon, 10 Apr 2023 14:52:10 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"4fc6-mRlSM6aBLpNvAuv1hQj2EMUzY8E\""
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-cache",
              "value": "HIT, HIT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "x-jsd-version",
              "value": "5.9.0"
            },
            {
              "name": "x-jsd-version-type",
              "value": "version"
            },
            {
              "name": "x-served-by",
              "value": "cache-fra-eddf8230108-FRA, cache-lon420123-LON"
            }
          ],
          "cookies": [],
          "content": {
            "size": 20422,
            "mimeType": "application/javascript",
            "text": "/* single-spa@5.9.0 - SystemJS - prod */\nSystem.register([],(function(t){\"use strict\";return{execute:function(){t({addErrorHandler:c,checkActivityFunctions:bt,ensureJQuerySupport:lt,getAppNames:Ot,getAppStatus:Tt,getMountedApps:yt,mountRootParcel:W,navigateToUrl:et,pathToActiveWhen:Ut,registerApplication:Pt,removeErrorHandler:s,setBootstrapMaxTime:H,setMountMaxTime:J,setUnloadMaxTime:V,setUnmountMaxTime:Q,start:Bt,triggerAppChange:Lt,unloadApplication:Nt,unregisterApplication:At});var n=Object.freeze({__proto__:null,get start(){return Bt},get ensureJQuerySupport(){return lt},get setBootstrapMaxTime(){return H},get setMountMaxTime(){return J},get setUnmountMaxTime(){return Q},get setUnloadMaxTime(){return V},get registerApplication(){return Pt},get unregisterApplication(){return At},get getMountedApps(){return yt},get getAppStatus(){return Tt},get unloadApplication(){return Nt},get checkActivityFunctions(){return bt},get getAppNames(){return Ot},get pathToActiveWhen(){return Ut},get navigateToUrl(){return et},get triggerAppChange(){return Lt},get addErrorHandler(){return c},get removeErrorHandler(){return s},get mountRootParcel(){return W},get NOT_LOADED(){return p},get LOADING_SOURCE_CODE(){return h},get NOT_BOOTSTRAPPED(){return m},get BOOTSTRAPPING(){return d},get NOT_MOUNTED(){return v},get MOUNTING(){return w},get UPDATING(){return E},get LOAD_ERROR(){return O},get MOUNTED(){return g},get UNMOUNTING(){return y},get SKIP_BECAUSE_BROKEN(){return T}});function e(t){return(e=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}var o=(\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:{}).CustomEvent,i=function(){try{var t=new o(\"cat\",{detail:{foo:\"bar\"}});return\"cat\"===t.type&&\"bar\"===t.detail.foo}catch(t){}return!1}()?o:\"undefined\"!=typeof document&&\"function\"==typeof document.createEvent?function(t,n){var e=document.createEvent(\"CustomEvent\");return n?e.initCustomEvent(t,n.bubbles,n.cancelable,n.detail):e.initCustomEvent(t,!1,!1,void 0),e}:function(t,n){var e=document.createEventObject();return e.type=t,n?(e.bubbles=Boolean(n.bubbles),e.cancelable=Boolean(n.cancelable),e.detail=n.detail):(e.bubbles=!1,e.cancelable=!1,e.detail=void 0),e},u=[];function a(t,n,e){var r=l(t,n,e);u.length?u.forEach((function(t){return t(r)})):setTimeout((function(){throw r}))}function c(t){if(\"function\"!=typeof t)throw Error(f(28,!1));u.push(t)}function s(t){if(\"function\"!=typeof t)throw Error(f(29,!1));var n=!1;return u=u.filter((function(e){var r=e===t;return n=n||r,!r})),n}function f(t,n){for(var e=arguments.length,r=new Array(e>2?e-2:0),o=2;o<e;o++)r[o-2]=arguments[o];return\"single-spa minified message #\".concat(t,\": \").concat(n?n+\" \":\"\",\"See https://single-spa.js.org/error/?code=\").concat(t).concat(r.length?\"&arg=\".concat(r.join(\"&arg=\")):\"\")}function l(t,n,e){var r,o=\"\".concat(S(n),\" '\").concat(A(n),\"' died in status \").concat(n.status,\": \");if(t instanceof Error){try{t.message=o+t.message}catch(t){}r=t}else{console.warn(f(30,!1,n.status,A(n)));try{r=Error(o+JSON.stringify(t))}catch(n){r=t}}return r.appOrParcelName=A(n),n.status=e,r}var p=t(\"NOT_LOADED\",\"NOT_LOADED\"),h=t(\"LOADING_SOURCE_CODE\",\"LOADING_SOURCE_CODE\"),m=t(\"NOT_BOOTSTRAPPED\",\"NOT_BOOTSTRAPPED\"),d=t(\"BOOTSTRAPPING\",\"BOOTSTRAPPING\"),v=t(\"NOT_MOUNTED\",\"NOT_MOUNTED\"),w=t(\"MOUNTING\",\"MOUNTING\"),g=t(\"MOUNTED\",\"MOUNTED\"),E=t(\"UPDATING\",\"UPDATING\"),y=t(\"UNMOUNTING\",\"UNMOUNTING\"),O=t(\"LOAD_ERROR\",\"LOAD_ERROR\"),T=t(\"SKIP_BECAUSE_BROKEN\",\"SKIP_BECAUSE_BROKEN\");function P(t){return t.status===g}function b(t){try{return t.activeWhen(window.location)}catch(n){return a(n,t,T),!1}}function A(t){return t.name}function N(t){return Boolean(t.unmountThisParcel)}function S(t){return N(t)?\"parcel\":\"application\"}function _(){for(var t=arguments.length-1;t>0;t--)for(var n in arguments[t])\"__proto__\"!==n&&(arguments[t-1][n]=arguments[t][n]);return arguments[0]}function U(t,n){for(var e=0;e<t.length;e++)if(n(t[e]))return t[e];return null}function D(t){return t&&(\"function\"==typeof t||(n=t,Array.isArray(n)&&!U(n,(function(t){return\"function\"!=typeof t}))));var n}function M(t,n){var e=t[n]||[];0===(e=Array.isArray(e)?e:[e]).length&&(e=[function(){return Promise.resolve()}]);var r=S(t),o=A(t);return function(t){return e.reduce((function(e,i,u){return e.then((function(){var e=i(t);return j(e)?e:Promise.reject(f(15,!1,r,o,n,u))}))}),Promise.resolve())}}function j(t){return t&&\"function\"==typeof t.then&&\"function\"==typeof t.catch}function L(t,n){return Promise.resolve().then((function(){return t.status!==m?t:(t.status=d,t.bootstrap?q(t,\"bootstrap\").then(e).catch((function(e){if(n)throw l(e,t,T);return a(e,t,T),t})):Promise.resolve().then(e))}));function e(){return t.status=v,t}}function R(t,n){return Promise.resolve().then((function(){if(t.status!==g)return t;t.status=y;var e=Object.keys(t.parcels).map((function(n){return t.parcels[n].unmountThisParcel()}));return Promise.all(e).then(r,(function(e){return r().then((function(){var r=Error(e.message);if(n)throw l(r,t,T);a(r,t,T)}))})).then((function(){return t}));function r(){return q(t,\"unmount\").then((function(){t.status=v})).catch((function(e){if(n)throw l(e,t,T);a(e,t,T)}))}}))}var I=!1,x=!1;function B(t,n){return Promise.resolve().then((function(){return t.status!==v?t:(I||(window.dispatchEvent(new i(\"single-spa:before-first-mount\")),I=!0),q(t,\"mount\").then((function(){return t.status=g,x||(window.dispatchEvent(new i(\"single-spa:first-mount\")),x=!0),t})).catch((function(e){return t.status=g,R(t,!0).then(r,r);function r(){if(n)throw l(e,t,T);return a(e,t,T),t}})))}))}var G=0,C={parcels:{}};function W(){return $.apply(C,arguments)}function $(t,n){var r=this;if(!t||\"object\"!==e(t)&&\"function\"!=typeof t)throw Error(f(2,!1));if(t.name&&\"string\"!=typeof t.name)throw Error(f(3,!1,e(t.name)));if(\"object\"!==e(n))throw Error(f(4,!1,name,e(n)));if(!n.domElement)throw Error(f(5,!1,name));var o,i=G++,u=\"function\"==typeof t,a=u?t:function(){return Promise.resolve(t)},c={id:i,parcels:{},status:u?h:m,customProps:n,parentName:A(r),unmountThisParcel:function(){return y.then((function(){if(c.status!==g)throw Error(f(6,!1,name,c.status));return R(c,!0)})).then((function(t){return c.parentName&&delete r.parcels[c.id],t})).then((function(t){return p(t),t})).catch((function(t){throw c.status=T,d(t),t}))}};r.parcels[i]=c;var s=a();if(!s||\"function\"!=typeof s.then)throw Error(f(7,!1));var p,d,w=(s=s.then((function(t){if(!t)throw Error(f(8,!1));var n=t.name||\"parcel-\".concat(i);if(Object.prototype.hasOwnProperty.call(t,\"bootstrap\")&&!D(t.bootstrap))throw Error(f(9,!1,n));if(!D(t.mount))throw Error(f(10,!1,n));if(!D(t.unmount))throw Error(f(11,!1,n));if(t.update&&!D(t.update))throw Error(f(12,!1,n));var e=M(t,\"bootstrap\"),r=M(t,\"mount\"),u=M(t,\"unmount\");c.status=m,c.name=n,c.bootstrap=e,c.mount=r,c.unmount=u,c.timeouts=z(t.timeouts),t.update&&(c.update=M(t,\"update\"),o.update=function(t){return c.customProps=t,k(function(t){return Promise.resolve().then((function(){if(t.status!==g)throw Error(f(32,!1,A(t)));return t.status=E,q(t,\"update\").then((function(){return t.status=g,t})).catch((function(n){throw l(n,t,T)}))}))}(c))})}))).then((function(){return L(c,!0)})),y=w.then((function(){return B(c,!0)})),O=new Promise((function(t,n){p=t,d=n}));return o={mount:function(){return k(Promise.resolve().then((function(){if(c.status!==v)throw Error(f(13,!1,name,c.status));return r.parcels[i]=c,B(c)})))},unmount:function(){return k(c.unmountThisParcel())},getStatus:function(){return c.status},loadPromise:k(s),bootstrapPromise:k(w),mountPromise:k(y),unmountPromise:k(O)}}function k(t){return t.then((function(){return null}))}function K(t){var r=A(t),o=\"function\"==typeof t.customProps?t.customProps(r,window.location):t.customProps;(\"object\"!==e(o)||null===o||Array.isArray(o))&&(o={},console.warn(f(40,!1),r,o));var i=_({},o,{name:r,mountParcel:$.bind(t),singleSpa:n});return N(t)&&(i.unmountSelf=t.unmountThisParcel),i}var F={bootstrap:{millis:4e3,dieOnTimeout:!1,warningMillis:1e3},mount:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3},unmount:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3},unload:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3},update:{millis:3e3,dieOnTimeout:!1,warningMillis:1e3}};function H(t,n,e){if(\"number\"!=typeof t||t<=0)throw Error(f(16,!1));F.bootstrap={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function J(t,n,e){if(\"number\"!=typeof t||t<=0)throw Error(f(17,!1));F.mount={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function Q(t,n,e){if(\"number\"!=typeof t||t<=0)throw Error(f(18,!1));F.unmount={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function V(t,n,e){if(\"number\"!=typeof t||t<=0)throw Error(f(19,!1));F.unload={millis:t,dieOnTimeout:n,warningMillis:e||1e3}}function q(t,n){var e=t.timeouts[n],r=e.warningMillis,o=S(t);return new Promise((function(i,u){var a=!1,c=!1;t[n](K(t)).then((function(t){a=!0,i(t)})).catch((function(t){a=!0,u(t)})),setTimeout((function(){return l(1)}),r),setTimeout((function(){return l(!0)}),e.millis);var s=f(31,!1,n,o,A(t),e.millis);function l(t){if(!a)if(!0===t)c=!0,e.dieOnTimeout?u(Error(s)):console.error(s);else if(!c){var n=t,o=n*r;console.warn(s),o+r<e.millis&&setTimeout((function(){return l(n+1)}),r)}}}))}function z(t){var n={};for(var e in F)n[e]=_({},F[e],t&&t[e]||{});return n}function X(t){return Promise.resolve().then((function(){return t.loadPromise?t.loadPromise:t.status!==p&&t.status!==O?t:(t.status=h,t.loadPromise=Promise.resolve().then((function(){var o=t.loadApp(K(t));if(!j(o))throw r=!0,Error(f(33,!1,A(t)));return o.then((function(r){var o;t.loadErrorTime=null,\"object\"!==e(n=r)&&(o=34),Object.prototype.hasOwnProperty.call(n,\"bootstrap\")&&!D(n.bootstrap)&&(o=35),D(n.mount)||(o=36),D(n.unmount)||(o=37);var i=S(n);if(o){var u;try{u=JSON.stringify(n)}catch(t){}return console.error(f(o,!1,i,A(t),u),n),a(void 0,t,T),t}return n.devtools&&n.devtools.overlays&&(t.devtools.overlays=_({},t.devtools.overlays,n.devtools.overlays)),t.status=m,t.bootstrap=M(n,\"bootstrap\"),t.mount=M(n,\"mount\"),t.unmount=M(n,\"unmount\"),t.unload=M(n,\"unload\"),t.timeouts=z(n.timeouts),delete t.loadPromise,t}))})).catch((function(n){var e;return delete t.loadPromise,r?e=T:(e=O,t.loadErrorTime=(new Date).getTime()),a(n,t,e),t})));var n,r}))}var Y,Z=\"undefined\"!=typeof window,tt={hashchange:[],popstate:[]},nt=[\"hashchange\",\"popstate\"];function et(t){var n;if(\"string\"==typeof t)n=t;else if(this&&this.href)n=this.href;else{if(!(t&&t.currentTarget&&t.currentTarget.href&&t.preventDefault))throw Error(f(14,!1));n=t.currentTarget.href,t.preventDefault()}var e=st(window.location.href),r=st(n);0===n.indexOf(\"#\")?window.location.hash=r.hash:e.host!==r.host&&r.host?window.location.href=n:r.pathname===e.pathname&&r.search===e.search?window.location.hash=r.hash:window.history.pushState(null,null,n)}function rt(t){var n=this;if(t){var e=t[0].type;nt.indexOf(e)>=0&&tt[e].forEach((function(e){try{e.apply(n,t)}catch(t){setTimeout((function(){throw t}))}}))}}function ot(){Rt([],arguments)}function it(t,n){return function(){var e=window.location.href,r=t.apply(this,arguments),o=window.location.href;return Y&&e===o||(Gt()?window.dispatchEvent(ut(window.history.state,n)):Rt([])),r}}function ut(t,n){var e;try{e=new PopStateEvent(\"popstate\",{state:t})}catch(n){(e=document.createEvent(\"PopStateEvent\")).initPopStateEvent(\"popstate\",!1,!1,t)}return e.singleSpa=!0,e.singleSpaTrigger=n,e}if(Z){window.addEventListener(\"hashchange\",ot),window.addEventListener(\"popstate\",ot);var at=window.addEventListener,ct=window.removeEventListener;window.addEventListener=function(t,n){if(!(\"function\"==typeof n&&nt.indexOf(t)>=0)||U(tt[t],(function(t){return t===n})))return at.apply(this,arguments);tt[t].push(n)},window.removeEventListener=function(t,n){if(!(\"function\"==typeof n&&nt.indexOf(t)>=0))return ct.apply(this,arguments);tt[t]=tt[t].filter((function(t){return t!==n}))},window.history.pushState=it(window.history.pushState,\"pushState\"),window.history.replaceState=it(window.history.replaceState,\"replaceState\"),window.singleSpaNavigate?console.warn(f(41,!1)):window.singleSpaNavigate=et}function st(t){var n=document.createElement(\"a\");return n.href=t,n}var ft=!1;function lt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.jQuery;if(t||window.$&&window.$.fn&&window.$.fn.jquery&&(t=window.$),t&&!ft){var n=t.fn.on,e=t.fn.off;t.fn.on=function(t,e){return pt.call(this,n,window.addEventListener,t,e,arguments)},t.fn.off=function(t,n){return pt.call(this,e,window.removeEventListener,t,n,arguments)},ft=!0}}function pt(t,n,e,r,o){return\"string\"!=typeof e?t.apply(this,o):(e.split(/\\s+/).forEach((function(t){nt.indexOf(t)>=0&&(n(t,r),e=e.replace(t,\"\"))})),\"\"===e.trim()?this:t.apply(this,o))}var ht={};function mt(t){return Promise.resolve().then((function(){var n=ht[A(t)];return n?t.status===p?(dt(t,n),t):\"UNLOADING\"===t.status?n.promise.then((function(){return t})):t.status!==v?t:(t.status=\"UNLOADING\",q(t,\"unload\").then((function(){return dt(t,n),t})).catch((function(e){return function(t,n,e){delete ht[A(t)],delete t.bootstrap,delete t.mount,delete t.unmount,delete t.unload,a(e,t,T),n.reject(e)}(t,n,e),t}))):t}))}function dt(t,n){delete ht[A(t)],delete t.bootstrap,delete t.mount,delete t.unmount,delete t.unload,t.status=p,n.resolve()}function vt(t,n,e,r){ht[A(t)]={app:t,resolve:e,reject:r},Object.defineProperty(ht[A(t)],\"promise\",{get:n})}function wt(t){return ht[t]}var gt=[];function Et(){var t=[],n=[],e=[],r=[],o=(new Date).getTime();return gt.forEach((function(i){var u=i.status!==T&&b(i);switch(i.status){case O:u&&o-i.loadErrorTime>=200&&e.push(i);break;case p:case h:u&&e.push(i);break;case m:case v:!u&&wt(A(i))?t.push(i):u&&r.push(i);break;case g:u||n.push(i)}})),{appsToUnload:t,appsToUnmount:n,appsToLoad:e,appsToMount:r}}function yt(){return gt.filter(P).map(A)}function Ot(){return gt.map(A)}function Tt(t){var n=U(gt,(function(n){return A(n)===t}));return n?n.status:null}function Pt(t,n,r,o){var i=function(t,n,r,o){var i,u={name:null,loadApp:null,activeWhen:null,customProps:null};return\"object\"===e(t)?(function(t){if(Array.isArray(t)||null===t)throw Error(f(39,!1));var n=[\"name\",\"app\",\"activeWhen\",\"customProps\"],r=Object.keys(t).reduce((function(t,e){return n.indexOf(e)>=0?t:t.concat(e)}),[]);if(0!==r.length)throw Error(f(38,!1,n.join(\", \"),r.join(\", \")));if(\"string\"!=typeof t.name||0===t.name.length)throw Error(f(20,!1));if(\"object\"!==e(t.app)&&\"function\"!=typeof t.app)throw Error(f(20,!1));var o=function(t){return\"string\"==typeof t||\"function\"==typeof t};if(!(o(t.activeWhen)||Array.isArray(t.activeWhen)&&t.activeWhen.every(o)))throw Error(f(24,!1));if(!_t(t.customProps))throw Error(f(22,!1))}(t),u.name=t.name,u.loadApp=t.app,u.activeWhen=t.activeWhen,u.customProps=t.customProps):(function(t,n,e,r){if(\"string\"!=typeof t||0===t.length)throw Error(f(20,!1));if(!n)throw Error(f(23,!1));if(\"function\"!=typeof e)throw Error(f(24,!1));if(!_t(r))throw Error(f(22,!1))}(t,n,r,o),u.name=t,u.loadApp=n,u.activeWhen=r,u.customProps=o),u.loadApp=\"function\"!=typeof(i=u.loadApp)?function(){return Promise.resolve(i)}:i,u.customProps=function(t){return t||{}}(u.customProps),u.activeWhen=function(t){var n=Array.isArray(t)?t:[t];return n=n.map((function(t){return\"function\"==typeof t?t:Ut(t)})),function(t){return n.some((function(n){return n(t)}))}}(u.activeWhen),u}(t,n,r,o);if(-1!==Ot().indexOf(i.name))throw Error(f(21,!1,i.name));gt.push(_({loadErrorTime:null,status:p,parcels:{},devtools:{overlays:{options:{},selectors:[]}}},i)),Z&&(lt(),Rt())}function bt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:window.location;return gt.filter((function(n){return n.activeWhen(t)})).map(A)}function At(t){if(0===gt.filter((function(n){return A(n)===t})).length)throw Error(f(25,!1,t));return Nt(t).then((function(){var n=gt.map(A).indexOf(t);gt.splice(n,1)}))}function Nt(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{waitForUnmount:!1};if(\"string\"!=typeof t)throw Error(f(26,!1));var e=U(gt,(function(n){return A(n)===t}));if(!e)throw Error(f(27,!1,t));var r,o=wt(A(e));if(n&&n.waitForUnmount){if(o)return o.promise;var i=new Promise((function(t,n){vt(e,(function(){return i}),t,n)}));return i}return o?(r=o.promise,St(e,o.resolve,o.reject)):r=new Promise((function(t,n){vt(e,(function(){return r}),t,n),St(e,t,n)})),r}function St(t,n,e){R(t).then(mt).then((function(){n(),setTimeout((function(){Rt()}))})).catch(e)}function _t(t){return!t||\"function\"==typeof t||\"object\"===e(t)&&null!==t&&!Array.isArray(t)}function Ut(t,n){var e=function(t,n){var e=0,r=!1,o=\"^\";\"/\"!==t[0]&&(t=\"/\"+t);for(var i=0;i<t.length;i++){var u=t[i];(!r&&\":\"===u||r&&\"/\"===u)&&a(i)}return a(t.length),new RegExp(o,\"i\");function a(i){var u=t.slice(e,i).replace(/[|\\\\{}()[\\]^$+*?.]/g,\"\\\\$&\");if(o+=r?\"[^/]+/?\":u,i===t.length)if(r)n&&(o+=\"$\");else{var a=n?\"\":\".*\";o=\"/\"===o.charAt(o.length-1)?\"\".concat(o).concat(a,\"$\"):\"\".concat(o,\"(/\").concat(a,\")?(#.*)?$\")}r=!r,e=i}}(t,n);return function(t){var n=t.href.replace(t.origin,\"\").replace(t.search,\"\").split(\"?\")[0];return e.test(n)}}var Dt=!1,Mt=[],jt=Z&&window.location.href;function Lt(){return Rt()}function Rt(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments.length>1?arguments[1]:void 0;if(Dt)return new Promise((function(t,e){Mt.push({resolve:t,reject:e,eventArguments:n})}));var e,o=Et(),u=o.appsToUnload,a=o.appsToUnmount,c=o.appsToLoad,s=o.appsToMount,f=!1,l=jt,h=jt=window.location.href;return Gt()?(Dt=!0,e=u.concat(c,a,s),w()):(e=c,d());function m(){f=!0}function d(){return Promise.resolve().then((function(){var t=c.map(X);return Promise.all(t).then(y).then((function(){return[]})).catch((function(t){throw y(),t}))}))}function w(){return Promise.resolve().then((function(){if(window.dispatchEvent(new i(0===e.length?\"single-spa:before-no-app-change\":\"single-spa:before-app-change\",O(!0))),window.dispatchEvent(new i(\"single-spa:before-routing-event\",O(!0,{cancelNavigation:m}))),f)return window.dispatchEvent(new i(\"single-spa:before-mount-routing-event\",O(!0))),E(),void et(l);var n=u.map(mt),r=a.map(R).map((function(t){return t.then(mt)})).concat(n),o=Promise.all(r);o.then((function(){window.dispatchEvent(new i(\"single-spa:before-mount-routing-event\",O(!0)))}));var p=c.map((function(t){return X(t).then((function(t){return It(t,o)}))})),h=s.filter((function(t){return c.indexOf(t)<0})).map((function(t){return It(t,o)}));return o.catch((function(t){throw y(),t})).then((function(){return y(),Promise.all(p.concat(h)).catch((function(n){throw t.forEach((function(t){return t.reject(n)})),n})).then(E)}))}))}function E(){var n=yt();t.forEach((function(t){return t.resolve(n)}));try{var r=0===e.length?\"single-spa:no-app-change\":\"single-spa:app-change\";window.dispatchEvent(new i(r,O())),window.dispatchEvent(new i(\"single-spa:routing-event\",O()))}catch(t){setTimeout((function(){throw t}))}if(Dt=!1,Mt.length>0){var o=Mt;Mt=[],Rt(o)}return n}function y(){t.forEach((function(t){rt(t.eventArguments)})),rt(n)}function O(){var t,o=arguments.length>0&&void 0!==arguments[0]&&arguments[0],i=arguments.length>1?arguments[1]:void 0,m={},d=(r(t={},g,[]),r(t,v,[]),r(t,p,[]),r(t,T,[]),t);o?(c.concat(s).forEach((function(t,n){E(t,g)})),u.forEach((function(t){E(t,p)})),a.forEach((function(t){E(t,v)}))):e.forEach((function(t){E(t)}));var w={detail:{newAppStatuses:m,appsByNewStatus:d,totalAppChanges:e.length,originalEvent:null==n?void 0:n[0],oldUrl:l,newUrl:h,navigationIsCanceled:f}};return i&&_(w.detail,i),w;function E(t,n){var e=A(t);n=n||Tt(e),m[e]=n,(d[n]=d[n]||[]).push(e)}}}function It(t,n){return b(t)?L(t).then((function(t){return n.then((function(){return b(t)?B(t):t}))})):n.then((function(){return t}))}var xt=!1;function Bt(t){var n;xt=!0,t&&t.urlRerouteOnly&&(n=t.urlRerouteOnly,Y=n),Z&&Rt()}function Gt(){return xt}Z&&setTimeout((function(){xt||console.warn(f(1,!1))}),5e3);var Ct={getRawAppData:function(){return[].concat(gt)},reroute:Rt,NOT_LOADED:p,toLoadPromise:X,toBootstrapPromise:L,unregisterApplication:At};Z&&window.__SINGLE_SPA_DEVTOOLS__&&(window.__SINGLE_SPA_DEVTOOLS__.exposedMethods=Ct)}}}));\n//# sourceMappingURL=single-spa.min.js.map\n"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "[2a04:4e42:4b::485]",
        "startedDateTime": "2023-04-10T17:57:16.901Z",
        "time": 2.6840000009542564,
        "timings": {
          "blocked": 1.6559999995983672,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 0.4930000003192108,
          "receive": 0.5350000010366784,
          "_blocked_queueing": 1.5999999995983671
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 653,
                "columnNumber": 20
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 633,
                "columnNumber": 11
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 671,
                "columnNumber": 25
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 707,
                "columnNumber": 29
              },
              {
                "functionName": "systemPrototype.instantiate",
                "scriptId": "1360",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js",
                "lineNumber": 84,
                "columnNumber": 23
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 282,
                "columnNumber": 20
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "getOrCreateLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 281,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 229,
                  "columnNumber": 17
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 228,
                    "columnNumber": 5
                  },
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 774,
                    "columnNumber": 18
                  },
                  {
                    "functionName": "app",
                    "scriptId": "1368",
                    "url": "http://localhost:9000/mma-root-config.js",
                    "lineNumber": 29,
                    "columnNumber": 27
                  },
                  {
                    "functionName": "",
                    "scriptId": "1372",
                    "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                    "lineNumber": 1,
                    "columnNumber": 9744
                  }
                ],
                "parent": {
                  "description": "Promise.then",
                  "callFrames": [
                    {
                      "functionName": "",
                      "scriptId": "1372",
                      "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                      "lineNumber": 1,
                      "columnNumber": 9719
                    }
                  ],
                  "parent": {
                    "description": "Promise.then",
                    "callFrames": [
                      {
                        "functionName": "X",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 9594
                      },
                      {
                        "functionName": "",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 17833
                      }
                    ],
                    "parent": {
                      "description": "Promise.then",
                      "callFrames": [
                        {
                          "functionName": "d",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 17808
                        },
                        {
                          "functionName": "Rt",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 17747
                        },
                        {
                          "functionName": "Pt",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 15763
                        },
                        {
                          "functionName": "./src/mma-root-config.ts",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 26,
                          "columnNumber": 63
                        },
                        {
                          "functionName": "__webpack_require__",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 3577,
                          "columnNumber": 32
                        },
                        {
                          "functionName": "",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 4628,
                          "columnNumber": 36
                        },
                        {
                          "functionName": "execute",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 4631,
                          "columnNumber": 11
                        },
                        {
                          "functionName": "doExec",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 468,
                          "columnNumber": 33
                        },
                        {
                          "functionName": "postOrderExec",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 464,
                          "columnNumber": 11
                        },
                        {
                          "functionName": "",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 421,
                          "columnNumber": 13
                        }
                      ],
                      "parent": {
                        "description": "Promise.then",
                        "callFrames": [
                          {
                            "functionName": "topLevelLoad",
                            "scriptId": "1359",
                            "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                            "lineNumber": 420,
                            "columnNumber": 5
                          },
                          {
                            "functionName": "",
                            "scriptId": "1359",
                            "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                            "lineNumber": 230,
                            "columnNumber": 23
                          }
                        ],
                        "parent": {
                          "description": "Promise.then",
                          "callFrames": [
                            {
                              "functionName": "systemJSPrototype.import",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 228,
                              "columnNumber": 5
                            },
                            {
                              "functionName": "systemJSPrototype.import",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 774,
                              "columnNumber": 18
                            },
                            {
                              "functionName": "",
                              "scriptId": "1365",
                              "url": "http://localhost:9000/",
                              "lineNumber": 81,
                              "columnNumber": 17
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "connection": "65362",
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "http://localhost:9001/mma-app1.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "Host",
              "value": "localhost:9001"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"a9d11-4omMW2QHZ1En9tBIK2CeVnyfUG4\""
            },
            {
              "name": "Origin",
              "value": "http://localhost:9000"
            },
            {
              "name": "Referer",
              "value": "http://localhost:9000/"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 651,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "Date",
              "value": "Mon, 10 Apr 2023 17:57:16 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"a9d11-4omMW2QHZ1En9tBIK2CeVnyfUG4\""
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 695569,
            "mimeType": "application/javascript",
            "compression": 695612,
            "text": "U3lzdGVtLnJlZ2lzdGVyKFsicmVhY3QiLCJyZWFjdC1kb20iLCJAbW1hL3V0aWxzMSIsIkBtbWEvdXRpbHMyIl0sIGZ1bmN0aW9uKF9fV0VCUEFDS19EWU5BTUlDX0VYUE9SVF9fLCBfX3N5c3RlbV9jb250ZXh0X18pIHsKCXZhciBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3JlYWN0X18gPSB7fTsKCXZhciBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3JlYWN0X2RvbV9fID0ge307Cgl2YXIgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fbW1hX3V0aWxzMV9fID0ge307Cgl2YXIgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fbW1hX3V0aWxzMl9fID0ge307CglPYmplY3QuZGVmaW5lUHJvcGVydHkoX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9fLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7CglPYmplY3QuZGVmaW5lUHJvcGVydHkoX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9kb21fXywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwoJT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX21tYV91dGlsczFfXywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwoJT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfX21tYV91dGlsczJfXywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwoJcmV0dXJuIHsKCQlzZXR0ZXJzOiBbCgkJCWZ1bmN0aW9uKG1vZHVsZSkgewoJCQkJT2JqZWN0LmtleXMobW9kdWxlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgewoJCQkJCV9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcmVhY3RfX1trZXldID0gbW9kdWxlW2tleV07CgkJCQl9KTsKCQkJfSwKCQkJZnVuY3Rpb24obW9kdWxlKSB7CgkJCQlPYmplY3Qua2V5cyhtb2R1bGUpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7CgkJCQkJX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9kb21fX1trZXldID0gbW9kdWxlW2tleV07CgkJCQl9KTsKCQkJfSwKCQkJZnVuY3Rpb24obW9kdWxlKSB7CgkJCQlPYmplY3Qua2V5cyhtb2R1bGUpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7CgkJCQkJX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fbW1hX3V0aWxzMV9fW2tleV0gPSBtb2R1bGVba2V5XTsKCQkJCX0pOwoJCQl9LAoJCQlmdW5jdGlvbihtb2R1bGUpIHsKCQkJCU9iamVjdC5rZXlzKG1vZHVsZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHsKCQkJCQlfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX19tbWFfdXRpbHMyX19ba2V5XSA9IG1vZHVsZVtrZXldOwoJCQkJfSk7CgkJCX0KCQldLAoJCWV4ZWN1dGU6IGZ1bmN0aW9uKCkgewoJCQlfX1dFQlBBQ0tfRFlOQU1JQ19FWFBPUlRfXygKLyoqKioqKi8gKCgpID0+IHsgLy8gd2VicGFja0Jvb3RzdHJhcAovKioqKioqLyAJdmFyIF9fd2VicGFja19tb2R1bGVzX18gPSAoewoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vbGliL3J1bnRpbWUvUmVmcmVzaFV0aWxzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9saWIvcnVudGltZS9SZWZyZXNoVXRpbHMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgovKiBnbG9iYWwgX193ZWJwYWNrX3JlcXVpcmVfXyAqLwp2YXIgUmVmcmVzaCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0LXJlZnJlc2gvcnVudGltZSAqLyAiLi4vLi4vLnlhcm4vY2FjaGUvcmVhY3QtcmVmcmVzaC1ucG0tMC4xNC4wLTc4ZWY1ZWViNzMtZGM2OWZhOGM5OS56aXAvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZnJlc2gvcnVudGltZS5qcyIpOwoKLyoqCiAqIEV4dHJhY3RzIGV4cG9ydHMgZnJvbSBhIHdlYnBhY2sgbW9kdWxlIG9iamVjdC4KICogQHBhcmFtIHtzdHJpbmd9IG1vZHVsZUlkIEEgV2VicGFjayBtb2R1bGUgSUQuCiAqIEByZXR1cm5zIHsqfSBBbiBleHBvcnRzIG9iamVjdCBmcm9tIHRoZSBtb2R1bGUuCiAqLwpmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKG1vZHVsZUlkKSB7CiAgaWYgKHR5cGVvZiBtb2R1bGVJZCA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgIC8vIGBtb2R1bGVJZGAgaXMgdW5hdmFpbGFibGUsIHdoaWNoIGluZGljYXRlcyB0aGF0IHRoaXMgbW9kdWxlIGlzIG5vdCBpbiB0aGUgY2FjaGUsCiAgICAvLyB3aGljaCBtZWFucyB3ZSB3b24ndCBiZSBhYmxlIHRvIGNhcHR1cmUgYW55IGV4cG9ydHMsCiAgICAvLyBhbmQgdGh1cyB0aGV5IGNhbm5vdCBiZSByZWZyZXNoZWQgc2FmZWx5LgogICAgLy8gVGhlc2UgYXJlIGxpa2VseSBydW50aW1lIG9yIGR5bmFtaWNhbGx5IGdlbmVyYXRlZCBtb2R1bGVzLgogICAgcmV0dXJuIHt9OwogIH0KCiAgdmFyIG1heWJlTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXTsKICBpZiAodHlwZW9mIG1heWJlTW9kdWxlID09PSAndW5kZWZpbmVkJykgewogICAgLy8gYG1vZHVsZUlkYCBpcyBhdmFpbGFibGUgYnV0IHRoZSBtb2R1bGUgaW4gY2FjaGUgaXMgdW5hdmFpbGFibGUsCiAgICAvLyB3aGljaCBpbmRpY2F0ZXMgdGhlIG1vZHVsZSBpcyBzb21laG93IGNvcnJ1cHRlZCAoZS5nLiBicm9rZW4gV2VicGFjYWsgYG1vZHVsZWAgZ2xvYmFscykuCiAgICAvLyBXZSB3aWxsIHdhcm4gdGhlIHVzZXIgKGFzIHRoaXMgaXMgbGlrZWx5IGEgbWlzdGFrZSkgYW5kIGFzc3VtZSB0aGV5IGNhbm5vdCBiZSByZWZyZXNoZWQuCiAgICBjb25zb2xlLndhcm4oJ1tSZWFjdCBSZWZyZXNoXSBGYWlsZWQgdG8gZ2V0IGV4cG9ydHMgZm9yIG1vZHVsZTogJyArIG1vZHVsZUlkICsgJy4nKTsKICAgIHJldHVybiB7fTsKICB9CgogIHZhciBleHBvcnRzT3JQcm9taXNlID0gbWF5YmVNb2R1bGUuZXhwb3J0czsKICBpZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGV4cG9ydHNPclByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7CiAgICByZXR1cm4gZXhwb3J0c09yUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChleHBvcnRzKSB7CiAgICAgIHJldHVybiBleHBvcnRzOwogICAgfSk7CiAgfQogIHJldHVybiBleHBvcnRzT3JQcm9taXNlOwp9CgovKioKICogQ2FsY3VsYXRlcyB0aGUgc2lnbmF0dXJlIG9mIGEgUmVhY3QgcmVmcmVzaCBib3VuZGFyeS4KICogSWYgdGhpcyBzaWduYXR1cmUgY2hhbmdlcywgaXQncyB1bnNhZmUgdG8gYWNjZXB0IHRoZSBib3VuZGFyeS4KICoKICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB0aGUgb25lIGluIFtNZXRyb10oaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL21ldHJvL2Jsb2IvOTA3ZDZhZjIyYWM2ZWJlNTg1NzJiZTQxOGU5MjUzYTkwNjY1ZWNiZC9wYWNrYWdlcy9tZXRyby9zcmMvbGliL3BvbHlmaWxscy9yZXF1aXJlLmpzI0w3OTUtTDgxNikuCiAqIEBwYXJhbSB7Kn0gbW9kdWxlRXhwb3J0cyBBIFdlYnBhY2sgbW9kdWxlIGV4cG9ydHMgb2JqZWN0LgogKiBAcmV0dXJucyB7c3RyaW5nW119IEEgUmVhY3QgcmVmcmVzaCBib3VuZGFyeSBzaWduYXR1cmUgYXJyYXkuCiAqLwpmdW5jdGlvbiBnZXRSZWFjdFJlZnJlc2hCb3VuZGFyeVNpZ25hdHVyZShtb2R1bGVFeHBvcnRzKSB7CiAgdmFyIHNpZ25hdHVyZSA9IFtdOwogIHNpZ25hdHVyZS5wdXNoKFJlZnJlc2guZ2V0RmFtaWx5QnlUeXBlKG1vZHVsZUV4cG9ydHMpKTsKCiAgaWYgKG1vZHVsZUV4cG9ydHMgPT0gbnVsbCB8fCB0eXBlb2YgbW9kdWxlRXhwb3J0cyAhPT0gJ29iamVjdCcpIHsKICAgIC8vIEV4aXQgaWYgd2UgY2FuJ3QgaXRlcmF0ZSBvdmVyIGV4cG9ydHMuCiAgICByZXR1cm4gc2lnbmF0dXJlOwogIH0KCiAgZm9yICh2YXIga2V5IGluIG1vZHVsZUV4cG9ydHMpIHsKICAgIGlmIChrZXkgPT09ICdfX2VzTW9kdWxlJykgewogICAgICBjb250aW51ZTsKICAgIH0KCiAgICBzaWduYXR1cmUucHVzaChrZXkpOwogICAgc2lnbmF0dXJlLnB1c2goUmVmcmVzaC5nZXRGYW1pbHlCeVR5cGUobW9kdWxlRXhwb3J0c1trZXldKSk7CiAgfQoKICByZXR1cm4gc2lnbmF0dXJlOwp9CgovKioKICogQ3JlYXRlcyBhIGhlbHBlciB0aGF0IHBlcmZvcm1zIGEgZGVsYXllZCBSZWFjdCByZWZyZXNoLgogKiBAcmV0dXJucyB7ZnVuY3Rpb24oZnVuY3Rpb24oKTogdm9pZCk6IHZvaWR9IEEgZGVib3VuY2VkIFJlYWN0IHJlZnJlc2ggZnVuY3Rpb24uCiAqLwpmdW5jdGlvbiBjcmVhdGVEZWJvdW5jZVVwZGF0ZSgpIHsKICAvKioKICAgKiBBIGNhY2hlZCBzZXRUaW1lb3V0IGhhbmRsZXIuCiAgICogQHR5cGUge251bWJlciB8IHVuZGVmaW5lZH0KICAgKi8KICB2YXIgcmVmcmVzaFRpbWVvdXQ7CgogIC8qKgogICAqIFBlcmZvcm1zIHJlYWN0IHJlZnJlc2ggb24gYSBkZWxheSBhbmQgY2xlYXJzIHRoZSBlcnJvciBvdmVybGF5LgogICAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogdm9pZH0gY2FsbGJhY2sKICAgKiBAcmV0dXJucyB7dm9pZH0KICAgKi8KICBmdW5jdGlvbiBlbnF1ZXVlVXBkYXRlKGNhbGxiYWNrKSB7CiAgICBpZiAodHlwZW9mIHJlZnJlc2hUaW1lb3V0ID09PSAndW5kZWZpbmVkJykgewogICAgICByZWZyZXNoVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIHJlZnJlc2hUaW1lb3V0ID0gdW5kZWZpbmVkOwogICAgICAgIFJlZnJlc2gucGVyZm9ybVJlYWN0UmVmcmVzaCgpOwogICAgICAgIGNhbGxiYWNrKCk7CiAgICAgIH0sIDMwKTsKICAgIH0KICB9CgogIHJldHVybiBlbnF1ZXVlVXBkYXRlOwp9CgovKioKICogQ2hlY2tzIGlmIGFsbCBleHBvcnRzIGFyZSBsaWtlbHkgYSBSZWFjdCBjb21wb25lbnQuCiAqCiAqIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gdGhlIG9uZSBpbiBbTWV0cm9dKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9tZXRyby9ibG9iL2ZlYmRiYTIzODMxMTNjODgyOTZjNjFlMjhlNGVmNmE3ZjQ5MzlmZGEvcGFja2FnZXMvbWV0cm8vc3JjL2xpYi9wb2x5ZmlsbHMvcmVxdWlyZS5qcyNMNzQ4LUw3NzQpLgogKiBAcGFyYW0geyp9IG1vZHVsZUV4cG9ydHMgQSBXZWJwYWNrIG1vZHVsZSBleHBvcnRzIG9iamVjdC4KICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIGV4cG9ydHMgYXJlIFJlYWN0IGNvbXBvbmVudCBsaWtlLgogKi8KZnVuY3Rpb24gaXNSZWFjdFJlZnJlc2hCb3VuZGFyeShtb2R1bGVFeHBvcnRzKSB7CiAgaWYgKFJlZnJlc2guaXNMaWtlbHlDb21wb25lbnRUeXBlKG1vZHVsZUV4cG9ydHMpKSB7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgaWYgKG1vZHVsZUV4cG9ydHMgPT09IHVuZGVmaW5lZCB8fCBtb2R1bGVFeHBvcnRzID09PSBudWxsIHx8IHR5cGVvZiBtb2R1bGVFeHBvcnRzICE9PSAnb2JqZWN0JykgewogICAgLy8gRXhpdCBpZiB3ZSBjYW4ndCBpdGVyYXRlIG92ZXIgZXhwb3J0cy4KICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZhciBoYXNFeHBvcnRzID0gZmFsc2U7CiAgdmFyIGFyZUFsbEV4cG9ydHNDb21wb25lbnRzID0gdHJ1ZTsKICBmb3IgKHZhciBrZXkgaW4gbW9kdWxlRXhwb3J0cykgewogICAgaGFzRXhwb3J0cyA9IHRydWU7CgogICAgLy8gVGhpcyBpcyB0aGUgRVMgTW9kdWxlIGluZGljYXRvciBmbGFnCiAgICBpZiAoa2V5ID09PSAnX19lc01vZHVsZScpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgLy8gV2UgY2FuIChhbmQgaGF2ZSB0bykgc2FmZWx5IGV4ZWN1dGUgZ2V0dGVycyBoZXJlLAogICAgLy8gYXMgV2VicGFjayBtYW51YWxseSBhc3NpZ25zIGhhcm1vbnkgZXhwb3J0cyB0byBnZXR0ZXJzLAogICAgLy8gd2l0aG91dCBhbnkgc2lkZS1lZmZlY3RzIGF0dGFjaGVkLgogICAgLy8gUmVmOiBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrL2Jsb2IvYjkzMDQ4NjQzZmU3NGRlMmE2OTMxNzU1OTExZGExMjEyZGY1NTg5Ny9saWIvTWFpblRlbXBsYXRlLmpzI0wyODEKICAgIHZhciBleHBvcnRWYWx1ZSA9IG1vZHVsZUV4cG9ydHNba2V5XTsKICAgIGlmICghUmVmcmVzaC5pc0xpa2VseUNvbXBvbmVudFR5cGUoZXhwb3J0VmFsdWUpKSB7CiAgICAgIGFyZUFsbEV4cG9ydHNDb21wb25lbnRzID0gZmFsc2U7CiAgICB9CiAgfQoKICByZXR1cm4gaGFzRXhwb3J0cyAmJiBhcmVBbGxFeHBvcnRzQ29tcG9uZW50czsKfQoKLyoqCiAqIENoZWNrcyBpZiBleHBvcnRzIGFyZSBsaWtlbHkgYSBSZWFjdCBjb21wb25lbnQgYW5kIHJlZ2lzdGVycyB0aGVtLgogKgogKiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uIHRoZSBvbmUgaW4gW01ldHJvXShodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svbWV0cm8vYmxvYi9mZWJkYmEyMzgzMTEzYzg4Mjk2YzYxZTI4ZTRlZjZhN2Y0OTM5ZmRhL3BhY2thZ2VzL21ldHJvL3NyYy9saWIvcG9seWZpbGxzL3JlcXVpcmUuanMjTDgxOC1MODM1KS4KICogQHBhcmFtIHsqfSBtb2R1bGVFeHBvcnRzIEEgV2VicGFjayBtb2R1bGUgZXhwb3J0cyBvYmplY3QuCiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVJZCBBIFdlYnBhY2sgbW9kdWxlIElELgogKiBAcmV0dXJucyB7dm9pZH0KICovCmZ1bmN0aW9uIHJlZ2lzdGVyRXhwb3J0c0ZvclJlYWN0UmVmcmVzaChtb2R1bGVFeHBvcnRzLCBtb2R1bGVJZCkgewogIGlmIChSZWZyZXNoLmlzTGlrZWx5Q29tcG9uZW50VHlwZShtb2R1bGVFeHBvcnRzKSkgewogICAgLy8gUmVnaXN0ZXIgbW9kdWxlLmV4cG9ydHMgaWYgaXQgaXMgbGlrZWx5IGEgY29tcG9uZW50CiAgICBSZWZyZXNoLnJlZ2lzdGVyKG1vZHVsZUV4cG9ydHMsIG1vZHVsZUlkICsgJyAlZXhwb3J0cyUnKTsKICB9CgogIGlmIChtb2R1bGVFeHBvcnRzID09PSB1bmRlZmluZWQgfHwgbW9kdWxlRXhwb3J0cyA9PT0gbnVsbCB8fCB0eXBlb2YgbW9kdWxlRXhwb3J0cyAhPT0gJ29iamVjdCcpIHsKICAgIC8vIEV4aXQgaWYgd2UgY2FuJ3QgaXRlcmF0ZSBvdmVyIHRoZSBleHBvcnRzLgogICAgcmV0dXJuOwogIH0KCiAgZm9yICh2YXIga2V5IGluIG1vZHVsZUV4cG9ydHMpIHsKICAgIC8vIFNraXAgcmVnaXN0ZXJpbmcgdGhlIEVTIE1vZHVsZSBpbmRpY2F0b3IKICAgIGlmIChrZXkgPT09ICdfX2VzTW9kdWxlJykgewogICAgICBjb250aW51ZTsKICAgIH0KCiAgICB2YXIgZXhwb3J0VmFsdWUgPSBtb2R1bGVFeHBvcnRzW2tleV07CiAgICBpZiAoUmVmcmVzaC5pc0xpa2VseUNvbXBvbmVudFR5cGUoZXhwb3J0VmFsdWUpKSB7CiAgICAgIHZhciB0eXBlSUQgPSBtb2R1bGVJZCArICcgJWV4cG9ydHMlICcgKyBrZXk7CiAgICAgIFJlZnJlc2gucmVnaXN0ZXIoZXhwb3J0VmFsdWUsIHR5cGVJRCk7CiAgICB9CiAgfQp9CgovKioKICogQ29tcGFyZXMgcHJldmlvdXMgYW5kIG5leHQgbW9kdWxlIG9iamVjdHMgdG8gY2hlY2sgZm9yIG11dGF0ZWQgYm91bmRhcmllcy4KICoKICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB0aGUgb25lIGluIFtNZXRyb10oaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL21ldHJvL2Jsb2IvOTA3ZDZhZjIyYWM2ZWJlNTg1NzJiZTQxOGU5MjUzYTkwNjY1ZWNiZC9wYWNrYWdlcy9tZXRyby9zcmMvbGliL3BvbHlmaWxscy9yZXF1aXJlLmpzI0w3NzYtTDc5MikuCiAqIEBwYXJhbSB7Kn0gcHJldkV4cG9ydHMgVGhlIGN1cnJlbnQgV2VicGFjayBtb2R1bGUgZXhwb3J0cyBvYmplY3QuCiAqIEBwYXJhbSB7Kn0gbmV4dEV4cG9ydHMgVGhlIG5leHQgV2VicGFjayBtb2R1bGUgZXhwb3J0cyBvYmplY3QuCiAqIEByZXR1cm5zIHtib29sZWFufSBXaGV0aGVyIHRoZSBSZWFjdCByZWZyZXNoIGJvdW5kYXJ5IHNob3VsZCBiZSBpbnZhbGlkYXRlZC4KICovCmZ1bmN0aW9uIHNob3VsZEludmFsaWRhdGVSZWFjdFJlZnJlc2hCb3VuZGFyeShwcmV2RXhwb3J0cywgbmV4dEV4cG9ydHMpIHsKICB2YXIgcHJldlNpZ25hdHVyZSA9IGdldFJlYWN0UmVmcmVzaEJvdW5kYXJ5U2lnbmF0dXJlKHByZXZFeHBvcnRzKTsKICB2YXIgbmV4dFNpZ25hdHVyZSA9IGdldFJlYWN0UmVmcmVzaEJvdW5kYXJ5U2lnbmF0dXJlKG5leHRFeHBvcnRzKTsKCiAgaWYgKHByZXZTaWduYXR1cmUubGVuZ3RoICE9PSBuZXh0U2lnbmF0dXJlLmxlbmd0aCkgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICBmb3IgKHZhciBpID0gMDsgaSA8IG5leHRTaWduYXR1cmUubGVuZ3RoOyBpICs9IDEpIHsKICAgIGlmIChwcmV2U2lnbmF0dXJlW2ldICE9PSBuZXh0U2lnbmF0dXJlW2ldKSB7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0KCiAgcmV0dXJuIGZhbHNlOwp9Cgp2YXIgZW5xdWV1ZVVwZGF0ZSA9IGNyZWF0ZURlYm91bmNlVXBkYXRlKCk7CmZ1bmN0aW9uIGV4ZWN1dGVSdW50aW1lKG1vZHVsZUV4cG9ydHMsIG1vZHVsZUlkLCB3ZWJwYWNrSG90LCByZWZyZXNoT3ZlcmxheSwgaXNUZXN0KSB7CiAgcmVnaXN0ZXJFeHBvcnRzRm9yUmVhY3RSZWZyZXNoKG1vZHVsZUV4cG9ydHMsIG1vZHVsZUlkKTsKCiAgaWYgKHdlYnBhY2tIb3QpIHsKICAgIHZhciBpc0hvdFVwZGF0ZSA9ICEhd2VicGFja0hvdC5kYXRhOwogICAgdmFyIHByZXZFeHBvcnRzOwogICAgaWYgKGlzSG90VXBkYXRlKSB7CiAgICAgIHByZXZFeHBvcnRzID0gd2VicGFja0hvdC5kYXRhLnByZXZFeHBvcnRzOwogICAgfQoKICAgIGlmIChpc1JlYWN0UmVmcmVzaEJvdW5kYXJ5KG1vZHVsZUV4cG9ydHMpKSB7CiAgICAgIHdlYnBhY2tIb3QuZGlzcG9zZSgKICAgICAgICAvKioKICAgICAgICAgKiBBIGNhbGxiYWNrIHRvIHBlcmZvcm1zIGEgZnVsbCByZWZyZXNoIGlmIFJlYWN0IGhhcyB1bnJlY292ZXJhYmxlIGVycm9ycywKICAgICAgICAgKiBhbmQgYWxzbyBjYWNoZXMgdGhlIHRvLWJlLWRpc3Bvc2VkIG1vZHVsZS4KICAgICAgICAgKiBAcGFyYW0geyp9IGRhdGEgQSBob3QgbW9kdWxlIGRhdGEgb2JqZWN0IGZyb20gV2VicGFjayBITVIuCiAgICAgICAgICogQHJldHVybnMge3ZvaWR9CiAgICAgICAgICovCiAgICAgICAgZnVuY3Rpb24gaG90RGlzcG9zZUNhbGxiYWNrKGRhdGEpIHsKICAgICAgICAgIC8vIFdlIGhhdmUgdG8gbXV0YXRlIHRoZSBkYXRhIG9iamVjdCB0byBnZXQgZGF0YSByZWdpc3RlcmVkIGFuZCBjYWNoZWQKICAgICAgICAgIGRhdGEucHJldkV4cG9ydHMgPSBtb2R1bGVFeHBvcnRzOwogICAgICAgIH0KICAgICAgKTsKICAgICAgd2VicGFja0hvdC5hY2NlcHQoCiAgICAgICAgLyoqCiAgICAgICAgICogQW4gZXJyb3IgaGFuZGxlciB0byBhbGxvdyBzZWxmLXJlY292ZXJpbmcgYmVoYXZpb3Vycy4KICAgICAgICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvciBBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgZXZhbHVhdGlvbiBvZiBhIG1vZHVsZS4KICAgICAgICAgKiBAcmV0dXJucyB7dm9pZH0KICAgICAgICAgKi8KICAgICAgICBmdW5jdGlvbiBob3RFcnJvckhhbmRsZXIoZXJyb3IpIHsKICAgICAgICAgIGlmICh0eXBlb2YgcmVmcmVzaE92ZXJsYXkgIT09ICd1bmRlZmluZWQnICYmIHJlZnJlc2hPdmVybGF5KSB7CiAgICAgICAgICAgIHJlZnJlc2hPdmVybGF5LmhhbmRsZVJ1bnRpbWVFcnJvcihlcnJvcik7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHR5cGVvZiBpc1Rlc3QgIT09ICd1bmRlZmluZWQnICYmIGlzVGVzdCkgewogICAgICAgICAgICBpZiAod2luZG93Lm9uSG90QWNjZXB0RXJyb3IpIHsKICAgICAgICAgICAgICB3aW5kb3cub25Ib3RBY2NlcHRFcnJvcihlcnJvci5tZXNzYWdlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF0uaG90LmFjY2VwdChob3RFcnJvckhhbmRsZXIpOwogICAgICAgIH0KICAgICAgKTsKCiAgICAgIGlmIChpc0hvdFVwZGF0ZSkgewogICAgICAgIGlmICgKICAgICAgICAgIGlzUmVhY3RSZWZyZXNoQm91bmRhcnkocHJldkV4cG9ydHMpICYmCiAgICAgICAgICBzaG91bGRJbnZhbGlkYXRlUmVhY3RSZWZyZXNoQm91bmRhcnkocHJldkV4cG9ydHMsIG1vZHVsZUV4cG9ydHMpCiAgICAgICAgKSB7CiAgICAgICAgICB3ZWJwYWNrSG90LmludmFsaWRhdGUoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZW5xdWV1ZVVwZGF0ZSgKICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAqIEEgZnVuY3Rpb24gdG8gZGlzbWlzcyB0aGUgZXJyb3Igb3ZlcmxheSBhZnRlciBwZXJmb3JtaW5nIFJlYWN0IHJlZnJlc2guCiAgICAgICAgICAgICAqIEByZXR1cm5zIHt2b2lkfQogICAgICAgICAgICAgKi8KICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlQ2FsbGJhY2soKSB7CiAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWZyZXNoT3ZlcmxheSAhPT0gJ3VuZGVmaW5lZCcgJiYgcmVmcmVzaE92ZXJsYXkpIHsKICAgICAgICAgICAgICAgIHJlZnJlc2hPdmVybGF5LmNsZWFyUnVudGltZUVycm9ycygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGlmIChpc0hvdFVwZGF0ZSAmJiB0eXBlb2YgcHJldkV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgd2VicGFja0hvdC5pbnZhbGlkYXRlKCk7CiAgICAgIH0KICAgIH0KICB9Cn0KCm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmZyZWV6ZSh7CiAgZW5xdWV1ZVVwZGF0ZTogZW5xdWV1ZVVwZGF0ZSwKICBleGVjdXRlUnVudGltZTogZXhlY3V0ZVJ1bnRpbWUsCiAgZ2V0TW9kdWxlRXhwb3J0czogZ2V0TW9kdWxlRXhwb3J0cywKICBpc1JlYWN0UmVmcmVzaEJvdW5kYXJ5OiBpc1JlYWN0UmVmcmVzaEJvdW5kYXJ5LAogIHNob3VsZEludmFsaWRhdGVSZWFjdFJlZnJlc2hCb3VuZGFyeTogc2hvdWxkSW52YWxpZGF0ZVJlYWN0UmVmcmVzaEJvdW5kYXJ5LAogIHJlZ2lzdGVyRXhwb3J0c0ZvclJlYWN0UmVmcmVzaDogcmVnaXN0ZXJFeHBvcnRzRm9yUmVhY3RSZWZyZXNoLAp9KTsKCgovKioqLyB9KSwKCi8qKiovICIuL3NyYy9tbWEtYXBwMS50c3giOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9zcmMvbW1hLWFwcDEudHN4ICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKLyogaGFybW9ueSBleHBvcnQgKi8gICAiYm9vdHN0cmFwIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gYm9vdHN0cmFwKSwKLyogaGFybW9ueSBleHBvcnQgKi8gICAibW91bnQiOiAoKSA9PiAoLyogYmluZGluZyAqLyBtb3VudCksCi8qIGhhcm1vbnkgZXhwb3J0ICovICAgInVubW91bnQiOiAoKSA9PiAoLyogYmluZGluZyAqLyB1bm1vdW50KQovKiBoYXJtb255IGV4cG9ydCAqLyB9KTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHJlYWN0X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISByZWFjdCAqLyAicmVhY3QiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHJlYWN0X2RvbV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QtZG9tICovICJyZWFjdC1kb20iKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHNpbmdsZV9zcGFfcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHNpbmdsZS1zcGEtcmVhY3QgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3NpbmdsZS1zcGEtcmVhY3QtdmlydHVhbC04NDgwYTJhZTM3LzAvY2FjaGUvc2luZ2xlLXNwYS1yZWFjdC1ucG0tNC42LjEtOGVhNGRiMjM1MC0xMjM4M2QzYjFkLnppcC9ub2RlX21vZHVsZXMvc2luZ2xlLXNwYS1yZWFjdC9saWIvZXNtL3NpbmdsZS1zcGEtcmVhY3QuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9yb290X2NvbXBvbmVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9yb290LmNvbXBvbmVudCAqLyAiLi9zcmMvcm9vdC5jb21wb25lbnQudHN4Iik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciByZWFjdF9qc3hfcnVudGltZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QvanN4LXJ1bnRpbWUgKi8gIi4uLy4uLy55YXJuL2NhY2hlL3JlYWN0LW5wbS0xNy4wLjItOTliYTM3ZDkzMS1iMjU0Y2MxN2NlLnppcC9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiKTsKLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgX19yZWFjdF9yZWZyZXNoX3V0aWxzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL2xpYi9ydW50aW1lL1JlZnJlc2hVdGlscy5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9saWIvcnVudGltZS9SZWZyZXNoVXRpbHMuanMiKTsKLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgX19yZWFjdF9yZWZyZXNoX2Vycm9yX292ZXJsYXlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS9pbmRleC5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2luZGV4LmpzIik7Cl9fd2VicGFja19yZXF1aXJlX18uJFJlZnJlc2gkLnJ1bnRpbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi8ueWFybi9jYWNoZS9yZWFjdC1yZWZyZXNoLW5wbS0wLjE0LjAtNzhlZjVlZWI3My1kYzY5ZmE4Yzk5LnppcC9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmVzaC9ydW50aW1lLmpzICovICIuLi8uLi8ueWFybi9jYWNoZS9yZWFjdC1yZWZyZXNoLW5wbS0wLjE0LjAtNzhlZjVlZWI3My1kYzY5ZmE4Yzk5LnppcC9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmVzaC9ydW50aW1lLmpzIik7CgoKCgoKCnZhciBsaWZlY3ljbGVzID0gKDAsc2luZ2xlX3NwYV9yZWFjdF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJkZWZhdWx0Il0pKHsKICBSZWFjdDogcmVhY3RfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siZGVmYXVsdCJdLAogIFJlYWN0RE9NOiByZWFjdF9kb21fX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1siZGVmYXVsdCJdLAogIHJvb3RDb21wb25lbnQ6IF9yb290X2NvbXBvbmVudF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fWyJkZWZhdWx0Il0sCiAgZXJyb3JCb3VuZGFyeTogZnVuY3Rpb24gZXJyb3JCb3VuZGFyeShlcnIsIGluZm8sIHByb3BzKSB7CiAgICAvLyBDdXN0b21pemUgdGhlIHJvb3QgZXJyb3IgYm91bmRhcnkgZm9yIHlvdXIgbWljcm9mcm9udGVuZCBoZXJlLgogICAgcmV0dXJuIC8qI19fUFVSRV9fKi8oMCxyZWFjdF9qc3hfcnVudGltZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLmpzeCkoImRpdiIsIHsKICAgICAgY2hpbGRyZW46ICJFcnJvciIKICAgIH0pOwogIH0KfSk7CnZhciBib290c3RyYXAgPSBsaWZlY3ljbGVzLmJvb3RzdHJhcCwKICBtb3VudCA9IGxpZmVjeWNsZXMubW91bnQsCiAgdW5tb3VudCA9IGxpZmVjeWNsZXMudW5tb3VudDsKCgpjb25zdCAkUmVhY3RSZWZyZXNoTW9kdWxlSWQkID0gX193ZWJwYWNrX3JlcXVpcmVfXy4kUmVmcmVzaCQubW9kdWxlSWQ7CmNvbnN0ICRSZWFjdFJlZnJlc2hDdXJyZW50RXhwb3J0cyQgPSBfX3JlYWN0X3JlZnJlc2hfdXRpbHNfXy5nZXRNb2R1bGVFeHBvcnRzKAoJJFJlYWN0UmVmcmVzaE1vZHVsZUlkJAopOwoKZnVuY3Rpb24gJFJlYWN0UmVmcmVzaE1vZHVsZVJ1bnRpbWUkKGV4cG9ydHMpIHsKCWlmICh0cnVlKSB7CgkJbGV0IGVycm9yT3ZlcmxheTsKCQlpZiAodHlwZW9mIF9fcmVhY3RfcmVmcmVzaF9lcnJvcl9vdmVybGF5X18gIT09ICd1bmRlZmluZWQnKSB7CgkJCWVycm9yT3ZlcmxheSA9IF9fcmVhY3RfcmVmcmVzaF9lcnJvcl9vdmVybGF5X187CgkJfQoJCWxldCB0ZXN0TW9kZTsKCQlpZiAodHlwZW9mIF9fcmVhY3RfcmVmcmVzaF90ZXN0X18gIT09ICd1bmRlZmluZWQnKSB7CgkJCXRlc3RNb2RlID0gX19yZWFjdF9yZWZyZXNoX3Rlc3RfXzsKCQl9CgkJcmV0dXJuIF9fcmVhY3RfcmVmcmVzaF91dGlsc19fLmV4ZWN1dGVSdW50aW1lKAoJCQlleHBvcnRzLAoJCQkkUmVhY3RSZWZyZXNoTW9kdWxlSWQkLAoJCQltb2R1bGUuaG90LAoJCQllcnJvck92ZXJsYXksCgkJCXRlc3RNb2RlCgkJKTsKCX0KfQoKaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiAkUmVhY3RSZWZyZXNoQ3VycmVudEV4cG9ydHMkIGluc3RhbmNlb2YgUHJvbWlzZSkgewoJJFJlYWN0UmVmcmVzaEN1cnJlbnRFeHBvcnRzJC50aGVuKCRSZWFjdFJlZnJlc2hNb2R1bGVSdW50aW1lJCk7Cn0gZWxzZSB7CgkkUmVhY3RSZWZyZXNoTW9kdWxlUnVudGltZSQoJFJlYWN0UmVmcmVzaEN1cnJlbnRFeHBvcnRzJCk7Cn0KCi8qKiovIH0pLAoKLyoqKi8gIi4vc3JjL3Jvb3QuY29tcG9uZW50LnRzeCI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL3NyYy9yb290LmNvbXBvbmVudC50c3ggKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewovKiBoYXJtb255IGV4cG9ydCAqLyAgICJkZWZhdWx0IjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gUm9vdCkKLyogaGFybW9ueSBleHBvcnQgKi8gfSk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfbW1hX3V0aWxzMV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQG1tYS91dGlsczEgKi8gIkBtbWEvdXRpbHMxIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfbW1hX3V0aWxzMl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgQG1tYS91dGlsczIgKi8gIkBtbWEvdXRpbHMyIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciByZWFjdF9qc3hfcnVudGltZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgcmVhY3QvanN4LXJ1bnRpbWUgKi8gIi4uLy4uLy55YXJuL2NhY2hlL3JlYWN0LW5wbS0xNy4wLjItOTliYTM3ZDkzMS1iMjU0Y2MxN2NlLnppcC9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiKTsKLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgX19yZWFjdF9yZWZyZXNoX3V0aWxzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL2xpYi9ydW50aW1lL1JlZnJlc2hVdGlscy5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9saWIvcnVudGltZS9SZWZyZXNoVXRpbHMuanMiKTsKLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgX19yZWFjdF9yZWZyZXNoX2Vycm9yX292ZXJsYXlfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS9pbmRleC5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2luZGV4LmpzIik7Cl9fd2VicGFja19yZXF1aXJlX18uJFJlZnJlc2gkLnJ1bnRpbWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi8ueWFybi9jYWNoZS9yZWFjdC1yZWZyZXNoLW5wbS0wLjE0LjAtNzhlZjVlZWI3My1kYzY5ZmE4Yzk5LnppcC9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmVzaC9ydW50aW1lLmpzICovICIuLi8uLi8ueWFybi9jYWNoZS9yZWFjdC1yZWZyZXNoLW5wbS0wLjE0LjAtNzhlZjVlZWI3My1kYzY5ZmE4Yzk5LnppcC9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmVzaC9ydW50aW1lLmpzIik7CgoKCgoKCmZ1bmN0aW9uIFJvb3QocHJvcHMpIHsKICByZXR1cm4gLyojX19QVVJFX18qLygwLHJlYWN0X2pzeF9ydW50aW1lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uanN4cykoImRpdiIsIHsKICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qLygwLHJlYWN0X2pzeF9ydW50aW1lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uanN4cykoInNlY3Rpb24iLCB7CiAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qLygwLHJlYWN0X2pzeF9ydW50aW1lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uanN4cykoImRpdiIsIHsKICAgICAgICBjaGlsZHJlbjogWyJIZWxsbyBmcm9tICIsIHByb3BzLm5hbWUsICIhIl0KICAgICAgfSksIC8qI19fUFVSRV9fKi8oMCxyZWFjdF9qc3hfcnVudGltZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmpzeCkoImRpdiIsIHsKICAgICAgICBjaGlsZHJlbjogKDAsX21tYV91dGlsczFfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy50b1VwcGVyQ2FzZVRleHQpKCIiLmNvbmNhdChwcm9wcy5uYW1lLCAiIGlzIGNhbGxpbmcgdG9VcHBlckNhc2VUZXh0IHdpdGggdGhpcyB0ZXh0ISIpKQogICAgICB9KSwgLyojX19QVVJFX18qLygwLHJlYWN0X2pzeF9ydW50aW1lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uanN4KSgiZGl2IiwgewogICAgICAgIGNoaWxkcmVuOiAoMCxfbW1hX3V0aWxzMV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLnRvTG93ZXJDYXNlVGV4dCkoIiIuY29uY2F0KHByb3BzLm5hbWUsICIgaXMgY2FsbGluZyB0b0xvd2VyQ2FzZVRleHQgd2l0aCB0aGlzIHRleHQhIikpCiAgICAgIH0pLCAvKiNfX1BVUkVfXyovKDAscmVhY3RfanN4X3J1bnRpbWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXy5qc3gpKCJkaXYiLCB7CiAgICAgICAgY2hpbGRyZW46ICgwLF9tbWFfdXRpbHMxX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18uYW5vdGhlclRleHQpKCkKICAgICAgfSldCiAgICB9KSwgLyojX19QVVJFX18qLygwLHJlYWN0X2pzeF9ydW50aW1lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uanN4cykoInNlY3Rpb24iLCB7CiAgICAgIGNoaWxkcmVuOiBbLyojX19QVVJFX18qLygwLHJlYWN0X2pzeF9ydW50aW1lX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18uanN4KShfbW1hX3V0aWxzMl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLkhlbGxvQ29tcG9uZW50LCB7fSksIC8qI19fUFVSRV9fKi8oMCxyZWFjdF9qc3hfcnVudGltZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fLmpzeCkoX21tYV91dGlsczJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5IZWxsb0NvbXBvbmVudFYyLCB7fSldCiAgICB9KV0KICB9KTsKfQpfYyA9IFJvb3Q7CnZhciBfYzsKX193ZWJwYWNrX3JlcXVpcmVfXy4kUmVmcmVzaCQucmVnaXN0ZXIoX2MsICJSb290Iik7Cgpjb25zdCAkUmVhY3RSZWZyZXNoTW9kdWxlSWQkID0gX193ZWJwYWNrX3JlcXVpcmVfXy4kUmVmcmVzaCQubW9kdWxlSWQ7CmNvbnN0ICRSZWFjdFJlZnJlc2hDdXJyZW50RXhwb3J0cyQgPSBfX3JlYWN0X3JlZnJlc2hfdXRpbHNfXy5nZXRNb2R1bGVFeHBvcnRzKAoJJFJlYWN0UmVmcmVzaE1vZHVsZUlkJAopOwoKZnVuY3Rpb24gJFJlYWN0UmVmcmVzaE1vZHVsZVJ1bnRpbWUkKGV4cG9ydHMpIHsKCWlmICh0cnVlKSB7CgkJbGV0IGVycm9yT3ZlcmxheTsKCQlpZiAodHlwZW9mIF9fcmVhY3RfcmVmcmVzaF9lcnJvcl9vdmVybGF5X18gIT09ICd1bmRlZmluZWQnKSB7CgkJCWVycm9yT3ZlcmxheSA9IF9fcmVhY3RfcmVmcmVzaF9lcnJvcl9vdmVybGF5X187CgkJfQoJCWxldCB0ZXN0TW9kZTsKCQlpZiAodHlwZW9mIF9fcmVhY3RfcmVmcmVzaF90ZXN0X18gIT09ICd1bmRlZmluZWQnKSB7CgkJCXRlc3RNb2RlID0gX19yZWFjdF9yZWZyZXNoX3Rlc3RfXzsKCQl9CgkJcmV0dXJuIF9fcmVhY3RfcmVmcmVzaF91dGlsc19fLmV4ZWN1dGVSdW50aW1lKAoJCQlleHBvcnRzLAoJCQkkUmVhY3RSZWZyZXNoTW9kdWxlSWQkLAoJCQltb2R1bGUuaG90LAoJCQllcnJvck92ZXJsYXksCgkJCXRlc3RNb2RlCgkJKTsKCX0KfQoKaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiAkUmVhY3RSZWZyZXNoQ3VycmVudEV4cG9ydHMkIGluc3RhbmNlb2YgUHJvbWlzZSkgewoJJFJlYWN0UmVmcmVzaEN1cnJlbnRFeHBvcnRzJC50aGVuKCRSZWFjdFJlZnJlc2hNb2R1bGVSdW50aW1lJCk7Cn0gZWxzZSB7CgkkUmVhY3RSZWZyZXNoTW9kdWxlUnVudGltZSQoJFJlYWN0UmVmcmVzaEN1cnJlbnRFeHBvcnRzJCk7Cn0KCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC12aXJ0dWFsLTIwMjhhZTMxMmEvMC9jYWNoZS9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AtbnBtLTIuMy43LTVmMDA1YzY5MzktNmEyOTRhYTQ1Mi56aXAvbm9kZV9tb2R1bGVzL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC9hdXRvLXB1YmxpYy1wYXRoLzEuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC12aXJ0dWFsLTIwMjhhZTMxMmEvMC9jYWNoZS9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AtbnBtLTIuMy43LTVmMDA1YzY5MzktNmEyOTRhYTQ1Mi56aXAvbm9kZV9tb2R1bGVzL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC9hdXRvLXB1YmxpYy1wYXRoLzEuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKY29uc3QgYXV0b1B1YmxpY1BhdGggPSAoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9hdXRvLXB1YmxpYy1wYXRoICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AtdmlydHVhbC0yMDI4YWUzMTJhLzAvY2FjaGUvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLW5wbS0yLjMuNy01ZjAwNWM2OTM5LTZhMjk0YWE0NTIuemlwL25vZGVfbW9kdWxlcy9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AvYXV0by1wdWJsaWMtcGF0aC9hdXRvLXB1YmxpYy1wYXRoLmpzIikuYXV0b1B1YmxpY1BhdGgpOwoKYXV0b1B1YmxpY1BhdGgoMSk7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLXZpcnR1YWwtMjAyOGFlMzEyYS8wL2NhY2hlL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC1ucG0tMi4zLjctNWYwMDVjNjkzOS02YTI5NGFhNDUyLnppcC9ub2RlX21vZHVsZXMvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wL2F1dG8tcHVibGljLXBhdGgvYXV0by1wdWJsaWMtcGF0aC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLXZpcnR1YWwtMjAyOGFlMzEyYS8wL2NhY2hlL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC1ucG0tMi4zLjctNWYwMDVjNjkzOS02YTI5NGFhNDUyLnppcC9ub2RlX21vZHVsZXMvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wL2F1dG8tcHVibGljLXBhdGgvYXV0by1wdWJsaWMtcGF0aC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKY29uc3QgcmVzb2x2ZURpcmVjdG9yeSA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9wdWJsaWMtcGF0aCAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLXZpcnR1YWwtMjAyOGFlMzEyYS8wL2NhY2hlL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC1ucG0tMi4zLjctNWYwMDVjNjkzOS02YTI5NGFhNDUyLnppcC9ub2RlX21vZHVsZXMvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wL3B1YmxpYy1wYXRoLmpzIikucmVzb2x2ZURpcmVjdG9yeSk7CgpleHBvcnRzLmF1dG9QdWJsaWNQYXRoID0gZnVuY3Rpb24gYXV0b1B1YmxpY1BhdGgocm9vdERpckxldmVsKSB7CiAgaWYgKCFyb290RGlyTGV2ZWwpIHsKICAgIHJvb3REaXJMZXZlbCA9IDE7CiAgfQoKICBpZiAodHJ1ZSkgewogICAgaWYgKGZhbHNlKSB7fQoKICAgIGlmICghX193ZWJwYWNrX3JlcXVpcmVfXy55Lm1ldGEgfHwgIV9fd2VicGFja19yZXF1aXJlX18ueS5tZXRhLnVybCkgewogICAgICBjb25zb2xlLmVycm9yKCJfX3N5c3RlbV9jb250ZXh0X18iLCBfX3dlYnBhY2tfcmVxdWlyZV9fLnkpOwogICAgICB0aHJvdyBFcnJvcigKICAgICAgICAic3lzdGVtanMtd2VicGFjay1pbnRlcm9wIHdhcyBwcm92aWRlZCBhbiB1bmtub3duIFN5c3RlbUpTIGNvbnRleHQuIEV4cGVjdGVkIGNvbnRleHQubWV0YS51cmwsIGJ1dCBub25lIHdhcyBwcm92aWRlZCIKICAgICAgKTsKICAgIH0KCiAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSByZXNvbHZlRGlyZWN0b3J5KAogICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fLnkubWV0YS51cmwsCiAgICAgIHJvb3REaXJMZXZlbAogICAgKTsKICB9Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLXZpcnR1YWwtMjAyOGFlMzEyYS8wL2NhY2hlL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC1ucG0tMi4zLjctNWYwMDVjNjkzOS02YTI5NGFhNDUyLnppcC9ub2RlX21vZHVsZXMvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wL3B1YmxpYy1wYXRoLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC12aXJ0dWFsLTIwMjhhZTMxMmEvMC9jYWNoZS9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AtbnBtLTIuMy43LTVmMDA1YzY5MzktNmEyOTRhYTQ1Mi56aXAvbm9kZV9tb2R1bGVzL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC9wdWJsaWMtcGF0aC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgpleHBvcnRzLnNldFB1YmxpY1BhdGggPSBmdW5jdGlvbiBzZXRQdWJsaWNQYXRoKAogIHN5c3RlbWpzTW9kdWxlTmFtZSwKICByb290RGlyZWN0b3J5TGV2ZWwKKSB7CiAgaWYgKCFyb290RGlyZWN0b3J5TGV2ZWwpIHsKICAgIHJvb3REaXJlY3RvcnlMZXZlbCA9IDE7CiAgfQogIGlmICgKICAgIHR5cGVvZiBzeXN0ZW1qc01vZHVsZU5hbWUgIT09ICJzdHJpbmciIHx8CiAgICBzeXN0ZW1qc01vZHVsZU5hbWUudHJpbSgpLmxlbmd0aCA9PT0gMAogICkgewogICAgdGhyb3cgRXJyb3IoCiAgICAgICJzeXN0ZW1qcy13ZWJwYWNrLWludGVyb3A6IHNldFB1YmxpY1BhdGgoc3lzdGVtanNNb2R1bGVOYW1lKSBtdXN0IGJlIGNhbGxlZCB3aXRoIGEgbm9uLWVtcHR5IHN0cmluZyAnc3lzdGVtanNNb2R1bGVOYW1lJyIKICAgICk7CiAgfQoKICBpZiAoCiAgICB0eXBlb2Ygcm9vdERpcmVjdG9yeUxldmVsICE9PSAibnVtYmVyIiB8fAogICAgcm9vdERpcmVjdG9yeUxldmVsIDw9IDAgfHwKICAgIGlzTmFOKHJvb3REaXJlY3RvcnlMZXZlbCkgfHwKICAgICFpc0ludGVnZXIocm9vdERpcmVjdG9yeUxldmVsKQogICkgewogICAgdGhyb3cgRXJyb3IoCiAgICAgICJzeXN0ZW1qcy13ZWJwYWNrLWludGVyb3A6IHNldFB1YmxpY1BhdGgoc3lzdGVtanNNb2R1bGVOYW1lLCByb290RGlyZWN0b3J5TGV2ZWwpIG11c3QgYmUgY2FsbGVkIHdpdGggYSBwb3NpdGl2ZSBpbnRlZ2VyICdyb290RGlyZWN0b3J5TGV2ZWwnIgogICAgKTsKICB9CgogIHZhciBtb2R1bGVVcmw7CiAgdHJ5IHsKICAgIG1vZHVsZVVybCA9IHdpbmRvdy5TeXN0ZW0ucmVzb2x2ZShzeXN0ZW1qc01vZHVsZU5hbWUpOwogICAgaWYgKCFtb2R1bGVVcmwpIHsKICAgICAgdGhyb3cgRXJyb3IoKTsKICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIHRocm93IEVycm9yKAogICAgICAic3lzdGVtanMtd2VicGFjay1pbnRlcm9wOiBUaGVyZSBpcyBubyBzdWNoIG1vZHVsZSAnIiArCiAgICAgICAgc3lzdGVtanNNb2R1bGVOYW1lICsKICAgICAgICAiJyBpbiB0aGUgU3lzdGVtSlMgcmVnaXN0cnkuIERpZCB5b3UgbWlzc3BlbGwgdGhlIG5hbWUgb2YgeW91ciBtb2R1bGU/IgogICAgKTsKICB9CgogIF9fd2VicGFja19yZXF1aXJlX18ucCA9IHJlc29sdmVEaXJlY3RvcnkobW9kdWxlVXJsLCByb290RGlyZWN0b3J5TGV2ZWwpOwp9OwoKZnVuY3Rpb24gcmVzb2x2ZURpcmVjdG9yeSh1cmxTdHJpbmcsIHJvb3REaXJlY3RvcnlMZXZlbCkgewogIC8vIE91ciBmcmllbmQgSUUxMSBkb2Vzbid0IHN1cHBvcnQgbmV3IFVSTCgpCiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmdsZS1zcGEvc2luZ2xlLXNwYS9pc3N1ZXMvNjEyCiAgLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamxvbmcvMjQyODU2MQoKICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICBhLmhyZWYgPSB1cmxTdHJpbmc7CgogIHZhciBwYXRobmFtZSA9IGEucGF0aG5hbWVbMF0gPT09ICIvIiA/IGEucGF0aG5hbWUgOiAiLyIgKyBhLnBhdGhuYW1lOwogIHZhciBudW1EaXJzUHJvY2Vzc2VkID0gMCwKICAgIGluZGV4ID0gcGF0aG5hbWUubGVuZ3RoOwogIHdoaWxlIChudW1EaXJzUHJvY2Vzc2VkICE9PSByb290RGlyZWN0b3J5TGV2ZWwgJiYgaW5kZXggPj0gMCkgewogICAgdmFyIGNoYXIgPSBwYXRobmFtZVstLWluZGV4XTsKICAgIGlmIChjaGFyID09PSAiLyIpIHsKICAgICAgbnVtRGlyc1Byb2Nlc3NlZCsrOwogICAgfQogIH0KCiAgaWYgKG51bURpcnNQcm9jZXNzZWQgIT09IHJvb3REaXJlY3RvcnlMZXZlbCkgewogICAgdGhyb3cgRXJyb3IoCiAgICAgICJzeXN0ZW1qcy13ZWJwYWNrLWludGVyb3A6IHJvb3REaXJlY3RvcnlMZXZlbCAoIiArCiAgICAgICAgcm9vdERpcmVjdG9yeUxldmVsICsKICAgICAgICAiKSBpcyBncmVhdGVyIHRoYW4gdGhlIG51bWJlciBvZiBkaXJlY3RvcmllcyAoIiArCiAgICAgICAgbnVtRGlyc1Byb2Nlc3NlZCArCiAgICAgICAgIikgaW4gdGhlIFVSTCBwYXRoICIgKwogICAgICAgIHVybFN0cmluZwogICAgKTsKICB9CgogIHZhciBmaW5hbFBhdGggPSBwYXRobmFtZS5zbGljZSgwLCBpbmRleCArIDEpOwoKICByZXR1cm4gYS5wcm90b2NvbCArICIvLyIgKyBhLmhvc3QgKyBmaW5hbFBhdGg7Cn0KCmV4cG9ydHMucmVzb2x2ZURpcmVjdG9yeSA9IHJlc29sdmVEaXJlY3Rvcnk7CgovLyBib3Jyb3dlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXJzaGFwL2pzLWlzLWludGVnZXIvYmxvYi9tYXN0ZXIvaW5kZXguanMKdmFyIGlzSW50ZWdlciA9CiAgTnVtYmVyLmlzSW50ZWdlciB8fAogIGZ1bmN0aW9uIGlzSW50ZWdlcih2YWwpIHsKICAgIHJldHVybiB0eXBlb2YgdmFsID09PSAibnVtYmVyIiAmJiBpc0Zpbml0ZSh2YWwpICYmIE1hdGguZmxvb3IodmFsKSA9PT0gdmFsOwogIH07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9jbGllbnRzL1dlYlNvY2tldENsaWVudC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewovKiBoYXJtb255IGV4cG9ydCAqLyAgICJkZWZhdWx0IjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gV2ViU29ja2V0Q2xpZW50KQovKiBoYXJtb255IGV4cG9ydCAqLyB9KTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3V0aWxzL2xvZy5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvbG9nLmpzIik7CmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOyB9IH0KZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgInN0cmluZyIpOyByZXR1cm4gdHlwZW9mIGtleSA9PT0gInN5bWJvbCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfQpmdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKHR5cGVvZiBpbnB1dCAhPT0gIm9iamVjdCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgImRlZmF1bHQiKTsgaWYgKHR5cGVvZiByZXMgIT09ICJvYmplY3QiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpOyB9IHJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfQoKdmFyIFdlYlNvY2tldENsaWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgLyoqCiAgICogQHBhcmFtIHtzdHJpbmd9IHVybAogICAqLwogIGZ1bmN0aW9uIFdlYlNvY2tldENsaWVudCh1cmwpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJTb2NrZXRDbGllbnQpOwogICAgdGhpcy5jbGllbnQgPSBuZXcgV2ViU29ja2V0KHVybCk7CiAgICB0aGlzLmNsaWVudC5vbmVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgIF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5sb2cuZXJyb3IoZXJyb3IpOwogICAgfTsKICB9CgogIC8qKgogICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmCiAgICovCiAgX2NyZWF0ZUNsYXNzKFdlYlNvY2tldENsaWVudCwgW3sKICAgIGtleTogIm9uT3BlbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25PcGVuKGYpIHsKICAgICAgdGhpcy5jbGllbnQub25vcGVuID0gZjsKICAgIH0KCiAgICAvKioKICAgICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJvbkNsb3NlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkNsb3NlKGYpIHsKICAgICAgdGhpcy5jbGllbnQub25jbG9zZSA9IGY7CiAgICB9CgogICAgLy8gY2FsbCBmIHdpdGggdGhlIG1lc3NhZ2Ugc3RyaW5nIGFzIHRoZSBmaXJzdCBhcmd1bWVudAogICAgLyoqCiAgICAgKiBAcGFyYW0geyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gZgogICAgICovCiAgfSwgewogICAga2V5OiAib25NZXNzYWdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbk1lc3NhZ2UoZikgewogICAgICB0aGlzLmNsaWVudC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZSkgewogICAgICAgIGYoZS5kYXRhKTsKICAgICAgfTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFdlYlNvY2tldENsaWVudDsKfSgpOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2luZGV4LmpzP3Byb3RvY29sPXdzJTNBJmhvc3RuYW1lPWxvY2FsaG9zdCZwb3J0PTkwMDEmcGF0aG5hbWU9JTJGd3MmbG9nZ2luZz1pbmZvJm92ZXJsYXk9dHJ1ZSZyZWNvbm5lY3Q9MTAmaG90PXRydWUmbGl2ZS1yZWxvYWQ9dHJ1ZSI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9pbmRleC5qcz9wcm90b2NvbD13cyUzQSZob3N0bmFtZT1sb2NhbGhvc3QmcG9ydD05MDAxJnBhdGhuYW1lPSUyRndzJmxvZ2dpbmc9aW5mbyZvdmVybGF5PXRydWUmcmVjb25uZWN0PTEwJmhvdD10cnVlJmxpdmUtcmVsb2FkPXRydWUgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwp2YXIgX19yZXNvdXJjZVF1ZXJ5ID0gIj9wcm90b2NvbD13cyUzQSZob3N0bmFtZT1sb2NhbGhvc3QmcG9ydD05MDAxJnBhdGhuYW1lPSUyRndzJmxvZ2dpbmc9aW5mbyZvdmVybGF5PXRydWUmcmVjb25uZWN0PTEwJmhvdD10cnVlJmxpdmUtcmVsb2FkPXRydWUiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciB3ZWJwYWNrX2hvdF9sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHdlYnBhY2svaG90L2xvZy5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLWViZTY1ZTA3YmYvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciB3ZWJwYWNrX2hvdF9sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubih3ZWJwYWNrX2hvdF9sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXRpbHNfc3RyaXBBbnNpX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3V0aWxzL3N0cmlwQW5zaS5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc3RyaXBBbnNpLmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXRpbHNfcGFyc2VVUkxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvcGFyc2VVUkwuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3BhcnNlVVJMLmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfc29ja2V0X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3NvY2tldC5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfb3ZlcmxheV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9vdmVybGF5LmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5LmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3V0aWxzL2xvZy5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvbG9nLmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXRpbHNfc2VuZE1lc3NhZ2VfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvc2VuZE1lc3NhZ2UuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3NlbmRNZXNzYWdlLmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXRpbHNfcmVsb2FkQXBwX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3V0aWxzL3JlbG9hZEFwcC5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcmVsb2FkQXBwLmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXRpbHNfY3JlYXRlU29ja2V0VVJMX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV84X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3V0aWxzL2NyZWF0ZVNvY2tldFVSTC5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvY3JlYXRlU29ja2V0VVJMLmpzIik7CmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9CmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgInN0cmluZyIpOyByZXR1cm4gdHlwZW9mIGtleSA9PT0gInN5bWJvbCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfQpmdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKHR5cGVvZiBpbnB1dCAhPT0gIm9iamVjdCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgImRlZmF1bHQiKTsgaWYgKHR5cGVvZiByZXMgIT09ICJvYmplY3QiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpOyB9IHJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfQovKiBnbG9iYWwgX19yZXNvdXJjZVF1ZXJ5LCBfX3dlYnBhY2tfaGFzaF9fICovCi8vLyA8cmVmZXJlbmNlIHR5cGVzPSJ3ZWJwYWNrL21vZHVsZSIgLz4KCgoKCgoKCgoKCi8qKgogKiBAdHlwZWRlZiB7T2JqZWN0fSBPcHRpb25zCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaG90CiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gbGl2ZVJlbG9hZAogKiBAcHJvcGVydHkge2Jvb2xlYW59IHByb2dyZXNzCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbiB8IHsgd2FybmluZ3M/OiBib29sZWFuLCBlcnJvcnM/OiBib29sZWFuLCBydW50aW1lRXJyb3JzPzogYm9vbGVhbiwgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZT86IHN0cmluZyB9fSBvdmVybGF5CiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbG9nZ2luZ10KICogQHByb3BlcnR5IHtudW1iZXJ9IFtyZWNvbm5lY3RdCiAqLwoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0YXR1cwogKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzVW5sb2FkaW5nCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjdXJyZW50SGFzaAogKiBAcHJvcGVydHkge3N0cmluZ30gW3ByZXZpb3VzSGFzaF0KICovCgovKioKICogQHR5cGUge1N0YXR1c30KICovCnZhciBzdGF0dXMgPSB7CiAgaXNVbmxvYWRpbmc6IGZhbHNlLAogIC8vIFRPRE8gV29ya2Fyb3VuZCBmb3Igd2VicGFjayB2NCwgYF9fd2VicGFja19oYXNoX19gIGlzIG5vdCByZXBsYWNlZCB3aXRob3V0IEhvdE1vZHVsZVJlcGxhY2VtZW50CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNhbWVsY2FzZQogIGN1cnJlbnRIYXNoOiAgdHJ1ZSA/IF9fd2VicGFja19yZXF1aXJlX18uaCgpIDogMAp9OwoKLyoqIEB0eXBlIHtPcHRpb25zfSAqLwp2YXIgb3B0aW9ucyA9IHsKICBob3Q6IGZhbHNlLAogIGxpdmVSZWxvYWQ6IGZhbHNlLAogIHByb2dyZXNzOiBmYWxzZSwKICBvdmVybGF5OiBmYWxzZQp9Owp2YXIgcGFyc2VkUmVzb3VyY2VRdWVyeSA9ICgwLF91dGlsc19wYXJzZVVSTF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJkZWZhdWx0Il0pKF9fcmVzb3VyY2VRdWVyeSk7CnZhciBlbmFibGVkRmVhdHVyZXMgPSB7CiAgIkhvdCBNb2R1bGUgUmVwbGFjZW1lbnQiOiBmYWxzZSwKICAiTGl2ZSBSZWxvYWRpbmciOiBmYWxzZSwKICBQcm9ncmVzczogZmFsc2UsCiAgT3ZlcmxheTogZmFsc2UKfTsKaWYgKHBhcnNlZFJlc291cmNlUXVlcnkuaG90ID09PSAidHJ1ZSIpIHsKICBvcHRpb25zLmhvdCA9IHRydWU7CiAgZW5hYmxlZEZlYXR1cmVzWyJIb3QgTW9kdWxlIFJlcGxhY2VtZW50Il0gPSB0cnVlOwp9CmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5WyJsaXZlLXJlbG9hZCJdID09PSAidHJ1ZSIpIHsKICBvcHRpb25zLmxpdmVSZWxvYWQgPSB0cnVlOwogIGVuYWJsZWRGZWF0dXJlc1siTGl2ZSBSZWxvYWRpbmciXSA9IHRydWU7Cn0KaWYgKHBhcnNlZFJlc291cmNlUXVlcnkucHJvZ3Jlc3MgPT09ICJ0cnVlIikgewogIG9wdGlvbnMucHJvZ3Jlc3MgPSB0cnVlOwogIGVuYWJsZWRGZWF0dXJlcy5Qcm9ncmVzcyA9IHRydWU7Cn0KaWYgKHBhcnNlZFJlc291cmNlUXVlcnkub3ZlcmxheSkgewogIHRyeSB7CiAgICBvcHRpb25zLm92ZXJsYXkgPSBKU09OLnBhcnNlKHBhcnNlZFJlc291cmNlUXVlcnkub3ZlcmxheSk7CiAgfSBjYXRjaCAoZSkgewogICAgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLmxvZy5lcnJvcigiRXJyb3IgcGFyc2luZyBvdmVybGF5IG9wdGlvbnMgZnJvbSByZXNvdXJjZSBxdWVyeToiLCBlKTsKICB9CgogIC8vIEZpbGwgaW4gZGVmYXVsdCAidHJ1ZSIgcGFyYW1zIGZvciBwYXJ0aWFsbHktc3BlY2lmaWVkIG9iamVjdHMuCiAgaWYgKHR5cGVvZiBvcHRpb25zLm92ZXJsYXkgPT09ICJvYmplY3QiKSB7CiAgICBvcHRpb25zLm92ZXJsYXkgPSBfb2JqZWN0U3ByZWFkKHsKICAgICAgZXJyb3JzOiB0cnVlLAogICAgICB3YXJuaW5nczogdHJ1ZSwKICAgICAgcnVudGltZUVycm9yczogdHJ1ZQogICAgfSwgb3B0aW9ucy5vdmVybGF5KTsKICB9CiAgZW5hYmxlZEZlYXR1cmVzLk92ZXJsYXkgPSB0cnVlOwp9CmlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmxvZ2dpbmcpIHsKICBvcHRpb25zLmxvZ2dpbmcgPSBwYXJzZWRSZXNvdXJjZVF1ZXJ5LmxvZ2dpbmc7Cn0KaWYgKHR5cGVvZiBwYXJzZWRSZXNvdXJjZVF1ZXJ5LnJlY29ubmVjdCAhPT0gInVuZGVmaW5lZCIpIHsKICBvcHRpb25zLnJlY29ubmVjdCA9IE51bWJlcihwYXJzZWRSZXNvdXJjZVF1ZXJ5LnJlY29ubmVjdCk7Cn0KCi8qKgogKiBAcGFyYW0ge3N0cmluZ30gbGV2ZWwKICovCmZ1bmN0aW9uIHNldEFsbExvZ0xldmVsKGxldmVsKSB7CiAgLy8gVGhpcyBpcyBuZWVkZWQgYmVjYXVzZSB0aGUgSE1SIGxvZ2dlciBvcGVyYXRlIHNlcGFyYXRlbHkgZnJvbSBkZXYgc2VydmVyIGxvZ2dlcgogIHdlYnBhY2tfaG90X2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKS5zZXRMb2dMZXZlbChsZXZlbCA9PT0gInZlcmJvc2UiIHx8IGxldmVsID09PSAibG9nIiA/ICJpbmZvIiA6IGxldmVsKTsKICAoMCxfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18uc2V0TG9nTGV2ZWwpKGxldmVsKTsKfQppZiAob3B0aW9ucy5sb2dnaW5nKSB7CiAgc2V0QWxsTG9nTGV2ZWwob3B0aW9ucy5sb2dnaW5nKTsKfQooMCxfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18ubG9nRW5hYmxlZEZlYXR1cmVzKShlbmFibGVkRmVhdHVyZXMpOwpzZWxmLmFkZEV2ZW50TGlzdGVuZXIoImJlZm9yZXVubG9hZCIsIGZ1bmN0aW9uICgpIHsKICBzdGF0dXMuaXNVbmxvYWRpbmcgPSB0cnVlOwp9KTsKdmFyIG92ZXJsYXkgPSB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/ICgwLF9vdmVybGF5X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uY3JlYXRlT3ZlcmxheSkodHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gIm9iamVjdCIgPyB7CiAgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZTogb3B0aW9ucy5vdmVybGF5LnRydXN0ZWRUeXBlc1BvbGljeU5hbWUsCiAgY2F0Y2hSdW50aW1lRXJyb3I6IG9wdGlvbnMub3ZlcmxheS5ydW50aW1lRXJyb3JzCn0gOiB7CiAgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZTogZmFsc2UsCiAgY2F0Y2hSdW50aW1lRXJyb3I6IG9wdGlvbnMub3ZlcmxheQp9KSA6IHsKICBzZW5kOiBmdW5jdGlvbiBzZW5kKCkge30KfTsKdmFyIG9uU29ja2V0TWVzc2FnZSA9IHsKICBob3Q6IGZ1bmN0aW9uIGhvdCgpIHsKICAgIGlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LmhvdCA9PT0gImZhbHNlIikgewogICAgICByZXR1cm47CiAgICB9CiAgICBvcHRpb25zLmhvdCA9IHRydWU7CiAgfSwKICBsaXZlUmVsb2FkOiBmdW5jdGlvbiBsaXZlUmVsb2FkKCkgewogICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnlbImxpdmUtcmVsb2FkIl0gPT09ICJmYWxzZSIpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgb3B0aW9ucy5saXZlUmVsb2FkID0gdHJ1ZTsKICB9LAogIGludmFsaWQ6IGZ1bmN0aW9uIGludmFsaWQoKSB7CiAgICBfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18ubG9nLmluZm8oIkFwcCB1cGRhdGVkLiBSZWNvbXBpbGluZy4uLiIpOwoKICAgIC8vIEZpeGVzICMxMDQyLiBvdmVybGF5IGRvZXNuJ3QgY2xlYXIgaWYgZXJyb3JzIGFyZSBmaXhlZCBidXQgd2FybmluZ3MgcmVtYWluLgogICAgaWYgKG9wdGlvbnMub3ZlcmxheSkgewogICAgICBvdmVybGF5LnNlbmQoewogICAgICAgIHR5cGU6ICJESVNNSVNTIgogICAgICB9KTsKICAgIH0KICAgICgwLF91dGlsc19zZW5kTWVzc2FnZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fWyJkZWZhdWx0Il0pKCJJbnZhbGlkIik7CiAgfSwKICAvKioKICAgKiBAcGFyYW0ge3N0cmluZ30gaGFzaAogICAqLwogIGhhc2g6IGZ1bmN0aW9uIGhhc2goX2hhc2gpIHsKICAgIHN0YXR1cy5wcmV2aW91c0hhc2ggPSBzdGF0dXMuY3VycmVudEhhc2g7CiAgICBzdGF0dXMuY3VycmVudEhhc2ggPSBfaGFzaDsKICB9LAogIGxvZ2dpbmc6IHNldEFsbExvZ0xldmVsLAogIC8qKgogICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUKICAgKi8KICBvdmVybGF5OiBmdW5jdGlvbiBvdmVybGF5KHZhbHVlKSB7CiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAidW5kZWZpbmVkIikgewogICAgICByZXR1cm47CiAgICB9CiAgICBvcHRpb25zLm92ZXJsYXkgPSB2YWx1ZTsKICB9LAogIC8qKgogICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZQogICAqLwogIHJlY29ubmVjdDogZnVuY3Rpb24gcmVjb25uZWN0KHZhbHVlKSB7CiAgICBpZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5yZWNvbm5lY3QgPT09ICJmYWxzZSIpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgb3B0aW9ucy5yZWNvbm5lY3QgPSB2YWx1ZTsKICB9LAogIC8qKgogICAqIEBwYXJhbSB7Ym9vbGVhbn0gdmFsdWUKICAgKi8KICBwcm9ncmVzczogZnVuY3Rpb24gcHJvZ3Jlc3ModmFsdWUpIHsKICAgIG9wdGlvbnMucHJvZ3Jlc3MgPSB2YWx1ZTsKICB9LAogIC8qKgogICAqIEBwYXJhbSB7eyBwbHVnaW5OYW1lPzogc3RyaW5nLCBwZXJjZW50OiBudW1iZXIsIG1zZzogc3RyaW5nIH19IGRhdGEKICAgKi8KICAicHJvZ3Jlc3MtdXBkYXRlIjogZnVuY3Rpb24gcHJvZ3Jlc3NVcGRhdGUoZGF0YSkgewogICAgaWYgKG9wdGlvbnMucHJvZ3Jlc3MpIHsKICAgICAgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLmxvZy5pbmZvKCIiLmNvbmNhdChkYXRhLnBsdWdpbk5hbWUgPyAiWyIuY29uY2F0KGRhdGEucGx1Z2luTmFtZSwgIl0gIikgOiAiIikuY29uY2F0KGRhdGEucGVyY2VudCwgIiUgLSAiKS5jb25jYXQoZGF0YS5tc2csICIuIikpOwogICAgfQogICAgKDAsX3V0aWxzX3NlbmRNZXNzYWdlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bImRlZmF1bHQiXSkoIlByb2dyZXNzIiwgZGF0YSk7CiAgfSwKICAic3RpbGwtb2siOiBmdW5jdGlvbiBzdGlsbE9rKCkgewogICAgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLmxvZy5pbmZvKCJOb3RoaW5nIGNoYW5nZWQuIik7CiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7CiAgICAgIG92ZXJsYXkuc2VuZCh7CiAgICAgICAgdHlwZTogIkRJU01JU1MiCiAgICAgIH0pOwogICAgfQogICAgKDAsX3V0aWxzX3NlbmRNZXNzYWdlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bImRlZmF1bHQiXSkoIlN0aWxsT2siKTsKICB9LAogIG9rOiBmdW5jdGlvbiBvaygpIHsKICAgICgwLF91dGlsc19zZW5kTWVzc2FnZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fWyJkZWZhdWx0Il0pKCJPayIpOwogICAgaWYgKG9wdGlvbnMub3ZlcmxheSkgewogICAgICBvdmVybGF5LnNlbmQoewogICAgICAgIHR5cGU6ICJESVNNSVNTIgogICAgICB9KTsKICAgIH0KICAgICgwLF91dGlsc19yZWxvYWRBcHBfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX1siZGVmYXVsdCJdKShvcHRpb25zLCBzdGF0dXMpOwogIH0sCiAgLy8gVE9ETzogcmVtb3ZlIGluIHY1IGluIGZhdm9yIG9mICdzdGF0aWMtY2hhbmdlZCcKICAvKioKICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZQogICAqLwogICJjb250ZW50LWNoYW5nZWQiOiBmdW5jdGlvbiBjb250ZW50Q2hhbmdlZChmaWxlKSB7CiAgICBfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18ubG9nLmluZm8oIiIuY29uY2F0KGZpbGUgPyAiXCIiLmNvbmNhdChmaWxlLCAiXCIiKSA6ICJDb250ZW50IiwgIiBmcm9tIHN0YXRpYyBkaXJlY3Rvcnkgd2FzIGNoYW5nZWQuIFJlbG9hZGluZy4uLiIpKTsKICAgIHNlbGYubG9jYXRpb24ucmVsb2FkKCk7CiAgfSwKICAvKioKICAgKiBAcGFyYW0ge3N0cmluZ30gZmlsZQogICAqLwogICJzdGF0aWMtY2hhbmdlZCI6IGZ1bmN0aW9uIHN0YXRpY0NoYW5nZWQoZmlsZSkgewogICAgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLmxvZy5pbmZvKCIiLmNvbmNhdChmaWxlID8gIlwiIi5jb25jYXQoZmlsZSwgIlwiIikgOiAiQ29udGVudCIsICIgZnJvbSBzdGF0aWMgZGlyZWN0b3J5IHdhcyBjaGFuZ2VkLiBSZWxvYWRpbmcuLi4iKSk7CiAgICBzZWxmLmxvY2F0aW9uLnJlbG9hZCgpOwogIH0sCiAgLyoqCiAgICogQHBhcmFtIHtFcnJvcltdfSB3YXJuaW5ncwogICAqIEBwYXJhbSB7YW55fSBwYXJhbXMKICAgKi8KICB3YXJuaW5nczogZnVuY3Rpb24gd2FybmluZ3MoX3dhcm5pbmdzLCBwYXJhbXMpIHsKICAgIF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5sb2cud2FybigiV2FybmluZ3Mgd2hpbGUgY29tcGlsaW5nLiIpOwogICAgdmFyIHByaW50YWJsZVdhcm5pbmdzID0gX3dhcm5pbmdzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgdmFyIF9mb3JtYXRQcm9ibGVtID0gKDAsX292ZXJsYXlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5mb3JtYXRQcm9ibGVtKSgid2FybmluZyIsIGVycm9yKSwKICAgICAgICBoZWFkZXIgPSBfZm9ybWF0UHJvYmxlbS5oZWFkZXIsCiAgICAgICAgYm9keSA9IF9mb3JtYXRQcm9ibGVtLmJvZHk7CiAgICAgIHJldHVybiAiIi5jb25jYXQoaGVhZGVyLCAiXG4iKS5jb25jYXQoKDAsX3V0aWxzX3N0cmlwQW5zaV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fWyJkZWZhdWx0Il0pKGJvZHkpKTsKICAgIH0pOwogICAgKDAsX3V0aWxzX3NlbmRNZXNzYWdlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bImRlZmF1bHQiXSkoIldhcm5pbmdzIiwgcHJpbnRhYmxlV2FybmluZ3MpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmludGFibGVXYXJuaW5ncy5sZW5ndGg7IGkrKykgewogICAgICBfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18ubG9nLndhcm4ocHJpbnRhYmxlV2FybmluZ3NbaV0pOwogICAgfQogICAgdmFyIG5lZWRTaG93T3ZlcmxheUZvcldhcm5pbmdzID0gdHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gImJvb2xlYW4iID8gb3B0aW9ucy5vdmVybGF5IDogb3B0aW9ucy5vdmVybGF5ICYmIG9wdGlvbnMub3ZlcmxheS53YXJuaW5nczsKICAgIGlmIChuZWVkU2hvd092ZXJsYXlGb3JXYXJuaW5ncykgewogICAgICBvdmVybGF5LnNlbmQoewogICAgICAgIHR5cGU6ICJCVUlMRF9FUlJPUiIsCiAgICAgICAgbGV2ZWw6ICJ3YXJuaW5nIiwKICAgICAgICBtZXNzYWdlczogX3dhcm5pbmdzCiAgICAgIH0pOwogICAgfQogICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMucHJldmVudFJlbG9hZGluZykgewogICAgICByZXR1cm47CiAgICB9CiAgICAoMCxfdXRpbHNfcmVsb2FkQXBwX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV83X19bImRlZmF1bHQiXSkob3B0aW9ucywgc3RhdHVzKTsKICB9LAogIC8qKgogICAqIEBwYXJhbSB7RXJyb3JbXX0gZXJyb3JzCiAgICovCiAgZXJyb3JzOiBmdW5jdGlvbiBlcnJvcnMoX2Vycm9ycykgewogICAgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLmxvZy5lcnJvcigiRXJyb3JzIHdoaWxlIGNvbXBpbGluZy4gUmVsb2FkIHByZXZlbnRlZC4iKTsKICAgIHZhciBwcmludGFibGVFcnJvcnMgPSBfZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgdmFyIF9mb3JtYXRQcm9ibGVtMiA9ICgwLF9vdmVybGF5X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uZm9ybWF0UHJvYmxlbSkoImVycm9yIiwgZXJyb3IpLAogICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtMi5oZWFkZXIsCiAgICAgICAgYm9keSA9IF9mb3JtYXRQcm9ibGVtMi5ib2R5OwogICAgICByZXR1cm4gIiIuY29uY2F0KGhlYWRlciwgIlxuIikuY29uY2F0KCgwLF91dGlsc19zdHJpcEFuc2lfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX1siZGVmYXVsdCJdKShib2R5KSk7CiAgICB9KTsKICAgICgwLF91dGlsc19zZW5kTWVzc2FnZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fWyJkZWZhdWx0Il0pKCJFcnJvcnMiLCBwcmludGFibGVFcnJvcnMpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmludGFibGVFcnJvcnMubGVuZ3RoOyBpKyspIHsKICAgICAgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLmxvZy5lcnJvcihwcmludGFibGVFcnJvcnNbaV0pOwogICAgfQogICAgdmFyIG5lZWRTaG93T3ZlcmxheUZvckVycm9ycyA9IHR5cGVvZiBvcHRpb25zLm92ZXJsYXkgPT09ICJib29sZWFuIiA/IG9wdGlvbnMub3ZlcmxheSA6IG9wdGlvbnMub3ZlcmxheSAmJiBvcHRpb25zLm92ZXJsYXkuZXJyb3JzOwogICAgaWYgKG5lZWRTaG93T3ZlcmxheUZvckVycm9ycykgewogICAgICBvdmVybGF5LnNlbmQoewogICAgICAgIHR5cGU6ICJCVUlMRF9FUlJPUiIsCiAgICAgICAgbGV2ZWw6ICJlcnJvciIsCiAgICAgICAgbWVzc2FnZXM6IF9lcnJvcnMKICAgICAgfSk7CiAgICB9CiAgfSwKICAvKioKICAgKiBAcGFyYW0ge0Vycm9yfSBlcnJvcgogICAqLwogIGVycm9yOiBmdW5jdGlvbiBlcnJvcihfZXJyb3IpIHsKICAgIF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5sb2cuZXJyb3IoX2Vycm9yKTsKICB9LAogIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHsKICAgIF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5sb2cuaW5mbygiRGlzY29ubmVjdGVkISIpOwogICAgaWYgKG9wdGlvbnMub3ZlcmxheSkgewogICAgICBvdmVybGF5LnNlbmQoewogICAgICAgIHR5cGU6ICJESVNNSVNTIgogICAgICB9KTsKICAgIH0KICAgICgwLF91dGlsc19zZW5kTWVzc2FnZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fWyJkZWZhdWx0Il0pKCJDbG9zZSIpOwogIH0KfTsKdmFyIHNvY2tldFVSTCA9ICgwLF91dGlsc19jcmVhdGVTb2NrZXRVUkxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfX1siZGVmYXVsdCJdKShwYXJzZWRSZXNvdXJjZVF1ZXJ5KTsKKDAsX3NvY2tldF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fWyJkZWZhdWx0Il0pKHNvY2tldFVSTCwgb25Tb2NrZXRNZXNzYWdlLCBvcHRpb25zLnJlY29ubmVjdCk7CgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9tb2R1bGVzL2xvZ2dlci9pbmRleC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4gewoKLyoqKioqKi8gKGZ1bmN0aW9uKCkgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwCi8qKioqKiovIAkidXNlIHN0cmljdCI7Ci8qKioqKiovIAl2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7CgovKioqLyAiLi9jbGllbnQtc3JjL21vZHVsZXMvbG9nZ2VyL1N5bmNCYWlsSG9va0Zha2UuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvU3luY0JhaWxIb29rRmFrZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovIChmdW5jdGlvbihtb2R1bGUpIHsKCgoKLyoqCiAqIENsaWVudCBzdHViIGZvciB0YXBhYmxlIFN5bmNCYWlsSG9vawogKi8KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjbGllbnRUYXBhYmxlU3luY0JhaWxIb29rKCkgewogIHJldHVybiB7CiAgICBjYWxsOiBmdW5jdGlvbiBjYWxsKCkge30KICB9Owp9OwoKLyoqKi8gfSksCgovKioqLyAiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL0xvZ2dlci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgewoKLyoKCU1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCglBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhCiovCgoKCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsKICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOwp9CmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsKfQpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7CiAgaWYgKCFvKSByZXR1cm47CiAgaWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7CiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOwogIGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOwogIGlmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7CiAgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsKfQpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAodHlwZW9mICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KSAhPT0gInVuZGVmaW5lZCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gInVuZGVmaW5lZCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlclsiQEBpdGVyYXRvciJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsKfQpmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgewogIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOwogIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTsKICByZXR1cm4gYXJyMjsKfQpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7CiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOwogIH0KfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7CiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsKICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsKICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsKICAgIGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgX3RvUHJvcGVydHlLZXkoZGVzY3JpcHRvci5rZXkpLCBkZXNjcmlwdG9yKTsKICB9Cn0KZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgewogIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOwogIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsICJwcm90b3R5cGUiLCB7CiAgICB3cml0YWJsZTogZmFsc2UKICB9KTsKICByZXR1cm4gQ29uc3RydWN0b3I7Cn0KZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7CiAgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsICJzdHJpbmciKTsKICByZXR1cm4gdHlwZW9mIGtleSA9PT0gInN5bWJvbCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsKfQpmdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsKICBpZiAodHlwZW9mIGlucHV0ICE9PSAib2JqZWN0IiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OwogIHZhciBwcmltID0gaW5wdXRbKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pLnRvUHJpbWl0aXZlXTsKICBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7CiAgICB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICJkZWZhdWx0Iik7CiAgICBpZiAodHlwZW9mIHJlcyAhPT0gIm9iamVjdCIpIHJldHVybiByZXM7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpOwogIH0KICByZXR1cm4gKGhpbnQgPT09ICJzdHJpbmciID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7Cn0KdmFyIExvZ1R5cGUgPSBPYmplY3QuZnJlZXplKHsKICBlcnJvcjogLyoqIEB0eXBlIHsiZXJyb3IifSAqLyJlcnJvciIsCiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHMKICB3YXJuOiAvKiogQHR5cGUgeyJ3YXJuIn0gKi8id2FybiIsCiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHMKICBpbmZvOiAvKiogQHR5cGUgeyJpbmZvIn0gKi8iaW5mbyIsCiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHMKICBsb2c6IC8qKiBAdHlwZSB7ImxvZyJ9ICovImxvZyIsCiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHMKICBkZWJ1ZzogLyoqIEB0eXBlIHsiZGVidWcifSAqLyJkZWJ1ZyIsCiAgLy8gbWVzc2FnZSwgYyBzdHlsZSBhcmd1bWVudHMKCiAgdHJhY2U6IC8qKiBAdHlwZSB7InRyYWNlIn0gKi8idHJhY2UiLAogIC8vIG5vIGFyZ3VtZW50cwoKICBncm91cDogLyoqIEB0eXBlIHsiZ3JvdXAifSAqLyJncm91cCIsCiAgLy8gW2xhYmVsXQogIGdyb3VwQ29sbGFwc2VkOiAvKiogQHR5cGUgeyJncm91cENvbGxhcHNlZCJ9ICovImdyb3VwQ29sbGFwc2VkIiwKICAvLyBbbGFiZWxdCiAgZ3JvdXBFbmQ6IC8qKiBAdHlwZSB7Imdyb3VwRW5kIn0gKi8iZ3JvdXBFbmQiLAogIC8vIFtsYWJlbF0KCiAgcHJvZmlsZTogLyoqIEB0eXBlIHsicHJvZmlsZSJ9ICovInByb2ZpbGUiLAogIC8vIFtwcm9maWxlTmFtZV0KICBwcm9maWxlRW5kOiAvKiogQHR5cGUgeyJwcm9maWxlRW5kIn0gKi8icHJvZmlsZUVuZCIsCiAgLy8gW3Byb2ZpbGVOYW1lXQoKICB0aW1lOiAvKiogQHR5cGUgeyJ0aW1lIn0gKi8idGltZSIsCiAgLy8gbmFtZSwgdGltZSBhcyBbc2Vjb25kcywgbmFub3NlY29uZHNdCgogIGNsZWFyOiAvKiogQHR5cGUgeyJjbGVhciJ9ICovImNsZWFyIiwKICAvLyBubyBhcmd1bWVudHMKICBzdGF0dXM6IC8qKiBAdHlwZSB7InN0YXR1cyJ9ICovInN0YXR1cyIgLy8gbWVzc2FnZSwgYXJndW1lbnRzCn0pOwoKZXhwb3J0cy5Mb2dUeXBlID0gTG9nVHlwZTsKCi8qKiBAdHlwZWRlZiB7dHlwZW9mIExvZ1R5cGVba2V5b2YgdHlwZW9mIExvZ1R5cGVdfSBMb2dUeXBlRW51bSAqLwoKdmFyIExPR19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gInVuZGVmaW5lZCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoIndlYnBhY2sgbG9nZ2VyIHJhdyBsb2cgbWV0aG9kIik7CnZhciBUSU1FUlNfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pKCJ3ZWJwYWNrIGxvZ2dlciB0aW1lcyIpOwp2YXIgVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MID0gKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pKCJ3ZWJwYWNrIGxvZ2dlciBhZ2dyZWdhdGVkIHRpbWVzIik7CnZhciBXZWJwYWNrTG9nZ2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAvKioKICAgKiBAcGFyYW0ge2Z1bmN0aW9uKExvZ1R5cGVFbnVtLCBhbnlbXT0pOiB2b2lkfSBsb2cgbG9nIGZ1bmN0aW9uCiAgICogQHBhcmFtIHtmdW5jdGlvbihzdHJpbmcgfCBmdW5jdGlvbigpOiBzdHJpbmcpOiBXZWJwYWNrTG9nZ2VyfSBnZXRDaGlsZExvZ2dlciBmdW5jdGlvbiB0byBjcmVhdGUgY2hpbGQgbG9nZ2VyCiAgICovCiAgZnVuY3Rpb24gV2VicGFja0xvZ2dlcihsb2csIGdldENoaWxkTG9nZ2VyKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2VicGFja0xvZ2dlcik7CiAgICB0aGlzW0xPR19TWU1CT0xdID0gbG9nOwogICAgdGhpcy5nZXRDaGlsZExvZ2dlciA9IGdldENoaWxkTG9nZ2VyOwogIH0KICBfY3JlYXRlQ2xhc3MoV2VicGFja0xvZ2dlciwgW3sKICAgIGtleTogImVycm9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvcigpIHsKICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgICAgfQogICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZXJyb3IsIGFyZ3MpOwogICAgfQogIH0sIHsKICAgIGtleTogIndhcm4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHdhcm4oKSB7CiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykgewogICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTsKICAgICAgfQogICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUud2FybiwgYXJncyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaW5mbyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5mbygpIHsKICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4zKSwgX2tleTMgPSAwOyBfa2V5MyA8IF9sZW4zOyBfa2V5MysrKSB7CiAgICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdOwogICAgICB9CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5pbmZvLCBhcmdzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJsb2ciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGxvZygpIHsKICAgICAgZm9yICh2YXIgX2xlbjQgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7CiAgICAgICAgYXJnc1tfa2V5NF0gPSBhcmd1bWVudHNbX2tleTRdOwogICAgICB9CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5sb2csIGFyZ3MpOwogICAgfQogIH0sIHsKICAgIGtleTogImRlYnVnIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBkZWJ1ZygpIHsKICAgICAgZm9yICh2YXIgX2xlbjUgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW41KSwgX2tleTUgPSAwOyBfa2V5NSA8IF9sZW41OyBfa2V5NSsrKSB7CiAgICAgICAgYXJnc1tfa2V5NV0gPSBhcmd1bWVudHNbX2tleTVdOwogICAgICB9CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5kZWJ1ZywgYXJncyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiYXNzZXJ0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhc3NlcnQoYXNzZXJ0aW9uKSB7CiAgICAgIGlmICghYXNzZXJ0aW9uKSB7CiAgICAgICAgZm9yICh2YXIgX2xlbjYgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW42ID4gMSA/IF9sZW42IC0gMSA6IDApLCBfa2V5NiA9IDE7IF9rZXk2IDwgX2xlbjY7IF9rZXk2KyspIHsKICAgICAgICAgIGFyZ3NbX2tleTYgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Nl07CiAgICAgICAgfQogICAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5lcnJvciwgYXJncyk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0cmFjZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhY2UoKSB7CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50cmFjZSwgWyJUcmFjZSJdKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjbGVhciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2xlYXIoKSB7CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5jbGVhcik7CiAgICB9CiAgfSwgewogICAga2V5OiAic3RhdHVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdGF0dXMoKSB7CiAgICAgIGZvciAodmFyIF9sZW43ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuNyksIF9rZXk3ID0gMDsgX2tleTcgPCBfbGVuNzsgX2tleTcrKykgewogICAgICAgIGFyZ3NbX2tleTddID0gYXJndW1lbnRzW19rZXk3XTsKICAgICAgfQogICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuc3RhdHVzLCBhcmdzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJncm91cCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXAoKSB7CiAgICAgIGZvciAodmFyIF9sZW44ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuOCksIF9rZXk4ID0gMDsgX2tleTggPCBfbGVuODsgX2tleTgrKykgewogICAgICAgIGFyZ3NbX2tleThdID0gYXJndW1lbnRzW19rZXk4XTsKICAgICAgfQogICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXAsIGFyZ3MpOwogICAgfQogIH0sIHsKICAgIGtleTogImdyb3VwQ29sbGFwc2VkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cENvbGxhcHNlZCgpIHsKICAgICAgZm9yICh2YXIgX2xlbjkgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW45KSwgX2tleTkgPSAwOyBfa2V5OSA8IF9sZW45OyBfa2V5OSsrKSB7CiAgICAgICAgYXJnc1tfa2V5OV0gPSBhcmd1bWVudHNbX2tleTldOwogICAgICB9CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cENvbGxhcHNlZCwgYXJncyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ3JvdXBFbmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwRW5kKCkgewogICAgICBmb3IgKHZhciBfbGVuMTAgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4xMCksIF9rZXkxMCA9IDA7IF9rZXkxMCA8IF9sZW4xMDsgX2tleTEwKyspIHsKICAgICAgICBhcmdzW19rZXkxMF0gPSBhcmd1bWVudHNbX2tleTEwXTsKICAgICAgfQogICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUuZ3JvdXBFbmQsIGFyZ3MpOwogICAgfQogIH0sIHsKICAgIGtleTogInByb2ZpbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByb2ZpbGUobGFiZWwpIHsKICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnByb2ZpbGUsIFtsYWJlbF0pOwogICAgfQogIH0sIHsKICAgIGtleTogInByb2ZpbGVFbmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHByb2ZpbGVFbmQobGFiZWwpIHsKICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnByb2ZpbGVFbmQsIFtsYWJlbF0pOwogICAgfQogIH0sIHsKICAgIGtleTogInRpbWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWUobGFiZWwpIHsKICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXSA9IHRoaXNbVElNRVJTX1NZTUJPTF0gfHwgbmV3IE1hcCgpOwogICAgICB0aGlzW1RJTUVSU19TWU1CT0xdLnNldChsYWJlbCwgcHJvY2Vzcy5ocnRpbWUoKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidGltZUxvZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUxvZyhsYWJlbCkgewogICAgICB2YXIgcHJldiA9IHRoaXNbVElNRVJTX1NZTUJPTF0gJiYgdGhpc1tUSU1FUlNfU1lNQk9MXS5nZXQobGFiZWwpOwogICAgICBpZiAoIXByZXYpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIk5vIHN1Y2ggbGFiZWwgJyIuY29uY2F0KGxhYmVsLCAiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lTG9nKCkiKSk7CiAgICAgIH0KICAgICAgdmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZShwcmV2KTsKICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInRpbWVFbmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVFbmQobGFiZWwpIHsKICAgICAgdmFyIHByZXYgPSB0aGlzW1RJTUVSU19TWU1CT0xdICYmIHRoaXNbVElNRVJTX1NZTUJPTF0uZ2V0KGxhYmVsKTsKICAgICAgaWYgKCFwcmV2KSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJObyBzdWNoIGxhYmVsICciLmNvbmNhdChsYWJlbCwgIicgZm9yIFdlYnBhY2tMb2dnZXIudGltZUVuZCgpIikpOwogICAgICB9CiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7CiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTsKICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRpbWUsIFtsYWJlbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aW1lKSkpOwogICAgfQogIH0sIHsKICAgIGtleTogInRpbWVBZ2dyZWdhdGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVBZ2dyZWdhdGUobGFiZWwpIHsKICAgICAgdmFyIHByZXYgPSB0aGlzW1RJTUVSU19TWU1CT0xdICYmIHRoaXNbVElNRVJTX1NZTUJPTF0uZ2V0KGxhYmVsKTsKICAgICAgaWYgKCFwcmV2KSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJObyBzdWNoIGxhYmVsICciLmNvbmNhdChsYWJlbCwgIicgZm9yIFdlYnBhY2tMb2dnZXIudGltZUFnZ3JlZ2F0ZSgpIikpOwogICAgICB9CiAgICAgIHZhciB0aW1lID0gcHJvY2Vzcy5ocnRpbWUocHJldik7CiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uZGVsZXRlKGxhYmVsKTsKICAgICAgdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdIHx8IG5ldyBNYXAoKTsKICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uZ2V0KGxhYmVsKTsKICAgICAgaWYgKGN1cnJlbnQgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmICh0aW1lWzFdICsgY3VycmVudFsxXSA+IDFlOSkgewogICAgICAgICAgdGltZVswXSArPSBjdXJyZW50WzBdICsgMTsKICAgICAgICAgIHRpbWVbMV0gPSB0aW1lWzFdIC0gMWU5ICsgY3VycmVudFsxXTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGltZVswXSArPSBjdXJyZW50WzBdOwogICAgICAgICAgdGltZVsxXSArPSBjdXJyZW50WzFdOwogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0uc2V0KGxhYmVsLCB0aW1lKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0aW1lQWdncmVnYXRlRW5kIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lQWdncmVnYXRlRW5kKGxhYmVsKSB7CiAgICAgIGlmICh0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gPT09IHVuZGVmaW5lZCkgcmV0dXJuOwogICAgICB2YXIgdGltZSA9IHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5nZXQobGFiZWwpOwogICAgICBpZiAodGltZSA9PT0gdW5kZWZpbmVkKSByZXR1cm47CiAgICAgIHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5kZWxldGUobGFiZWwpOwogICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudGltZSwgW2xhYmVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRpbWUpKSk7CiAgICB9CiAgfV0pOwogIHJldHVybiBXZWJwYWNrTG9nZ2VyOwp9KCk7CmV4cG9ydHMuTG9nZ2VyID0gV2VicGFja0xvZ2dlcjsKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMTEyODVfXykgewoKLyoKCU1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCglBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhCiovCgoKCmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsKICByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOwp9CmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsKICB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gc3ByZWFkIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsKfQpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7CiAgaWYgKCFvKSByZXR1cm47CiAgaWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7CiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOwogIGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOwogIGlmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7CiAgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsKfQpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsKICBpZiAodHlwZW9mICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KSAhPT0gInVuZGVmaW5lZCIgJiYgaXRlclsodHlwZW9mIFN5bWJvbCAhPT0gInVuZGVmaW5lZCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlclsiQEBpdGVyYXRvciJdICE9IG51bGwpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOwp9CmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsKICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTsKfQpmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgewogIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOwogIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgYXJyMltpXSA9IGFycltpXTsKICByZXR1cm4gYXJyMjsKfQp2YXIgX3JlcXVpcmUgPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMTEyODVfXygvKiEgLi9Mb2dnZXIgKi8gIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzIiksCiAgTG9nVHlwZSA9IF9yZXF1aXJlLkxvZ1R5cGU7CgovKiogQHR5cGVkZWYge2ltcG9ydCgiLi4vLi4vZGVjbGFyYXRpb25zL1dlYnBhY2tPcHRpb25zIikuRmlsdGVySXRlbVR5cGVzfSBGaWx0ZXJJdGVtVHlwZXMgKi8KLyoqIEB0eXBlZGVmIHtpbXBvcnQoIi4uLy4uL2RlY2xhcmF0aW9ucy9XZWJwYWNrT3B0aW9ucyIpLkZpbHRlclR5cGVzfSBGaWx0ZXJUeXBlcyAqLwovKiogQHR5cGVkZWYge2ltcG9ydCgiLi9Mb2dnZXIiKS5Mb2dUeXBlRW51bX0gTG9nVHlwZUVudW0gKi8KCi8qKiBAdHlwZWRlZiB7ZnVuY3Rpb24oc3RyaW5nKTogYm9vbGVhbn0gRmlsdGVyRnVuY3Rpb24gKi8KCi8qKgogKiBAdHlwZWRlZiB7T2JqZWN0fSBMb2dnZXJDb25zb2xlCiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oKTogdm9pZH0gY2xlYXIKICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiB2b2lkfSB0cmFjZQogKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gaW5mbwogKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZH0gbG9nCiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSB3YXJuCiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBlcnJvcgogKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGRlYnVnCiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gZ3JvdXAKICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cENvbGxhcHNlZAogKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGdyb3VwRW5kCiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gc3RhdHVzCiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gcHJvZmlsZQogKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IHByb2ZpbGVFbmQKICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBsb2dUaW1lCiAqLwoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IExvZ2dlck9wdGlvbnMKICogQHByb3BlcnR5IHtmYWxzZXx0cnVlfCJub25lInwiZXJyb3IifCJ3YXJuInwiaW5mbyJ8ImxvZyJ8InZlcmJvc2UifSBsZXZlbCBsb2dsZXZlbAogKiBAcHJvcGVydHkge0ZpbHRlclR5cGVzfGJvb2xlYW59IGRlYnVnIGZpbHRlciBmb3IgZGVidWcgbG9nZ2luZwogKiBAcHJvcGVydHkge0xvZ2dlckNvbnNvbGV9IGNvbnNvbGUgdGhlIGNvbnNvbGUgdG8gbG9nIHRvCiAqLwoKLyoqCiAqIEBwYXJhbSB7RmlsdGVySXRlbVR5cGVzfSBpdGVtIGFuIGlucHV0IGl0ZW0KICogQHJldHVybnMge0ZpbHRlckZ1bmN0aW9ufSBmaWx0ZXIgZnVuY3Rpb24KICovCnZhciBmaWx0ZXJUb0Z1bmN0aW9uID0gZnVuY3Rpb24gZmlsdGVyVG9GdW5jdGlvbihpdGVtKSB7CiAgaWYgKHR5cGVvZiBpdGVtID09PSAic3RyaW5nIikgewogICAgdmFyIHJlZ0V4cCA9IG5ldyBSZWdFeHAoIltcXFxcL10iLmNvbmNhdChpdGVtLnJlcGxhY2UoCiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGUKICAgIC9bLVtcXXt9KCkqKz8uXFxeJHxdL2csICJcXCQmIiksICIoW1xcXFwvXXwkfCF8XFw/KSIpKTsKICAgIHJldHVybiBmdW5jdGlvbiAoaWRlbnQpIHsKICAgICAgcmV0dXJuIHJlZ0V4cC50ZXN0KGlkZW50KTsKICAgIH07CiAgfQogIGlmIChpdGVtICYmIHR5cGVvZiBpdGVtID09PSAib2JqZWN0IiAmJiB0eXBlb2YgaXRlbS50ZXN0ID09PSAiZnVuY3Rpb24iKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGlkZW50KSB7CiAgICAgIHJldHVybiBpdGVtLnRlc3QoaWRlbnQpOwogICAgfTsKICB9CiAgaWYgKHR5cGVvZiBpdGVtID09PSAiZnVuY3Rpb24iKSB7CiAgICByZXR1cm4gaXRlbTsKICB9CiAgaWYgKHR5cGVvZiBpdGVtID09PSAiYm9vbGVhbiIpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBpdGVtOwogICAgfTsKICB9Cn07CgovKioKICogQGVudW0ge251bWJlcn0KICovCnZhciBMb2dMZXZlbCA9IHsKICBub25lOiA2LAogIGZhbHNlOiA2LAogIGVycm9yOiA1LAogIHdhcm46IDQsCiAgaW5mbzogMywKICBsb2c6IDIsCiAgdHJ1ZTogMiwKICB2ZXJib3NlOiAxCn07CgovKioKICogQHBhcmFtIHtMb2dnZXJPcHRpb25zfSBvcHRpb25zIG9wdGlvbnMgb2JqZWN0CiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIExvZ1R5cGVFbnVtLCBhbnlbXSk6IHZvaWR9IGxvZ2dpbmcgZnVuY3Rpb24KICovCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKF9yZWYpIHsKICB2YXIgX3JlZiRsZXZlbCA9IF9yZWYubGV2ZWwsCiAgICBsZXZlbCA9IF9yZWYkbGV2ZWwgPT09IHZvaWQgMCA/ICJpbmZvIiA6IF9yZWYkbGV2ZWwsCiAgICBfcmVmJGRlYnVnID0gX3JlZi5kZWJ1ZywKICAgIGRlYnVnID0gX3JlZiRkZWJ1ZyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGRlYnVnLAogICAgY29uc29sZSA9IF9yZWYuY29uc29sZTsKICB2YXIgZGVidWdGaWx0ZXJzID0gdHlwZW9mIGRlYnVnID09PSAiYm9vbGVhbiIgPyBbZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGRlYnVnOwogIH1dIDogLyoqIEB0eXBlIHtGaWx0ZXJJdGVtVHlwZXNbXX0gKi9bXS5jb25jYXQoZGVidWcpLm1hcChmaWx0ZXJUb0Z1bmN0aW9uKTsKICAvKiogQHR5cGUge251bWJlcn0gKi8KICB2YXIgbG9nbGV2ZWwgPSBMb2dMZXZlbFsiIi5jb25jYXQobGV2ZWwpXSB8fCAwOwoKICAvKioKICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBsb2dnZXIKICAgKiBAcGFyYW0ge0xvZ1R5cGVFbnVtfSB0eXBlIHR5cGUgb2YgdGhlIGxvZyBlbnRyeQogICAqIEBwYXJhbSB7YW55W119IGFyZ3MgYXJndW1lbnRzIG9mIHRoZSBsb2cgZW50cnkKICAgKiBAcmV0dXJucyB7dm9pZH0KICAgKi8KICB2YXIgbG9nZ2VyID0gZnVuY3Rpb24gbG9nZ2VyKG5hbWUsIHR5cGUsIGFyZ3MpIHsKICAgIHZhciBsYWJlbGVkQXJncyA9IGZ1bmN0aW9uIGxhYmVsZWRBcmdzKCkgewogICAgICBpZiAoQXJyYXkuaXNBcnJheShhcmdzKSkgewogICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICJzdHJpbmciKSB7CiAgICAgICAgICByZXR1cm4gWyJbIi5jb25jYXQobmFtZSwgIl0gIikuY29uY2F0KGFyZ3NbMF0pXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KGFyZ3Muc2xpY2UoMSkpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIFsiWyIuY29uY2F0KG5hbWUsICJdIildLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gW107CiAgICAgIH0KICAgIH07CiAgICB2YXIgZGVidWcgPSBkZWJ1Z0ZpbHRlcnMuc29tZShmdW5jdGlvbiAoZikgewogICAgICByZXR1cm4gZihuYW1lKTsKICAgIH0pOwogICAgc3dpdGNoICh0eXBlKSB7CiAgICAgIGNhc2UgTG9nVHlwZS5kZWJ1ZzoKICAgICAgICBpZiAoIWRlYnVnKSByZXR1cm47CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucwogICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5kZWJ1ZyA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucwogICAgICAgICAgY29uc29sZS5kZWJ1Zy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgY2FzZSBMb2dUeXBlLmxvZzoKICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47CiAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBMb2dUeXBlLmluZm86CiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmluZm8pIHJldHVybjsKICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBMb2dUeXBlLndhcm46CiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLndhcm4pIHJldHVybjsKICAgICAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBMb2dUeXBlLmVycm9yOgogICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5lcnJvcikgcmV0dXJuOwogICAgICAgIGNvbnNvbGUuZXJyb3IuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBMb2dUeXBlLnRyYWNlOgogICAgICAgIGlmICghZGVidWcpIHJldHVybjsKICAgICAgICBjb25zb2xlLnRyYWNlKCk7CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cENvbGxhcHNlZDoKICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47CiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLnZlcmJvc2UpIHsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5ncm91cENvbGxhcHNlZCA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zCiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIC8vIGZhbGxzIHRocm91Z2gKICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwOgogICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zCiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zCiAgICAgICAgICBjb25zb2xlLmdyb3VwLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIExvZ1R5cGUuZ3JvdXBFbmQ6CiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuOwogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZ3JvdXBFbmQgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgTG9nVHlwZS50aW1lOgogICAgICAgIHsKICAgICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjsKICAgICAgICAgIHZhciBtcyA9IGFyZ3NbMV0gKiAxMDAwICsgYXJnc1syXSAvIDEwMDAwMDA7CiAgICAgICAgICB2YXIgbXNnID0gIlsiLmNvbmNhdChuYW1lLCAiXSAiKS5jb25jYXQoYXJnc1swXSwgIjogIikuY29uY2F0KG1zLCAiIG1zIik7CiAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUubG9nVGltZSA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgICBjb25zb2xlLmxvZ1RpbWUobXNnKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1zZyk7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIGNhc2UgTG9nVHlwZS5wcm9maWxlOgogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUucHJvZmlsZSA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucwogICAgICAgICAgY29uc29sZS5wcm9maWxlLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIExvZ1R5cGUucHJvZmlsZUVuZDoKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zCiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnByb2ZpbGVFbmQgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKICAgICAgICAgIGNvbnNvbGUucHJvZmlsZUVuZC5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgY2FzZSBMb2dUeXBlLmNsZWFyOgogICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zCiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmNsZWFyID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zCiAgICAgICAgICBjb25zb2xlLmNsZWFyKCk7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIExvZ1R5cGUuc3RhdHVzOgogICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5pbmZvKSByZXR1cm47CiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLnN0YXR1cyA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgIGNvbnNvbGUuc3RhdHVzKCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLnN0YXR1cy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggIT09IDApIHsKICAgICAgICAgICAgY29uc29sZS5pbmZvLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBFcnJvcigiVW5leHBlY3RlZCBMb2dUeXBlICIuY29uY2F0KHR5cGUpKTsKICAgIH0KICB9OwogIHJldHVybiBsb2dnZXI7Cn07CgovKioqLyB9KSwKCi8qKiovICIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovIChmdW5jdGlvbihfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzIxMzM0X18pIHsKCi8qCglNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAoJQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYQoqLwoKCgpmdW5jdGlvbiBfZXh0ZW5kcygpIHsKICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsKICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07CiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsKICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgewogICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB0YXJnZXQ7CiAgfTsKICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQp2YXIgU3luY0JhaWxIb29rID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzIxMzM0X18oLyohIHRhcGFibGUvbGliL1N5bmNCYWlsSG9vayAqLyAiLi9jbGllbnQtc3JjL21vZHVsZXMvbG9nZ2VyL1N5bmNCYWlsSG9va0Zha2UuanMiKTsKdmFyIF9yZXF1aXJlID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzIxMzM0X18oLyohIC4vTG9nZ2VyICovICIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL0xvZ2dlci5qcyIpLAogIExvZ2dlciA9IF9yZXF1aXJlLkxvZ2dlcjsKdmFyIGNyZWF0ZUNvbnNvbGVMb2dnZXIgPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjEzMzRfXygvKiEgLi9jcmVhdGVDb25zb2xlTG9nZ2VyICovICIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL2NyZWF0ZUNvbnNvbGVMb2dnZXIuanMiKTsKCi8qKiBAdHlwZSB7Y3JlYXRlQ29uc29sZUxvZ2dlci5Mb2dnZXJPcHRpb25zfSAqLwp2YXIgY3VycmVudERlZmF1bHRMb2dnZXJPcHRpb25zID0gewogIGxldmVsOiAiaW5mbyIsCiAgZGVidWc6IGZhbHNlLAogIGNvbnNvbGU6IGNvbnNvbGUKfTsKdmFyIGN1cnJlbnREZWZhdWx0TG9nZ2VyID0gY3JlYXRlQ29uc29sZUxvZ2dlcihjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMpOwoKLyoqCiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGxvZ2dlcgogKiBAcmV0dXJucyB7TG9nZ2VyfSBhIGxvZ2dlcgogKi8KZXhwb3J0cy5nZXRMb2dnZXIgPSBmdW5jdGlvbiAobmFtZSkgewogIHJldHVybiBuZXcgTG9nZ2VyKGZ1bmN0aW9uICh0eXBlLCBhcmdzKSB7CiAgICBpZiAoZXhwb3J0cy5ob29rcy5sb2cuY2FsbChuYW1lLCB0eXBlLCBhcmdzKSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIGN1cnJlbnREZWZhdWx0TG9nZ2VyKG5hbWUsIHR5cGUsIGFyZ3MpOwogICAgfQogIH0sIGZ1bmN0aW9uIChjaGlsZE5hbWUpIHsKICAgIHJldHVybiBleHBvcnRzLmdldExvZ2dlcigiIi5jb25jYXQobmFtZSwgIi8iKS5jb25jYXQoY2hpbGROYW1lKSk7CiAgfSk7Cn07CgovKioKICogQHBhcmFtIHtjcmVhdGVDb25zb2xlTG9nZ2VyLkxvZ2dlck9wdGlvbnN9IG9wdGlvbnMgbmV3IG9wdGlvbnMsIG1lcmdlIHdpdGggb2xkIG9wdGlvbnMKICogQHJldHVybnMge3ZvaWR9CiAqLwpleHBvcnRzLmNvbmZpZ3VyZURlZmF1bHRMb2dnZXIgPSBmdW5jdGlvbiAob3B0aW9ucykgewogIF9leHRlbmRzKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucywgb3B0aW9ucyk7CiAgY3VycmVudERlZmF1bHRMb2dnZXIgPSBjcmVhdGVDb25zb2xlTG9nZ2VyKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyk7Cn07CmV4cG9ydHMuaG9va3MgPSB7CiAgbG9nOiBuZXcgU3luY0JhaWxIb29rKFsib3JpZ2luIiwgInR5cGUiLCAiYXJncyJdKQp9OwoKLyoqKi8gfSkKCi8qKioqKiovIAl9KTsKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gCS8vIFRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCXZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTsKLyoqKioqKi8gCQovKioqKioqLyAJLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb24KLyoqKioqKi8gCWZ1bmN0aW9uIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMzQ2MV9fKG1vZHVsZUlkKSB7Ci8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCi8qKioqKiovIAkJdmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07Ci8qKioqKiovIAkJaWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7Ci8qKioqKiovIAkJCXJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0czsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSkKLyoqKioqKi8gCQl2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHsKLyoqKioqKi8gCQkJLy8gbm8gbW9kdWxlLmlkIG5lZWRlZAovKioqKioqLyAJCQkvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZAovKioqKioqLyAJCQlleHBvcnRzOiB7fQovKioqKioqLyAJCX07Ci8qKioqKiovIAkKLyoqKioqKi8gCQkvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb24KLyoqKioqKi8gCQlfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjM0NjFfXyk7Ci8qKioqKiovIAkKLyoqKioqKi8gCQkvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQovKioqKioqLyAJCXJldHVybiBtb2R1bGUuZXhwb3J0czsKLyoqKioqKi8gCX0KLyoqKioqKi8gCQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqLyAJLyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovCi8qKioqKiovIAkhZnVuY3Rpb24oKSB7Ci8qKioqKiovIAkJLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0cwovKioqKioqLyAJCV9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMzQ2MV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBkZWZpbml0aW9uKSB7Ci8qKioqKiovIAkJCWZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHsKLyoqKioqKi8gCQkJCWlmKF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMzQ2MV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzIzNDYxX18ubyhleHBvcnRzLCBrZXkpKSB7Ci8qKioqKiovIAkJCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTsKLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfQovKioqKioqLyAJCX07Ci8qKioqKiovIAl9KCk7Ci8qKioqKiovIAkKLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQgKi8KLyoqKioqKi8gCSFmdW5jdGlvbigpIHsKLyoqKioqKi8gCQlfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjM0NjFfXy5vID0gZnVuY3Rpb24ob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfQovKioqKioqLyAJfSgpOwovKioqKioqLyAJCi8qKioqKiovIAkvKiB3ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0ICovCi8qKioqKiovIAkhZnVuY3Rpb24oKSB7Ci8qKioqKiovIAkJLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0cwovKioqKioqLyAJCV9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMzQ2MV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7Ci8qKioqKiovIAkJCWlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykgewovKioqKioqLyAJCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7Ci8qKioqKiovIAkJCX0KLyoqKioqKi8gCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTsKLyoqKioqKi8gCQl9OwovKioqKioqLyAJfSgpOwovKioqKioqLyAJCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0ge307Ci8vIFRoaXMgZW50cnkgbmVlZCB0byBiZSB3cmFwcGVkIGluIGFuIElJRkUgYmVjYXVzZSBpdCBuZWVkIHRvIGJlIGlzb2xhdGVkIGFnYWluc3Qgb3RoZXIgbW9kdWxlcyBpbiB0aGUgY2h1bmsuCiFmdW5jdGlvbigpIHsKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9pbmRleC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwpfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjM0NjFfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAqLyBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjM0NjFfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKLyogaGFybW9ueSBleHBvcnQgKi8gICAiZGVmYXVsdCI6IGZ1bmN0aW9uKCkgeyByZXR1cm4gLyogcmVleHBvcnQgZGVmYXVsdCBleHBvcnQgZnJvbSBuYW1lZCBtb2R1bGUgKi8gd2VicGFja19saWJfbG9nZ2luZ19ydW50aW1lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX187IH0KLyogaGFybW9ueSBleHBvcnQgKi8gfSk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciB3ZWJwYWNrX2xpYl9sb2dnaW5nX3J1bnRpbWVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMzQ2MV9fKC8qISB3ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanMgKi8gIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyIpOwoKfSgpOwp2YXIgX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXyA9IGV4cG9ydHM7CmZvcih2YXIgaSBpbiBfX3dlYnBhY2tfZXhwb3J0c19fKSBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fW2ldID0gX193ZWJwYWNrX2V4cG9ydHNfX1tpXTsKaWYoX193ZWJwYWNrX2V4cG9ydHNfXy5fX2VzTW9kdWxlKSBPYmplY3QuZGVmaW5lUHJvcGVydHkoX193ZWJwYWNrX2V4cG9ydF90YXJnZXRfXywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwovKioqKioqLyB9KSgpCjsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewovKiBoYXJtb255IGV4cG9ydCAqLyAgICJjcmVhdGVPdmVybGF5IjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gY3JlYXRlT3ZlcmxheSksCi8qIGhhcm1vbnkgZXhwb3J0ICovICAgImZvcm1hdFByb2JsZW0iOiAoKSA9PiAoLyogYmluZGluZyAqLyBmb3JtYXRQcm9ibGVtKQovKiBoYXJtb255IGV4cG9ydCAqLyB9KTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGFuc2lfaHRtbF9jb21tdW5pdHlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGFuc2ktaHRtbC1jb21tdW5pdHkgKi8gIi4uLy4uLy55YXJuL2NhY2hlL2Fuc2ktaHRtbC1jb21tdW5pdHktbnBtLTAuMC44LTVlYWVmNTVmMWItMDRjNTY4ZTgzNC56aXAvbm9kZV9tb2R1bGVzL2Fuc2ktaHRtbC1jb21tdW5pdHkvaW5kZXguanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGFuc2lfaHRtbF9jb21tdW5pdHlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihhbnNpX2h0bWxfY29tbXVuaXR5X19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgaHRtbF9lbnRpdGllc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgaHRtbC1lbnRpdGllcyAqLyAiLi4vLi4vLnlhcm4vY2FjaGUvaHRtbC1lbnRpdGllcy1ucG0tMi4zLjMtZTBhYWM2NTZhZi05MjUyMTUwMWRhLnppcC9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvaW5kZXguanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIGh0bWxfZW50aXRpZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubihodG1sX2VudGl0aWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX292ZXJsYXlfcnVudGltZV9lcnJvcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9vdmVybGF5L3J1bnRpbWUtZXJyb3IuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvcnVudGltZS1lcnJvci5qcyIpOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX292ZXJsYXlfc3RhdGVfbWFjaGluZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9vdmVybGF5L3N0YXRlLW1hY2hpbmUuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvc3RhdGUtbWFjaGluZS5qcyIpOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX292ZXJsYXlfc3R5bGVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL292ZXJsYXkvc3R5bGVzLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5L3N0eWxlcy5qcyIpOwpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQpmdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsICJzdHJpbmciKTsgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICJzeW1ib2wiID8ga2V5IDogU3RyaW5nKGtleSk7IH0KZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmICh0eXBlb2YgaW5wdXQgIT09ICJvYmplY3QiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICJkZWZhdWx0Iik7IGlmICh0eXBlb2YgcmVzICE9PSAib2JqZWN0IikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS4iKTsgfSByZXR1cm4gKGhpbnQgPT09ICJzdHJpbmciID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH0KLy8gVGhlIGVycm9yIG92ZXJsYXkgaXMgaW5zcGlyZWQgKGFuZCBtb3N0bHkgY29waWVkKSBmcm9tIENyZWF0ZSBSZWFjdCBBcHAgKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9va2luY3ViYXRvci9jcmVhdGUtcmVhY3QtYXBwKQovLyBUaGV5LCBpbiB0dXJuLCBnb3QgaW5zcGlyZWQgYnkgd2VicGFjay1ob3QtbWlkZGxld2FyZSAoaHR0cHM6Ly9naXRodWIuY29tL2dsZW5qYW1pbi93ZWJwYWNrLWhvdC1taWRkbGV3YXJlKS4KCgoKCgoKdmFyIGNvbG9ycyA9IHsKICByZXNldDogWyJ0cmFuc3BhcmVudCIsICJ0cmFuc3BhcmVudCJdLAogIGJsYWNrOiAiMTgxODE4IiwKICByZWQ6ICJFMzYwNDkiLAogIGdyZWVuOiAiQjNDQjc0IiwKICB5ZWxsb3c6ICJGRkQwODAiLAogIGJsdWU6ICI3Q0FGQzIiLAogIG1hZ2VudGE6ICI3RkFDQ0EiLAogIGN5YW46ICJDM0MyRUYiLAogIGxpZ2h0Z3JleTogIkVCRTdFMyIsCiAgZGFya2dyZXk6ICI2RDc4OTEiCn07CmFuc2lfaHRtbF9jb21tdW5pdHlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkuc2V0Q29sb3JzKGNvbG9ycyk7CgovKioKICogQHBhcmFtIHtzdHJpbmd9IHR5cGUKICogQHBhcmFtIHtzdHJpbmcgIHwgeyBmaWxlPzogc3RyaW5nLCBtb2R1bGVOYW1lPzogc3RyaW5nLCBsb2M/OiBzdHJpbmcsIG1lc3NhZ2U/OiBzdHJpbmc7IHN0YWNrPzogc3RyaW5nW10gfX0gaXRlbQogKiBAcmV0dXJucyB7eyBoZWFkZXI6IHN0cmluZywgYm9keTogc3RyaW5nIH19CiAqLwpmdW5jdGlvbiBmb3JtYXRQcm9ibGVtKHR5cGUsIGl0ZW0pIHsKICB2YXIgaGVhZGVyID0gdHlwZSA9PT0gIndhcm5pbmciID8gIldBUk5JTkciIDogIkVSUk9SIjsKICB2YXIgYm9keSA9ICIiOwogIGlmICh0eXBlb2YgaXRlbSA9PT0gInN0cmluZyIpIHsKICAgIGJvZHkgKz0gaXRlbTsKICB9IGVsc2UgewogICAgdmFyIGZpbGUgPSBpdGVtLmZpbGUgfHwgIiI7CiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnkKICAgIHZhciBtb2R1bGVOYW1lID0gaXRlbS5tb2R1bGVOYW1lID8gaXRlbS5tb2R1bGVOYW1lLmluZGV4T2YoIiEiKSAhPT0gLTEgPyAiIi5jb25jYXQoaXRlbS5tb2R1bGVOYW1lLnJlcGxhY2UoL14oXHN8XFMpKiEvLCAiIiksICIgKCIpLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUsICIpIikgOiAiIi5jb25jYXQoaXRlbS5tb2R1bGVOYW1lKSA6ICIiOwogICAgdmFyIGxvYyA9IGl0ZW0ubG9jOwogICAgaGVhZGVyICs9ICIiLmNvbmNhdChtb2R1bGVOYW1lIHx8IGZpbGUgPyAiIGluICIuY29uY2F0KG1vZHVsZU5hbWUgPyAiIi5jb25jYXQobW9kdWxlTmFtZSkuY29uY2F0KGZpbGUgPyAiICgiLmNvbmNhdChmaWxlLCAiKSIpIDogIiIpIDogZmlsZSkuY29uY2F0KGxvYyA/ICIgIi5jb25jYXQobG9jKSA6ICIiKSA6ICIiKTsKICAgIGJvZHkgKz0gaXRlbS5tZXNzYWdlIHx8ICIiOwogIH0KICBpZiAoQXJyYXkuaXNBcnJheShpdGVtLnN0YWNrKSkgewogICAgaXRlbS5zdGFjay5mb3JFYWNoKGZ1bmN0aW9uIChzdGFjaykgewogICAgICBpZiAodHlwZW9mIHN0YWNrID09PSAic3RyaW5nIikgewogICAgICAgIGJvZHkgKz0gIlxyXG4iLmNvbmNhdChzdGFjayk7CiAgICAgIH0KICAgIH0pOwogIH0KICByZXR1cm4gewogICAgaGVhZGVyOiBoZWFkZXIsCiAgICBib2R5OiBib2R5CiAgfTsKfQoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IENyZWF0ZU92ZXJsYXlPcHRpb25zCiAqIEBwcm9wZXJ0eSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZQogKiBAcHJvcGVydHkge2Jvb2xlYW59IFtjYXRjaFJ1bnRpbWVFcnJvcl0KICovCgovKioKICoKICogQHBhcmFtIHtDcmVhdGVPdmVybGF5T3B0aW9uc30gb3B0aW9ucwogKi8KdmFyIGNyZWF0ZU92ZXJsYXkgPSBmdW5jdGlvbiBjcmVhdGVPdmVybGF5KG9wdGlvbnMpIHsKICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gKi8KICB2YXIgaWZyYW1lQ29udGFpbmVyRWxlbWVudDsKICAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50IHwgbnVsbCB8IHVuZGVmaW5lZH0gKi8KICB2YXIgY29udGFpbmVyRWxlbWVudDsKICAvKiogQHR5cGUge0FycmF5PChlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkgPT4gdm9pZD59ICovCiAgdmFyIG9uTG9hZFF1ZXVlID0gW107CiAgLyoqIEB0eXBlIHtUcnVzdGVkVHlwZVBvbGljeSB8IHVuZGVmaW5lZH0gKi8KICB2YXIgb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeTsKCiAgLyoqCiAgICoKICAgKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50CiAgICogQHBhcmFtIHtDU1NTdHlsZURlY2xhcmF0aW9ufSBzdHlsZQogICAqLwogIGZ1bmN0aW9uIGFwcGx5U3R5bGUoZWxlbWVudCwgc3R5bGUpIHsKICAgIE9iamVjdC5rZXlzKHN0eWxlKS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7CiAgICAgIGVsZW1lbnQuc3R5bGVbcHJvcF0gPSBzdHlsZVtwcm9wXTsKICAgIH0pOwogIH0KCiAgLyoqCiAgICogQHBhcmFtIHtzdHJpbmcgfCBudWxsfSB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lCiAgICovCiAgZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyKHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpIHsKICAgIC8vIEVuYWJsZSBUcnVzdGVkIFR5cGVzIGlmIHRoZXkgYXJlIGF2YWlsYWJsZSBpbiB0aGUgY3VycmVudCBicm93c2VyLgogICAgaWYgKHdpbmRvdy50cnVzdGVkVHlwZXMpIHsKICAgICAgb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeSA9IHdpbmRvdy50cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5KHRydXN0ZWRUeXBlc1BvbGljeU5hbWUgfHwgIndlYnBhY2stZGV2LXNlcnZlciNvdmVybGF5IiwgewogICAgICAgIGNyZWF0ZUhUTUw6IGZ1bmN0aW9uIGNyZWF0ZUhUTUwodmFsdWUpIHsKICAgICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImlmcmFtZSIpOwogICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5pZCA9ICJ3ZWJwYWNrLWRldi1zZXJ2ZXItY2xpZW50LW92ZXJsYXkiOwogICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5zcmMgPSAiYWJvdXQ6YmxhbmsiOwogICAgYXBwbHlTdHlsZShpZnJhbWVDb250YWluZXJFbGVtZW50LCBfb3ZlcmxheV9zdHlsZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5pZnJhbWVTdHlsZSk7CiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGNvbnRlbnRFbGVtZW50ID0gLyoqIEB0eXBlIHtEb2N1bWVudH0gKi8KICAgICAgLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi8KICAgICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5jb250ZW50RG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgIGNvbnRhaW5lckVsZW1lbnQgPSAvKiogQHR5cGUge0RvY3VtZW50fSAqLwogICAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqLwogICAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgY29udGVudEVsZW1lbnQuaWQgPSAid2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5LWRpdiI7CiAgICAgIGFwcGx5U3R5bGUoY29udGVudEVsZW1lbnQsIF9vdmVybGF5X3N0eWxlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLmNvbnRhaW5lclN0eWxlKTsKICAgICAgdmFyIGhlYWRlckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgaGVhZGVyRWxlbWVudC5pbm5lclRleHQgPSAiQ29tcGlsZWQgd2l0aCBwcm9ibGVtczoiOwogICAgICBhcHBseVN0eWxlKGhlYWRlckVsZW1lbnQsIF9vdmVybGF5X3N0eWxlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLmhlYWRlclN0eWxlKTsKICAgICAgdmFyIGNsb3NlQnV0dG9uRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJ1dHRvbiIpOwogICAgICBhcHBseVN0eWxlKGNsb3NlQnV0dG9uRWxlbWVudCwgX292ZXJsYXlfc3R5bGVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uZGlzbWlzc0J1dHRvblN0eWxlKTsKICAgICAgY2xvc2VCdXR0b25FbGVtZW50LmlubmVyVGV4dCA9ICLDlyI7CiAgICAgIGNsb3NlQnV0dG9uRWxlbWVudC5hcmlhTGFiZWwgPSAiRGlzbWlzcyI7CiAgICAgIGNsb3NlQnV0dG9uRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmUKICAgICAgICBvdmVybGF5U2VydmljZS5zZW5kKHsKICAgICAgICAgIHR5cGU6ICJESVNNSVNTIgogICAgICAgIH0pOwogICAgICB9KTsKICAgICAgY29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoaGVhZGVyRWxlbWVudCk7CiAgICAgIGNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNsb3NlQnV0dG9uRWxlbWVudCk7CiAgICAgIGNvbnRlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNvbnRhaW5lckVsZW1lbnQpOwoKICAgICAgLyoqIEB0eXBlIHtEb2N1bWVudH0gKi8KICAgICAgLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi8KICAgICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5jb250ZW50RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250ZW50RWxlbWVudCk7CiAgICAgIG9uTG9hZFF1ZXVlLmZvckVhY2goZnVuY3Rpb24gKG9uTG9hZCkgewogICAgICAgIG9uTG9hZCggLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi9jb250ZW50RWxlbWVudCk7CiAgICAgIH0pOwogICAgICBvbkxvYWRRdWV1ZSA9IFtdOwoKICAgICAgLyoqIEB0eXBlIHtIVE1MSUZyYW1lRWxlbWVudH0gKi8KICAgICAgaWZyYW1lQ29udGFpbmVyRWxlbWVudC5vbmxvYWQgPSBudWxsOwogICAgfTsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lQ29udGFpbmVyRWxlbWVudCk7CiAgfQoKICAvKioKICAgKiBAcGFyYW0geyhlbGVtZW50OiBIVE1MRGl2RWxlbWVudCkgPT4gdm9pZH0gY2FsbGJhY2sKICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWUKICAgKi8KICBmdW5jdGlvbiBlbnN1cmVPdmVybGF5RXhpc3RzKGNhbGxiYWNrLCB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lKSB7CiAgICBpZiAoY29udGFpbmVyRWxlbWVudCkgewogICAgICBjb250YWluZXJFbGVtZW50LmlubmVySFRNTCA9ICIiOwogICAgICAvLyBFdmVyeXRoaW5nIGlzIHJlYWR5LCBjYWxsIHRoZSBjYWxsYmFjayByaWdodCBhd2F5LgogICAgICBjYWxsYmFjayhjb250YWluZXJFbGVtZW50KTsKICAgICAgcmV0dXJuOwogICAgfQogICAgb25Mb2FkUXVldWUucHVzaChjYWxsYmFjayk7CiAgICBpZiAoaWZyYW1lQ29udGFpbmVyRWxlbWVudCkgewogICAgICByZXR1cm47CiAgICB9CiAgICBjcmVhdGVDb250YWluZXIodHJ1c3RlZFR5cGVzUG9saWN5TmFtZSk7CiAgfQoKICAvLyBTdWNjZXNzZnVsIGNvbXBpbGF0aW9uLgogIGZ1bmN0aW9uIGhpZGUoKSB7CiAgICBpZiAoIWlmcmFtZUNvbnRhaW5lckVsZW1lbnQpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIC8vIENsZWFuIHVwIGFuZCByZXNldCBpbnRlcm5hbCBzdGF0ZS4KICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lQ29udGFpbmVyRWxlbWVudCk7CiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gbnVsbDsKICAgIGNvbnRhaW5lckVsZW1lbnQgPSBudWxsOwogIH0KCiAgLy8gQ29tcGlsYXRpb24gd2l0aCBlcnJvcnMgKGUuZy4gc3ludGF4IGVycm9yIG9yIG1pc3NpbmcgbW9kdWxlcykuCiAgLyoqCiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUKICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZyAgfCB7IG1vZHVsZUlkZW50aWZpZXI/OiBzdHJpbmcsIG1vZHVsZU5hbWU/OiBzdHJpbmcsIGxvYz86IHN0cmluZywgbWVzc2FnZT86IHN0cmluZyB9Pn0gbWVzc2FnZXMKICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWUKICAgKi8KICBmdW5jdGlvbiBzaG93KHR5cGUsIG1lc3NhZ2VzLCB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lKSB7CiAgICBlbnN1cmVPdmVybGF5RXhpc3RzKGZ1bmN0aW9uICgpIHsKICAgICAgbWVzc2FnZXMuZm9yRWFjaChmdW5jdGlvbiAobWVzc2FnZSkgewogICAgICAgIHZhciBlbnRyeUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICB2YXIgbXNnU3R5bGUgPSB0eXBlID09PSAid2FybmluZyIgPyBfb3ZlcmxheV9zdHlsZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5tc2dTdHlsZXMud2FybmluZyA6IF9vdmVybGF5X3N0eWxlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLm1zZ1N0eWxlcy5lcnJvcjsKICAgICAgICBhcHBseVN0eWxlKGVudHJ5RWxlbWVudCwgX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtc2dTdHlsZSksIHt9LCB7CiAgICAgICAgICBwYWRkaW5nOiAiMXJlbSAxcmVtIDEuNXJlbSAxcmVtIgogICAgICAgIH0pKTsKICAgICAgICB2YXIgdHlwZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSBmb3JtYXRQcm9ibGVtKHR5cGUsIG1lc3NhZ2UpLAogICAgICAgICAgaGVhZGVyID0gX2Zvcm1hdFByb2JsZW0uaGVhZGVyLAogICAgICAgICAgYm9keSA9IF9mb3JtYXRQcm9ibGVtLmJvZHk7CiAgICAgICAgdHlwZUVsZW1lbnQuaW5uZXJUZXh0ID0gaGVhZGVyOwogICAgICAgIGFwcGx5U3R5bGUodHlwZUVsZW1lbnQsIF9vdmVybGF5X3N0eWxlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLm1zZ1R5cGVTdHlsZSk7CiAgICAgICAgaWYgKG1lc3NhZ2UubW9kdWxlSWRlbnRpZmllcikgewogICAgICAgICAgYXBwbHlTdHlsZSh0eXBlRWxlbWVudCwgewogICAgICAgICAgICBjdXJzb3I6ICJwb2ludGVyIgogICAgICAgICAgfSk7CiAgICAgICAgICAvLyBlbGVtZW50LmRhdGFzZXQgbm90IHN1cHBvcnRlZCBpbiBJRQogICAgICAgICAgdHlwZUVsZW1lbnQuc2V0QXR0cmlidXRlKCJkYXRhLWNhbi1vcGVuIiwgdHJ1ZSk7CiAgICAgICAgICB0eXBlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgZmV0Y2goIi93ZWJwYWNrLWRldi1zZXJ2ZXIvb3Blbi1lZGl0b3I/ZmlsZU5hbWU9Ii5jb25jYXQobWVzc2FnZS5tb2R1bGVJZGVudGlmaWVyKSk7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIC8vIE1ha2UgaXQgbG9vayBzaW1pbGFyIHRvIG91ciB0ZXJtaW5hbC4KICAgICAgICB2YXIgdGV4dCA9IGFuc2lfaHRtbF9jb21tdW5pdHlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkoKDAsaHRtbF9lbnRpdGllc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLmVuY29kZSkoYm9keSkpOwogICAgICAgIHZhciBtZXNzYWdlVGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICBhcHBseVN0eWxlKG1lc3NhZ2VUZXh0Tm9kZSwgX292ZXJsYXlfc3R5bGVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18ubXNnVGV4dFN0eWxlKTsKICAgICAgICBtZXNzYWdlVGV4dE5vZGUuaW5uZXJIVE1MID0gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeSA/IG92ZXJsYXlUcnVzdGVkVHlwZXNQb2xpY3kuY3JlYXRlSFRNTCh0ZXh0KSA6IHRleHQ7CiAgICAgICAgZW50cnlFbGVtZW50LmFwcGVuZENoaWxkKHR5cGVFbGVtZW50KTsKICAgICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQobWVzc2FnZVRleHROb2RlKTsKCiAgICAgICAgLyoqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0gKi8KICAgICAgICBjb250YWluZXJFbGVtZW50LmFwcGVuZENoaWxkKGVudHJ5RWxlbWVudCk7CiAgICAgIH0pOwogICAgfSwgdHJ1c3RlZFR5cGVzUG9saWN5TmFtZSk7CiAgfQogIHZhciBvdmVybGF5U2VydmljZSA9ICgwLF9vdmVybGF5X3N0YXRlX21hY2hpbmVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzJfX1siZGVmYXVsdCJdKSh7CiAgICBzaG93T3ZlcmxheTogZnVuY3Rpb24gc2hvd092ZXJsYXkoX3JlZikgewogICAgICB2YXIgX3JlZiRsZXZlbCA9IF9yZWYubGV2ZWwsCiAgICAgICAgbGV2ZWwgPSBfcmVmJGxldmVsID09PSB2b2lkIDAgPyAiZXJyb3IiIDogX3JlZiRsZXZlbCwKICAgICAgICBtZXNzYWdlcyA9IF9yZWYubWVzc2FnZXM7CiAgICAgIHJldHVybiBzaG93KGxldmVsLCBtZXNzYWdlcywgb3B0aW9ucy50cnVzdGVkVHlwZXNQb2xpY3lOYW1lKTsKICAgIH0sCiAgICBoaWRlT3ZlcmxheTogaGlkZQogIH0pOwogIGlmIChvcHRpb25zLmNhdGNoUnVudGltZUVycm9yKSB7CiAgICAoMCxfb3ZlcmxheV9ydW50aW1lX2Vycm9yX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18ubGlzdGVuVG9SdW50aW1lRXJyb3IpKGZ1bmN0aW9uIChlcnJvckV2ZW50KSB7CiAgICAgIC8vIGVycm9yIHByb3BlcnR5IG1heSBiZSBlbXB0eSBpbiBvbGRlciBicm93c2VyIGxpa2UgSUUKICAgICAgdmFyIGVycm9yID0gZXJyb3JFdmVudC5lcnJvciwKICAgICAgICBtZXNzYWdlID0gZXJyb3JFdmVudC5tZXNzYWdlOwogICAgICBpZiAoIWVycm9yICYmICFtZXNzYWdlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHZhciBlcnJvck9iamVjdCA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvciA6IG5ldyBFcnJvcihlcnJvciB8fCBtZXNzYWdlKTsKICAgICAgb3ZlcmxheVNlcnZpY2Uuc2VuZCh7CiAgICAgICAgdHlwZTogIlJVTlRJTUVfRVJST1IiLAogICAgICAgIG1lc3NhZ2VzOiBbewogICAgICAgICAgbWVzc2FnZTogZXJyb3JPYmplY3QubWVzc2FnZSwKICAgICAgICAgIHN0YWNrOiAoMCxfb3ZlcmxheV9ydW50aW1lX2Vycm9yX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18ucGFyc2VFcnJvclRvU3RhY2tzKShlcnJvck9iamVjdCkKICAgICAgICB9XQogICAgICB9KTsKICAgIH0pOwogIH0KICByZXR1cm4gb3ZlcmxheVNlcnZpY2U7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS9mc20uanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5L2ZzbS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewovKiBoYXJtb255IGV4cG9ydCAqLyAgICJkZWZhdWx0IjogKCkgPT4gKF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fKQovKiBoYXJtb255IGV4cG9ydCAqLyB9KTsKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH0KZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCAic3RyaW5nIik7IHJldHVybiB0eXBlb2Yga2V5ID09PSAic3ltYm9sIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAodHlwZW9mIGlucHV0ICE9PSAib2JqZWN0IiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCAiZGVmYXVsdCIpOyBpZiAodHlwZW9mIHJlcyAhPT0gIm9iamVjdCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuIik7IH0gcmV0dXJuIChoaW50ID09PSAic3RyaW5nIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9Ci8qKgogKiBAdHlwZWRlZiB7T2JqZWN0fSBTdGF0ZURlZmluaXRpb25zCiAqIEBwcm9wZXJ0eSB7e1tldmVudDogc3RyaW5nXTogeyB0YXJnZXQ6IHN0cmluZzsgYWN0aW9ucz86IEFycmF5PHN0cmluZz4gfX19IFtvbl0KICovCgovKioKICogQHR5cGVkZWYge09iamVjdH0gT3B0aW9ucwogKiBAcHJvcGVydHkge3tbc3RhdGU6IHN0cmluZ106IFN0YXRlRGVmaW5pdGlvbnN9fSBzdGF0ZXMKICogQHByb3BlcnR5IHtvYmplY3R9IGNvbnRleHQ7CiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpbml0aWFsCiAqLwoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IEltcGxlbWVudGF0aW9uCiAqIEBwcm9wZXJ0eSB7e1thY3Rpb25OYW1lOiBzdHJpbmddOiAoY3R4OiBvYmplY3QsIGV2ZW50OiBhbnkpID0+IG9iamVjdH19IGFjdGlvbnMKICovCgovKioKICogQSBzaW1wbGlmaWVkIGBjcmVhdGVNYWNoaW5lYCBmcm9tIGBAeHN0YXRlL2ZzbWAgd2l0aCB0aGUgZm9sbG93aW5nIGRpZmZlcmVuY2VzOgogKgogKiAgLSB0aGUgcmV0dXJuZWQgbWFjaGluZSBpcyB0ZWNobmljYWxseSBhICJzZXJ2aWNlIi4gTm8gYGludGVycHJldChtYWNoaW5lKS5zdGFydCgpYCBpcyBuZWVkZWQuCiAqICAtIHRoZSBzdGF0ZSBkZWZpbml0aW9uIG9ubHkgc3VwcG9ydCBgb25gIGFuZCB0YXJnZXQgbXVzdCBiZSBkZWNsYXJlZCB3aXRoIHsgdGFyZ2V0OiAnbmV4dFN0YXRlJywgYWN0aW9uczogW10gfSBleHBsaWNpdGx5LgogKiAgLSBldmVudCBwYXNzZWQgdG8gYHNlbmRgIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggYHR5cGVgIHByb3BlcnR5LgogKiAgLSBhY3Rpb25zIGltcGxlbWVudGF0aW9uIHdpbGwgYmUgW2Fzc2lnbiBhY3Rpb25dKGh0dHBzOi8veHN0YXRlLmpzLm9yZy9kb2NzL2d1aWRlcy9jb250ZXh0Lmh0bWwjYXNzaWduLWFjdGlvbikgaWYgeW91IHJldHVybiBhbnkgdmFsdWUuCiAqICBEbyBub3QgcmV0dXJuIGFueXRoaW5nIGlmIHlvdSBqdXN0IHdhbnQgdG8gaW52b2tlIHNpZGUgZWZmZWN0LgogKgogKiBUaGUgZ29hbCBvZiB0aGlzIGN1c3RvbSBmdW5jdGlvbiBpcyB0byBhdm9pZCBpbnN0YWxsaW5nIHRoZSBlbnRpcmUgYCd4c3RhdGUvZnNtJ2AgcGFja2FnZSwgd2hpbGUgZW5hYmxpbmcgbW9kZWxpbmcgdXNpbmcKICogc3RhdGUgbWFjaGluZS4gWW91IGNhbiBjb3B5IHRoZSBmaXJzdCBwYXJhbWV0ZXIgaW50byB0aGUgZWRpdG9yIGF0IGh0dHBzOi8vc3RhdGVseS5haS92aXogdG8gdmlzdWFsaXplIHRoZSBzdGF0ZSBtYWNoaW5lLgogKgogKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnMKICogQHBhcmFtIHtJbXBsZW1lbnRhdGlvbn0gaW1wbGVtZW50YXRpb24KICovCmZ1bmN0aW9uIGNyZWF0ZU1hY2hpbmUoX3JlZiwgX3JlZjIpIHsKICB2YXIgc3RhdGVzID0gX3JlZi5zdGF0ZXMsCiAgICBjb250ZXh0ID0gX3JlZi5jb250ZXh0LAogICAgaW5pdGlhbCA9IF9yZWYuaW5pdGlhbDsKICB2YXIgYWN0aW9ucyA9IF9yZWYyLmFjdGlvbnM7CiAgdmFyIGN1cnJlbnRTdGF0ZSA9IGluaXRpYWw7CiAgdmFyIGN1cnJlbnRDb250ZXh0ID0gY29udGV4dDsKICByZXR1cm4gewogICAgc2VuZDogZnVuY3Rpb24gc2VuZChldmVudCkgewogICAgICB2YXIgY3VycmVudFN0YXRlT24gPSBzdGF0ZXNbY3VycmVudFN0YXRlXS5vbjsKICAgICAgdmFyIHRyYW5zaXRpb25Db25maWcgPSBjdXJyZW50U3RhdGVPbiAmJiBjdXJyZW50U3RhdGVPbltldmVudC50eXBlXTsKICAgICAgaWYgKHRyYW5zaXRpb25Db25maWcpIHsKICAgICAgICBjdXJyZW50U3RhdGUgPSB0cmFuc2l0aW9uQ29uZmlnLnRhcmdldDsKICAgICAgICBpZiAodHJhbnNpdGlvbkNvbmZpZy5hY3Rpb25zKSB7CiAgICAgICAgICB0cmFuc2l0aW9uQ29uZmlnLmFjdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoYWN0TmFtZSkgewogICAgICAgICAgICB2YXIgYWN0aW9uSW1wbCA9IGFjdGlvbnNbYWN0TmFtZV07CiAgICAgICAgICAgIHZhciBuZXh0Q29udGV4dFZhbHVlID0gYWN0aW9uSW1wbCAmJiBhY3Rpb25JbXBsKGN1cnJlbnRDb250ZXh0LCBldmVudCk7CiAgICAgICAgICAgIGlmIChuZXh0Q29udGV4dFZhbHVlKSB7CiAgICAgICAgICAgICAgY3VycmVudENvbnRleHQgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGN1cnJlbnRDb250ZXh0KSwgbmV4dENvbnRleHRWYWx1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH07Cn0KLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXyA9IChjcmVhdGVNYWNoaW5lKTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvcnVudGltZS1lcnJvci5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5L3J1bnRpbWUtZXJyb3IuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImxpc3RlblRvUnVudGltZUVycm9yIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gbGlzdGVuVG9SdW50aW1lRXJyb3IpLAovKiBoYXJtb255IGV4cG9ydCAqLyAgICJwYXJzZUVycm9yVG9TdGFja3MiOiAoKSA9PiAoLyogYmluZGluZyAqLyBwYXJzZUVycm9yVG9TdGFja3MpCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwovKioKICoKICogQHBhcmFtIHtFcnJvcn0gZXJyb3IKICovCmZ1bmN0aW9uIHBhcnNlRXJyb3JUb1N0YWNrcyhlcnJvcikgewogIGlmICghZXJyb3IgfHwgIShlcnJvciBpbnN0YW5jZW9mIEVycm9yKSkgewogICAgdGhyb3cgbmV3IEVycm9yKCJwYXJzZUVycm9yVG9TdGFja3MgZXhwZWN0cyBFcnJvciBvYmplY3QiKTsKICB9CiAgaWYgKHR5cGVvZiBlcnJvci5zdGFjayA9PT0gInN0cmluZyIpIHsKICAgIHJldHVybiBlcnJvci5zdGFjay5zcGxpdCgiXG4iKS5maWx0ZXIoZnVuY3Rpb24gKHN0YWNrKSB7CiAgICAgIHJldHVybiBzdGFjayAhPT0gIkVycm9yOiAiLmNvbmNhdChlcnJvci5tZXNzYWdlKTsKICAgIH0pOwogIH0KfQoKLyoqCiAqIEBjYWxsYmFjayBFcnJvckNhbGxiYWNrCiAqIEBwYXJhbSB7RXJyb3JFdmVudH0gZXJyb3IKICogQHJldHVybnMge3ZvaWR9CiAqLwoKLyoqCiAqIEBwYXJhbSB7RXJyb3JDYWxsYmFja30gY2FsbGJhY2sKICovCmZ1bmN0aW9uIGxpc3RlblRvUnVudGltZUVycm9yKGNhbGxiYWNrKSB7CiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoImVycm9yIiwgY2FsbGJhY2spOwogIHJldHVybiBmdW5jdGlvbiBjbGVhbnVwKCkgewogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoImVycm9yIiwgY2FsbGJhY2spOwogIH07Cn0KCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5L3N0YXRlLW1hY2hpbmUuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS9zdGF0ZS1tYWNoaW5lLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewovKiBoYXJtb255IGV4cG9ydCAqLyAgICJkZWZhdWx0IjogKCkgPT4gKF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fKQovKiBoYXJtb255IGV4cG9ydCAqLyB9KTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9mc21fanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vZnNtLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5L2ZzbS5qcyIpOwoKCi8qKgogKiBAdHlwZWRlZiB7T2JqZWN0fSBTaG93T3ZlcmxheURhdGEKICogQHByb3BlcnR5IHsnd2FybmluZycgfCAnZXJyb3InfSBsZXZlbAogKiBAcHJvcGVydHkge0FycmF5PHN0cmluZyAgfCB7IG1vZHVsZUlkZW50aWZpZXI/OiBzdHJpbmcsIG1vZHVsZU5hbWU/OiBzdHJpbmcsIGxvYz86IHN0cmluZywgbWVzc2FnZT86IHN0cmluZyB9Pn0gbWVzc2FnZXMKICovCgovKioKICogQHR5cGVkZWYge09iamVjdH0gQ3JlYXRlT3ZlcmxheU1hY2hpbmVPcHRpb25zCiAqIEBwcm9wZXJ0eSB7KGRhdGE6IFNob3dPdmVybGF5RGF0YSkgPT4gdm9pZH0gc2hvd092ZXJsYXkKICogQHByb3BlcnR5IHsoKSA9PiB2b2lkfSBoaWRlT3ZlcmxheQogKi8KCi8qKgogKiBAcGFyYW0ge0NyZWF0ZU92ZXJsYXlNYWNoaW5lT3B0aW9uc30gb3B0aW9ucwogKi8KdmFyIGNyZWF0ZU92ZXJsYXlNYWNoaW5lID0gZnVuY3Rpb24gY3JlYXRlT3ZlcmxheU1hY2hpbmUob3B0aW9ucykgewogIHZhciBoaWRlT3ZlcmxheSA9IG9wdGlvbnMuaGlkZU92ZXJsYXksCiAgICBzaG93T3ZlcmxheSA9IG9wdGlvbnMuc2hvd092ZXJsYXk7CiAgdmFyIG92ZXJsYXlNYWNoaW5lID0gKDAsX2ZzbV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJkZWZhdWx0Il0pKHsKICAgIGluaXRpYWw6ICJoaWRkZW4iLAogICAgY29udGV4dDogewogICAgICBsZXZlbDogImVycm9yIiwKICAgICAgbWVzc2FnZXM6IFtdCiAgICB9LAogICAgc3RhdGVzOiB7CiAgICAgIGhpZGRlbjogewogICAgICAgIG9uOiB7CiAgICAgICAgICBCVUlMRF9FUlJPUjogewogICAgICAgICAgICB0YXJnZXQ6ICJkaXNwbGF5QnVpbGRFcnJvciIsCiAgICAgICAgICAgIGFjdGlvbnM6IFsic2V0TWVzc2FnZXMiLCAic2hvd092ZXJsYXkiXQogICAgICAgICAgfSwKICAgICAgICAgIFJVTlRJTUVfRVJST1I6IHsKICAgICAgICAgICAgdGFyZ2V0OiAiZGlzcGxheVJ1bnRpbWVFcnJvciIsCiAgICAgICAgICAgIGFjdGlvbnM6IFsic2V0TWVzc2FnZXMiLCAic2hvd092ZXJsYXkiXQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgZGlzcGxheUJ1aWxkRXJyb3I6IHsKICAgICAgICBvbjogewogICAgICAgICAgRElTTUlTUzogewogICAgICAgICAgICB0YXJnZXQ6ICJoaWRkZW4iLAogICAgICAgICAgICBhY3Rpb25zOiBbImRpc21pc3NNZXNzYWdlcyIsICJoaWRlT3ZlcmxheSJdCiAgICAgICAgICB9LAogICAgICAgICAgQlVJTERfRVJST1I6IHsKICAgICAgICAgICAgdGFyZ2V0OiAiZGlzcGxheUJ1aWxkRXJyb3IiLAogICAgICAgICAgICBhY3Rpb25zOiBbImFwcGVuZE1lc3NhZ2VzIiwgInNob3dPdmVybGF5Il0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sCiAgICAgIGRpc3BsYXlSdW50aW1lRXJyb3I6IHsKICAgICAgICBvbjogewogICAgICAgICAgRElTTUlTUzogewogICAgICAgICAgICB0YXJnZXQ6ICJoaWRkZW4iLAogICAgICAgICAgICBhY3Rpb25zOiBbImRpc21pc3NNZXNzYWdlcyIsICJoaWRlT3ZlcmxheSJdCiAgICAgICAgICB9LAogICAgICAgICAgUlVOVElNRV9FUlJPUjogewogICAgICAgICAgICB0YXJnZXQ6ICJkaXNwbGF5UnVudGltZUVycm9yIiwKICAgICAgICAgICAgYWN0aW9uczogWyJhcHBlbmRNZXNzYWdlcyIsICJzaG93T3ZlcmxheSJdCiAgICAgICAgICB9LAogICAgICAgICAgQlVJTERfRVJST1I6IHsKICAgICAgICAgICAgdGFyZ2V0OiAiZGlzcGxheUJ1aWxkRXJyb3IiLAogICAgICAgICAgICBhY3Rpb25zOiBbInNldE1lc3NhZ2VzIiwgInNob3dPdmVybGF5Il0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBhY3Rpb25zOiB7CiAgICAgIGRpc21pc3NNZXNzYWdlczogZnVuY3Rpb24gZGlzbWlzc01lc3NhZ2VzKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBtZXNzYWdlczogW10sCiAgICAgICAgICBsZXZlbDogImVycm9yIgogICAgICAgIH07CiAgICAgIH0sCiAgICAgIGFwcGVuZE1lc3NhZ2VzOiBmdW5jdGlvbiBhcHBlbmRNZXNzYWdlcyhjb250ZXh0LCBldmVudCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBtZXNzYWdlczogY29udGV4dC5tZXNzYWdlcy5jb25jYXQoZXZlbnQubWVzc2FnZXMpLAogICAgICAgICAgbGV2ZWw6IGV2ZW50LmxldmVsIHx8IGNvbnRleHQubGV2ZWwKICAgICAgICB9OwogICAgICB9LAogICAgICBzZXRNZXNzYWdlczogZnVuY3Rpb24gc2V0TWVzc2FnZXMoY29udGV4dCwgZXZlbnQpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgbWVzc2FnZXM6IGV2ZW50Lm1lc3NhZ2VzLAogICAgICAgICAgbGV2ZWw6IGV2ZW50LmxldmVsIHx8IGNvbnRleHQubGV2ZWwKICAgICAgICB9OwogICAgICB9LAogICAgICBoaWRlT3ZlcmxheTogaGlkZU92ZXJsYXksCiAgICAgIHNob3dPdmVybGF5OiBzaG93T3ZlcmxheQogICAgfQogIH0pOwogIHJldHVybiBvdmVybGF5TWFjaGluZTsKfTsKLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXyA9IChjcmVhdGVPdmVybGF5TWFjaGluZSk7CgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5L3N0eWxlcy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvc3R5bGVzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImNvbnRhaW5lclN0eWxlIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gY29udGFpbmVyU3R5bGUpLAovKiBoYXJtb255IGV4cG9ydCAqLyAgICJkaXNtaXNzQnV0dG9uU3R5bGUiOiAoKSA9PiAoLyogYmluZGluZyAqLyBkaXNtaXNzQnV0dG9uU3R5bGUpLAovKiBoYXJtb255IGV4cG9ydCAqLyAgICJoZWFkZXJTdHlsZSI6ICgpID0+ICgvKiBiaW5kaW5nICovIGhlYWRlclN0eWxlKSwKLyogaGFybW9ueSBleHBvcnQgKi8gICAiaWZyYW1lU3R5bGUiOiAoKSA9PiAoLyogYmluZGluZyAqLyBpZnJhbWVTdHlsZSksCi8qIGhhcm1vbnkgZXhwb3J0ICovICAgIm1zZ1N0eWxlcyI6ICgpID0+ICgvKiBiaW5kaW5nICovIG1zZ1N0eWxlcyksCi8qIGhhcm1vbnkgZXhwb3J0ICovICAgIm1zZ1RleHRTdHlsZSI6ICgpID0+ICgvKiBiaW5kaW5nICovIG1zZ1RleHRTdHlsZSksCi8qIGhhcm1vbnkgZXhwb3J0ICovICAgIm1zZ1R5cGVTdHlsZSI6ICgpID0+ICgvKiBiaW5kaW5nICovIG1zZ1R5cGVTdHlsZSkKLyogaGFybW9ueSBleHBvcnQgKi8gfSk7Ci8vIHN0eWxlcyBhcmUgaW5zcGlyZWQgYnkgYHJlYWN0LWVycm9yLW92ZXJsYXlgCgp2YXIgbXNnU3R5bGVzID0gewogIGVycm9yOiB7CiAgICBiYWNrZ3JvdW5kQ29sb3I6ICJyZ2JhKDIwNiwgMTcsIDM4LCAwLjEpIiwKICAgIGNvbG9yOiAiI2ZjY2ZjZiIKICB9LAogIHdhcm5pbmc6IHsKICAgIGJhY2tncm91bmRDb2xvcjogInJnYmEoMjUxLCAyNDUsIDE4MCwgMC4xKSIsCiAgICBjb2xvcjogIiNmYmY1YjQiCiAgfQp9Owp2YXIgaWZyYW1lU3R5bGUgPSB7CiAgcG9zaXRpb246ICJmaXhlZCIsCiAgdG9wOiAwLAogIGxlZnQ6IDAsCiAgcmlnaHQ6IDAsCiAgYm90dG9tOiAwLAogIHdpZHRoOiAiMTAwdnciLAogIGhlaWdodDogIjEwMHZoIiwKICBib3JkZXI6ICJub25lIiwKICAiei1pbmRleCI6IDk5OTk5OTk5OTkKfTsKdmFyIGNvbnRhaW5lclN0eWxlID0gewogIHBvc2l0aW9uOiAiZml4ZWQiLAogIGJveFNpemluZzogImJvcmRlci1ib3giLAogIGxlZnQ6IDAsCiAgdG9wOiAwLAogIHJpZ2h0OiAwLAogIGJvdHRvbTogMCwKICB3aWR0aDogIjEwMHZ3IiwKICBoZWlnaHQ6ICIxMDB2aCIsCiAgZm9udFNpemU6ICJsYXJnZSIsCiAgcGFkZGluZzogIjJyZW0gMnJlbSA0cmVtIDJyZW0iLAogIGxpbmVIZWlnaHQ6ICIxLjIiLAogIHdoaXRlU3BhY2U6ICJwcmUtd3JhcCIsCiAgb3ZlcmZsb3c6ICJhdXRvIiwKICBiYWNrZ3JvdW5kQ29sb3I6ICJyZ2JhKDAsIDAsIDAsIDAuOSkiLAogIGNvbG9yOiAid2hpdGUiCn07CnZhciBoZWFkZXJTdHlsZSA9IHsKICBjb2xvcjogIiNlODNiNDYiLAogIGZvbnRTaXplOiAiMmVtIiwKICB3aGl0ZVNwYWNlOiAicHJlLXdyYXAiLAogIGZvbnRGYW1pbHk6ICJzYW5zLXNlcmlmIiwKICBtYXJnaW46ICIwIDJyZW0gMnJlbSAwIiwKICBmbGV4OiAiMCAwIGF1dG8iLAogIG1heEhlaWdodDogIjUwJSIsCiAgb3ZlcmZsb3c6ICJhdXRvIgp9Owp2YXIgZGlzbWlzc0J1dHRvblN0eWxlID0gewogIGNvbG9yOiAiI2ZmZmZmZiIsCiAgbGluZUhlaWdodDogIjFyZW0iLAogIGZvbnRTaXplOiAiMS41cmVtIiwKICBwYWRkaW5nOiAiMXJlbSIsCiAgY3Vyc29yOiAicG9pbnRlciIsCiAgcG9zaXRpb246ICJhYnNvbHV0ZSIsCiAgcmlnaHQ6IDAsCiAgdG9wOiAwLAogIGJhY2tncm91bmRDb2xvcjogInRyYW5zcGFyZW50IiwKICBib3JkZXI6ICJub25lIgp9Owp2YXIgbXNnVHlwZVN0eWxlID0gewogIGNvbG9yOiAiI2U4M2I0NiIsCiAgZm9udFNpemU6ICIxLjJlbSIsCiAgbWFyZ2luQm90dG9tOiAiMXJlbSIsCiAgZm9udEZhbWlseTogInNhbnMtc2VyaWYiCn07CnZhciBtc2dUZXh0U3R5bGUgPSB7CiAgbGluZUhlaWdodDogIjEuNSIsCiAgZm9udFNpemU6ICIxcmVtIiwKICBmb250RmFtaWx5OiAiTWVubG8sIENvbnNvbGFzLCBtb25vc3BhY2UiCn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3NvY2tldC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKLyogaGFybW9ueSBleHBvcnQgKi8gICAiY2xpZW50IjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gY2xpZW50KSwKLyogaGFybW9ueSBleHBvcnQgKi8gICAiZGVmYXVsdCI6ICgpID0+IChfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXykKLyogaGFybW9ueSBleHBvcnQgKi8gfSk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfY2xpZW50c19XZWJTb2NrZXRDbGllbnRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2NsaWVudHMvV2ViU29ja2V0Q2xpZW50LmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3V0aWxzL2xvZy5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvbG9nLmpzIik7Ci8qIHByb3ZpZGVkIGRlcGVuZGVuY3kgKi8gdmFyIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2NsaWVudHMvV2ViU29ja2V0Q2xpZW50LmpzIik7Ci8qIGdsb2JhbCBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAqLwoKCgoKLy8gdGhpcyBXZWJzb2NrZXRDbGllbnQgaXMgaGVyZSBhcyBhIGRlZmF1bHQgZmFsbGJhY2ssIGluIGNhc2UgdGhlIGNsaWVudCBpcyBub3QgaW5qZWN0ZWQKLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovCnZhciBDbGllbnQgPQovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnkKdHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICE9PSAidW5kZWZpbmVkIiA/IHR5cGVvZiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXy5kZWZhdWx0ICE9PSAidW5kZWZpbmVkIiA/IF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fLmRlZmF1bHQgOiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyA6IF9jbGllbnRzX1dlYlNvY2tldENsaWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJkZWZhdWx0Il07Ci8qIGVzbGludC1lbmFibGUgY2FtZWxjYXNlICovCgp2YXIgcmV0cmllcyA9IDA7CnZhciBtYXhSZXRyaWVzID0gMTA7CgovLyBJbml0aWFsaXplZCBjbGllbnQgaXMgZXhwb3J0ZWQgc28gZXh0ZXJuYWwgY29uc3VtZXJzIGNhbiB1dGlsaXplIHRoZSBzYW1lIGluc3RhbmNlCi8vIEl0IGlzIG11dGFibGUgdG8gZW5mb3JjZSBzaW5nbGV0b24KLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1tdXRhYmxlLWV4cG9ydHMKdmFyIGNsaWVudCA9IG51bGw7CgovKioKICogQHBhcmFtIHtzdHJpbmd9IHVybAogKiBAcGFyYW0ge3sgW2hhbmRsZXI6IHN0cmluZ106IChkYXRhPzogYW55LCBwYXJhbXM/OiBhbnkpID0+IGFueSB9fSBoYW5kbGVycwogKiBAcGFyYW0ge251bWJlcn0gW3JlY29ubmVjdF0KICovCnZhciBzb2NrZXQgPSBmdW5jdGlvbiBpbml0U29ja2V0KHVybCwgaGFuZGxlcnMsIHJlY29ubmVjdCkgewogIGNsaWVudCA9IG5ldyBDbGllbnQodXJsKTsKICBjbGllbnQub25PcGVuKGZ1bmN0aW9uICgpIHsKICAgIHJldHJpZXMgPSAwOwogICAgaWYgKHR5cGVvZiByZWNvbm5lY3QgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgIG1heFJldHJpZXMgPSByZWNvbm5lY3Q7CiAgICB9CiAgfSk7CiAgY2xpZW50Lm9uQ2xvc2UoZnVuY3Rpb24gKCkgewogICAgaWYgKHJldHJpZXMgPT09IDApIHsKICAgICAgaGFuZGxlcnMuY2xvc2UoKTsKICAgIH0KCiAgICAvLyBUcnkgdG8gcmVjb25uZWN0LgogICAgY2xpZW50ID0gbnVsbDsKCiAgICAvLyBBZnRlciAxMCByZXRyaWVzIHN0b3AgdHJ5aW5nLCB0byBwcmV2ZW50IGxvZ3NwYW0uCiAgICBpZiAocmV0cmllcyA8IG1heFJldHJpZXMpIHsKICAgICAgLy8gRXhwb25lbnRpYWxseSBpbmNyZWFzZSB0aW1lb3V0IHRvIHJlY29ubmVjdC4KICAgICAgLy8gUmVzcGVjdGZ1bGx5IGNvcGllZCBmcm9tIHRoZSBwYWNrYWdlIGBnb3RgLgogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzCiAgICAgIHZhciByZXRyeUluTXMgPSAxMDAwICogTWF0aC5wb3coMiwgcmV0cmllcykgKyBNYXRoLnJhbmRvbSgpICogMTAwOwogICAgICByZXRyaWVzICs9IDE7CiAgICAgIF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5sb2cuaW5mbygiVHJ5aW5nIHRvIHJlY29ubmVjdC4uLiIpOwogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBzb2NrZXQodXJsLCBoYW5kbGVycywgcmVjb25uZWN0KTsKICAgICAgfSwgcmV0cnlJbk1zKTsKICAgIH0KICB9KTsKICBjbGllbnQub25NZXNzYWdlKAogIC8qKgogICAqIEBwYXJhbSB7YW55fSBkYXRhCiAgICovCiAgZnVuY3Rpb24gKGRhdGEpIHsKICAgIHZhciBtZXNzYWdlID0gSlNPTi5wYXJzZShkYXRhKTsKICAgIGlmIChoYW5kbGVyc1ttZXNzYWdlLnR5cGVdKSB7CiAgICAgIGhhbmRsZXJzW21lc3NhZ2UudHlwZV0obWVzc2FnZS5kYXRhLCBtZXNzYWdlLnBhcmFtcyk7CiAgICB9CiAgfSk7Cn07Ci8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18gPSAoc29ja2V0KTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2NyZWF0ZVNvY2tldFVSTC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9jcmVhdGVTb2NrZXRVUkwuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImRlZmF1bHQiOiAoKSA9PiAoX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18pCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwovKioKICogQHBhcmFtIHt7IHByb3RvY29sPzogc3RyaW5nLCBhdXRoPzogc3RyaW5nLCBob3N0bmFtZT86IHN0cmluZywgcG9ydD86IHN0cmluZywgcGF0aG5hbWU/OiBzdHJpbmcsIHNlYXJjaD86IHN0cmluZywgaGFzaD86IHN0cmluZywgc2xhc2hlcz86IGJvb2xlYW4gfX0gb2JqVVJMCiAqIEByZXR1cm5zIHtzdHJpbmd9CiAqLwpmdW5jdGlvbiBmb3JtYXQob2JqVVJMKSB7CiAgdmFyIHByb3RvY29sID0gb2JqVVJMLnByb3RvY29sIHx8ICIiOwogIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAiOiIpIHsKICAgIHByb3RvY29sICs9ICI6IjsKICB9CiAgdmFyIGF1dGggPSBvYmpVUkwuYXV0aCB8fCAiIjsKICBpZiAoYXV0aCkgewogICAgYXV0aCA9IGVuY29kZVVSSUNvbXBvbmVudChhdXRoKTsKICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCAiOiIpOwogICAgYXV0aCArPSAiQCI7CiAgfQogIHZhciBob3N0ID0gIiI7CiAgaWYgKG9ialVSTC5ob3N0bmFtZSkgewogICAgaG9zdCA9IGF1dGggKyAob2JqVVJMLmhvc3RuYW1lLmluZGV4T2YoIjoiKSA9PT0gLTEgPyBvYmpVUkwuaG9zdG5hbWUgOiAiWyIuY29uY2F0KG9ialVSTC5ob3N0bmFtZSwgIl0iKSk7CiAgICBpZiAob2JqVVJMLnBvcnQpIHsKICAgICAgaG9zdCArPSAiOiIuY29uY2F0KG9ialVSTC5wb3J0KTsKICAgIH0KICB9CiAgdmFyIHBhdGhuYW1lID0gb2JqVVJMLnBhdGhuYW1lIHx8ICIiOwogIGlmIChvYmpVUkwuc2xhc2hlcykgewogICAgaG9zdCA9ICIvLyIuY29uY2F0KGhvc3QgfHwgIiIpOwogICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gIi8iKSB7CiAgICAgIHBhdGhuYW1lID0gIi8iLmNvbmNhdChwYXRobmFtZSk7CiAgICB9CiAgfSBlbHNlIGlmICghaG9zdCkgewogICAgaG9zdCA9ICIiOwogIH0KICB2YXIgc2VhcmNoID0gb2JqVVJMLnNlYXJjaCB8fCAiIjsKICBpZiAoc2VhcmNoICYmIHNlYXJjaC5jaGFyQXQoMCkgIT09ICI/IikgewogICAgc2VhcmNoID0gIj8iLmNvbmNhdChzZWFyY2gpOwogIH0KICB2YXIgaGFzaCA9IG9ialVSTC5oYXNoIHx8ICIiOwogIGlmIChoYXNoICYmIGhhc2guY2hhckF0KDApICE9PSAiIyIpIHsKICAgIGhhc2ggPSAiIyIuY29uY2F0KGhhc2gpOwogIH0KICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywKICAvKioKICAgKiBAcGFyYW0ge3N0cmluZ30gbWF0Y2gKICAgKiBAcmV0dXJucyB7c3RyaW5nfQogICAqLwogIGZ1bmN0aW9uIChtYXRjaCkgewogICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7CiAgfSk7CiAgc2VhcmNoID0gc2VhcmNoLnJlcGxhY2UoIiMiLCAiJTIzIik7CiAgcmV0dXJuICIiLmNvbmNhdChwcm90b2NvbCkuY29uY2F0KGhvc3QpLmNvbmNhdChwYXRobmFtZSkuY29uY2F0KHNlYXJjaCkuY29uY2F0KGhhc2gpOwp9CgovKioKICogQHBhcmFtIHtVUkwgJiB7IGZyb21DdXJyZW50U2NyaXB0PzogYm9vbGVhbiB9fSBwYXJzZWRVUkwKICogQHJldHVybnMge3N0cmluZ30KICovCmZ1bmN0aW9uIGNyZWF0ZVNvY2tldFVSTChwYXJzZWRVUkwpIHsKICB2YXIgaG9zdG5hbWUgPSBwYXJzZWRVUkwuaG9zdG5hbWU7CgogIC8vIE5vZGUuanMgbW9kdWxlIHBhcnNlcyBpdCBhcyBgOjpgCiAgLy8gYG5ldyBVUkwodXJsU3RyaW5nLCBbYmFzZVVSTFN0cmluZ10pYCBwYXJzZXMgaXQgYXMgJ1s6Ol0nCiAgdmFyIGlzSW5BZGRyQW55ID0gaG9zdG5hbWUgPT09ICIwLjAuMC4wIiB8fCBob3N0bmFtZSA9PT0gIjo6IiB8fCBob3N0bmFtZSA9PT0gIls6Ol0iOwoKICAvLyB3aHkgZG8gd2UgbmVlZCB0aGlzIGNoZWNrPwogIC8vIGhvc3RuYW1lIG4vYSBmb3IgZmlsZSBwcm90b2NvbCAoZXhhbXBsZSwgd2hlbiB1c2luZyBlbGVjdHJvbiwgaW9uaWMpCiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay93ZWJwYWNrLWRldi1zZXJ2ZXIvcHVsbC8zODQKICBpZiAoaXNJbkFkZHJBbnkgJiYgc2VsZi5sb2NhdGlvbi5ob3N0bmFtZSAmJiBzZWxmLmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoImh0dHAiKSA9PT0gMCkgewogICAgaG9zdG5hbWUgPSBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lOwogIH0KICB2YXIgc29ja2V0VVJMUHJvdG9jb2wgPSBwYXJzZWRVUkwucHJvdG9jb2wgfHwgc2VsZi5sb2NhdGlvbi5wcm90b2NvbDsKCiAgLy8gV2hlbiBodHRwcyBpcyB1c2VkIGluIHRoZSBhcHAsIHNlY3VyZSB3ZWIgc29ja2V0cyBhcmUgYWx3YXlzIG5lY2Vzc2FyeSBiZWNhdXNlIHRoZSBicm93c2VyIGRvZXNuJ3QgYWNjZXB0IG5vbi1zZWN1cmUgd2ViIHNvY2tldHMuCiAgaWYgKHNvY2tldFVSTFByb3RvY29sID09PSAiYXV0bzoiIHx8IGhvc3RuYW1lICYmIGlzSW5BZGRyQW55ICYmIHNlbGYubG9jYXRpb24ucHJvdG9jb2wgPT09ICJodHRwczoiKSB7CiAgICBzb2NrZXRVUkxQcm90b2NvbCA9IHNlbGYubG9jYXRpb24ucHJvdG9jb2w7CiAgfQogIHNvY2tldFVSTFByb3RvY29sID0gc29ja2V0VVJMUHJvdG9jb2wucmVwbGFjZSgvXig/Omh0dHB8ListZXh0ZW5zaW9ufGZpbGUpL2ksICJ3cyIpOwogIHZhciBzb2NrZXRVUkxBdXRoID0gIiI7CgogIC8vIGBuZXcgVVJMKHVybFN0cmluZywgW2Jhc2VVUkxzdHJpbmddKWAgZG9lc24ndCBoYXZlIGBhdXRoYCBwcm9wZXJ0eQogIC8vIFBhcnNlIGF1dGhlbnRpY2F0aW9uIGNyZWRlbnRpYWxzIGluIGNhc2Ugd2UgbmVlZCB0aGVtCiAgaWYgKHBhcnNlZFVSTC51c2VybmFtZSkgewogICAgc29ja2V0VVJMQXV0aCA9IHBhcnNlZFVSTC51c2VybmFtZTsKCiAgICAvLyBTaW5jZSBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uIGRvZXMgbm90IGFsbG93IGVtcHR5IHVzZXJuYW1lLAogICAgLy8gd2Ugb25seSBpbmNsdWRlIHBhc3N3b3JkIGlmIHRoZSB1c2VybmFtZSBpcyBub3QgZW1wdHkuCiAgICBpZiAocGFyc2VkVVJMLnBhc3N3b3JkKSB7CiAgICAgIC8vIFJlc3VsdDogPHVzZXJuYW1lPjo8cGFzc3dvcmQ+CiAgICAgIHNvY2tldFVSTEF1dGggPSBzb2NrZXRVUkxBdXRoLmNvbmNhdCgiOiIsIHBhcnNlZFVSTC5wYXNzd29yZCk7CiAgICB9CiAgfQoKICAvLyBJbiBjYXNlIHRoZSBob3N0IGlzIGEgcmF3IElQdjYgYWRkcmVzcywgaXQgY2FuIGJlIGVuY2xvc2VkIGluCiAgLy8gdGhlIGJyYWNrZXRzIGFzIHRoZSBicmFja2V0cyBhcmUgbmVlZGVkIGluIHRoZSBmaW5hbCBVUkwgc3RyaW5nLgogIC8vIE5lZWQgdG8gcmVtb3ZlIHRob3NlIGFzIHVybC5mb3JtYXQgYmxpbmRseSBhZGRzIGl0cyBvd24gc2V0IG9mIGJyYWNrZXRzCiAgLy8gaWYgdGhlIGhvc3Qgc3RyaW5nIGNvbnRhaW5zIGNvbG9ucy4gVGhhdCB3b3VsZCBsZWFkIHRvIG5vbi13b3JraW5nCiAgLy8gZG91YmxlIGJyYWNrZXRzIChlLmcuIFtbOjpdXSkgaG9zdAogIC8vCiAgLy8gQWxsIG9mIHRoZXNlIHdlYiBzb2NrZXQgdXJsIHBhcmFtcyBhcmUgb3B0aW9uYWxseSBwYXNzZWQgaW4gdGhyb3VnaCByZXNvdXJjZVF1ZXJ5LAogIC8vIHNvIHdlIG5lZWQgdG8gZmFsbCBiYWNrIHRvIHRoZSBkZWZhdWx0IGlmIHRoZXkgYXJlIG5vdCBwcm92aWRlZAogIHZhciBzb2NrZXRVUkxIb3N0bmFtZSA9IChob3N0bmFtZSB8fCBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lIHx8ICJsb2NhbGhvc3QiKS5yZXBsYWNlKC9eXFsoLiopXF0kLywgIiQxIik7CiAgdmFyIHNvY2tldFVSTFBvcnQgPSBwYXJzZWRVUkwucG9ydDsKICBpZiAoIXNvY2tldFVSTFBvcnQgfHwgc29ja2V0VVJMUG9ydCA9PT0gIjAiKSB7CiAgICBzb2NrZXRVUkxQb3J0ID0gc2VsZi5sb2NhdGlvbi5wb3J0OwogIH0KCiAgLy8gSWYgcGF0aCBpcyBwcm92aWRlZCBpdCdsbCBiZSBwYXNzZWQgaW4gdmlhIHRoZSByZXNvdXJjZVF1ZXJ5IGFzIGEKICAvLyBxdWVyeSBwYXJhbSBzbyBpdCBoYXMgdG8gYmUgcGFyc2VkIG91dCBvZiB0aGUgcXVlcnlzdHJpbmcgaW4gb3JkZXIgZm9yIHRoZQogIC8vIGNsaWVudCB0byBvcGVuIHRoZSBzb2NrZXQgdG8gdGhlIGNvcnJlY3QgbG9jYXRpb24uCiAgdmFyIHNvY2tldFVSTFBhdGhuYW1lID0gIi93cyI7CiAgaWYgKHBhcnNlZFVSTC5wYXRobmFtZSAmJiAhcGFyc2VkVVJMLmZyb21DdXJyZW50U2NyaXB0KSB7CiAgICBzb2NrZXRVUkxQYXRobmFtZSA9IHBhcnNlZFVSTC5wYXRobmFtZTsKICB9CiAgcmV0dXJuIGZvcm1hdCh7CiAgICBwcm90b2NvbDogc29ja2V0VVJMUHJvdG9jb2wsCiAgICBhdXRoOiBzb2NrZXRVUkxBdXRoLAogICAgaG9zdG5hbWU6IHNvY2tldFVSTEhvc3RuYW1lLAogICAgcG9ydDogc29ja2V0VVJMUG9ydCwKICAgIHBhdGhuYW1lOiBzb2NrZXRVUkxQYXRobmFtZSwKICAgIHNsYXNoZXM6IHRydWUKICB9KTsKfQovKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fID0gKGNyZWF0ZVNvY2tldFVSTCk7CgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9nZXRDdXJyZW50U2NyaXB0U291cmNlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9nZXRDdXJyZW50U2NyaXB0U291cmNlLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKLyogaGFybW9ueSBleHBvcnQgKi8gICAiZGVmYXVsdCI6ICgpID0+IChfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXykKLyogaGFybW9ueSBleHBvcnQgKi8gfSk7Ci8qKgogKiBAcmV0dXJucyB7c3RyaW5nfQogKi8KZnVuY3Rpb24gZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSgpIHsKICAvLyBgZG9jdW1lbnQuY3VycmVudFNjcmlwdGAgaXMgdGhlIG1vc3QgYWNjdXJhdGUgd2F5IHRvIGZpbmQgdGhlIGN1cnJlbnQgc2NyaXB0LAogIC8vIGJ1dCBpcyBub3Qgc3VwcG9ydGVkIGluIGFsbCBicm93c2Vycy4KICBpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdCkgewogICAgcmV0dXJuIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKCJzcmMiKTsKICB9CgogIC8vIEZhbGxiYWNrIHRvIGdldHRpbmcgYWxsIHNjcmlwdHMgcnVubmluZyBpbiB0aGUgZG9jdW1lbnQuCiAgdmFyIHNjcmlwdEVsZW1lbnRzID0gZG9jdW1lbnQuc2NyaXB0cyB8fCBbXTsKICB2YXIgc2NyaXB0RWxlbWVudHNXaXRoU3JjID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKHNjcmlwdEVsZW1lbnRzLCBmdW5jdGlvbiAoZWxlbWVudCkgewogICAgcmV0dXJuIGVsZW1lbnQuZ2V0QXR0cmlidXRlKCJzcmMiKTsKICB9KTsKICBpZiAoc2NyaXB0RWxlbWVudHNXaXRoU3JjLmxlbmd0aCA+IDApIHsKICAgIHZhciBjdXJyZW50U2NyaXB0ID0gc2NyaXB0RWxlbWVudHNXaXRoU3JjW3NjcmlwdEVsZW1lbnRzV2l0aFNyYy5sZW5ndGggLSAxXTsKICAgIHJldHVybiBjdXJyZW50U2NyaXB0LmdldEF0dHJpYnV0ZSgic3JjIik7CiAgfQoKICAvLyBGYWlsIGFzIHRoZXJlIHdhcyBubyBzY3JpcHQgdG8gdXNlLgogIHRocm93IG5ldyBFcnJvcigiW3dlYnBhY2stZGV2LXNlcnZlcl0gRmFpbGVkIHRvIGdldCBjdXJyZW50IHNjcmlwdCBzb3VyY2UuIik7Cn0KLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXyA9IChnZXRDdXJyZW50U2NyaXB0U291cmNlKTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9sb2cuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImxvZyI6ICgpID0+ICgvKiBiaW5kaW5nICovIGxvZyksCi8qIGhhcm1vbnkgZXhwb3J0ICovICAgImxvZ0VuYWJsZWRGZWF0dXJlcyI6ICgpID0+ICgvKiBiaW5kaW5nICovIGxvZ0VuYWJsZWRGZWF0dXJlcyksCi8qIGhhcm1vbnkgZXhwb3J0ICovICAgInNldExvZ0xldmVsIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gc2V0TG9nTGV2ZWwpCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX21vZHVsZXNfbG9nZ2VyX2luZGV4X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9tb2R1bGVzL2xvZ2dlci9pbmRleC5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9tb2R1bGVzX2xvZ2dlcl9pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKF9tb2R1bGVzX2xvZ2dlcl9pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTsKCnZhciBuYW1lID0gIndlYnBhY2stZGV2LXNlcnZlciI7Ci8vIGRlZmF1bHQgbGV2ZWwgaXMgc2V0IG9uIHRoZSBjbGllbnQgc2lkZSwgc28gaXQgZG9lcyBub3QgbmVlZAovLyB0byBiZSBzZXQgYnkgdGhlIENMSSBvciBBUEkKdmFyIGRlZmF1bHRMZXZlbCA9ICJpbmZvIjsKCi8vIG9wdGlvbnMgbmV3IG9wdGlvbnMsIG1lcmdlIHdpdGggb2xkIG9wdGlvbnMKLyoqCiAqIEBwYXJhbSB7ZmFsc2UgfCB0cnVlIHwgIm5vbmUiIHwgImVycm9yIiB8ICJ3YXJuIiB8ICJpbmZvIiB8ICJsb2ciIHwgInZlcmJvc2UifSBsZXZlbAogKiBAcmV0dXJucyB7dm9pZH0KICovCmZ1bmN0aW9uIHNldExvZ0xldmVsKGxldmVsKSB7CiAgX21vZHVsZXNfbG9nZ2VyX2luZGV4X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpLmNvbmZpZ3VyZURlZmF1bHRMb2dnZXIoewogICAgbGV2ZWw6IGxldmVsCiAgfSk7Cn0Kc2V0TG9nTGV2ZWwoZGVmYXVsdExldmVsKTsKdmFyIGxvZyA9IF9tb2R1bGVzX2xvZ2dlcl9pbmRleF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKS5nZXRMb2dnZXIobmFtZSk7CnZhciBsb2dFbmFibGVkRmVhdHVyZXMgPSBmdW5jdGlvbiBsb2dFbmFibGVkRmVhdHVyZXMoZmVhdHVyZXMpIHsKICB2YXIgZW5hYmxlZEZlYXR1cmVzID0gT2JqZWN0LmtleXMoZmVhdHVyZXMpOwogIGlmICghZmVhdHVyZXMgfHwgZW5hYmxlZEZlYXR1cmVzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuOwogIH0KICB2YXIgbG9nU3RyaW5nID0gIlNlcnZlciBzdGFydGVkOiI7CgogIC8vIFNlcnZlciBzdGFydGVkOiBIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGVuYWJsZWQsIExpdmUgUmVsb2FkaW5nIGVuYWJsZWQsIE92ZXJsYXkgZGlzYWJsZWQuCiAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbmFibGVkRmVhdHVyZXMubGVuZ3RoOyBpKyspIHsKICAgIHZhciBrZXkgPSBlbmFibGVkRmVhdHVyZXNbaV07CiAgICBsb2dTdHJpbmcgKz0gIiAiLmNvbmNhdChrZXksICIgIikuY29uY2F0KGZlYXR1cmVzW2tleV0gPyAiZW5hYmxlZCIgOiAiZGlzYWJsZWQiLCAiLCIpOwogIH0KICAvLyByZXBsYWNlIGxhc3QgY29tbWEgd2l0aCBhIHBlcmlvZAogIGxvZ1N0cmluZyA9IGxvZ1N0cmluZy5zbGljZSgwLCAtMSkuY29uY2F0KCIuIik7CiAgbG9nLmluZm8obG9nU3RyaW5nKTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9wYXJzZVVSTC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3BhcnNlVVJMLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImRlZmF1bHQiOiAoKSA9PiAoX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18pCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2dldEN1cnJlbnRTY3JpcHRTb3VyY2VfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vZ2V0Q3VycmVudFNjcmlwdFNvdXJjZS5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvZ2V0Q3VycmVudFNjcmlwdFNvdXJjZS5qcyIpOwoKCi8qKgogKiBAcGFyYW0ge3N0cmluZ30gcmVzb3VyY2VRdWVyeQogKiBAcmV0dXJucyB7eyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBib29sZWFuIH19CiAqLwpmdW5jdGlvbiBwYXJzZVVSTChyZXNvdXJjZVF1ZXJ5KSB7CiAgLyoqIEB0eXBlIHt7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9fSAqLwogIHZhciBvcHRpb25zID0ge307CiAgaWYgKHR5cGVvZiByZXNvdXJjZVF1ZXJ5ID09PSAic3RyaW5nIiAmJiByZXNvdXJjZVF1ZXJ5ICE9PSAiIikgewogICAgdmFyIHNlYXJjaFBhcmFtcyA9IHJlc291cmNlUXVlcnkuc2xpY2UoMSkuc3BsaXQoIiYiKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VhcmNoUGFyYW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBwYWlyID0gc2VhcmNoUGFyYW1zW2ldLnNwbGl0KCI9Iik7CiAgICAgIG9wdGlvbnNbcGFpclswXV0gPSBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSk7CiAgICB9CiAgfSBlbHNlIHsKICAgIC8vIEVsc2UsIGdldCB0aGUgdXJsIGZyb20gdGhlIDxzY3JpcHQ+IHRoaXMgZmlsZSB3YXMgY2FsbGVkIHdpdGguCiAgICB2YXIgc2NyaXB0U291cmNlID0gKDAsX2dldEN1cnJlbnRTY3JpcHRTb3VyY2VfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX1siZGVmYXVsdCJdKSgpOwogICAgdmFyIHNjcmlwdFNvdXJjZVVSTDsKICAgIHRyeSB7CiAgICAgIC8vIFRoZSBwbGFjZWhvbGRlciBgYmFzZVVSTGAgd2l0aCBgd2luZG93LmxvY2F0aW9uLmhyZWZgLAogICAgICAvLyBpcyB0byBhbGxvdyBwYXJzaW5nIG9mIHBhdGgtcmVsYXRpdmUgb3IgcHJvdG9jb2wtcmVsYXRpdmUgVVJMcywKICAgICAgLy8gYW5kIHdpbGwgaGF2ZSBubyBlZmZlY3QgaWYgYHNjcmlwdFNvdXJjZWAgaXMgYSBmdWxseSB2YWxpZCBVUkwuCiAgICAgIHNjcmlwdFNvdXJjZVVSTCA9IG5ldyBVUkwoc2NyaXB0U291cmNlLCBzZWxmLmxvY2F0aW9uLmhyZWYpOwogICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgLy8gVVJMIHBhcnNpbmcgZmFpbGVkLCBkbyBub3RoaW5nLgogICAgICAvLyBXZSB3aWxsIHN0aWxsIHByb2NlZWQgdG8gc2VlIGlmIHdlIGNhbiByZWNvdmVyIHVzaW5nIGByZXNvdXJjZVF1ZXJ5YAogICAgfQogICAgaWYgKHNjcmlwdFNvdXJjZVVSTCkgewogICAgICBvcHRpb25zID0gc2NyaXB0U291cmNlVVJMOwogICAgICBvcHRpb25zLmZyb21DdXJyZW50U2NyaXB0ID0gdHJ1ZTsKICAgIH0KICB9CiAgcmV0dXJuIG9wdGlvbnM7Cn0KLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXyA9IChwYXJzZVVSTCk7CgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9yZWxvYWRBcHAuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcmVsb2FkQXBwLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewovKiBoYXJtb255IGV4cG9ydCAqLyAgICJkZWZhdWx0IjogKCkgPT4gKF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fKQovKiBoYXJtb255IGV4cG9ydCAqLyB9KTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfaG90X2VtaXR0ZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHdlYnBhY2svaG90L2VtaXR0ZXIuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stdmlydHVhbC1lYmU2NWUwN2JmLzAvY2FjaGUvd2VicGFjay1ucG0tNS43OC4wLWFkZDc2MmM5NzItNDIxM2U1YmNjMi56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2VtaXR0ZXIuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfaG90X2VtaXR0ZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0ID0gLyojX19QVVJFX18qL19fd2VicGFja19yZXF1aXJlX18ubih3ZWJwYWNrX2hvdF9lbWl0dGVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9sb2cuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcyIpOwoKCgovKiogQHR5cGVkZWYge2ltcG9ydCgiLi4vaW5kZXgiKS5PcHRpb25zfSBPcHRpb25zCi8qKiBAdHlwZWRlZiB7aW1wb3J0KCIuLi9pbmRleCIpLlN0YXR1c30gU3RhdHVzCgovKioKICogQHBhcmFtIHtPcHRpb25zfSBvcHRpb25zCiAqIEBwYXJhbSB7U3RhdHVzfSBzdGF0dXMKICovCmZ1bmN0aW9uIHJlbG9hZEFwcChfcmVmLCBzdGF0dXMpIHsKICB2YXIgaG90ID0gX3JlZi5ob3QsCiAgICBsaXZlUmVsb2FkID0gX3JlZi5saXZlUmVsb2FkOwogIGlmIChzdGF0dXMuaXNVbmxvYWRpbmcpIHsKICAgIHJldHVybjsKICB9CiAgdmFyIGN1cnJlbnRIYXNoID0gc3RhdHVzLmN1cnJlbnRIYXNoLAogICAgcHJldmlvdXNIYXNoID0gc3RhdHVzLnByZXZpb3VzSGFzaDsKICB2YXIgaXNJbml0aWFsID0gY3VycmVudEhhc2guaW5kZXhPZiggLyoqIEB0eXBlIHtzdHJpbmd9ICovcHJldmlvdXNIYXNoKSA+PSAwOwogIGlmIChpc0luaXRpYWwpIHsKICAgIHJldHVybjsKICB9CgogIC8qKgogICAqIEBwYXJhbSB7V2luZG93fSByb290V2luZG93CiAgICogQHBhcmFtIHtudW1iZXJ9IGludGVydmFsSWQKICAgKi8KICBmdW5jdGlvbiBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKSB7CiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpOwogICAgX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmxvZy5pbmZvKCJBcHAgdXBkYXRlZC4gUmVsb2FkaW5nLi4uIik7CiAgICByb290V2luZG93LmxvY2F0aW9uLnJlbG9hZCgpOwogIH0KICB2YXIgc2VhcmNoID0gc2VsZi5sb2NhdGlvbi5zZWFyY2gudG9Mb3dlckNhc2UoKTsKICB2YXIgYWxsb3dUb0hvdCA9IHNlYXJjaC5pbmRleE9mKCJ3ZWJwYWNrLWRldi1zZXJ2ZXItaG90PWZhbHNlIikgPT09IC0xOwogIHZhciBhbGxvd1RvTGl2ZVJlbG9hZCA9IHNlYXJjaC5pbmRleE9mKCJ3ZWJwYWNrLWRldi1zZXJ2ZXItbGl2ZS1yZWxvYWQ9ZmFsc2UiKSA9PT0gLTE7CiAgaWYgKGhvdCAmJiBhbGxvd1RvSG90KSB7CiAgICBfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18ubG9nLmluZm8oIkFwcCBob3QgdXBkYXRlLi4uIik7CiAgICB3ZWJwYWNrX2hvdF9lbWl0dGVyX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpLmVtaXQoIndlYnBhY2tIb3RVcGRhdGUiLCBzdGF0dXMuY3VycmVudEhhc2gpOwogICAgaWYgKHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiAmJiBzZWxmLndpbmRvdykgewogICAgICAvLyBicm9hZGNhc3QgdXBkYXRlIHRvIHdpbmRvdwogICAgICBzZWxmLnBvc3RNZXNzYWdlKCJ3ZWJwYWNrSG90VXBkYXRlIi5jb25jYXQoc3RhdHVzLmN1cnJlbnRIYXNoKSwgIioiKTsKICAgIH0KICB9CiAgLy8gYWxsb3cgcmVmcmVzaGluZyB0aGUgcGFnZSBvbmx5IGlmIGxpdmVSZWxvYWQgaXNuJ3QgZGlzYWJsZWQKICBlbHNlIGlmIChsaXZlUmVsb2FkICYmIGFsbG93VG9MaXZlUmVsb2FkKSB7CiAgICB2YXIgcm9vdFdpbmRvdyA9IHNlbGY7CgogICAgLy8gdXNlIHBhcmVudCB3aW5kb3cgZm9yIHJlbG9hZCAoaW4gY2FzZSB3ZSdyZSBpbiBhbiBpZnJhbWUgd2l0aCBubyB2YWxpZCBzcmMpCiAgICB2YXIgaW50ZXJ2YWxJZCA9IHNlbGYuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICBpZiAocm9vdFdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gImFib3V0OiIpIHsKICAgICAgICAvLyByZWxvYWQgaW1tZWRpYXRlbHkgaWYgcHJvdG9jb2wgaXMgdmFsaWQKICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByb290V2luZG93ID0gcm9vdFdpbmRvdy5wYXJlbnQ7CiAgICAgICAgaWYgKHJvb3RXaW5kb3cucGFyZW50ID09PSByb290V2luZG93KSB7CiAgICAgICAgICAvLyBpZiBwYXJlbnQgZXF1YWxzIGN1cnJlbnQgd2luZG93IHdlJ3ZlIHJlYWNoZWQgdGhlIHJvb3Qgd2hpY2ggd291bGQgY29udGludWUgZm9yZXZlciwgc28gdHJpZ2dlciBhIHJlbG9hZCBhbnl3YXlzCiAgICAgICAgICBhcHBseVJlbG9hZChyb290V2luZG93LCBpbnRlcnZhbElkKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwogIH0KfQovKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fID0gKHJlbG9hZEFwcCk7CgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9zZW5kTWVzc2FnZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3NlbmRNZXNzYWdlLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImRlZmF1bHQiOiAoKSA9PiAoX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18pCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwovKiBnbG9iYWwgX19yZXNvdXJjZVF1ZXJ5IFdvcmtlckdsb2JhbFNjb3BlICovCgovLyBTZW5kIG1lc3NhZ2VzIHRvIHRoZSBvdXRzaWRlLCBzbyBwbHVnaW5zIGNhbiBjb25zdW1lIGl0LgovKioKICogQHBhcmFtIHtzdHJpbmd9IHR5cGUKICogQHBhcmFtIHthbnl9IFtkYXRhXQogKi8KZnVuY3Rpb24gc2VuZE1zZyh0eXBlLCBkYXRhKSB7CiAgaWYgKHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiAmJiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlID09PSAidW5kZWZpbmVkIiB8fCAhKHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSkpKSB7CiAgICBzZWxmLnBvc3RNZXNzYWdlKHsKICAgICAgdHlwZTogIndlYnBhY2siLmNvbmNhdCh0eXBlKSwKICAgICAgZGF0YTogZGF0YQogICAgfSwgIioiKTsKICB9Cn0KLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXyA9IChzZW5kTXNnKTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTQzN2I4YjNkMjkvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3N0cmlwQW5zaS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9zdHJpcEFuc2kuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImRlZmF1bHQiOiAoKSA9PiAoX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18pCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwp2YXIgYW5zaVJlZ2V4ID0gbmV3IFJlZ0V4cChbIltcXHUwMDFCXFx1MDA5Ql1bW1xcXSgpIzs/XSooPzooPzooPzooPzo7Wy1hLXpBLVpcXGRcXC8jJi46PT8lQH5fXSspKnxbYS16QS1aXFxkXSsoPzo7Wy1hLXpBLVpcXGRcXC8jJi46PT8lQH5fXSopKik/XFx1MDAwNykiLCAiKD86KD86XFxkezEsNH0oPzo7XFxkezAsNH0pKik/W1xcZEEtUFItVFpjZi1ucS11eT0+PH5dKSkiXS5qb2luKCJ8IiksICJnIik7CgovKioKICoKICogU3RyaXAgW0FOU0kgZXNjYXBlIGNvZGVzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9BTlNJX2VzY2FwZV9jb2RlKSBmcm9tIGEgc3RyaW5nLgogKiBBZGFwdGVkIGZyb20gY29kZSBvcmlnaW5hbGx5IHJlbGVhc2VkIGJ5IFNpbmRyZSBTb3JodXMKICogTGljZW5zZWQgdGhlIE1JVCBMaWNlbnNlCiAqCiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcKICogQHJldHVybiB7c3RyaW5nfQogKi8KZnVuY3Rpb24gc3RyaXBBbnNpKHN0cmluZykgewogIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAic3RyaW5nIikgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiRXhwZWN0ZWQgYSBgc3RyaW5nYCwgZ290IGAiLmNvbmNhdCh0eXBlb2Ygc3RyaW5nLCAiYCIpKTsKICB9CiAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKGFuc2lSZWdleCwgIiIpOwp9Ci8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18gPSAoc3RyaXBBbnNpKTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stdmlydHVhbC1lYmU2NWUwN2JmLzAvY2FjaGUvd2VicGFjay1ucG0tNS43OC4wLWFkZDc2MmM5NzItNDIxM2U1YmNjMi56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2Rldi1zZXJ2ZXIuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stdmlydHVhbC1lYmU2NWUwN2JmLzAvY2FjaGUvd2VicGFjay1ucG0tNS43OC4wLWFkZDc2MmM5NzItNDIxM2U1YmNjMi56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2Rldi1zZXJ2ZXIuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCi8qCglNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAoJQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYQoqLwovKiBnbG9iYWxzIF9fd2VicGFja19oYXNoX18gKi8KaWYgKHRydWUpIHsKCXZhciBsYXN0SGFzaDsKCXZhciB1cFRvRGF0ZSA9IGZ1bmN0aW9uIHVwVG9EYXRlKCkgewoJCXJldHVybiBsYXN0SGFzaC5pbmRleE9mKF9fd2VicGFja19yZXF1aXJlX18uaCgpKSA+PSAwOwoJfTsKCXZhciBsb2cgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2xvZyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLWViZTY1ZTA3YmYvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLmpzIik7Cgl2YXIgY2hlY2sgPSBmdW5jdGlvbiBjaGVjaygpIHsKCQltb2R1bGUuaG90CgkJCS5jaGVjayh0cnVlKQoJCQkudGhlbihmdW5jdGlvbiAodXBkYXRlZE1vZHVsZXMpIHsKCQkJCWlmICghdXBkYXRlZE1vZHVsZXMpIHsKCQkJCQlsb2coCgkJCQkJCSJ3YXJuaW5nIiwKCQkJCQkJIltITVJdIENhbm5vdCBmaW5kIHVwZGF0ZS4gIiArCgkJCQkJCQkodHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIKCQkJCQkJCQk/ICJOZWVkIHRvIGRvIGEgZnVsbCByZWxvYWQhIgoJCQkJCQkJCTogIlBsZWFzZSByZWxvYWQgbWFudWFsbHkhIikKCQkJCQkpOwoJCQkJCWxvZygKCQkJCQkJIndhcm5pbmciLAoJCQkJCQkiW0hNUl0gKFByb2JhYmx5IGJlY2F1c2Ugb2YgcmVzdGFydGluZyB0aGUgd2VicGFjay1kZXYtc2VydmVyKSIKCQkJCQkpOwoJCQkJCWlmICh0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIikgewoJCQkJCQl3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CgkJCQkJfQoJCQkJCXJldHVybjsKCQkJCX0KCgkJCQlpZiAoIXVwVG9EYXRlKCkpIHsKCQkJCQljaGVjaygpOwoJCQkJfQoKCQkJCV9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbG9nLWFwcGx5LXJlc3VsdCAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLWViZTY1ZTA3YmYvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLWFwcGx5LXJlc3VsdC5qcyIpKHVwZGF0ZWRNb2R1bGVzLCB1cGRhdGVkTW9kdWxlcyk7CgoJCQkJaWYgKHVwVG9EYXRlKCkpIHsKCQkJCQlsb2coImluZm8iLCAiW0hNUl0gQXBwIGlzIHVwIHRvIGRhdGUuIik7CgkJCQl9CgkJCX0pCgkJCS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7CgkJCQl2YXIgc3RhdHVzID0gbW9kdWxlLmhvdC5zdGF0dXMoKTsKCQkJCWlmIChbImFib3J0IiwgImZhaWwiXS5pbmRleE9mKHN0YXR1cykgPj0gMCkgewoJCQkJCWxvZygKCQkJCQkJIndhcm5pbmciLAoJCQkJCQkiW0hNUl0gQ2Fubm90IGFwcGx5IHVwZGF0ZS4gIiArCgkJCQkJCQkodHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIKCQkJCQkJCQk/ICJOZWVkIHRvIGRvIGEgZnVsbCByZWxvYWQhIgoJCQkJCQkJCTogIlBsZWFzZSByZWxvYWQgbWFudWFsbHkhIikKCQkJCQkpOwoJCQkJCWxvZygid2FybmluZyIsICJbSE1SXSAiICsgbG9nLmZvcm1hdEVycm9yKGVycikpOwoJCQkJCWlmICh0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIikgewoJCQkJCQl3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CgkJCQkJfQoJCQkJfSBlbHNlIHsKCQkJCQlsb2coIndhcm5pbmciLCAiW0hNUl0gVXBkYXRlIGZhaWxlZDogIiArIGxvZy5mb3JtYXRFcnJvcihlcnIpKTsKCQkJCX0KCQkJfSk7Cgl9OwoJdmFyIGhvdEVtaXR0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2VtaXR0ZXIgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stdmlydHVhbC1lYmU2NWUwN2JmLzAvY2FjaGUvd2VicGFjay1ucG0tNS43OC4wLWFkZDc2MmM5NzItNDIxM2U1YmNjMi56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2VtaXR0ZXIuanMiKTsKCWhvdEVtaXR0ZXIub24oIndlYnBhY2tIb3RVcGRhdGUiLCBmdW5jdGlvbiAoY3VycmVudEhhc2gpIHsKCQlsYXN0SGFzaCA9IGN1cnJlbnRIYXNoOwoJCWlmICghdXBUb0RhdGUoKSAmJiBtb2R1bGUuaG90LnN0YXR1cygpID09PSAiaWRsZSIpIHsKCQkJbG9nKCJpbmZvIiwgIltITVJdIENoZWNraW5nIGZvciB1cGRhdGVzIG9uIHRoZSBzZXJ2ZXIuLi4iKTsKCQkJY2hlY2soKTsKCQl9Cgl9KTsKCWxvZygiaW5mbyIsICJbSE1SXSBXYWl0aW5nIGZvciB1cGRhdGUgc2lnbmFsIGZyb20gV0RTLi4uIik7Cn0gZWxzZSB7fQoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stdmlydHVhbC1lYmU2NWUwN2JmLzAvY2FjaGUvd2VicGFjay1ucG0tNS43OC4wLWFkZDc2MmM5NzItNDIxM2U1YmNjMi56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2VtaXR0ZXIuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stdmlydHVhbC1lYmU2NWUwN2JmLzAvY2FjaGUvd2VicGFjay1ucG0tNS43OC4wLWFkZDc2MmM5NzItNDIxM2U1YmNjMi56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2VtaXR0ZXIuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBFdmVudEVtaXR0ZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBldmVudHMgKi8gIi4uLy4uLy55YXJuL2NhY2hlL2V2ZW50cy1ucG0tMy4zLjAtYzI4MGJjN2U0OC1mNmY0ODdhZDIxLnppcC9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIpOwptb2R1bGUuZXhwb3J0cyA9IG5ldyBFdmVudEVtaXR0ZXIoKTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLXZpcnR1YWwtZWJlNjVlMDdiZi8wL2NhY2hlL3dlYnBhY2stbnBtLTUuNzguMC1hZGQ3NjJjOTcyLTQyMTNlNWJjYzIuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2ctYXBwbHktcmVzdWx0LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLXZpcnR1YWwtZWJlNjVlMDdiZi8wL2NhY2hlL3dlYnBhY2stbnBtLTUuNzguMC1hZGQ3NjJjOTcyLTQyMTNlNWJjYzIuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2ctYXBwbHktcmVzdWx0LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgovKgoJTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAKCUF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmEKKi8KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXBkYXRlZE1vZHVsZXMsIHJlbmV3ZWRNb2R1bGVzKSB7Cgl2YXIgdW5hY2NlcHRlZE1vZHVsZXMgPSB1cGRhdGVkTW9kdWxlcy5maWx0ZXIoZnVuY3Rpb24gKG1vZHVsZUlkKSB7CgkJcmV0dXJuIHJlbmV3ZWRNb2R1bGVzICYmIHJlbmV3ZWRNb2R1bGVzLmluZGV4T2YobW9kdWxlSWQpIDwgMDsKCX0pOwoJdmFyIGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbG9nICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLXZpcnR1YWwtZWJlNjVlMDdiZi8wL2NhY2hlL3dlYnBhY2stbnBtLTUuNzguMC1hZGQ3NjJjOTcyLTQyMTNlNWJjYzIuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2cuanMiKTsKCglpZiAodW5hY2NlcHRlZE1vZHVsZXMubGVuZ3RoID4gMCkgewoJCWxvZygKCQkJIndhcm5pbmciLAoJCQkiW0hNUl0gVGhlIGZvbGxvd2luZyBtb2R1bGVzIGNvdWxkbid0IGJlIGhvdCB1cGRhdGVkOiAoVGhleSB3b3VsZCBuZWVkIGEgZnVsbCByZWxvYWQhKSIKCQkpOwoJCXVuYWNjZXB0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7CgkJCWxvZygid2FybmluZyIsICJbSE1SXSAgLSAiICsgbW9kdWxlSWQpOwoJCX0pOwoJfQoKCWlmICghcmVuZXdlZE1vZHVsZXMgfHwgcmVuZXdlZE1vZHVsZXMubGVuZ3RoID09PSAwKSB7CgkJbG9nKCJpbmZvIiwgIltITVJdIE5vdGhpbmcgaG90IHVwZGF0ZWQuIik7Cgl9IGVsc2UgewoJCWxvZygiaW5mbyIsICJbSE1SXSBVcGRhdGVkIG1vZHVsZXM6Iik7CgkJcmVuZXdlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHsKCQkJaWYgKHR5cGVvZiBtb2R1bGVJZCA9PT0gInN0cmluZyIgJiYgbW9kdWxlSWQuaW5kZXhPZigiISIpICE9PSAtMSkgewoJCQkJdmFyIHBhcnRzID0gbW9kdWxlSWQuc3BsaXQoIiEiKTsKCQkJCWxvZy5ncm91cENvbGxhcHNlZCgiaW5mbyIsICJbSE1SXSAgLSAiICsgcGFydHMucG9wKCkpOwoJCQkJbG9nKCJpbmZvIiwgIltITVJdICAtICIgKyBtb2R1bGVJZCk7CgkJCQlsb2cuZ3JvdXBFbmQoImluZm8iKTsKCQkJfSBlbHNlIHsKCQkJCWxvZygiaW5mbyIsICJbSE1SXSAgLSAiICsgbW9kdWxlSWQpOwoJCQl9CgkJfSk7CgkJdmFyIG51bWJlcklkcyA9IHJlbmV3ZWRNb2R1bGVzLmV2ZXJ5KGZ1bmN0aW9uIChtb2R1bGVJZCkgewoJCQlyZXR1cm4gdHlwZW9mIG1vZHVsZUlkID09PSAibnVtYmVyIjsKCQl9KTsKCQlpZiAobnVtYmVySWRzKQoJCQlsb2coCgkJCQkiaW5mbyIsCgkJCQknW0hNUl0gQ29uc2lkZXIgdXNpbmcgdGhlIG9wdGltaXphdGlvbi5tb2R1bGVJZHM6ICJuYW1lZCIgZm9yIG1vZHVsZSBuYW1lcy4nCgkJCSk7Cgl9Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLWViZTY1ZTA3YmYvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stdmlydHVhbC1lYmU2NWUwN2JmLzAvY2FjaGUvd2VicGFjay1ucG0tNS43OC4wLWFkZDc2MmM5NzItNDIxM2U1YmNjMi56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKdmFyIGxvZ0xldmVsID0gImluZm8iOwoKZnVuY3Rpb24gZHVtbXkoKSB7fQoKZnVuY3Rpb24gc2hvdWxkTG9nKGxldmVsKSB7Cgl2YXIgc2hvdWxkTG9nID0KCQkobG9nTGV2ZWwgPT09ICJpbmZvIiAmJiBsZXZlbCA9PT0gImluZm8iKSB8fAoJCShbImluZm8iLCAid2FybmluZyJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09ICJ3YXJuaW5nIikgfHwKCQkoWyJpbmZvIiwgIndhcm5pbmciLCAiZXJyb3IiXS5pbmRleE9mKGxvZ0xldmVsKSA+PSAwICYmIGxldmVsID09PSAiZXJyb3IiKTsKCXJldHVybiBzaG91bGRMb2c7Cn0KCmZ1bmN0aW9uIGxvZ0dyb3VwKGxvZ0ZuKSB7CglyZXR1cm4gZnVuY3Rpb24gKGxldmVsLCBtc2cpIHsKCQlpZiAoc2hvdWxkTG9nKGxldmVsKSkgewoJCQlsb2dGbihtc2cpOwoJCX0KCX07Cn0KCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxldmVsLCBtc2cpIHsKCWlmIChzaG91bGRMb2cobGV2ZWwpKSB7CgkJaWYgKGxldmVsID09PSAiaW5mbyIpIHsKCQkJY29uc29sZS5sb2cobXNnKTsKCQl9IGVsc2UgaWYgKGxldmVsID09PSAid2FybmluZyIpIHsKCQkJY29uc29sZS53YXJuKG1zZyk7CgkJfSBlbHNlIGlmIChsZXZlbCA9PT0gImVycm9yIikgewoJCQljb25zb2xlLmVycm9yKG1zZyk7CgkJfQoJfQp9OwoKLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovCnZhciBncm91cCA9IGNvbnNvbGUuZ3JvdXAgfHwgZHVtbXk7CnZhciBncm91cENvbGxhcHNlZCA9IGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQgfHwgZHVtbXk7CnZhciBncm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQgfHwgZHVtbXk7Ci8qIGVzbGludC1lbmFibGUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zICovCgptb2R1bGUuZXhwb3J0cy5ncm91cCA9IGxvZ0dyb3VwKGdyb3VwKTsKCm1vZHVsZS5leHBvcnRzLmdyb3VwQ29sbGFwc2VkID0gbG9nR3JvdXAoZ3JvdXBDb2xsYXBzZWQpOwoKbW9kdWxlLmV4cG9ydHMuZ3JvdXBFbmQgPSBsb2dHcm91cChncm91cEVuZCk7Cgptb2R1bGUuZXhwb3J0cy5zZXRMb2dMZXZlbCA9IGZ1bmN0aW9uIChsZXZlbCkgewoJbG9nTGV2ZWwgPSBsZXZlbDsKfTsKCm1vZHVsZS5leHBvcnRzLmZvcm1hdEVycm9yID0gZnVuY3Rpb24gKGVycikgewoJdmFyIG1lc3NhZ2UgPSBlcnIubWVzc2FnZTsKCXZhciBzdGFjayA9IGVyci5zdGFjazsKCWlmICghc3RhY2spIHsKCQlyZXR1cm4gbWVzc2FnZTsKCX0gZWxzZSBpZiAoc3RhY2suaW5kZXhPZihtZXNzYWdlKSA8IDApIHsKCQlyZXR1cm4gbWVzc2FnZSArICJcbiIgKyBzdGFjazsKCX0gZWxzZSB7CgkJcmV0dXJuIHN0YWNrOwoJfQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL2NhY2hlL2Fuc2ktaHRtbC1jb21tdW5pdHktbnBtLTAuMC44LTVlYWVmNTVmMWItMDRjNTY4ZTgzNC56aXAvbm9kZV9tb2R1bGVzL2Fuc2ktaHRtbC1jb21tdW5pdHkvaW5kZXguanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL2NhY2hlL2Fuc2ktaHRtbC1jb21tdW5pdHktbnBtLTAuMC44LTVlYWVmNTVmMWItMDRjNTY4ZTgzNC56aXAvbm9kZV9tb2R1bGVzL2Fuc2ktaHRtbC1jb21tdW5pdHkvaW5kZXguanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7CgoidXNlIHN0cmljdCI7CgoKbW9kdWxlLmV4cG9ydHMgPSBhbnNpSFRNTAoKLy8gUmVmZXJlbmNlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvYW5zaS1yZWdleAp2YXIgX3JlZ0FOU0kgPSAvKD86KD86XHUwMDFiXFspfFx1MDA5YikoPzooPzpbMC05XXsxLDN9KT8oPzooPzo7WzAtOV17MCwzfSkqKT9bQS1NfGYtbV0pfFx1MDAxYltBLU1dLwoKdmFyIF9kZWZDb2xvcnMgPSB7CiAgcmVzZXQ6IFsnZmZmJywgJzAwMCddLCAvLyBbRk9SRUdST1VEX0NPTE9SLCBCQUNLR1JPVU5EX0NPTE9SXQogIGJsYWNrOiAnMDAwJywKICByZWQ6ICdmZjAwMDAnLAogIGdyZWVuOiAnMjA5ODA1JywKICB5ZWxsb3c6ICdlOGJmMDMnLAogIGJsdWU6ICcwMDAwZmYnLAogIG1hZ2VudGE6ICdmZjAwZmYnLAogIGN5YW46ICcwMGZmZWUnLAogIGxpZ2h0Z3JleTogJ2YwZjBmMCcsCiAgZGFya2dyZXk6ICc4ODgnCn0KdmFyIF9zdHlsZXMgPSB7CiAgMzA6ICdibGFjaycsCiAgMzE6ICdyZWQnLAogIDMyOiAnZ3JlZW4nLAogIDMzOiAneWVsbG93JywKICAzNDogJ2JsdWUnLAogIDM1OiAnbWFnZW50YScsCiAgMzY6ICdjeWFuJywKICAzNzogJ2xpZ2h0Z3JleScKfQp2YXIgX29wZW5UYWdzID0gewogICcxJzogJ2ZvbnQtd2VpZ2h0OmJvbGQnLCAvLyBib2xkCiAgJzInOiAnb3BhY2l0eTowLjUnLCAvLyBkaW0KICAnMyc6ICc8aT4nLCAvLyBpdGFsaWMKICAnNCc6ICc8dT4nLCAvLyB1bmRlcnNjb3JlCiAgJzgnOiAnZGlzcGxheTpub25lJywgLy8gaGlkZGVuCiAgJzknOiAnPGRlbD4nIC8vIGRlbGV0ZQp9CnZhciBfY2xvc2VUYWdzID0gewogICcyMyc6ICc8L2k+JywgLy8gcmVzZXQgaXRhbGljCiAgJzI0JzogJzwvdT4nLCAvLyByZXNldCB1bmRlcnNjb3JlCiAgJzI5JzogJzwvZGVsPicgLy8gcmVzZXQgZGVsZXRlCn0KCjtbMCwgMjEsIDIyLCAyNywgMjgsIDM5LCA0OV0uZm9yRWFjaChmdW5jdGlvbiAobikgewogIF9jbG9zZVRhZ3Nbbl0gPSAnPC9zcGFuPicKfSkKCi8qKgogKiBDb252ZXJ0cyB0ZXh0IHdpdGggQU5TSSBjb2xvciBjb2RlcyB0byBIVE1MIG1hcmt1cC4KICogQHBhcmFtIHtTdHJpbmd9IHRleHQKICogQHJldHVybnMgeyp9CiAqLwpmdW5jdGlvbiBhbnNpSFRNTCAodGV4dCkgewogIC8vIFJldHVybnMgdGhlIHRleHQgaWYgdGhlIHN0cmluZyBoYXMgbm8gQU5TSSBlc2NhcGUgY29kZS4KICBpZiAoIV9yZWdBTlNJLnRlc3QodGV4dCkpIHsKICAgIHJldHVybiB0ZXh0CiAgfQoKICAvLyBDYWNoZSBvcGVuZWQgc2VxdWVuY2UuCiAgdmFyIGFuc2lDb2RlcyA9IFtdCiAgLy8gUmVwbGFjZSB3aXRoIG1hcmt1cC4KICB2YXIgcmV0ID0gdGV4dC5yZXBsYWNlKC9cMDMzXFsoXGQrKW0vZywgZnVuY3Rpb24gKG1hdGNoLCBzZXEpIHsKICAgIHZhciBvdCA9IF9vcGVuVGFnc1tzZXFdCiAgICBpZiAob3QpIHsKICAgICAgLy8gSWYgY3VycmVudCBzZXF1ZW5jZSBoYXMgYmVlbiBvcGVuZWQsIGNsb3NlIGl0LgogICAgICBpZiAoISF+YW5zaUNvZGVzLmluZGV4T2Yoc2VxKSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWV4dHJhLWJvb2xlYW4tY2FzdAogICAgICAgIGFuc2lDb2Rlcy5wb3AoKQogICAgICAgIHJldHVybiAnPC9zcGFuPicKICAgICAgfQogICAgICAvLyBPcGVuIHRhZy4KICAgICAgYW5zaUNvZGVzLnB1c2goc2VxKQogICAgICByZXR1cm4gb3RbMF0gPT09ICc8JyA/IG90IDogJzxzcGFuIHN0eWxlPSInICsgb3QgKyAnOyI+JwogICAgfQoKICAgIHZhciBjdCA9IF9jbG9zZVRhZ3Nbc2VxXQogICAgaWYgKGN0KSB7CiAgICAgIC8vIFBvcCBzZXF1ZW5jZQogICAgICBhbnNpQ29kZXMucG9wKCkKICAgICAgcmV0dXJuIGN0CiAgICB9CiAgICByZXR1cm4gJycKICB9KQoKICAvLyBNYWtlIHN1cmUgdGFncyBhcmUgY2xvc2VkLgogIHZhciBsID0gYW5zaUNvZGVzLmxlbmd0aAogIDsobCA+IDApICYmIChyZXQgKz0gQXJyYXkobCArIDEpLmpvaW4oJzwvc3Bhbj4nKSkKCiAgcmV0dXJuIHJldAp9CgovKioKICogQ3VzdG9taXplIGNvbG9ycy4KICogQHBhcmFtIHtPYmplY3R9IGNvbG9ycyByZWZlcmVuY2UgdG8gX2RlZkNvbG9ycwogKi8KYW5zaUhUTUwuc2V0Q29sb3JzID0gZnVuY3Rpb24gKGNvbG9ycykgewogIGlmICh0eXBlb2YgY29sb3JzICE9PSAnb2JqZWN0JykgewogICAgdGhyb3cgbmV3IEVycm9yKCdgY29sb3JzYCBwYXJhbWV0ZXIgbXVzdCBiZSBhbiBPYmplY3QuJykKICB9CgogIHZhciBfZmluYWxDb2xvcnMgPSB7fQogIGZvciAodmFyIGtleSBpbiBfZGVmQ29sb3JzKSB7CiAgICB2YXIgaGV4ID0gY29sb3JzLmhhc093blByb3BlcnR5KGtleSkgPyBjb2xvcnNba2V5XSA6IG51bGwKICAgIGlmICghaGV4KSB7CiAgICAgIF9maW5hbENvbG9yc1trZXldID0gX2RlZkNvbG9yc1trZXldCiAgICAgIGNvbnRpbnVlCiAgICB9CiAgICBpZiAoJ3Jlc2V0JyA9PT0ga2V5KSB7CiAgICAgIGlmICh0eXBlb2YgaGV4ID09PSAnc3RyaW5nJykgewogICAgICAgIGhleCA9IFtoZXhdCiAgICAgIH0KICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGhleCkgfHwgaGV4Lmxlbmd0aCA9PT0gMCB8fCBoZXguc29tZShmdW5jdGlvbiAoaCkgewogICAgICAgIHJldHVybiB0eXBlb2YgaCAhPT0gJ3N0cmluZycKICAgICAgfSkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBvZiBgJyArIGtleSArICdgIHByb3BlcnR5IG11c3QgYmUgYW4gQXJyYXkgYW5kIGVhY2ggaXRlbSBjb3VsZCBvbmx5IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJykKICAgICAgfQogICAgICB2YXIgZGVmSGV4Q29sb3IgPSBfZGVmQ29sb3JzW2tleV0KICAgICAgaWYgKCFoZXhbMF0pIHsKICAgICAgICBoZXhbMF0gPSBkZWZIZXhDb2xvclswXQogICAgICB9CiAgICAgIGlmIChoZXgubGVuZ3RoID09PSAxIHx8ICFoZXhbMV0pIHsKICAgICAgICBoZXggPSBbaGV4WzBdXQogICAgICAgIGhleC5wdXNoKGRlZkhleENvbG9yWzFdKQogICAgICB9CgogICAgICBoZXggPSBoZXguc2xpY2UoMCwgMikKICAgIH0gZWxzZSBpZiAodHlwZW9mIGhleCAhPT0gJ3N0cmluZycpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGEgaGV4IHN0cmluZywgZS5nLjogRkYwMDAwJykKICAgIH0KICAgIF9maW5hbENvbG9yc1trZXldID0gaGV4CiAgfQogIF9zZXRUYWdzKF9maW5hbENvbG9ycykKfQoKLyoqCiAqIFJlc2V0IGNvbG9ycy4KICovCmFuc2lIVE1MLnJlc2V0ID0gZnVuY3Rpb24gKCkgewogIF9zZXRUYWdzKF9kZWZDb2xvcnMpCn0KCi8qKgogKiBFeHBvc2UgdGFncywgaW5jbHVkaW5nIG9wZW4gYW5kIGNsb3NlLgogKiBAdHlwZSB7T2JqZWN0fQogKi8KYW5zaUhUTUwudGFncyA9IHt9CgppZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdvcGVuJywgewogICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfb3BlblRhZ3MgfQogIH0pCiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGFuc2lIVE1MLnRhZ3MsICdjbG9zZScsIHsKICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX2Nsb3NlVGFncyB9CiAgfSkKfSBlbHNlIHsKICBhbnNpSFRNTC50YWdzLm9wZW4gPSBfb3BlblRhZ3MKICBhbnNpSFRNTC50YWdzLmNsb3NlID0gX2Nsb3NlVGFncwp9CgpmdW5jdGlvbiBfc2V0VGFncyAoY29sb3JzKSB7CiAgLy8gcmVzZXQgYWxsCiAgX29wZW5UYWdzWycwJ10gPSAnZm9udC13ZWlnaHQ6bm9ybWFsO29wYWNpdHk6MTtjb2xvcjojJyArIGNvbG9ycy5yZXNldFswXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFsxXQogIC8vIGludmVyc2UKICBfb3BlblRhZ3NbJzcnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5yZXNldFsxXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFswXQogIC8vIGRhcmsgZ3JleQogIF9vcGVuVGFnc1snOTAnXSA9ICdjb2xvcjojJyArIGNvbG9ycy5kYXJrZ3JleQoKICBmb3IgKHZhciBjb2RlIGluIF9zdHlsZXMpIHsKICAgIHZhciBjb2xvciA9IF9zdHlsZXNbY29kZV0KICAgIHZhciBvcmlDb2xvciA9IGNvbG9yc1tjb2xvcl0gfHwgJzAwMCcKICAgIF9vcGVuVGFnc1tjb2RlXSA9ICdjb2xvcjojJyArIG9yaUNvbG9yCiAgICBjb2RlID0gcGFyc2VJbnQoY29kZSkKICAgIF9vcGVuVGFnc1soY29kZSArIDEwKS50b1N0cmluZygpXSA9ICdiYWNrZ3JvdW5kOiMnICsgb3JpQ29sb3IKICB9Cn0KCmFuc2lIVE1MLnJlc2V0KCkKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9jYWNoZS9lcnJvci1zdGFjay1wYXJzZXItbnBtLTIuMS40LTViOWY3ZmMwYzItM2I5MTZkMmQxNC56aXAvbm9kZV9tb2R1bGVzL2Vycm9yLXN0YWNrLXBhcnNlci9lcnJvci1zdGFjay1wYXJzZXIuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vY2FjaGUvZXJyb3Itc3RhY2stcGFyc2VyLW5wbS0yLjEuNC01YjlmN2ZjMGMyLTNiOTE2ZDJkMTQuemlwL25vZGVfbW9kdWxlcy9lcnJvci1zdGFjay1wYXJzZXIvZXJyb3Itc3RhY2stcGFyc2VyLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHsKCnZhciBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sIF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fOyhmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7CiAgICAndXNlIHN0cmljdCc7CiAgICAvLyBVbml2ZXJzYWwgTW9kdWxlIERlZmluaXRpb24gKFVNRCkgdG8gc3VwcG9ydCBBTUQsIENvbW1vbkpTL05vZGUuanMsIFJoaW5vLCBhbmQgYnJvd3NlcnMuCgogICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi8KICAgIGlmICh0cnVlKSB7CiAgICAgICAgIShfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fID0gW19fd2VicGFja19yZXF1aXJlX18oLyohIHN0YWNrZnJhbWUgKi8gIi4uLy4uLy55YXJuL2NhY2hlL3N0YWNrZnJhbWUtbnBtLTEuMy40LWJmNGI3Y2M4ZmQtYmFlMTU5Njg3My56aXAvbm9kZV9tb2R1bGVzL3N0YWNrZnJhbWUvc3RhY2tmcmFtZS5qcyIpXSwgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fID0gKGZhY3RvcnkpLAoJCV9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fID0gKHR5cGVvZiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPT09ICdmdW5jdGlvbicgPwoJCShfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18uYXBwbHkoZXhwb3J0cywgX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXykpIDogX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fKSwKCQlfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyAhPT0gdW5kZWZpbmVkICYmIChtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fKSk7CiAgICB9IGVsc2Uge30KfSh0aGlzLCBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyKFN0YWNrRnJhbWUpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICB2YXIgRklSRUZPWF9TQUZBUklfU1RBQ0tfUkVHRVhQID0gLyhefEApXFMrOlxkKy87CiAgICB2YXIgQ0hST01FX0lFX1NUQUNLX1JFR0VYUCA9IC9eXHMqYXQgLiooXFMrOlxkK3xcKG5hdGl2ZVwpKS9tOwogICAgdmFyIFNBRkFSSV9OQVRJVkVfQ09ERV9SRUdFWFAgPSAvXihldmFsQCk/KFxbbmF0aXZlIGNvZGVdKT8kLzsKCiAgICByZXR1cm4gewogICAgICAgIC8qKgogICAgICAgICAqIEdpdmVuIGFuIEVycm9yIG9iamVjdCwgZXh0cmFjdCB0aGUgbW9zdCBpbmZvcm1hdGlvbiBmcm9tIGl0LgogICAgICAgICAqCiAgICAgICAgICogQHBhcmFtIHtFcnJvcn0gZXJyb3Igb2JqZWN0CiAgICAgICAgICogQHJldHVybiB7QXJyYXl9IG9mIFN0YWNrRnJhbWVzCiAgICAgICAgICovCiAgICAgICAgcGFyc2U6IGZ1bmN0aW9uIEVycm9yU3RhY2tQYXJzZXIkJHBhcnNlKGVycm9yKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgZXJyb3Iuc3RhY2t0cmFjZSAhPT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGVycm9yWydvcGVyYSNzb3VyY2Vsb2MnXSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3BlcmEoZXJyb3IpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGVycm9yLnN0YWNrICYmIGVycm9yLnN0YWNrLm1hdGNoKENIUk9NRV9JRV9TVEFDS19SRUdFWFApKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVY4T3JJRShlcnJvcik7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3Iuc3RhY2spIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRkZPclNhZmFyaShlcnJvcik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBwYXJzZSBnaXZlbiBFcnJvciBvYmplY3QnKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIC8vIFNlcGFyYXRlIGxpbmUgYW5kIGNvbHVtbiBudW1iZXJzIGZyb20gYSBzdHJpbmcgb2YgdGhlIGZvcm06IChVUkk6TGluZTpDb2x1bW4pCiAgICAgICAgZXh0cmFjdExvY2F0aW9uOiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRleHRyYWN0TG9jYXRpb24odXJsTGlrZSkgewogICAgICAgICAgICAvLyBGYWlsLWZhc3QgYnV0IHJldHVybiBsb2NhdGlvbnMgbGlrZSAiKG5hdGl2ZSkiCiAgICAgICAgICAgIGlmICh1cmxMaWtlLmluZGV4T2YoJzonKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgIHJldHVybiBbdXJsTGlrZV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciByZWdFeHAgPSAvKC4rPykoPzo6KFxkKykpPyg/OjooXGQrKSk/JC87CiAgICAgICAgICAgIHZhciBwYXJ0cyA9IHJlZ0V4cC5leGVjKHVybExpa2UucmVwbGFjZSgvWygpXS9nLCAnJykpOwogICAgICAgICAgICByZXR1cm4gW3BhcnRzWzFdLCBwYXJ0c1syXSB8fCB1bmRlZmluZWQsIHBhcnRzWzNdIHx8IHVuZGVmaW5lZF07CiAgICAgICAgfSwKCiAgICAgICAgcGFyc2VWOE9ySUU6IGZ1bmN0aW9uIEVycm9yU3RhY2tQYXJzZXIkJHBhcnNlVjhPcklFKGVycm9yKSB7CiAgICAgICAgICAgIHZhciBmaWx0ZXJlZCA9IGVycm9yLnN0YWNrLnNwbGl0KCdcbicpLmZpbHRlcihmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gISFsaW5lLm1hdGNoKENIUk9NRV9JRV9TVEFDS19SRUdFWFApOwogICAgICAgICAgICB9LCB0aGlzKTsKCiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZC5tYXAoZnVuY3Rpb24obGluZSkgewogICAgICAgICAgICAgICAgaWYgKGxpbmUuaW5kZXhPZignKGV2YWwgJykgPiAtMSkgewogICAgICAgICAgICAgICAgICAgIC8vIFRocm93IGF3YXkgZXZhbCBpbmZvcm1hdGlvbiB1bnRpbCB3ZSBpbXBsZW1lbnQgc3RhY2t0cmFjZS5qcy9zdGFja2ZyYW1lIzgKICAgICAgICAgICAgICAgICAgICBsaW5lID0gbGluZS5yZXBsYWNlKC9ldmFsIGNvZGUvZywgJ2V2YWwnKS5yZXBsYWNlKC8oXChldmFsIGF0IFteKCldKil8KCwuKiQpL2csICcnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHZhciBzYW5pdGl6ZWRMaW5lID0gbGluZS5yZXBsYWNlKC9eXHMrLywgJycpLnJlcGxhY2UoL1woZXZhbCBjb2RlL2csICcoJykucmVwbGFjZSgvXi4qP1xzKy8sICcnKTsKCiAgICAgICAgICAgICAgICAvLyBjYXB0dXJlIGFuZCBwcmVzZXZlIHRoZSBwYXJlbnRoZXNpemVkIGxvY2F0aW9uICIoL2Zvby9teSBiYXIuanM6MTI6ODcpIiBpbgogICAgICAgICAgICAgICAgLy8gY2FzZSBpdCBoYXMgc3BhY2VzIGluIGl0LCBhcyB0aGUgc3RyaW5nIGlzIHNwbGl0IG9uIFxzKyBsYXRlciBvbgogICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gc2FuaXRpemVkTGluZS5tYXRjaCgvIChcKC4rXCkkKS8pOwoKICAgICAgICAgICAgICAgIC8vIHJlbW92ZSB0aGUgcGFyZW50aGVzaXplZCBsb2NhdGlvbiBmcm9tIHRoZSBsaW5lLCBpZiBpdCB3YXMgbWF0Y2hlZAogICAgICAgICAgICAgICAgc2FuaXRpemVkTGluZSA9IGxvY2F0aW9uID8gc2FuaXRpemVkTGluZS5yZXBsYWNlKGxvY2F0aW9uWzBdLCAnJykgOiBzYW5pdGl6ZWRMaW5lOwoKICAgICAgICAgICAgICAgIC8vIGlmIGEgbG9jYXRpb24gd2FzIG1hdGNoZWQsIHBhc3MgaXQgdG8gZXh0cmFjdExvY2F0aW9uKCkgb3RoZXJ3aXNlIHBhc3MgYWxsIHNhbml0aXplZExpbmUKICAgICAgICAgICAgICAgIC8vIGJlY2F1c2UgdGhpcyBsaW5lIGRvZXNuJ3QgaGF2ZSBmdW5jdGlvbiBuYW1lCiAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb25QYXJ0cyA9IHRoaXMuZXh0cmFjdExvY2F0aW9uKGxvY2F0aW9uID8gbG9jYXRpb25bMV0gOiBzYW5pdGl6ZWRMaW5lKTsKICAgICAgICAgICAgICAgIHZhciBmdW5jdGlvbk5hbWUgPSBsb2NhdGlvbiAmJiBzYW5pdGl6ZWRMaW5lIHx8IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IFsnZXZhbCcsICc8YW5vbnltb3VzPiddLmluZGV4T2YobG9jYXRpb25QYXJ0c1swXSkgPiAtMSA/IHVuZGVmaW5lZCA6IGxvY2F0aW9uUGFydHNbMF07CgogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGFja0ZyYW1lKHsKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGZ1bmN0aW9uTmFtZSwKICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogZmlsZU5hbWUsCiAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogbG9jYXRpb25QYXJ0c1sxXSwKICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IGxvY2F0aW9uUGFydHNbMl0sCiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBsaW5lCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgfSwKCiAgICAgICAgcGFyc2VGRk9yU2FmYXJpOiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRwYXJzZUZGT3JTYWZhcmkoZXJyb3IpIHsKICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gZXJyb3Iuc3RhY2suc3BsaXQoJ1xuJykuZmlsdGVyKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICAgICAgICAgIHJldHVybiAhbGluZS5tYXRjaChTQUZBUklfTkFUSVZFX0NPREVfUkVHRVhQKTsKICAgICAgICAgICAgfSwgdGhpcyk7CgogICAgICAgICAgICByZXR1cm4gZmlsdGVyZWQubWFwKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICAgICAgICAgIC8vIFRocm93IGF3YXkgZXZhbCBpbmZvcm1hdGlvbiB1bnRpbCB3ZSBpbXBsZW1lbnQgc3RhY2t0cmFjZS5qcy9zdGFja2ZyYW1lIzgKICAgICAgICAgICAgICAgIGlmIChsaW5lLmluZGV4T2YoJyA+IGV2YWwnKSA+IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgbGluZSA9IGxpbmUucmVwbGFjZSgvIGxpbmUgKFxkKykoPzogPiBldmFsIGxpbmUgXGQrKSogPiBldmFsOlxkKzpcZCsvZywgJzokMScpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChsaW5lLmluZGV4T2YoJ0AnKSA9PT0gLTEgJiYgbGluZS5pbmRleE9mKCc6JykgPT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpIGV2YWwgZnJhbWVzIG9ubHkgaGF2ZSBmdW5jdGlvbiBuYW1lcyBhbmQgbm90aGluZyBlbHNlCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGFja0ZyYW1lKHsKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBsaW5lCiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciBmdW5jdGlvbk5hbWVSZWdleCA9IC8oKC4qIi4rIlteQF0qKT9bXkBdKikoPzpAKS87CiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBsaW5lLm1hdGNoKGZ1bmN0aW9uTmFtZVJlZ2V4KTsKICAgICAgICAgICAgICAgICAgICB2YXIgZnVuY3Rpb25OYW1lID0gbWF0Y2hlcyAmJiBtYXRjaGVzWzFdID8gbWF0Y2hlc1sxXSA6IHVuZGVmaW5lZDsKICAgICAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb25QYXJ0cyA9IHRoaXMuZXh0cmFjdExvY2F0aW9uKGxpbmUucmVwbGFjZShmdW5jdGlvbk5hbWVSZWdleCwgJycpKTsKCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTdGFja0ZyYW1lKHsKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBmdW5jdGlvbk5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBsb2NhdGlvblBhcnRzWzBdLAogICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBsb2NhdGlvblBhcnRzWzFdLAogICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IGxvY2F0aW9uUGFydHNbMl0sCiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbGluZQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LCB0aGlzKTsKICAgICAgICB9LAoKICAgICAgICBwYXJzZU9wZXJhOiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRwYXJzZU9wZXJhKGUpIHsKICAgICAgICAgICAgaWYgKCFlLnN0YWNrdHJhY2UgfHwgKGUubWVzc2FnZS5pbmRleE9mKCdcbicpID4gLTEgJiYKICAgICAgICAgICAgICAgIGUubWVzc2FnZS5zcGxpdCgnXG4nKS5sZW5ndGggPiBlLnN0YWNrdHJhY2Uuc3BsaXQoJ1xuJykubGVuZ3RoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcGVyYTkoZSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWUuc3RhY2spIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3BlcmExMChlKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3BlcmExMShlKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHBhcnNlT3BlcmE5OiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRwYXJzZU9wZXJhOShlKSB7CiAgICAgICAgICAgIHZhciBsaW5lUkUgPSAvTGluZSAoXGQrKS4qc2NyaXB0ICg/OmluICk/KFxTKykvaTsKICAgICAgICAgICAgdmFyIGxpbmVzID0gZS5tZXNzYWdlLnNwbGl0KCdcbicpOwogICAgICAgICAgICB2YXIgcmVzdWx0ID0gW107CgogICAgICAgICAgICBmb3IgKHZhciBpID0gMiwgbGVuID0gbGluZXMubGVuZ3RoOyBpIDwgbGVuOyBpICs9IDIpIHsKICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGxpbmVSRS5leGVjKGxpbmVzW2ldKTsKICAgICAgICAgICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBTdGFja0ZyYW1lKHsKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IG1hdGNoWzJdLAogICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlOiBsaW5lc1tpXQogICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9LAoKICAgICAgICBwYXJzZU9wZXJhMTA6IGZ1bmN0aW9uIEVycm9yU3RhY2tQYXJzZXIkJHBhcnNlT3BlcmExMChlKSB7CiAgICAgICAgICAgIHZhciBsaW5lUkUgPSAvTGluZSAoXGQrKS4qc2NyaXB0ICg/OmluICk/KFxTKykoPzo6IEluIGZ1bmN0aW9uIChcUyspKT8kL2k7CiAgICAgICAgICAgIHZhciBsaW5lcyA9IGUuc3RhY2t0cmFjZS5zcGxpdCgnXG4nKTsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IFtdOwoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGxpbmVzLmxlbmd0aDsgaSA8IGxlbjsgaSArPSAyKSB7CiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBsaW5lUkUuZXhlYyhsaW5lc1tpXSk7CiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCgKICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFN0YWNrRnJhbWUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb25OYW1lOiBtYXRjaFszXSB8fCB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogbWF0Y2hbMl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiBtYXRjaFsxXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogbGluZXNbaV0KICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0sCgogICAgICAgIC8vIE9wZXJhIDEwLjY1KyBFcnJvci5zdGFjayB2ZXJ5IHNpbWlsYXIgdG8gRkYvU2FmYXJpCiAgICAgICAgcGFyc2VPcGVyYTExOiBmdW5jdGlvbiBFcnJvclN0YWNrUGFyc2VyJCRwYXJzZU9wZXJhMTEoZXJyb3IpIHsKICAgICAgICAgICAgdmFyIGZpbHRlcmVkID0gZXJyb3Iuc3RhY2suc3BsaXQoJ1xuJykuZmlsdGVyKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICAgICAgICAgIHJldHVybiAhIWxpbmUubWF0Y2goRklSRUZPWF9TQUZBUklfU1RBQ0tfUkVHRVhQKSAmJiAhbGluZS5tYXRjaCgvXkVycm9yIGNyZWF0ZWQgYXQvKTsKICAgICAgICAgICAgfSwgdGhpcyk7CgogICAgICAgICAgICByZXR1cm4gZmlsdGVyZWQubWFwKGZ1bmN0aW9uKGxpbmUpIHsKICAgICAgICAgICAgICAgIHZhciB0b2tlbnMgPSBsaW5lLnNwbGl0KCdAJyk7CiAgICAgICAgICAgICAgICB2YXIgbG9jYXRpb25QYXJ0cyA9IHRoaXMuZXh0cmFjdExvY2F0aW9uKHRva2Vucy5wb3AoKSk7CiAgICAgICAgICAgICAgICB2YXIgZnVuY3Rpb25DYWxsID0gKHRva2Vucy5zaGlmdCgpIHx8ICcnKTsKICAgICAgICAgICAgICAgIHZhciBmdW5jdGlvbk5hbWUgPSBmdW5jdGlvbkNhbGwKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvPGFub255bW91cyBmdW5jdGlvbig6IChcdyspKT8+LywgJyQyJykKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXChbXildKlwpL2csICcnKSB8fCB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICB2YXIgYXJnc1JhdzsKICAgICAgICAgICAgICAgIGlmIChmdW5jdGlvbkNhbGwubWF0Y2goL1woKFteKV0qKVwpLykpIHsKICAgICAgICAgICAgICAgICAgICBhcmdzUmF3ID0gZnVuY3Rpb25DYWxsLnJlcGxhY2UoL15bXihdK1woKFteKV0qKVwpJC8sICckMScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGFyZ3MgPSAoYXJnc1JhdyA9PT0gdW5kZWZpbmVkIHx8IGFyZ3NSYXcgPT09ICdbYXJndW1lbnRzIG5vdCBhdmFpbGFibGVdJykgPwogICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCA6IGFyZ3NSYXcuc3BsaXQoJywnKTsKCiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFN0YWNrRnJhbWUoewogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uTmFtZTogZnVuY3Rpb25OYW1lLAogICAgICAgICAgICAgICAgICAgIGFyZ3M6IGFyZ3MsCiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IGxvY2F0aW9uUGFydHNbMF0sCiAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogbG9jYXRpb25QYXJ0c1sxXSwKICAgICAgICAgICAgICAgICAgICBjb2x1bW5OdW1iZXI6IGxvY2F0aW9uUGFydHNbMl0sCiAgICAgICAgICAgICAgICAgICAgc291cmNlOiBsaW5lCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwgdGhpcyk7CiAgICAgICAgfQogICAgfTsKfSkpOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL2NhY2hlL2V2ZW50cy1ucG0tMy4zLjAtYzI4MGJjN2U0OC1mNmY0ODdhZDIxLnppcC9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9jYWNoZS9ldmVudHMtbnBtLTMuMy4wLWMyODBiYzdlNDgtZjZmNDg3YWQyMS56aXAvbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUpID0+IHsKCiJ1c2Ugc3RyaWN0IjsKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKCgp2YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsCnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nCiAgPyBSLmFwcGx5CiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykgewogICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpOwogIH0KCnZhciBSZWZsZWN0T3duS2V5cwppZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7CiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXMKfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHsKICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpCiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTsKICB9Owp9IGVsc2UgewogIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7CiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTsKICB9Owp9CgpmdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykgewogIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpOwp9Cgp2YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHsKICByZXR1cm4gdmFsdWUgIT09IHZhbHVlOwp9CgpmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7CiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTsKfQptb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjsKbW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7CgovLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLngKRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDsKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwOwpFdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7CgovLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmUKLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy4KdmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDsKCmZ1bmN0aW9uIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpIHsKICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgImxpc3RlbmVyIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7CiAgfQp9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVyczsKICB9LAogIHNldDogZnVuY3Rpb24oYXJnKSB7CiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7CiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgImRlZmF1bHRNYXhMaXN0ZW5lcnMiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpOwogICAgfQogICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZzsKICB9Cn0pOwoKRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHsKCiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8CiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHsKICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7CiAgfQoKICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkOwp9OwoKLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzCi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7CiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiAibiIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpOwogIH0KICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuOwogIHJldHVybiB0aGlzOwp9OwoKZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7CiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKQogICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzOwogIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7Cn0KCkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkgewogIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7CiAgdmFyIGFyZ3MgPSBbXTsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7CiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7CgogIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7CiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKQogICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTsKICBlbHNlIGlmICghZG9FcnJvcikKICAgIHJldHVybiBmYWxzZTsKCiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LgogIGlmIChkb0Vycm9yKSB7CiAgICB2YXIgZXI7CiAgICBpZiAoYXJncy5sZW5ndGggPiAwKQogICAgICBlciA9IGFyZ3NbMF07CiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikgewogICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3cKICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi4KICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50CiAgICB9CiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyCiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTsKICAgIGVyci5jb250ZXh0ID0gZXI7CiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50CiAgfQoKICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTsKCiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkKICAgIHJldHVybiBmYWxzZTsKCiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7CiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7CiAgfSBlbHNlIHsKICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDsKICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKQogICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTsKICB9CgogIHJldHVybiB0cnVlOwp9OwoKZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHsKICB2YXIgbTsKICB2YXIgZXZlbnRzOwogIHZhciBleGlzdGluZzsKCiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7CgogIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzOwogIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkgewogICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7CiAgfSBlbHNlIHsKICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09ICJuZXdMaXN0ZW5lciIhIEJlZm9yZQogICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgIm5ld0xpc3RlbmVyIi4KICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkgewogICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLAogICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpOwoKICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZQogICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0CiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzOwogICAgfQogICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07CiAgfQoKICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkgewogICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuCiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyOwogICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50OwogIH0gZWxzZSB7CiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LgogICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9CiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07CiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC4KICAgIH0gZWxzZSBpZiAocHJlcGVuZCkgewogICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTsKICAgIH0gZWxzZSB7CiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpOwogICAgfQoKICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrCiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpOwogICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkgewogICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlOwogICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZwogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgKICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTsKICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7CiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDsKICAgICAgdy50eXBlID0gdHlwZTsKICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDsKICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7CiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9CiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHsKICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7CiAgICB9OwoKZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7CiAgaWYgKCF0aGlzLmZpcmVkKSB7CiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTsKICAgIHRoaXMuZmlyZWQgPSB0cnVlOwogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApCiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpOwogICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsIGFyZ3VtZW50cyk7CiAgfQp9CgpmdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikgewogIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9OwogIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7CiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyOwogIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7CiAgcmV0dXJuIHdyYXBwZWQ7Cn0KCkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHsKICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTsKICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpOwogIHJldHVybiB0aGlzOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID0KICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHsKICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7CiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpOwogICAgICByZXR1cm4gdGhpczsKICAgIH07CgovLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0KICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7CiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyOwoKICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7CgogICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7CiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkKICAgICAgICByZXR1cm4gdGhpczsKCiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07CiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpCiAgICAgICAgcmV0dXJuIHRoaXM7CgogICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHsKICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkKICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcikKICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHBvc2l0aW9uID0gLTE7CgogICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikgewogICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjsKICAgICAgICAgICAgcG9zaXRpb24gPSBpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChwb3NpdGlvbiA8IDApCiAgICAgICAgICByZXR1cm4gdGhpczsKCiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKQogICAgICAgICAgbGlzdC5zaGlmdCgpOwogICAgICAgIGVsc2UgewogICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTsKICAgICAgICB9CgogICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkKICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07CgogICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZCkKICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyOwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPQogICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHsKICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpOwoKICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzOwogICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpCiAgICAgICAgcmV0dXJuIHRoaXM7CgogICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0CiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwOwogICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKQogICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICAgICAgZWxzZQogICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQoKICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzCiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpOwogICAgICAgIHZhciBrZXk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGtleSA9IGtleXNbaV07CiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTsKICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7CiAgICAgICAgfQogICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpOwogICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CgogICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07CgogICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTsKICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkgewogICAgICAgIC8vIExJRk8gb3JkZXIKICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfTsKCmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHsKICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7CgogIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkKICAgIHJldHVybiBbXTsKCiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07CiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZCkKICAgIHJldHVybiBbXTsKCiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKQogICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdOwoKICByZXR1cm4gdW53cmFwID8KICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpOwp9CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7CiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7Cn07CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7CiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpOwp9OwoKRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7CiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHsKICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7CiAgfSBlbHNlIHsKICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7CiAgfQp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDsKZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7CiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50czsKCiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7CiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTsKCiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHsKICAgICAgcmV0dXJuIDE7CiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7CiAgICB9CiAgfQoKICByZXR1cm4gMDsKfQoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHsKICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdOwp9OwoKZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHsKICB2YXIgY29weSA9IG5ldyBBcnJheShuKTsKICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkKICAgIGNvcHlbaV0gPSBhcnJbaV07CiAgcmV0dXJuIGNvcHk7Cn0KCmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkgewogIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKykKICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdOwogIGxpc3QucG9wKCk7Cn0KCmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHsKICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOwogIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7CiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldOwogIH0KICByZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHsKICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7CiAgICAgIHJlamVjdChlcnIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlc29sdmVyKCkgewogICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpOwogICAgICB9CiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTsKICAgIH07CgogICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7CiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykgewogICAgICBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBlcnJvckxpc3RlbmVyLCB7IG9uY2U6IHRydWUgfSk7CiAgICB9CiAgfSk7Cn0KCmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7CiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7CiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpOwogIH0KfQoKZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykgewogIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykgewogICAgaWYgKGZsYWdzLm9uY2UpIHsKICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTsKICAgIH0gZWxzZSB7CiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpOwogICAgfQogIH0gZWxzZSBpZiAodHlwZW9mIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgewogICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGUKICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuCiAgICBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZnVuY3Rpb24gd3JhcExpc3RlbmVyKGFyZykgewogICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlCiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuCiAgICAgIGlmIChmbGFncy5vbmNlKSB7CiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7CiAgICAgIH0KICAgICAgbGlzdGVuZXIoYXJnKTsKICAgIH0pOwogIH0gZWxzZSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgImVtaXR0ZXIiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTsKICB9Cn0KCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9pbmRleC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL2NhY2hlL2h0bWwtZW50aXRpZXMtbnBtLTIuMy4zLWUwYWFjNjU2YWYtOTI1MjE1MDFkYS56aXAvbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2luZGV4LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7CiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkgewogICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykgewogICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldOwogICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpCiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHQ7CiAgICB9OwogICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn07Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsICh7IHZhbHVlOiB0cnVlIH0pKTsKdmFyIG5hbWVkX3JlZmVyZW5jZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbmFtZWQtcmVmZXJlbmNlcyAqLyAiLi4vLi4vLnlhcm4vY2FjaGUvaHRtbC1lbnRpdGllcy1ucG0tMi4zLjMtZTBhYWM2NTZhZi05MjUyMTUwMWRhLnppcC9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvbmFtZWQtcmVmZXJlbmNlcy5qcyIpOwp2YXIgbnVtZXJpY191bmljb2RlX21hcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9udW1lcmljLXVuaWNvZGUtbWFwICovICIuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9udW1lcmljLXVuaWNvZGUtbWFwLmpzIik7CnZhciBzdXJyb2dhdGVfcGFpcnNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3Vycm9nYXRlLXBhaXJzICovICIuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9zdXJyb2dhdGUtcGFpcnMuanMiKTsKdmFyIGFsbE5hbWVkUmVmZXJlbmNlcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBuYW1lZF9yZWZlcmVuY2VzXzEubmFtZWRSZWZlcmVuY2VzKSwgeyBhbGw6IG5hbWVkX3JlZmVyZW5jZXNfMS5uYW1lZFJlZmVyZW5jZXMuaHRtbDUgfSk7CnZhciBlbmNvZGVSZWdFeHBzID0gewogICAgc3BlY2lhbENoYXJzOiAvWzw+JyImXS9nLAogICAgbm9uQXNjaWk6IC8oPzpbPD4nIiZcdTAwODAtXHVEN0ZGXHVFMDAwLVx1RkZGRl18W1x1RDgwMC1cdURCRkZdW1x1REMwMC1cdURGRkZdfFtcdUQ4MDAtXHVEQkZGXSg/IVtcdURDMDAtXHVERkZGXSl8KD86W15cdUQ4MDAtXHVEQkZGXXxeKVtcdURDMDAtXHVERkZGXSkvZywKICAgIG5vbkFzY2lpUHJpbnRhYmxlOiAvKD86Wzw+JyImXHgwMS1ceDA4XHgxMS1ceDE1XHgxNy1ceDFGXHg3Zi1cdUQ3RkZcdUUwMDAtXHVGRkZGXXxbXHVEODAwLVx1REJGRl1bXHVEQzAwLVx1REZGRl18W1x1RDgwMC1cdURCRkZdKD8hW1x1REMwMC1cdURGRkZdKXwoPzpbXlx1RDgwMC1cdURCRkZdfF4pW1x1REMwMC1cdURGRkZdKS9nLAogICAgZXh0ZW5zaXZlOiAvKD86W1x4MDEtXHgwY1x4MGUtXHgxZlx4MjEtXHgyY1x4MmUtXHgyZlx4M2EtXHg0MFx4NWItXHg2MFx4N2ItXHg3ZFx4N2YtXHVEN0ZGXHVFMDAwLVx1RkZGRl18W1x1RDgwMC1cdURCRkZdW1x1REMwMC1cdURGRkZdfFtcdUQ4MDAtXHVEQkZGXSg/IVtcdURDMDAtXHVERkZGXSl8KD86W15cdUQ4MDAtXHVEQkZGXXxeKVtcdURDMDAtXHVERkZGXSkvZwp9Owp2YXIgZGVmYXVsdEVuY29kZU9wdGlvbnMgPSB7CiAgICBtb2RlOiAnc3BlY2lhbENoYXJzJywKICAgIGxldmVsOiAnYWxsJywKICAgIG51bWVyaWM6ICdkZWNpbWFsJwp9OwovKiogRW5jb2RlcyBhbGwgdGhlIG5lY2Vzc2FyeSAoc3BlY2lmaWVkIGJ5IGBsZXZlbGApIGNoYXJhY3RlcnMgaW4gdGhlIHRleHQgKi8KZnVuY3Rpb24gZW5jb2RlKHRleHQsIF9hKSB7CiAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8gZGVmYXVsdEVuY29kZU9wdGlvbnMgOiBfYSwgX2MgPSBfYi5tb2RlLCBtb2RlID0gX2MgPT09IHZvaWQgMCA/ICdzcGVjaWFsQ2hhcnMnIDogX2MsIF9kID0gX2IubnVtZXJpYywgbnVtZXJpYyA9IF9kID09PSB2b2lkIDAgPyAnZGVjaW1hbCcgOiBfZCwgX2UgPSBfYi5sZXZlbCwgbGV2ZWwgPSBfZSA9PT0gdm9pZCAwID8gJ2FsbCcgOiBfZTsKICAgIGlmICghdGV4dCkgewogICAgICAgIHJldHVybiAnJzsKICAgIH0KICAgIHZhciBlbmNvZGVSZWdFeHAgPSBlbmNvZGVSZWdFeHBzW21vZGVdOwogICAgdmFyIHJlZmVyZW5jZXMgPSBhbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmNoYXJhY3RlcnM7CiAgICB2YXIgaXNIZXggPSBudW1lcmljID09PSAnaGV4YWRlY2ltYWwnOwogICAgZW5jb2RlUmVnRXhwLmxhc3RJbmRleCA9IDA7CiAgICB2YXIgX2IgPSBlbmNvZGVSZWdFeHAuZXhlYyh0ZXh0KTsKICAgIHZhciBfYzsKICAgIGlmIChfYikgewogICAgICAgIF9jID0gJyc7CiAgICAgICAgdmFyIF9kID0gMDsKICAgICAgICBkbyB7CiAgICAgICAgICAgIGlmIChfZCAhPT0gX2IuaW5kZXgpIHsKICAgICAgICAgICAgICAgIF9jICs9IHRleHQuc3Vic3RyaW5nKF9kLCBfYi5pbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIF9lID0gX2JbMF07CiAgICAgICAgICAgIHZhciByZXN1bHRfMSA9IHJlZmVyZW5jZXNbX2VdOwogICAgICAgICAgICBpZiAoIXJlc3VsdF8xKSB7CiAgICAgICAgICAgICAgICB2YXIgY29kZV8xID0gX2UubGVuZ3RoID4gMSA/IHN1cnJvZ2F0ZV9wYWlyc18xLmdldENvZGVQb2ludChfZSwgMCkgOiBfZS5jaGFyQ29kZUF0KDApOwogICAgICAgICAgICAgICAgcmVzdWx0XzEgPSAoaXNIZXggPyAnJiN4JyArIGNvZGVfMS50b1N0cmluZygxNikgOiAnJiMnICsgY29kZV8xKSArICc7JzsKICAgICAgICAgICAgfQogICAgICAgICAgICBfYyArPSByZXN1bHRfMTsKICAgICAgICAgICAgX2QgPSBfYi5pbmRleCArIF9lLmxlbmd0aDsKICAgICAgICB9IHdoaWxlICgoX2IgPSBlbmNvZGVSZWdFeHAuZXhlYyh0ZXh0KSkpOwogICAgICAgIGlmIChfZCAhPT0gdGV4dC5sZW5ndGgpIHsKICAgICAgICAgICAgX2MgKz0gdGV4dC5zdWJzdHJpbmcoX2QpOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIF9jID0KICAgICAgICAgICAgdGV4dDsKICAgIH0KICAgIHJldHVybiBfYzsKfQpleHBvcnRzLmVuY29kZSA9IGVuY29kZTsKdmFyIGRlZmF1bHREZWNvZGVPcHRpb25zID0gewogICAgc2NvcGU6ICdib2R5JywKICAgIGxldmVsOiAnYWxsJwp9Owp2YXIgc3RyaWN0ID0gLyYoPzojXGQrfCNbeFhdW1xkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTsvZzsKdmFyIGF0dHJpYnV0ZSA9IC8mKD86I1xkK3wjW3hYXVtcZGEtZkEtRl0rfFswLTlhLXpBLVpdKylbOz1dPy9nOwp2YXIgYmFzZURlY29kZVJlZ0V4cHMgPSB7CiAgICB4bWw6IHsKICAgICAgICBzdHJpY3Q6IHN0cmljdCwKICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSwKICAgICAgICBib2R5OiBuYW1lZF9yZWZlcmVuY2VzXzEuYm9keVJlZ0V4cHMueG1sCiAgICB9LAogICAgaHRtbDQ6IHsKICAgICAgICBzdHJpY3Q6IHN0cmljdCwKICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSwKICAgICAgICBib2R5OiBuYW1lZF9yZWZlcmVuY2VzXzEuYm9keVJlZ0V4cHMuaHRtbDQKICAgIH0sCiAgICBodG1sNTogewogICAgICAgIHN0cmljdDogc3RyaWN0LAogICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLAogICAgICAgIGJvZHk6IG5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy5odG1sNQogICAgfQp9Owp2YXIgZGVjb2RlUmVnRXhwcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBiYXNlRGVjb2RlUmVnRXhwcyksIHsgYWxsOiBiYXNlRGVjb2RlUmVnRXhwcy5odG1sNSB9KTsKdmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7CnZhciBvdXRPZkJvdW5kc0NoYXIgPSBmcm9tQ2hhckNvZGUoNjU1MzMpOwp2YXIgZGVmYXVsdERlY29kZUVudGl0eU9wdGlvbnMgPSB7CiAgICBsZXZlbDogJ2FsbCcKfTsKLyoqIERlY29kZXMgYSBzaW5nbGUgZW50aXR5ICovCmZ1bmN0aW9uIGRlY29kZUVudGl0eShlbnRpdHksIF9hKSB7CiAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IGRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zIDogX2EpLmxldmVsLCBsZXZlbCA9IF9iID09PSB2b2lkIDAgPyAnYWxsJyA6IF9iOwogICAgaWYgKCFlbnRpdHkpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICB9CiAgICB2YXIgX2IgPSBlbnRpdHk7CiAgICB2YXIgZGVjb2RlRW50aXR5TGFzdENoYXJfMSA9IGVudGl0eVtlbnRpdHkubGVuZ3RoIC0gMV07CiAgICBpZiAoZmFsc2UpIHt9CiAgICBlbHNlIGlmIChmYWxzZSkge30KICAgIGVsc2UgewogICAgICAgIHZhciBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xID0gYWxsTmFtZWRSZWZlcmVuY2VzW2xldmVsXS5lbnRpdGllc1tlbnRpdHldOwogICAgICAgIGlmIChkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xKSB7CiAgICAgICAgICAgIF9iID0gZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoZW50aXR5WzBdID09PSAnJicgJiYgZW50aXR5WzFdID09PSAnIycpIHsKICAgICAgICAgICAgdmFyIGRlY29kZVNlY29uZENoYXJfMSA9IGVudGl0eVsyXTsKICAgICAgICAgICAgdmFyIGRlY29kZUNvZGVfMSA9IGRlY29kZVNlY29uZENoYXJfMSA9PSAneCcgfHwgZGVjb2RlU2Vjb25kQ2hhcl8xID09ICdYJwogICAgICAgICAgICAgICAgPyBwYXJzZUludChlbnRpdHkuc3Vic3RyKDMpLCAxNikKICAgICAgICAgICAgICAgIDogcGFyc2VJbnQoZW50aXR5LnN1YnN0cigyKSk7CiAgICAgICAgICAgIF9iID0KICAgICAgICAgICAgICAgIGRlY29kZUNvZGVfMSA+PSAweDEwZmZmZgogICAgICAgICAgICAgICAgICAgID8gb3V0T2ZCb3VuZHNDaGFyCiAgICAgICAgICAgICAgICAgICAgOiBkZWNvZGVDb2RlXzEgPiA2NTUzNQogICAgICAgICAgICAgICAgICAgICAgICA/IHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoZGVjb2RlQ29kZV8xKQogICAgICAgICAgICAgICAgICAgICAgICA6IGZyb21DaGFyQ29kZShudW1lcmljX3VuaWNvZGVfbWFwXzEubnVtZXJpY1VuaWNvZGVNYXBbZGVjb2RlQ29kZV8xXSB8fCBkZWNvZGVDb2RlXzEpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBfYjsKfQpleHBvcnRzLmRlY29kZUVudGl0eSA9IGRlY29kZUVudGl0eTsKLyoqIERlY29kZXMgYWxsIGVudGl0aWVzIGluIHRoZSB0ZXh0ICovCmZ1bmN0aW9uIGRlY29kZSh0ZXh0LCBfYSkgewogICAgdmFyIGRlY29kZVNlY29uZENoYXJfMSA9IF9hID09PSB2b2lkIDAgPyBkZWZhdWx0RGVjb2RlT3B0aW9ucyA6IF9hLCBkZWNvZGVDb2RlXzEgPSBkZWNvZGVTZWNvbmRDaGFyXzEubGV2ZWwsIGxldmVsID0gZGVjb2RlQ29kZV8xID09PSB2b2lkIDAgPyAnYWxsJyA6IGRlY29kZUNvZGVfMSwgX2IgPSBkZWNvZGVTZWNvbmRDaGFyXzEuc2NvcGUsIHNjb3BlID0gX2IgPT09IHZvaWQgMCA/IGxldmVsID09PSAneG1sJyA/ICdzdHJpY3QnIDogJ2JvZHknIDogX2I7CiAgICBpZiAoIXRleHQpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICB9CiAgICB2YXIgZGVjb2RlUmVnRXhwID0gZGVjb2RlUmVnRXhwc1tsZXZlbF1bc2NvcGVdOwogICAgdmFyIHJlZmVyZW5jZXMgPSBhbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmVudGl0aWVzOwogICAgdmFyIGlzQXR0cmlidXRlID0gc2NvcGUgPT09ICdhdHRyaWJ1dGUnOwogICAgdmFyIGlzU3RyaWN0ID0gc2NvcGUgPT09ICdzdHJpY3QnOwogICAgZGVjb2RlUmVnRXhwLmxhc3RJbmRleCA9IDA7CiAgICB2YXIgcmVwbGFjZU1hdGNoXzEgPSBkZWNvZGVSZWdFeHAuZXhlYyh0ZXh0KTsKICAgIHZhciByZXBsYWNlUmVzdWx0XzE7CiAgICBpZiAocmVwbGFjZU1hdGNoXzEpIHsKICAgICAgICByZXBsYWNlUmVzdWx0XzEgPSAnJzsKICAgICAgICB2YXIgcmVwbGFjZUxhc3RJbmRleF8xID0gMDsKICAgICAgICBkbyB7CiAgICAgICAgICAgIGlmIChyZXBsYWNlTGFzdEluZGV4XzEgIT09IHJlcGxhY2VNYXRjaF8xLmluZGV4KSB7CiAgICAgICAgICAgICAgICByZXBsYWNlUmVzdWx0XzEgKz0gdGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleF8xLCByZXBsYWNlTWF0Y2hfMS5pbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJlcGxhY2VJbnB1dF8xID0gcmVwbGFjZU1hdGNoXzFbMF07CiAgICAgICAgICAgIHZhciBkZWNvZGVSZXN1bHRfMSA9IHJlcGxhY2VJbnB1dF8xOwogICAgICAgICAgICB2YXIgZGVjb2RlRW50aXR5TGFzdENoYXJfMiA9IHJlcGxhY2VJbnB1dF8xW3JlcGxhY2VJbnB1dF8xLmxlbmd0aCAtIDFdOwogICAgICAgICAgICBpZiAoaXNBdHRyaWJ1dGUKICAgICAgICAgICAgICAgICYmIGRlY29kZUVudGl0eUxhc3RDaGFyXzIgPT09ICc9JykgewogICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSByZXBsYWNlSW5wdXRfMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChpc1N0cmljdAogICAgICAgICAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMiAhPT0gJzsnKSB7CiAgICAgICAgICAgICAgICBkZWNvZGVSZXN1bHRfMSA9IHJlcGxhY2VJbnB1dF8xOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgdmFyIGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzIgPSByZWZlcmVuY2VzW3JlcGxhY2VJbnB1dF8xXTsKICAgICAgICAgICAgICAgIGlmIChkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yKSB7CiAgICAgICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAocmVwbGFjZUlucHV0XzFbMF0gPT09ICcmJyAmJiByZXBsYWNlSW5wdXRfMVsxXSA9PT0gJyMnKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY29kZVNlY29uZENoYXJfMiA9IHJlcGxhY2VJbnB1dF8xWzJdOwogICAgICAgICAgICAgICAgICAgIHZhciBkZWNvZGVDb2RlXzIgPSBkZWNvZGVTZWNvbmRDaGFyXzIgPT0gJ3gnIHx8IGRlY29kZVNlY29uZENoYXJfMiA9PSAnWCcKICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyZXBsYWNlSW5wdXRfMS5zdWJzdHIoMyksIDE2KQogICAgICAgICAgICAgICAgICAgICAgICA6IHBhcnNlSW50KHJlcGxhY2VJbnB1dF8xLnN1YnN0cigyKSk7CiAgICAgICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPQogICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVDb2RlXzIgPj0gMHgxMGZmZmYKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gb3V0T2ZCb3VuZHNDaGFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRlY29kZUNvZGVfMiA+IDY1NTM1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzdXJyb2dhdGVfcGFpcnNfMS5mcm9tQ29kZVBvaW50KGRlY29kZUNvZGVfMikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZyb21DaGFyQ29kZShudW1lcmljX3VuaWNvZGVfbWFwXzEubnVtZXJpY1VuaWNvZGVNYXBbZGVjb2RlQ29kZV8yXSB8fCBkZWNvZGVDb2RlXzIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlcGxhY2VSZXN1bHRfMSArPSBkZWNvZGVSZXN1bHRfMTsKICAgICAgICAgICAgcmVwbGFjZUxhc3RJbmRleF8xID0gcmVwbGFjZU1hdGNoXzEuaW5kZXggKyByZXBsYWNlSW5wdXRfMS5sZW5ndGg7CiAgICAgICAgfSB3aGlsZSAoKHJlcGxhY2VNYXRjaF8xID0gZGVjb2RlUmVnRXhwLmV4ZWModGV4dCkpKTsKICAgICAgICBpZiAocmVwbGFjZUxhc3RJbmRleF8xICE9PSB0ZXh0Lmxlbmd0aCkgewogICAgICAgICAgICByZXBsYWNlUmVzdWx0XzEgKz0gdGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleF8xKTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICByZXBsYWNlUmVzdWx0XzEgPQogICAgICAgICAgICB0ZXh0OwogICAgfQogICAgcmV0dXJuIHJlcGxhY2VSZXN1bHRfMTsKfQpleHBvcnRzLmRlY29kZSA9IGRlY29kZTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9uYW1lZC1yZWZlcmVuY2VzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9uYW1lZC1yZWZlcmVuY2VzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7CgoidXNlIHN0cmljdCI7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsICh7dmFsdWU6dHJ1ZX0pKTtleHBvcnRzLmJvZHlSZWdFeHBzPXt4bWw6LyYoPzojXGQrfCNbeFhdW1xkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2csaHRtbDQ6LyYoPzpuYnNwfGlleGNsfGNlbnR8cG91bmR8Y3VycmVufHllbnxicnZiYXJ8c2VjdHx1bWx8Y29weXxvcmRmfGxhcXVvfG5vdHxzaHl8cmVnfG1hY3J8ZGVnfHBsdXNtbnxzdXAyfHN1cDN8YWN1dGV8bWljcm98cGFyYXxtaWRkb3R8Y2VkaWx8c3VwMXxvcmRtfHJhcXVvfGZyYWMxNHxmcmFjMTJ8ZnJhYzM0fGlxdWVzdHxBZ3JhdmV8QWFjdXRlfEFjaXJjfEF0aWxkZXxBdW1sfEFyaW5nfEFFbGlnfENjZWRpbHxFZ3JhdmV8RWFjdXRlfEVjaXJjfEV1bWx8SWdyYXZlfElhY3V0ZXxJY2lyY3xJdW1sfEVUSHxOdGlsZGV8T2dyYXZlfE9hY3V0ZXxPY2lyY3xPdGlsZGV8T3VtbHx0aW1lc3xPc2xhc2h8VWdyYXZlfFVhY3V0ZXxVY2lyY3xVdW1sfFlhY3V0ZXxUSE9STnxzemxpZ3xhZ3JhdmV8YWFjdXRlfGFjaXJjfGF0aWxkZXxhdW1sfGFyaW5nfGFlbGlnfGNjZWRpbHxlZ3JhdmV8ZWFjdXRlfGVjaXJjfGV1bWx8aWdyYXZlfGlhY3V0ZXxpY2lyY3xpdW1sfGV0aHxudGlsZGV8b2dyYXZlfG9hY3V0ZXxvY2lyY3xvdGlsZGV8b3VtbHxkaXZpZGV8b3NsYXNofHVncmF2ZXx1YWN1dGV8dWNpcmN8dXVtbHx5YWN1dGV8dGhvcm58eXVtbHxxdW90fGFtcHxsdHxndHwjXGQrfCNbeFhdW1xkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2csaHRtbDU6LyYoPzpBRWxpZ3xBTVB8QWFjdXRlfEFjaXJjfEFncmF2ZXxBcmluZ3xBdGlsZGV8QXVtbHxDT1BZfENjZWRpbHxFVEh8RWFjdXRlfEVjaXJjfEVncmF2ZXxFdW1sfEdUfElhY3V0ZXxJY2lyY3xJZ3JhdmV8SXVtbHxMVHxOdGlsZGV8T2FjdXRlfE9jaXJjfE9ncmF2ZXxPc2xhc2h8T3RpbGRlfE91bWx8UVVPVHxSRUd8VEhPUk58VWFjdXRlfFVjaXJjfFVncmF2ZXxVdW1sfFlhY3V0ZXxhYWN1dGV8YWNpcmN8YWN1dGV8YWVsaWd8YWdyYXZlfGFtcHxhcmluZ3xhdGlsZGV8YXVtbHxicnZiYXJ8Y2NlZGlsfGNlZGlsfGNlbnR8Y29weXxjdXJyZW58ZGVnfGRpdmlkZXxlYWN1dGV8ZWNpcmN8ZWdyYXZlfGV0aHxldW1sfGZyYWMxMnxmcmFjMTR8ZnJhYzM0fGd0fGlhY3V0ZXxpY2lyY3xpZXhjbHxpZ3JhdmV8aXF1ZXN0fGl1bWx8bGFxdW98bHR8bWFjcnxtaWNyb3xtaWRkb3R8bmJzcHxub3R8bnRpbGRlfG9hY3V0ZXxvY2lyY3xvZ3JhdmV8b3JkZnxvcmRtfG9zbGFzaHxvdGlsZGV8b3VtbHxwYXJhfHBsdXNtbnxwb3VuZHxxdW90fHJhcXVvfHJlZ3xzZWN0fHNoeXxzdXAxfHN1cDJ8c3VwM3xzemxpZ3x0aG9ybnx0aW1lc3x1YWN1dGV8dWNpcmN8dWdyYXZlfHVtbHx1dW1sfHlhY3V0ZXx5ZW58eXVtbHwjXGQrfCNbeFhdW1xkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2d9O2V4cG9ydHMubmFtZWRSZWZlcmVuY2VzPXt4bWw6e2VudGl0aWVzOnsiJmx0OyI6IjwiLCImZ3Q7IjoiPiIsIiZxdW90OyI6JyInLCImYXBvczsiOiInIiwiJmFtcDsiOiImIn0sY2hhcmFjdGVyczp7IjwiOiImbHQ7IiwiPiI6IiZndDsiLCciJzoiJnF1b3Q7IiwiJyI6IiZhcG9zOyIsIiYiOiImYW1wOyJ9fSxodG1sNDp7ZW50aXRpZXM6eyImYXBvczsiOiInIiwiJm5ic3AiOiLCoCIsIiZuYnNwOyI6IsKgIiwiJmlleGNsIjoiwqEiLCImaWV4Y2w7IjoiwqEiLCImY2VudCI6IsKiIiwiJmNlbnQ7IjoiwqIiLCImcG91bmQiOiLCoyIsIiZwb3VuZDsiOiLCoyIsIiZjdXJyZW4iOiLCpCIsIiZjdXJyZW47IjoiwqQiLCImeWVuIjoiwqUiLCImeWVuOyI6IsKlIiwiJmJydmJhciI6IsKmIiwiJmJydmJhcjsiOiLCpiIsIiZzZWN0IjoiwqciLCImc2VjdDsiOiLCpyIsIiZ1bWwiOiLCqCIsIiZ1bWw7IjoiwqgiLCImY29weSI6IsKpIiwiJmNvcHk7IjoiwqkiLCImb3JkZiI6IsKqIiwiJm9yZGY7IjoiwqoiLCImbGFxdW8iOiLCqyIsIiZsYXF1bzsiOiLCqyIsIiZub3QiOiLCrCIsIiZub3Q7IjoiwqwiLCImc2h5Ijoiwq0iLCImc2h5OyI6IsKtIiwiJnJlZyI6IsKuIiwiJnJlZzsiOiLCriIsIiZtYWNyIjoiwq8iLCImbWFjcjsiOiLCryIsIiZkZWciOiLCsCIsIiZkZWc7IjoiwrAiLCImcGx1c21uIjoiwrEiLCImcGx1c21uOyI6IsKxIiwiJnN1cDIiOiLCsiIsIiZzdXAyOyI6IsKyIiwiJnN1cDMiOiLCsyIsIiZzdXAzOyI6IsKzIiwiJmFjdXRlIjoiwrQiLCImYWN1dGU7IjoiwrQiLCImbWljcm8iOiLCtSIsIiZtaWNybzsiOiLCtSIsIiZwYXJhIjoiwrYiLCImcGFyYTsiOiLCtiIsIiZtaWRkb3QiOiLCtyIsIiZtaWRkb3Q7IjoiwrciLCImY2VkaWwiOiLCuCIsIiZjZWRpbDsiOiLCuCIsIiZzdXAxIjoiwrkiLCImc3VwMTsiOiLCuSIsIiZvcmRtIjoiwroiLCImb3JkbTsiOiLCuiIsIiZyYXF1byI6IsK7IiwiJnJhcXVvOyI6IsK7IiwiJmZyYWMxNCI6IsK8IiwiJmZyYWMxNDsiOiLCvCIsIiZmcmFjMTIiOiLCvSIsIiZmcmFjMTI7Ijoiwr0iLCImZnJhYzM0Ijoiwr4iLCImZnJhYzM0OyI6IsK+IiwiJmlxdWVzdCI6IsK/IiwiJmlxdWVzdDsiOiLCvyIsIiZBZ3JhdmUiOiLDgCIsIiZBZ3JhdmU7Ijoiw4AiLCImQWFjdXRlIjoiw4EiLCImQWFjdXRlOyI6IsOBIiwiJkFjaXJjIjoiw4IiLCImQWNpcmM7Ijoiw4IiLCImQXRpbGRlIjoiw4MiLCImQXRpbGRlOyI6IsODIiwiJkF1bWwiOiLDhCIsIiZBdW1sOyI6IsOEIiwiJkFyaW5nIjoiw4UiLCImQXJpbmc7Ijoiw4UiLCImQUVsaWciOiLDhiIsIiZBRWxpZzsiOiLDhiIsIiZDY2VkaWwiOiLDhyIsIiZDY2VkaWw7Ijoiw4ciLCImRWdyYXZlIjoiw4giLCImRWdyYXZlOyI6IsOIIiwiJkVhY3V0ZSI6IsOJIiwiJkVhY3V0ZTsiOiLDiSIsIiZFY2lyYyI6IsOKIiwiJkVjaXJjOyI6IsOKIiwiJkV1bWwiOiLDiyIsIiZFdW1sOyI6IsOLIiwiJklncmF2ZSI6IsOMIiwiJklncmF2ZTsiOiLDjCIsIiZJYWN1dGUiOiLDjSIsIiZJYWN1dGU7Ijoiw40iLCImSWNpcmMiOiLDjiIsIiZJY2lyYzsiOiLDjiIsIiZJdW1sIjoiw48iLCImSXVtbDsiOiLDjyIsIiZFVEgiOiLDkCIsIiZFVEg7Ijoiw5AiLCImTnRpbGRlIjoiw5EiLCImTnRpbGRlOyI6IsORIiwiJk9ncmF2ZSI6IsOSIiwiJk9ncmF2ZTsiOiLDkiIsIiZPYWN1dGUiOiLDkyIsIiZPYWN1dGU7Ijoiw5MiLCImT2NpcmMiOiLDlCIsIiZPY2lyYzsiOiLDlCIsIiZPdGlsZGUiOiLDlSIsIiZPdGlsZGU7Ijoiw5UiLCImT3VtbCI6IsOWIiwiJk91bWw7Ijoiw5YiLCImdGltZXMiOiLDlyIsIiZ0aW1lczsiOiLDlyIsIiZPc2xhc2giOiLDmCIsIiZPc2xhc2g7Ijoiw5giLCImVWdyYXZlIjoiw5kiLCImVWdyYXZlOyI6IsOZIiwiJlVhY3V0ZSI6IsOaIiwiJlVhY3V0ZTsiOiLDmiIsIiZVY2lyYyI6IsObIiwiJlVjaXJjOyI6IsObIiwiJlV1bWwiOiLDnCIsIiZVdW1sOyI6IsOcIiwiJllhY3V0ZSI6IsOdIiwiJllhY3V0ZTsiOiLDnSIsIiZUSE9STiI6IsOeIiwiJlRIT1JOOyI6IsOeIiwiJnN6bGlnIjoiw58iLCImc3psaWc7Ijoiw58iLCImYWdyYXZlIjoiw6AiLCImYWdyYXZlOyI6IsOgIiwiJmFhY3V0ZSI6IsOhIiwiJmFhY3V0ZTsiOiLDoSIsIiZhY2lyYyI6IsOiIiwiJmFjaXJjOyI6IsOiIiwiJmF0aWxkZSI6IsOjIiwiJmF0aWxkZTsiOiLDoyIsIiZhdW1sIjoiw6QiLCImYXVtbDsiOiLDpCIsIiZhcmluZyI6IsOlIiwiJmFyaW5nOyI6IsOlIiwiJmFlbGlnIjoiw6YiLCImYWVsaWc7Ijoiw6YiLCImY2NlZGlsIjoiw6ciLCImY2NlZGlsOyI6IsOnIiwiJmVncmF2ZSI6IsOoIiwiJmVncmF2ZTsiOiLDqCIsIiZlYWN1dGUiOiLDqSIsIiZlYWN1dGU7Ijoiw6kiLCImZWNpcmMiOiLDqiIsIiZlY2lyYzsiOiLDqiIsIiZldW1sIjoiw6siLCImZXVtbDsiOiLDqyIsIiZpZ3JhdmUiOiLDrCIsIiZpZ3JhdmU7Ijoiw6wiLCImaWFjdXRlIjoiw60iLCImaWFjdXRlOyI6IsOtIiwiJmljaXJjIjoiw64iLCImaWNpcmM7Ijoiw64iLCImaXVtbCI6IsOvIiwiJml1bWw7Ijoiw68iLCImZXRoIjoiw7AiLCImZXRoOyI6IsOwIiwiJm50aWxkZSI6IsOxIiwiJm50aWxkZTsiOiLDsSIsIiZvZ3JhdmUiOiLDsiIsIiZvZ3JhdmU7Ijoiw7IiLCImb2FjdXRlIjoiw7MiLCImb2FjdXRlOyI6IsOzIiwiJm9jaXJjIjoiw7QiLCImb2NpcmM7Ijoiw7QiLCImb3RpbGRlIjoiw7UiLCImb3RpbGRlOyI6IsO1IiwiJm91bWwiOiLDtiIsIiZvdW1sOyI6IsO2IiwiJmRpdmlkZSI6IsO3IiwiJmRpdmlkZTsiOiLDtyIsIiZvc2xhc2giOiLDuCIsIiZvc2xhc2g7Ijoiw7giLCImdWdyYXZlIjoiw7kiLCImdWdyYXZlOyI6IsO5IiwiJnVhY3V0ZSI6IsO6IiwiJnVhY3V0ZTsiOiLDuiIsIiZ1Y2lyYyI6IsO7IiwiJnVjaXJjOyI6IsO7IiwiJnV1bWwiOiLDvCIsIiZ1dW1sOyI6IsO8IiwiJnlhY3V0ZSI6IsO9IiwiJnlhY3V0ZTsiOiLDvSIsIiZ0aG9ybiI6IsO+IiwiJnRob3JuOyI6IsO+IiwiJnl1bWwiOiLDvyIsIiZ5dW1sOyI6IsO/IiwiJnF1b3QiOiciJywiJnF1b3Q7IjonIicsIiZhbXAiOiImIiwiJmFtcDsiOiImIiwiJmx0IjoiPCIsIiZsdDsiOiI8IiwiJmd0IjoiPiIsIiZndDsiOiI+IiwiJk9FbGlnOyI6IsWSIiwiJm9lbGlnOyI6IsWTIiwiJlNjYXJvbjsiOiLFoCIsIiZzY2Fyb247IjoixaEiLCImWXVtbDsiOiLFuCIsIiZjaXJjOyI6IsuGIiwiJnRpbGRlOyI6IsucIiwiJmVuc3A7Ijoi4oCCIiwiJmVtc3A7Ijoi4oCDIiwiJnRoaW5zcDsiOiLigIkiLCImenduajsiOiLigIwiLCImendqOyI6IuKAjSIsIiZscm07Ijoi4oCOIiwiJnJsbTsiOiLigI8iLCImbmRhc2g7Ijoi4oCTIiwiJm1kYXNoOyI6IuKAlCIsIiZsc3F1bzsiOiLigJgiLCImcnNxdW87Ijoi4oCZIiwiJnNicXVvOyI6IuKAmiIsIiZsZHF1bzsiOiLigJwiLCImcmRxdW87Ijoi4oCdIiwiJmJkcXVvOyI6IuKAniIsIiZkYWdnZXI7Ijoi4oCgIiwiJkRhZ2dlcjsiOiLigKEiLCImcGVybWlsOyI6IuKAsCIsIiZsc2FxdW87Ijoi4oC5IiwiJnJzYXF1bzsiOiLigLoiLCImZXVybzsiOiLigqwiLCImZm5vZjsiOiLGkiIsIiZBbHBoYTsiOiLOkSIsIiZCZXRhOyI6Is6SIiwiJkdhbW1hOyI6Is6TIiwiJkRlbHRhOyI6Is6UIiwiJkVwc2lsb247IjoizpUiLCImWmV0YTsiOiLOliIsIiZFdGE7IjoizpciLCImVGhldGE7IjoizpgiLCImSW90YTsiOiLOmSIsIiZLYXBwYTsiOiLOmiIsIiZMYW1iZGE7IjoizpsiLCImTXU7IjoizpwiLCImTnU7Ijoizp0iLCImWGk7Ijoizp4iLCImT21pY3JvbjsiOiLOnyIsIiZQaTsiOiLOoCIsIiZSaG87IjoizqEiLCImU2lnbWE7IjoizqMiLCImVGF1OyI6Is6kIiwiJlVwc2lsb247IjoizqUiLCImUGhpOyI6Is6mIiwiJkNoaTsiOiLOpyIsIiZQc2k7IjoizqgiLCImT21lZ2E7IjoizqkiLCImYWxwaGE7IjoizrEiLCImYmV0YTsiOiLOsiIsIiZnYW1tYTsiOiLOsyIsIiZkZWx0YTsiOiLOtCIsIiZlcHNpbG9uOyI6Is61IiwiJnpldGE7IjoizrYiLCImZXRhOyI6Is63IiwiJnRoZXRhOyI6Is64IiwiJmlvdGE7IjoizrkiLCIma2FwcGE7IjoizroiLCImbGFtYmRhOyI6Is67IiwiJm11OyI6Is68IiwiJm51OyI6Is69IiwiJnhpOyI6Is6+IiwiJm9taWNyb247Ijoizr8iLCImcGk7Ijoiz4AiLCImcmhvOyI6Is+BIiwiJnNpZ21hZjsiOiLPgiIsIiZzaWdtYTsiOiLPgyIsIiZ0YXU7Ijoiz4QiLCImdXBzaWxvbjsiOiLPhSIsIiZwaGk7Ijoiz4YiLCImY2hpOyI6Is+HIiwiJnBzaTsiOiLPiCIsIiZvbWVnYTsiOiLPiSIsIiZ0aGV0YXN5bTsiOiLPkSIsIiZ1cHNpaDsiOiLPkiIsIiZwaXY7Ijoiz5YiLCImYnVsbDsiOiLigKIiLCImaGVsbGlwOyI6IuKApiIsIiZwcmltZTsiOiLigLIiLCImUHJpbWU7Ijoi4oCzIiwiJm9saW5lOyI6IuKAviIsIiZmcmFzbDsiOiLigYQiLCImd2VpZXJwOyI6IuKEmCIsIiZpbWFnZTsiOiLihJEiLCImcmVhbDsiOiLihJwiLCImdHJhZGU7Ijoi4oSiIiwiJmFsZWZzeW07Ijoi4oS1IiwiJmxhcnI7Ijoi4oaQIiwiJnVhcnI7Ijoi4oaRIiwiJnJhcnI7Ijoi4oaSIiwiJmRhcnI7Ijoi4oaTIiwiJmhhcnI7Ijoi4oaUIiwiJmNyYXJyOyI6IuKGtSIsIiZsQXJyOyI6IuKHkCIsIiZ1QXJyOyI6IuKHkSIsIiZyQXJyOyI6IuKHkiIsIiZkQXJyOyI6IuKHkyIsIiZoQXJyOyI6IuKHlCIsIiZmb3JhbGw7Ijoi4oiAIiwiJnBhcnQ7Ijoi4oiCIiwiJmV4aXN0OyI6IuKIgyIsIiZlbXB0eTsiOiLiiIUiLCImbmFibGE7Ijoi4oiHIiwiJmlzaW47Ijoi4oiIIiwiJm5vdGluOyI6IuKIiSIsIiZuaTsiOiLiiIsiLCImcHJvZDsiOiLiiI8iLCImc3VtOyI6IuKIkSIsIiZtaW51czsiOiLiiJIiLCImbG93YXN0OyI6IuKIlyIsIiZyYWRpYzsiOiLiiJoiLCImcHJvcDsiOiLiiJ0iLCImaW5maW47Ijoi4oieIiwiJmFuZzsiOiLiiKAiLCImYW5kOyI6IuKIpyIsIiZvcjsiOiLiiKgiLCImY2FwOyI6IuKIqSIsIiZjdXA7Ijoi4oiqIiwiJmludDsiOiLiiKsiLCImdGhlcmU0OyI6IuKItCIsIiZzaW07Ijoi4oi8IiwiJmNvbmc7Ijoi4omFIiwiJmFzeW1wOyI6IuKJiCIsIiZuZTsiOiLiiaAiLCImZXF1aXY7Ijoi4omhIiwiJmxlOyI6IuKJpCIsIiZnZTsiOiLiiaUiLCImc3ViOyI6IuKKgiIsIiZzdXA7Ijoi4oqDIiwiJm5zdWI7Ijoi4oqEIiwiJnN1YmU7Ijoi4oqGIiwiJnN1cGU7Ijoi4oqHIiwiJm9wbHVzOyI6IuKKlSIsIiZvdGltZXM7Ijoi4oqXIiwiJnBlcnA7Ijoi4oqlIiwiJnNkb3Q7Ijoi4ouFIiwiJmxjZWlsOyI6IuKMiCIsIiZyY2VpbDsiOiLijIkiLCImbGZsb29yOyI6IuKMiiIsIiZyZmxvb3I7Ijoi4oyLIiwiJmxhbmc7Ijoi4oypIiwiJnJhbmc7Ijoi4oyqIiwiJmxvejsiOiLil4oiLCImc3BhZGVzOyI6IuKZoCIsIiZjbHViczsiOiLimaMiLCImaGVhcnRzOyI6IuKZpSIsIiZkaWFtczsiOiLimaYifSxjaGFyYWN0ZXJzOnsiJyI6IiZhcG9zOyIsIsKgIjoiJm5ic3A7IiwiwqEiOiImaWV4Y2w7IiwiwqIiOiImY2VudDsiLCLCoyI6IiZwb3VuZDsiLCLCpCI6IiZjdXJyZW47IiwiwqUiOiImeWVuOyIsIsKmIjoiJmJydmJhcjsiLCLCpyI6IiZzZWN0OyIsIsKoIjoiJnVtbDsiLCLCqSI6IiZjb3B5OyIsIsKqIjoiJm9yZGY7IiwiwqsiOiImbGFxdW87IiwiwqwiOiImbm90OyIsIsKtIjoiJnNoeTsiLCLCriI6IiZyZWc7Iiwiwq8iOiImbWFjcjsiLCLCsCI6IiZkZWc7IiwiwrEiOiImcGx1c21uOyIsIsKyIjoiJnN1cDI7IiwiwrMiOiImc3VwMzsiLCLCtCI6IiZhY3V0ZTsiLCLCtSI6IiZtaWNybzsiLCLCtiI6IiZwYXJhOyIsIsK3IjoiJm1pZGRvdDsiLCLCuCI6IiZjZWRpbDsiLCLCuSI6IiZzdXAxOyIsIsK6IjoiJm9yZG07IiwiwrsiOiImcmFxdW87IiwiwrwiOiImZnJhYzE0OyIsIsK9IjoiJmZyYWMxMjsiLCLCviI6IiZmcmFjMzQ7Iiwiwr8iOiImaXF1ZXN0OyIsIsOAIjoiJkFncmF2ZTsiLCLDgSI6IiZBYWN1dGU7Iiwiw4IiOiImQWNpcmM7Iiwiw4MiOiImQXRpbGRlOyIsIsOEIjoiJkF1bWw7Iiwiw4UiOiImQXJpbmc7Iiwiw4YiOiImQUVsaWc7Iiwiw4ciOiImQ2NlZGlsOyIsIsOIIjoiJkVncmF2ZTsiLCLDiSI6IiZFYWN1dGU7Iiwiw4oiOiImRWNpcmM7Iiwiw4siOiImRXVtbDsiLCLDjCI6IiZJZ3JhdmU7Iiwiw40iOiImSWFjdXRlOyIsIsOOIjoiJkljaXJjOyIsIsOPIjoiJkl1bWw7Iiwiw5AiOiImRVRIOyIsIsORIjoiJk50aWxkZTsiLCLDkiI6IiZPZ3JhdmU7Iiwiw5MiOiImT2FjdXRlOyIsIsOUIjoiJk9jaXJjOyIsIsOVIjoiJk90aWxkZTsiLCLDliI6IiZPdW1sOyIsIsOXIjoiJnRpbWVzOyIsIsOYIjoiJk9zbGFzaDsiLCLDmSI6IiZVZ3JhdmU7Iiwiw5oiOiImVWFjdXRlOyIsIsObIjoiJlVjaXJjOyIsIsOcIjoiJlV1bWw7Iiwiw50iOiImWWFjdXRlOyIsIsOeIjoiJlRIT1JOOyIsIsOfIjoiJnN6bGlnOyIsIsOgIjoiJmFncmF2ZTsiLCLDoSI6IiZhYWN1dGU7Iiwiw6IiOiImYWNpcmM7Iiwiw6MiOiImYXRpbGRlOyIsIsOkIjoiJmF1bWw7Iiwiw6UiOiImYXJpbmc7Iiwiw6YiOiImYWVsaWc7Iiwiw6ciOiImY2NlZGlsOyIsIsOoIjoiJmVncmF2ZTsiLCLDqSI6IiZlYWN1dGU7Iiwiw6oiOiImZWNpcmM7Iiwiw6siOiImZXVtbDsiLCLDrCI6IiZpZ3JhdmU7Iiwiw60iOiImaWFjdXRlOyIsIsOuIjoiJmljaXJjOyIsIsOvIjoiJml1bWw7Iiwiw7AiOiImZXRoOyIsIsOxIjoiJm50aWxkZTsiLCLDsiI6IiZvZ3JhdmU7Iiwiw7MiOiImb2FjdXRlOyIsIsO0IjoiJm9jaXJjOyIsIsO1IjoiJm90aWxkZTsiLCLDtiI6IiZvdW1sOyIsIsO3IjoiJmRpdmlkZTsiLCLDuCI6IiZvc2xhc2g7Iiwiw7kiOiImdWdyYXZlOyIsIsO6IjoiJnVhY3V0ZTsiLCLDuyI6IiZ1Y2lyYzsiLCLDvCI6IiZ1dW1sOyIsIsO9IjoiJnlhY3V0ZTsiLCLDviI6IiZ0aG9ybjsiLCLDvyI6IiZ5dW1sOyIsJyInOiImcXVvdDsiLCImIjoiJmFtcDsiLCI8IjoiJmx0OyIsIj4iOiImZ3Q7IiwixZIiOiImT0VsaWc7IiwixZMiOiImb2VsaWc7IiwixaAiOiImU2Nhcm9uOyIsIsWhIjoiJnNjYXJvbjsiLCLFuCI6IiZZdW1sOyIsIsuGIjoiJmNpcmM7Iiwiy5wiOiImdGlsZGU7Iiwi4oCCIjoiJmVuc3A7Iiwi4oCDIjoiJmVtc3A7Iiwi4oCJIjoiJnRoaW5zcDsiLCLigIwiOiImenduajsiLCLigI0iOiImendqOyIsIuKAjiI6IiZscm07Iiwi4oCPIjoiJnJsbTsiLCLigJMiOiImbmRhc2g7Iiwi4oCUIjoiJm1kYXNoOyIsIuKAmCI6IiZsc3F1bzsiLCLigJkiOiImcnNxdW87Iiwi4oCaIjoiJnNicXVvOyIsIuKAnCI6IiZsZHF1bzsiLCLigJ0iOiImcmRxdW87Iiwi4oCeIjoiJmJkcXVvOyIsIuKAoCI6IiZkYWdnZXI7Iiwi4oChIjoiJkRhZ2dlcjsiLCLigLAiOiImcGVybWlsOyIsIuKAuSI6IiZsc2FxdW87Iiwi4oC6IjoiJnJzYXF1bzsiLCLigqwiOiImZXVybzsiLCLGkiI6IiZmbm9mOyIsIs6RIjoiJkFscGhhOyIsIs6SIjoiJkJldGE7IiwizpMiOiImR2FtbWE7IiwizpQiOiImRGVsdGE7IiwizpUiOiImRXBzaWxvbjsiLCLOliI6IiZaZXRhOyIsIs6XIjoiJkV0YTsiLCLOmCI6IiZUaGV0YTsiLCLOmSI6IiZJb3RhOyIsIs6aIjoiJkthcHBhOyIsIs6bIjoiJkxhbWJkYTsiLCLOnCI6IiZNdTsiLCLOnSI6IiZOdTsiLCLOniI6IiZYaTsiLCLOnyI6IiZPbWljcm9uOyIsIs6gIjoiJlBpOyIsIs6hIjoiJlJobzsiLCLOoyI6IiZTaWdtYTsiLCLOpCI6IiZUYXU7IiwizqUiOiImVXBzaWxvbjsiLCLOpiI6IiZQaGk7IiwizqciOiImQ2hpOyIsIs6oIjoiJlBzaTsiLCLOqSI6IiZPbWVnYTsiLCLOsSI6IiZhbHBoYTsiLCLOsiI6IiZiZXRhOyIsIs6zIjoiJmdhbW1hOyIsIs60IjoiJmRlbHRhOyIsIs61IjoiJmVwc2lsb247IiwizrYiOiImemV0YTsiLCLOtyI6IiZldGE7IiwizrgiOiImdGhldGE7IiwizrkiOiImaW90YTsiLCLOuiI6IiZrYXBwYTsiLCLOuyI6IiZsYW1iZGE7IiwizrwiOiImbXU7Iiwizr0iOiImbnU7Iiwizr4iOiImeGk7Iiwizr8iOiImb21pY3JvbjsiLCLPgCI6IiZwaTsiLCLPgSI6IiZyaG87Iiwiz4IiOiImc2lnbWFmOyIsIs+DIjoiJnNpZ21hOyIsIs+EIjoiJnRhdTsiLCLPhSI6IiZ1cHNpbG9uOyIsIs+GIjoiJnBoaTsiLCLPhyI6IiZjaGk7Iiwiz4giOiImcHNpOyIsIs+JIjoiJm9tZWdhOyIsIs+RIjoiJnRoZXRhc3ltOyIsIs+SIjoiJnVwc2loOyIsIs+WIjoiJnBpdjsiLCLigKIiOiImYnVsbDsiLCLigKYiOiImaGVsbGlwOyIsIuKAsiI6IiZwcmltZTsiLCLigLMiOiImUHJpbWU7Iiwi4oC+IjoiJm9saW5lOyIsIuKBhCI6IiZmcmFzbDsiLCLihJgiOiImd2VpZXJwOyIsIuKEkSI6IiZpbWFnZTsiLCLihJwiOiImcmVhbDsiLCLihKIiOiImdHJhZGU7Iiwi4oS1IjoiJmFsZWZzeW07Iiwi4oaQIjoiJmxhcnI7Iiwi4oaRIjoiJnVhcnI7Iiwi4oaSIjoiJnJhcnI7Iiwi4oaTIjoiJmRhcnI7Iiwi4oaUIjoiJmhhcnI7Iiwi4oa1IjoiJmNyYXJyOyIsIuKHkCI6IiZsQXJyOyIsIuKHkSI6IiZ1QXJyOyIsIuKHkiI6IiZyQXJyOyIsIuKHkyI6IiZkQXJyOyIsIuKHlCI6IiZoQXJyOyIsIuKIgCI6IiZmb3JhbGw7Iiwi4oiCIjoiJnBhcnQ7Iiwi4oiDIjoiJmV4aXN0OyIsIuKIhSI6IiZlbXB0eTsiLCLiiIciOiImbmFibGE7Iiwi4oiIIjoiJmlzaW47Iiwi4oiJIjoiJm5vdGluOyIsIuKIiyI6IiZuaTsiLCLiiI8iOiImcHJvZDsiLCLiiJEiOiImc3VtOyIsIuKIkiI6IiZtaW51czsiLCLiiJciOiImbG93YXN0OyIsIuKImiI6IiZyYWRpYzsiLCLiiJ0iOiImcHJvcDsiLCLiiJ4iOiImaW5maW47Iiwi4oigIjoiJmFuZzsiLCLiiKciOiImYW5kOyIsIuKIqCI6IiZvcjsiLCLiiKkiOiImY2FwOyIsIuKIqiI6IiZjdXA7Iiwi4oirIjoiJmludDsiLCLiiLQiOiImdGhlcmU0OyIsIuKIvCI6IiZzaW07Iiwi4omFIjoiJmNvbmc7Iiwi4omIIjoiJmFzeW1wOyIsIuKJoCI6IiZuZTsiLCLiiaEiOiImZXF1aXY7Iiwi4omkIjoiJmxlOyIsIuKJpSI6IiZnZTsiLCLiioIiOiImc3ViOyIsIuKKgyI6IiZzdXA7Iiwi4oqEIjoiJm5zdWI7Iiwi4oqGIjoiJnN1YmU7Iiwi4oqHIjoiJnN1cGU7Iiwi4oqVIjoiJm9wbHVzOyIsIuKKlyI6IiZvdGltZXM7Iiwi4oqlIjoiJnBlcnA7Iiwi4ouFIjoiJnNkb3Q7Iiwi4oyIIjoiJmxjZWlsOyIsIuKMiSI6IiZyY2VpbDsiLCLijIoiOiImbGZsb29yOyIsIuKMiyI6IiZyZmxvb3I7Iiwi4oypIjoiJmxhbmc7Iiwi4oyqIjoiJnJhbmc7Iiwi4peKIjoiJmxvejsiLCLimaAiOiImc3BhZGVzOyIsIuKZoyI6IiZjbHViczsiLCLimaUiOiImaGVhcnRzOyIsIuKZpiI6IiZkaWFtczsifX0saHRtbDU6e2VudGl0aWVzOnsiJkFFbGlnIjoiw4YiLCImQUVsaWc7Ijoiw4YiLCImQU1QIjoiJiIsIiZBTVA7IjoiJiIsIiZBYWN1dGUiOiLDgSIsIiZBYWN1dGU7Ijoiw4EiLCImQWJyZXZlOyI6IsSCIiwiJkFjaXJjIjoiw4IiLCImQWNpcmM7Ijoiw4IiLCImQWN5OyI6ItCQIiwiJkFmcjsiOiLwnZSEIiwiJkFncmF2ZSI6IsOAIiwiJkFncmF2ZTsiOiLDgCIsIiZBbHBoYTsiOiLOkSIsIiZBbWFjcjsiOiLEgCIsIiZBbmQ7Ijoi4qmTIiwiJkFvZ29uOyI6IsSEIiwiJkFvcGY7Ijoi8J2UuCIsIiZBcHBseUZ1bmN0aW9uOyI6IuKBoSIsIiZBcmluZyI6IsOFIiwiJkFyaW5nOyI6IsOFIiwiJkFzY3I7Ijoi8J2SnCIsIiZBc3NpZ247Ijoi4omUIiwiJkF0aWxkZSI6IsODIiwiJkF0aWxkZTsiOiLDgyIsIiZBdW1sIjoiw4QiLCImQXVtbDsiOiLDhCIsIiZCYWNrc2xhc2g7Ijoi4oiWIiwiJkJhcnY7Ijoi4qunIiwiJkJhcndlZDsiOiLijIYiLCImQmN5OyI6ItCRIiwiJkJlY2F1c2U7Ijoi4oi1IiwiJkJlcm5vdWxsaXM7Ijoi4oSsIiwiJkJldGE7IjoizpIiLCImQmZyOyI6IvCdlIUiLCImQm9wZjsiOiLwnZS5IiwiJkJyZXZlOyI6IsuYIiwiJkJzY3I7Ijoi4oSsIiwiJkJ1bXBlcTsiOiLiiY4iLCImQ0hjeTsiOiLQpyIsIiZDT1BZIjoiwqkiLCImQ09QWTsiOiLCqSIsIiZDYWN1dGU7IjoixIYiLCImQ2FwOyI6IuKLkiIsIiZDYXBpdGFsRGlmZmVyZW50aWFsRDsiOiLihYUiLCImQ2F5bGV5czsiOiLihK0iLCImQ2Nhcm9uOyI6IsSMIiwiJkNjZWRpbCI6IsOHIiwiJkNjZWRpbDsiOiLDhyIsIiZDY2lyYzsiOiLEiCIsIiZDY29uaW50OyI6IuKIsCIsIiZDZG90OyI6IsSKIiwiJkNlZGlsbGE7IjoiwrgiLCImQ2VudGVyRG90OyI6IsK3IiwiJkNmcjsiOiLihK0iLCImQ2hpOyI6Is6nIiwiJkNpcmNsZURvdDsiOiLiipkiLCImQ2lyY2xlTWludXM7Ijoi4oqWIiwiJkNpcmNsZVBsdXM7Ijoi4oqVIiwiJkNpcmNsZVRpbWVzOyI6IuKKlyIsIiZDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7Ijoi4oiyIiwiJkNsb3NlQ3VybHlEb3VibGVRdW90ZTsiOiLigJ0iLCImQ2xvc2VDdXJseVF1b3RlOyI6IuKAmSIsIiZDb2xvbjsiOiLiiLciLCImQ29sb25lOyI6IuKptCIsIiZDb25ncnVlbnQ7Ijoi4omhIiwiJkNvbmludDsiOiLiiK8iLCImQ29udG91ckludGVncmFsOyI6IuKIriIsIiZDb3BmOyI6IuKEgiIsIiZDb3Byb2R1Y3Q7Ijoi4oiQIiwiJkNvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7Ijoi4oizIiwiJkNyb3NzOyI6IuKoryIsIiZDc2NyOyI6IvCdkp4iLCImQ3VwOyI6IuKLkyIsIiZDdXBDYXA7Ijoi4omNIiwiJkREOyI6IuKFhSIsIiZERG90cmFoZDsiOiLipJEiLCImREpjeTsiOiLQgiIsIiZEU2N5OyI6ItCFIiwiJkRaY3k7Ijoi0I8iLCImRGFnZ2VyOyI6IuKAoSIsIiZEYXJyOyI6IuKGoSIsIiZEYXNodjsiOiLiq6QiLCImRGNhcm9uOyI6IsSOIiwiJkRjeTsiOiLQlCIsIiZEZWw7Ijoi4oiHIiwiJkRlbHRhOyI6Is6UIiwiJkRmcjsiOiLwnZSHIiwiJkRpYWNyaXRpY2FsQWN1dGU7IjoiwrQiLCImRGlhY3JpdGljYWxEb3Q7Ijoiy5kiLCImRGlhY3JpdGljYWxEb3VibGVBY3V0ZTsiOiLLnSIsIiZEaWFjcml0aWNhbEdyYXZlOyI6ImAiLCImRGlhY3JpdGljYWxUaWxkZTsiOiLLnCIsIiZEaWFtb25kOyI6IuKLhCIsIiZEaWZmZXJlbnRpYWxEOyI6IuKFhiIsIiZEb3BmOyI6IvCdlLsiLCImRG90OyI6IsKoIiwiJkRvdERvdDsiOiLig5wiLCImRG90RXF1YWw7Ijoi4omQIiwiJkRvdWJsZUNvbnRvdXJJbnRlZ3JhbDsiOiLiiK8iLCImRG91YmxlRG90OyI6IsKoIiwiJkRvdWJsZURvd25BcnJvdzsiOiLih5MiLCImRG91YmxlTGVmdEFycm93OyI6IuKHkCIsIiZEb3VibGVMZWZ0UmlnaHRBcnJvdzsiOiLih5QiLCImRG91YmxlTGVmdFRlZTsiOiLiq6QiLCImRG91YmxlTG9uZ0xlZnRBcnJvdzsiOiLin7giLCImRG91YmxlTG9uZ0xlZnRSaWdodEFycm93OyI6IuKfuiIsIiZEb3VibGVMb25nUmlnaHRBcnJvdzsiOiLin7kiLCImRG91YmxlUmlnaHRBcnJvdzsiOiLih5IiLCImRG91YmxlUmlnaHRUZWU7Ijoi4oqoIiwiJkRvdWJsZVVwQXJyb3c7Ijoi4oeRIiwiJkRvdWJsZVVwRG93bkFycm93OyI6IuKHlSIsIiZEb3VibGVWZXJ0aWNhbEJhcjsiOiLiiKUiLCImRG93bkFycm93OyI6IuKGkyIsIiZEb3duQXJyb3dCYXI7Ijoi4qSTIiwiJkRvd25BcnJvd1VwQXJyb3c7Ijoi4oe1IiwiJkRvd25CcmV2ZTsiOiLMkSIsIiZEb3duTGVmdFJpZ2h0VmVjdG9yOyI6IuKlkCIsIiZEb3duTGVmdFRlZVZlY3RvcjsiOiLipZ4iLCImRG93bkxlZnRWZWN0b3I7Ijoi4oa9IiwiJkRvd25MZWZ0VmVjdG9yQmFyOyI6IuKlliIsIiZEb3duUmlnaHRUZWVWZWN0b3I7Ijoi4qWfIiwiJkRvd25SaWdodFZlY3RvcjsiOiLih4EiLCImRG93blJpZ2h0VmVjdG9yQmFyOyI6IuKllyIsIiZEb3duVGVlOyI6IuKKpCIsIiZEb3duVGVlQXJyb3c7Ijoi4oanIiwiJkRvd25hcnJvdzsiOiLih5MiLCImRHNjcjsiOiLwnZKfIiwiJkRzdHJvazsiOiLEkCIsIiZFTkc7IjoixYoiLCImRVRIIjoiw5AiLCImRVRIOyI6IsOQIiwiJkVhY3V0ZSI6IsOJIiwiJkVhY3V0ZTsiOiLDiSIsIiZFY2Fyb247IjoixJoiLCImRWNpcmMiOiLDiiIsIiZFY2lyYzsiOiLDiiIsIiZFY3k7Ijoi0K0iLCImRWRvdDsiOiLEliIsIiZFZnI7Ijoi8J2UiCIsIiZFZ3JhdmUiOiLDiCIsIiZFZ3JhdmU7Ijoiw4giLCImRWxlbWVudDsiOiLiiIgiLCImRW1hY3I7IjoixJIiLCImRW1wdHlTbWFsbFNxdWFyZTsiOiLil7siLCImRW1wdHlWZXJ5U21hbGxTcXVhcmU7Ijoi4parIiwiJkVvZ29uOyI6IsSYIiwiJkVvcGY7Ijoi8J2UvCIsIiZFcHNpbG9uOyI6Is6VIiwiJkVxdWFsOyI6IuKptSIsIiZFcXVhbFRpbGRlOyI6IuKJgiIsIiZFcXVpbGlicml1bTsiOiLih4wiLCImRXNjcjsiOiLihLAiLCImRXNpbTsiOiLiqbMiLCImRXRhOyI6Is6XIiwiJkV1bWwiOiLDiyIsIiZFdW1sOyI6IsOLIiwiJkV4aXN0czsiOiLiiIMiLCImRXhwb25lbnRpYWxFOyI6IuKFhyIsIiZGY3k7Ijoi0KQiLCImRmZyOyI6IvCdlIkiLCImRmlsbGVkU21hbGxTcXVhcmU7Ijoi4pe8IiwiJkZpbGxlZFZlcnlTbWFsbFNxdWFyZTsiOiLilqoiLCImRm9wZjsiOiLwnZS9IiwiJkZvckFsbDsiOiLiiIAiLCImRm91cmllcnRyZjsiOiLihLEiLCImRnNjcjsiOiLihLEiLCImR0pjeTsiOiLQgyIsIiZHVCI6Ij4iLCImR1Q7IjoiPiIsIiZHYW1tYTsiOiLOkyIsIiZHYW1tYWQ7Ijoiz5wiLCImR2JyZXZlOyI6IsSeIiwiJkdjZWRpbDsiOiLEoiIsIiZHY2lyYzsiOiLEnCIsIiZHY3k7Ijoi0JMiLCImR2RvdDsiOiLEoCIsIiZHZnI7Ijoi8J2UiiIsIiZHZzsiOiLii5kiLCImR29wZjsiOiLwnZS+IiwiJkdyZWF0ZXJFcXVhbDsiOiLiiaUiLCImR3JlYXRlckVxdWFsTGVzczsiOiLii5siLCImR3JlYXRlckZ1bGxFcXVhbDsiOiLiiaciLCImR3JlYXRlckdyZWF0ZXI7Ijoi4qqiIiwiJkdyZWF0ZXJMZXNzOyI6IuKJtyIsIiZHcmVhdGVyU2xhbnRFcXVhbDsiOiLiqb4iLCImR3JlYXRlclRpbGRlOyI6IuKJsyIsIiZHc2NyOyI6IvCdkqIiLCImR3Q7Ijoi4omrIiwiJkhBUkRjeTsiOiLQqiIsIiZIYWNlazsiOiLLhyIsIiZIYXQ7IjoiXiIsIiZIY2lyYzsiOiLEpCIsIiZIZnI7Ijoi4oSMIiwiJkhpbGJlcnRTcGFjZTsiOiLihIsiLCImSG9wZjsiOiLihI0iLCImSG9yaXpvbnRhbExpbmU7Ijoi4pSAIiwiJkhzY3I7Ijoi4oSLIiwiJkhzdHJvazsiOiLEpiIsIiZIdW1wRG93bkh1bXA7Ijoi4omOIiwiJkh1bXBFcXVhbDsiOiLiiY8iLCImSUVjeTsiOiLQlSIsIiZJSmxpZzsiOiLEsiIsIiZJT2N5OyI6ItCBIiwiJklhY3V0ZSI6IsONIiwiJklhY3V0ZTsiOiLDjSIsIiZJY2lyYyI6IsOOIiwiJkljaXJjOyI6IsOOIiwiJkljeTsiOiLQmCIsIiZJZG90OyI6IsSwIiwiJklmcjsiOiLihJEiLCImSWdyYXZlIjoiw4wiLCImSWdyYXZlOyI6IsOMIiwiJkltOyI6IuKEkSIsIiZJbWFjcjsiOiLEqiIsIiZJbWFnaW5hcnlJOyI6IuKFiCIsIiZJbXBsaWVzOyI6IuKHkiIsIiZJbnQ7Ijoi4oisIiwiJkludGVncmFsOyI6IuKIqyIsIiZJbnRlcnNlY3Rpb247Ijoi4ouCIiwiJkludmlzaWJsZUNvbW1hOyI6IuKBoyIsIiZJbnZpc2libGVUaW1lczsiOiLigaIiLCImSW9nb247IjoixK4iLCImSW9wZjsiOiLwnZWAIiwiJklvdGE7IjoizpkiLCImSXNjcjsiOiLihJAiLCImSXRpbGRlOyI6IsSoIiwiJkl1a2N5OyI6ItCGIiwiJkl1bWwiOiLDjyIsIiZJdW1sOyI6IsOPIiwiJkpjaXJjOyI6IsS0IiwiJkpjeTsiOiLQmSIsIiZKZnI7Ijoi8J2UjSIsIiZKb3BmOyI6IvCdlYEiLCImSnNjcjsiOiLwnZKlIiwiJkpzZXJjeTsiOiLQiCIsIiZKdWtjeTsiOiLQhCIsIiZLSGN5OyI6ItClIiwiJktKY3k7Ijoi0IwiLCImS2FwcGE7IjoizpoiLCImS2NlZGlsOyI6IsS2IiwiJktjeTsiOiLQmiIsIiZLZnI7Ijoi8J2UjiIsIiZLb3BmOyI6IvCdlYIiLCImS3NjcjsiOiLwnZKmIiwiJkxKY3k7Ijoi0IkiLCImTFQiOiI8IiwiJkxUOyI6IjwiLCImTGFjdXRlOyI6IsS5IiwiJkxhbWJkYTsiOiLOmyIsIiZMYW5nOyI6IuKfqiIsIiZMYXBsYWNldHJmOyI6IuKEkiIsIiZMYXJyOyI6IuKGniIsIiZMY2Fyb247IjoixL0iLCImTGNlZGlsOyI6IsS7IiwiJkxjeTsiOiLQmyIsIiZMZWZ0QW5nbGVCcmFja2V0OyI6IuKfqCIsIiZMZWZ0QXJyb3c7Ijoi4oaQIiwiJkxlZnRBcnJvd0JhcjsiOiLih6QiLCImTGVmdEFycm93UmlnaHRBcnJvdzsiOiLih4YiLCImTGVmdENlaWxpbmc7Ijoi4oyIIiwiJkxlZnREb3VibGVCcmFja2V0OyI6IuKfpiIsIiZMZWZ0RG93blRlZVZlY3RvcjsiOiLipaEiLCImTGVmdERvd25WZWN0b3I7Ijoi4oeDIiwiJkxlZnREb3duVmVjdG9yQmFyOyI6IuKlmSIsIiZMZWZ0Rmxvb3I7Ijoi4oyKIiwiJkxlZnRSaWdodEFycm93OyI6IuKGlCIsIiZMZWZ0UmlnaHRWZWN0b3I7Ijoi4qWOIiwiJkxlZnRUZWU7Ijoi4oqjIiwiJkxlZnRUZWVBcnJvdzsiOiLihqQiLCImTGVmdFRlZVZlY3RvcjsiOiLipZoiLCImTGVmdFRyaWFuZ2xlOyI6IuKKsiIsIiZMZWZ0VHJpYW5nbGVCYXI7Ijoi4qePIiwiJkxlZnRUcmlhbmdsZUVxdWFsOyI6IuKKtCIsIiZMZWZ0VXBEb3duVmVjdG9yOyI6IuKlkSIsIiZMZWZ0VXBUZWVWZWN0b3I7Ijoi4qWgIiwiJkxlZnRVcFZlY3RvcjsiOiLihr8iLCImTGVmdFVwVmVjdG9yQmFyOyI6IuKlmCIsIiZMZWZ0VmVjdG9yOyI6IuKGvCIsIiZMZWZ0VmVjdG9yQmFyOyI6IuKlkiIsIiZMZWZ0YXJyb3c7Ijoi4oeQIiwiJkxlZnRyaWdodGFycm93OyI6IuKHlCIsIiZMZXNzRXF1YWxHcmVhdGVyOyI6IuKLmiIsIiZMZXNzRnVsbEVxdWFsOyI6IuKJpiIsIiZMZXNzR3JlYXRlcjsiOiLiibYiLCImTGVzc0xlc3M7Ijoi4qqhIiwiJkxlc3NTbGFudEVxdWFsOyI6IuKpvSIsIiZMZXNzVGlsZGU7Ijoi4omyIiwiJkxmcjsiOiLwnZSPIiwiJkxsOyI6IuKLmCIsIiZMbGVmdGFycm93OyI6IuKHmiIsIiZMbWlkb3Q7IjoixL8iLCImTG9uZ0xlZnRBcnJvdzsiOiLin7UiLCImTG9uZ0xlZnRSaWdodEFycm93OyI6IuKftyIsIiZMb25nUmlnaHRBcnJvdzsiOiLin7YiLCImTG9uZ2xlZnRhcnJvdzsiOiLin7giLCImTG9uZ2xlZnRyaWdodGFycm93OyI6IuKfuiIsIiZMb25ncmlnaHRhcnJvdzsiOiLin7kiLCImTG9wZjsiOiLwnZWDIiwiJkxvd2VyTGVmdEFycm93OyI6IuKGmSIsIiZMb3dlclJpZ2h0QXJyb3c7Ijoi4oaYIiwiJkxzY3I7Ijoi4oSSIiwiJkxzaDsiOiLihrAiLCImTHN0cm9rOyI6IsWBIiwiJkx0OyI6IuKJqiIsIiZNYXA7Ijoi4qSFIiwiJk1jeTsiOiLQnCIsIiZNZWRpdW1TcGFjZTsiOiLigZ8iLCImTWVsbGludHJmOyI6IuKEsyIsIiZNZnI7Ijoi8J2UkCIsIiZNaW51c1BsdXM7Ijoi4oiTIiwiJk1vcGY7Ijoi8J2VhCIsIiZNc2NyOyI6IuKEsyIsIiZNdTsiOiLOnCIsIiZOSmN5OyI6ItCKIiwiJk5hY3V0ZTsiOiLFgyIsIiZOY2Fyb247IjoixYciLCImTmNlZGlsOyI6IsWFIiwiJk5jeTsiOiLQnSIsIiZOZWdhdGl2ZU1lZGl1bVNwYWNlOyI6IuKAiyIsIiZOZWdhdGl2ZVRoaWNrU3BhY2U7Ijoi4oCLIiwiJk5lZ2F0aXZlVGhpblNwYWNlOyI6IuKAiyIsIiZOZWdhdGl2ZVZlcnlUaGluU3BhY2U7Ijoi4oCLIiwiJk5lc3RlZEdyZWF0ZXJHcmVhdGVyOyI6IuKJqyIsIiZOZXN0ZWRMZXNzTGVzczsiOiLiiaoiLCImTmV3TGluZTsiOiJcbiIsIiZOZnI7Ijoi8J2UkSIsIiZOb0JyZWFrOyI6IuKBoCIsIiZOb25CcmVha2luZ1NwYWNlOyI6IsKgIiwiJk5vcGY7Ijoi4oSVIiwiJk5vdDsiOiLiq6wiLCImTm90Q29uZ3J1ZW50OyI6IuKJoiIsIiZOb3RDdXBDYXA7Ijoi4omtIiwiJk5vdERvdWJsZVZlcnRpY2FsQmFyOyI6IuKIpiIsIiZOb3RFbGVtZW50OyI6IuKIiSIsIiZOb3RFcXVhbDsiOiLiiaAiLCImTm90RXF1YWxUaWxkZTsiOiLiiYLMuCIsIiZOb3RFeGlzdHM7Ijoi4oiEIiwiJk5vdEdyZWF0ZXI7Ijoi4omvIiwiJk5vdEdyZWF0ZXJFcXVhbDsiOiLiibEiLCImTm90R3JlYXRlckZ1bGxFcXVhbDsiOiLiiafMuCIsIiZOb3RHcmVhdGVyR3JlYXRlcjsiOiLiiavMuCIsIiZOb3RHcmVhdGVyTGVzczsiOiLiibkiLCImTm90R3JlYXRlclNsYW50RXF1YWw7Ijoi4qm+zLgiLCImTm90R3JlYXRlclRpbGRlOyI6IuKJtSIsIiZOb3RIdW1wRG93bkh1bXA7Ijoi4omOzLgiLCImTm90SHVtcEVxdWFsOyI6IuKJj8y4IiwiJk5vdExlZnRUcmlhbmdsZTsiOiLii6oiLCImTm90TGVmdFRyaWFuZ2xlQmFyOyI6IuKnj8y4IiwiJk5vdExlZnRUcmlhbmdsZUVxdWFsOyI6IuKLrCIsIiZOb3RMZXNzOyI6IuKJriIsIiZOb3RMZXNzRXF1YWw7Ijoi4omwIiwiJk5vdExlc3NHcmVhdGVyOyI6IuKJuCIsIiZOb3RMZXNzTGVzczsiOiLiiarMuCIsIiZOb3RMZXNzU2xhbnRFcXVhbDsiOiLiqb3MuCIsIiZOb3RMZXNzVGlsZGU7Ijoi4om0IiwiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyOyI6IuKqosy4IiwiJk5vdE5lc3RlZExlc3NMZXNzOyI6IuKqocy4IiwiJk5vdFByZWNlZGVzOyI6IuKKgCIsIiZOb3RQcmVjZWRlc0VxdWFsOyI6IuKqr8y4IiwiJk5vdFByZWNlZGVzU2xhbnRFcXVhbDsiOiLii6AiLCImTm90UmV2ZXJzZUVsZW1lbnQ7Ijoi4oiMIiwiJk5vdFJpZ2h0VHJpYW5nbGU7Ijoi4ourIiwiJk5vdFJpZ2h0VHJpYW5nbGVCYXI7Ijoi4qeQzLgiLCImTm90UmlnaHRUcmlhbmdsZUVxdWFsOyI6IuKLrSIsIiZOb3RTcXVhcmVTdWJzZXQ7Ijoi4oqPzLgiLCImTm90U3F1YXJlU3Vic2V0RXF1YWw7Ijoi4ouiIiwiJk5vdFNxdWFyZVN1cGVyc2V0OyI6IuKKkMy4IiwiJk5vdFNxdWFyZVN1cGVyc2V0RXF1YWw7Ijoi4oujIiwiJk5vdFN1YnNldDsiOiLiioLig5IiLCImTm90U3Vic2V0RXF1YWw7Ijoi4oqIIiwiJk5vdFN1Y2NlZWRzOyI6IuKKgSIsIiZOb3RTdWNjZWVkc0VxdWFsOyI6IuKqsMy4IiwiJk5vdFN1Y2NlZWRzU2xhbnRFcXVhbDsiOiLii6EiLCImTm90U3VjY2VlZHNUaWxkZTsiOiLiib/MuCIsIiZOb3RTdXBlcnNldDsiOiLiioPig5IiLCImTm90U3VwZXJzZXRFcXVhbDsiOiLiiokiLCImTm90VGlsZGU7Ijoi4omBIiwiJk5vdFRpbGRlRXF1YWw7Ijoi4omEIiwiJk5vdFRpbGRlRnVsbEVxdWFsOyI6IuKJhyIsIiZOb3RUaWxkZVRpbGRlOyI6IuKJiSIsIiZOb3RWZXJ0aWNhbEJhcjsiOiLiiKQiLCImTnNjcjsiOiLwnZKpIiwiJk50aWxkZSI6IsORIiwiJk50aWxkZTsiOiLDkSIsIiZOdTsiOiLOnSIsIiZPRWxpZzsiOiLFkiIsIiZPYWN1dGUiOiLDkyIsIiZPYWN1dGU7Ijoiw5MiLCImT2NpcmMiOiLDlCIsIiZPY2lyYzsiOiLDlCIsIiZPY3k7Ijoi0J4iLCImT2RibGFjOyI6IsWQIiwiJk9mcjsiOiLwnZSSIiwiJk9ncmF2ZSI6IsOSIiwiJk9ncmF2ZTsiOiLDkiIsIiZPbWFjcjsiOiLFjCIsIiZPbWVnYTsiOiLOqSIsIiZPbWljcm9uOyI6Is6fIiwiJk9vcGY7Ijoi8J2VhiIsIiZPcGVuQ3VybHlEb3VibGVRdW90ZTsiOiLigJwiLCImT3BlbkN1cmx5UXVvdGU7Ijoi4oCYIiwiJk9yOyI6IuKplCIsIiZPc2NyOyI6IvCdkqoiLCImT3NsYXNoIjoiw5giLCImT3NsYXNoOyI6IsOYIiwiJk90aWxkZSI6IsOVIiwiJk90aWxkZTsiOiLDlSIsIiZPdGltZXM7Ijoi4qi3IiwiJk91bWwiOiLDliIsIiZPdW1sOyI6IsOWIiwiJk92ZXJCYXI7Ijoi4oC+IiwiJk92ZXJCcmFjZTsiOiLij54iLCImT3ZlckJyYWNrZXQ7Ijoi4o60IiwiJk92ZXJQYXJlbnRoZXNpczsiOiLij5wiLCImUGFydGlhbEQ7Ijoi4oiCIiwiJlBjeTsiOiLQnyIsIiZQZnI7Ijoi8J2UkyIsIiZQaGk7IjoizqYiLCImUGk7IjoizqAiLCImUGx1c01pbnVzOyI6IsKxIiwiJlBvaW5jYXJlcGxhbmU7Ijoi4oSMIiwiJlBvcGY7Ijoi4oSZIiwiJlByOyI6IuKquyIsIiZQcmVjZWRlczsiOiLiiboiLCImUHJlY2VkZXNFcXVhbDsiOiLiqq8iLCImUHJlY2VkZXNTbGFudEVxdWFsOyI6IuKJvCIsIiZQcmVjZWRlc1RpbGRlOyI6IuKJviIsIiZQcmltZTsiOiLigLMiLCImUHJvZHVjdDsiOiLiiI8iLCImUHJvcG9ydGlvbjsiOiLiiLciLCImUHJvcG9ydGlvbmFsOyI6IuKInSIsIiZQc2NyOyI6IvCdkqsiLCImUHNpOyI6Is6oIiwiJlFVT1QiOiciJywiJlFVT1Q7IjonIicsIiZRZnI7Ijoi8J2UlCIsIiZRb3BmOyI6IuKEmiIsIiZRc2NyOyI6IvCdkqwiLCImUkJhcnI7Ijoi4qSQIiwiJlJFRyI6IsKuIiwiJlJFRzsiOiLCriIsIiZSYWN1dGU7IjoixZQiLCImUmFuZzsiOiLin6siLCImUmFycjsiOiLihqAiLCImUmFycnRsOyI6IuKkliIsIiZSY2Fyb247IjoixZgiLCImUmNlZGlsOyI6IsWWIiwiJlJjeTsiOiLQoCIsIiZSZTsiOiLihJwiLCImUmV2ZXJzZUVsZW1lbnQ7Ijoi4oiLIiwiJlJldmVyc2VFcXVpbGlicml1bTsiOiLih4siLCImUmV2ZXJzZVVwRXF1aWxpYnJpdW07Ijoi4qWvIiwiJlJmcjsiOiLihJwiLCImUmhvOyI6Is6hIiwiJlJpZ2h0QW5nbGVCcmFja2V0OyI6IuKfqSIsIiZSaWdodEFycm93OyI6IuKGkiIsIiZSaWdodEFycm93QmFyOyI6IuKHpSIsIiZSaWdodEFycm93TGVmdEFycm93OyI6IuKHhCIsIiZSaWdodENlaWxpbmc7Ijoi4oyJIiwiJlJpZ2h0RG91YmxlQnJhY2tldDsiOiLin6ciLCImUmlnaHREb3duVGVlVmVjdG9yOyI6IuKlnSIsIiZSaWdodERvd25WZWN0b3I7Ijoi4oeCIiwiJlJpZ2h0RG93blZlY3RvckJhcjsiOiLipZUiLCImUmlnaHRGbG9vcjsiOiLijIsiLCImUmlnaHRUZWU7Ijoi4oqiIiwiJlJpZ2h0VGVlQXJyb3c7Ijoi4oamIiwiJlJpZ2h0VGVlVmVjdG9yOyI6IuKlmyIsIiZSaWdodFRyaWFuZ2xlOyI6IuKKsyIsIiZSaWdodFRyaWFuZ2xlQmFyOyI6IuKnkCIsIiZSaWdodFRyaWFuZ2xlRXF1YWw7Ijoi4oq1IiwiJlJpZ2h0VXBEb3duVmVjdG9yOyI6IuKljyIsIiZSaWdodFVwVGVlVmVjdG9yOyI6IuKlnCIsIiZSaWdodFVwVmVjdG9yOyI6IuKGviIsIiZSaWdodFVwVmVjdG9yQmFyOyI6IuKllCIsIiZSaWdodFZlY3RvcjsiOiLih4AiLCImUmlnaHRWZWN0b3JCYXI7Ijoi4qWTIiwiJlJpZ2h0YXJyb3c7Ijoi4oeSIiwiJlJvcGY7Ijoi4oSdIiwiJlJvdW5kSW1wbGllczsiOiLipbAiLCImUnJpZ2h0YXJyb3c7Ijoi4oebIiwiJlJzY3I7Ijoi4oSbIiwiJlJzaDsiOiLihrEiLCImUnVsZURlbGF5ZWQ7Ijoi4qe0IiwiJlNIQ0hjeTsiOiLQqSIsIiZTSGN5OyI6ItCoIiwiJlNPRlRjeTsiOiLQrCIsIiZTYWN1dGU7IjoixZoiLCImU2M7Ijoi4qq8IiwiJlNjYXJvbjsiOiLFoCIsIiZTY2VkaWw7IjoixZ4iLCImU2NpcmM7IjoixZwiLCImU2N5OyI6ItChIiwiJlNmcjsiOiLwnZSWIiwiJlNob3J0RG93bkFycm93OyI6IuKGkyIsIiZTaG9ydExlZnRBcnJvdzsiOiLihpAiLCImU2hvcnRSaWdodEFycm93OyI6IuKGkiIsIiZTaG9ydFVwQXJyb3c7Ijoi4oaRIiwiJlNpZ21hOyI6Is6jIiwiJlNtYWxsQ2lyY2xlOyI6IuKImCIsIiZTb3BmOyI6IvCdlYoiLCImU3FydDsiOiLiiJoiLCImU3F1YXJlOyI6IuKWoSIsIiZTcXVhcmVJbnRlcnNlY3Rpb247Ijoi4oqTIiwiJlNxdWFyZVN1YnNldDsiOiLiio8iLCImU3F1YXJlU3Vic2V0RXF1YWw7Ijoi4oqRIiwiJlNxdWFyZVN1cGVyc2V0OyI6IuKKkCIsIiZTcXVhcmVTdXBlcnNldEVxdWFsOyI6IuKKkiIsIiZTcXVhcmVVbmlvbjsiOiLiipQiLCImU3NjcjsiOiLwnZKuIiwiJlN0YXI7Ijoi4ouGIiwiJlN1YjsiOiLii5AiLCImU3Vic2V0OyI6IuKLkCIsIiZTdWJzZXRFcXVhbDsiOiLiioYiLCImU3VjY2VlZHM7Ijoi4om7IiwiJlN1Y2NlZWRzRXF1YWw7Ijoi4qqwIiwiJlN1Y2NlZWRzU2xhbnRFcXVhbDsiOiLiib0iLCImU3VjY2VlZHNUaWxkZTsiOiLiib8iLCImU3VjaFRoYXQ7Ijoi4oiLIiwiJlN1bTsiOiLiiJEiLCImU3VwOyI6IuKLkSIsIiZTdXBlcnNldDsiOiLiioMiLCImU3VwZXJzZXRFcXVhbDsiOiLiiociLCImU3Vwc2V0OyI6IuKLkSIsIiZUSE9STiI6IsOeIiwiJlRIT1JOOyI6IsOeIiwiJlRSQURFOyI6IuKEoiIsIiZUU0hjeTsiOiLQiyIsIiZUU2N5OyI6ItCmIiwiJlRhYjsiOiJcdCIsIiZUYXU7IjoizqQiLCImVGNhcm9uOyI6IsWkIiwiJlRjZWRpbDsiOiLFoiIsIiZUY3k7Ijoi0KIiLCImVGZyOyI6IvCdlJciLCImVGhlcmVmb3JlOyI6IuKItCIsIiZUaGV0YTsiOiLOmCIsIiZUaGlja1NwYWNlOyI6IuKBn+KAiiIsIiZUaGluU3BhY2U7Ijoi4oCJIiwiJlRpbGRlOyI6IuKIvCIsIiZUaWxkZUVxdWFsOyI6IuKJgyIsIiZUaWxkZUZ1bGxFcXVhbDsiOiLiiYUiLCImVGlsZGVUaWxkZTsiOiLiiYgiLCImVG9wZjsiOiLwnZWLIiwiJlRyaXBsZURvdDsiOiLig5siLCImVHNjcjsiOiLwnZKvIiwiJlRzdHJvazsiOiLFpiIsIiZVYWN1dGUiOiLDmiIsIiZVYWN1dGU7Ijoiw5oiLCImVWFycjsiOiLihp8iLCImVWFycm9jaXI7Ijoi4qWJIiwiJlVicmN5OyI6ItCOIiwiJlVicmV2ZTsiOiLFrCIsIiZVY2lyYyI6IsObIiwiJlVjaXJjOyI6IsObIiwiJlVjeTsiOiLQoyIsIiZVZGJsYWM7IjoixbAiLCImVWZyOyI6IvCdlJgiLCImVWdyYXZlIjoiw5kiLCImVWdyYXZlOyI6IsOZIiwiJlVtYWNyOyI6IsWqIiwiJlVuZGVyQmFyOyI6Il8iLCImVW5kZXJCcmFjZTsiOiLij58iLCImVW5kZXJCcmFja2V0OyI6IuKOtSIsIiZVbmRlclBhcmVudGhlc2lzOyI6IuKPnSIsIiZVbmlvbjsiOiLii4MiLCImVW5pb25QbHVzOyI6IuKKjiIsIiZVb2dvbjsiOiLFsiIsIiZVb3BmOyI6IvCdlYwiLCImVXBBcnJvdzsiOiLihpEiLCImVXBBcnJvd0JhcjsiOiLipJIiLCImVXBBcnJvd0Rvd25BcnJvdzsiOiLih4UiLCImVXBEb3duQXJyb3c7Ijoi4oaVIiwiJlVwRXF1aWxpYnJpdW07Ijoi4qWuIiwiJlVwVGVlOyI6IuKKpSIsIiZVcFRlZUFycm93OyI6IuKGpSIsIiZVcGFycm93OyI6IuKHkSIsIiZVcGRvd25hcnJvdzsiOiLih5UiLCImVXBwZXJMZWZ0QXJyb3c7Ijoi4oaWIiwiJlVwcGVyUmlnaHRBcnJvdzsiOiLihpciLCImVXBzaTsiOiLPkiIsIiZVcHNpbG9uOyI6Is6lIiwiJlVyaW5nOyI6IsWuIiwiJlVzY3I7Ijoi8J2SsCIsIiZVdGlsZGU7IjoixagiLCImVXVtbCI6IsOcIiwiJlV1bWw7Ijoiw5wiLCImVkRhc2g7Ijoi4oqrIiwiJlZiYXI7Ijoi4qurIiwiJlZjeTsiOiLQkiIsIiZWZGFzaDsiOiLiiqkiLCImVmRhc2hsOyI6IuKrpiIsIiZWZWU7Ijoi4ouBIiwiJlZlcmJhcjsiOiLigJYiLCImVmVydDsiOiLigJYiLCImVmVydGljYWxCYXI7Ijoi4oijIiwiJlZlcnRpY2FsTGluZTsiOiJ8IiwiJlZlcnRpY2FsU2VwYXJhdG9yOyI6IuKdmCIsIiZWZXJ0aWNhbFRpbGRlOyI6IuKJgCIsIiZWZXJ5VGhpblNwYWNlOyI6IuKAiiIsIiZWZnI7Ijoi8J2UmSIsIiZWb3BmOyI6IvCdlY0iLCImVnNjcjsiOiLwnZKxIiwiJlZ2ZGFzaDsiOiLiiqoiLCImV2NpcmM7IjoixbQiLCImV2VkZ2U7Ijoi4ouAIiwiJldmcjsiOiLwnZSaIiwiJldvcGY7Ijoi8J2VjiIsIiZXc2NyOyI6IvCdkrIiLCImWGZyOyI6IvCdlJsiLCImWGk7Ijoizp4iLCImWG9wZjsiOiLwnZWPIiwiJlhzY3I7Ijoi8J2SsyIsIiZZQWN5OyI6ItCvIiwiJllJY3k7Ijoi0IciLCImWVVjeTsiOiLQriIsIiZZYWN1dGUiOiLDnSIsIiZZYWN1dGU7Ijoiw50iLCImWWNpcmM7IjoixbYiLCImWWN5OyI6ItCrIiwiJllmcjsiOiLwnZScIiwiJllvcGY7Ijoi8J2VkCIsIiZZc2NyOyI6IvCdkrQiLCImWXVtbDsiOiLFuCIsIiZaSGN5OyI6ItCWIiwiJlphY3V0ZTsiOiLFuSIsIiZaY2Fyb247Ijoixb0iLCImWmN5OyI6ItCXIiwiJlpkb3Q7IjoixbsiLCImWmVyb1dpZHRoU3BhY2U7Ijoi4oCLIiwiJlpldGE7IjoizpYiLCImWmZyOyI6IuKEqCIsIiZab3BmOyI6IuKEpCIsIiZac2NyOyI6IvCdkrUiLCImYWFjdXRlIjoiw6EiLCImYWFjdXRlOyI6IsOhIiwiJmFicmV2ZTsiOiLEgyIsIiZhYzsiOiLiiL4iLCImYWNFOyI6IuKIvsyzIiwiJmFjZDsiOiLiiL8iLCImYWNpcmMiOiLDoiIsIiZhY2lyYzsiOiLDoiIsIiZhY3V0ZSI6IsK0IiwiJmFjdXRlOyI6IsK0IiwiJmFjeTsiOiLQsCIsIiZhZWxpZyI6IsOmIiwiJmFlbGlnOyI6IsOmIiwiJmFmOyI6IuKBoSIsIiZhZnI7Ijoi8J2UniIsIiZhZ3JhdmUiOiLDoCIsIiZhZ3JhdmU7Ijoiw6AiLCImYWxlZnN5bTsiOiLihLUiLCImYWxlcGg7Ijoi4oS1IiwiJmFscGhhOyI6Is6xIiwiJmFtYWNyOyI6IsSBIiwiJmFtYWxnOyI6IuKovyIsIiZhbXAiOiImIiwiJmFtcDsiOiImIiwiJmFuZDsiOiLiiKciLCImYW5kYW5kOyI6IuKplSIsIiZhbmRkOyI6IuKpnCIsIiZhbmRzbG9wZTsiOiLiqZgiLCImYW5kdjsiOiLiqZoiLCImYW5nOyI6IuKIoCIsIiZhbmdlOyI6IuKmpCIsIiZhbmdsZTsiOiLiiKAiLCImYW5nbXNkOyI6IuKIoSIsIiZhbmdtc2RhYTsiOiLipqgiLCImYW5nbXNkYWI7Ijoi4qapIiwiJmFuZ21zZGFjOyI6IuKmqiIsIiZhbmdtc2RhZDsiOiLipqsiLCImYW5nbXNkYWU7Ijoi4qasIiwiJmFuZ21zZGFmOyI6IuKmrSIsIiZhbmdtc2RhZzsiOiLipq4iLCImYW5nbXNkYWg7Ijoi4qavIiwiJmFuZ3J0OyI6IuKInyIsIiZhbmdydHZiOyI6IuKKviIsIiZhbmdydHZiZDsiOiLipp0iLCImYW5nc3BoOyI6IuKIoiIsIiZhbmdzdDsiOiLDhSIsIiZhbmd6YXJyOyI6IuKNvCIsIiZhb2dvbjsiOiLEhSIsIiZhb3BmOyI6IvCdlZIiLCImYXA7Ijoi4omIIiwiJmFwRTsiOiLiqbAiLCImYXBhY2lyOyI6IuKpryIsIiZhcGU7Ijoi4omKIiwiJmFwaWQ7Ijoi4omLIiwiJmFwb3M7IjoiJyIsIiZhcHByb3g7Ijoi4omIIiwiJmFwcHJveGVxOyI6IuKJiiIsIiZhcmluZyI6IsOlIiwiJmFyaW5nOyI6IsOlIiwiJmFzY3I7Ijoi8J2StiIsIiZhc3Q7IjoiKiIsIiZhc3ltcDsiOiLiiYgiLCImYXN5bXBlcTsiOiLiiY0iLCImYXRpbGRlIjoiw6MiLCImYXRpbGRlOyI6IsOjIiwiJmF1bWwiOiLDpCIsIiZhdW1sOyI6IsOkIiwiJmF3Y29uaW50OyI6IuKIsyIsIiZhd2ludDsiOiLiqJEiLCImYk5vdDsiOiLiq60iLCImYmFja2Nvbmc7Ijoi4omMIiwiJmJhY2tlcHNpbG9uOyI6Is+2IiwiJmJhY2twcmltZTsiOiLigLUiLCImYmFja3NpbTsiOiLiiL0iLCImYmFja3NpbWVxOyI6IuKLjSIsIiZiYXJ2ZWU7Ijoi4oq9IiwiJmJhcndlZDsiOiLijIUiLCImYmFyd2VkZ2U7Ijoi4oyFIiwiJmJicms7Ijoi4o61IiwiJmJicmt0YnJrOyI6IuKOtiIsIiZiY29uZzsiOiLiiYwiLCImYmN5OyI6ItCxIiwiJmJkcXVvOyI6IuKAniIsIiZiZWNhdXM7Ijoi4oi1IiwiJmJlY2F1c2U7Ijoi4oi1IiwiJmJlbXB0eXY7Ijoi4qawIiwiJmJlcHNpOyI6Is+2IiwiJmJlcm5vdTsiOiLihKwiLCImYmV0YTsiOiLOsiIsIiZiZXRoOyI6IuKEtiIsIiZiZXR3ZWVuOyI6IuKJrCIsIiZiZnI7Ijoi8J2UnyIsIiZiaWdjYXA7Ijoi4ouCIiwiJmJpZ2NpcmM7Ijoi4pevIiwiJmJpZ2N1cDsiOiLii4MiLCImYmlnb2RvdDsiOiLiqIAiLCImYmlnb3BsdXM7Ijoi4qiBIiwiJmJpZ290aW1lczsiOiLiqIIiLCImYmlnc3FjdXA7Ijoi4qiGIiwiJmJpZ3N0YXI7Ijoi4piFIiwiJmJpZ3RyaWFuZ2xlZG93bjsiOiLilr0iLCImYmlndHJpYW5nbGV1cDsiOiLilrMiLCImYmlndXBsdXM7Ijoi4qiEIiwiJmJpZ3ZlZTsiOiLii4EiLCImYmlnd2VkZ2U7Ijoi4ouAIiwiJmJrYXJvdzsiOiLipI0iLCImYmxhY2tsb3plbmdlOyI6IuKnqyIsIiZibGFja3NxdWFyZTsiOiLilqoiLCImYmxhY2t0cmlhbmdsZTsiOiLilrQiLCImYmxhY2t0cmlhbmdsZWRvd247Ijoi4pa+IiwiJmJsYWNrdHJpYW5nbGVsZWZ0OyI6IuKXgiIsIiZibGFja3RyaWFuZ2xlcmlnaHQ7Ijoi4pa4IiwiJmJsYW5rOyI6IuKQoyIsIiZibGsxMjsiOiLilpIiLCImYmxrMTQ7Ijoi4paRIiwiJmJsazM0OyI6IuKWkyIsIiZibG9jazsiOiLilogiLCImYm5lOyI6Ij3ig6UiLCImYm5lcXVpdjsiOiLiiaHig6UiLCImYm5vdDsiOiLijJAiLCImYm9wZjsiOiLwnZWTIiwiJmJvdDsiOiLiiqUiLCImYm90dG9tOyI6IuKKpSIsIiZib3d0aWU7Ijoi4ouIIiwiJmJveERMOyI6IuKVlyIsIiZib3hEUjsiOiLilZQiLCImYm94RGw7Ijoi4pWWIiwiJmJveERyOyI6IuKVkyIsIiZib3hIOyI6IuKVkCIsIiZib3hIRDsiOiLilaYiLCImYm94SFU7Ijoi4pWpIiwiJmJveEhkOyI6IuKVpCIsIiZib3hIdTsiOiLilaciLCImYm94VUw7Ijoi4pWdIiwiJmJveFVSOyI6IuKVmiIsIiZib3hVbDsiOiLilZwiLCImYm94VXI7Ijoi4pWZIiwiJmJveFY7Ijoi4pWRIiwiJmJveFZIOyI6IuKVrCIsIiZib3hWTDsiOiLilaMiLCImYm94VlI7Ijoi4pWgIiwiJmJveFZoOyI6IuKVqyIsIiZib3hWbDsiOiLilaIiLCImYm94VnI7Ijoi4pWfIiwiJmJveGJveDsiOiLip4kiLCImYm94ZEw7Ijoi4pWVIiwiJmJveGRSOyI6IuKVkiIsIiZib3hkbDsiOiLilJAiLCImYm94ZHI7Ijoi4pSMIiwiJmJveGg7Ijoi4pSAIiwiJmJveGhEOyI6IuKVpSIsIiZib3hoVTsiOiLilagiLCImYm94aGQ7Ijoi4pSsIiwiJmJveGh1OyI6IuKUtCIsIiZib3htaW51czsiOiLiip8iLCImYm94cGx1czsiOiLiip4iLCImYm94dGltZXM7Ijoi4oqgIiwiJmJveHVMOyI6IuKVmyIsIiZib3h1UjsiOiLilZgiLCImYm94dWw7Ijoi4pSYIiwiJmJveHVyOyI6IuKUlCIsIiZib3h2OyI6IuKUgiIsIiZib3h2SDsiOiLilaoiLCImYm94dkw7Ijoi4pWhIiwiJmJveHZSOyI6IuKVniIsIiZib3h2aDsiOiLilLwiLCImYm94dmw7Ijoi4pSkIiwiJmJveHZyOyI6IuKUnCIsIiZicHJpbWU7Ijoi4oC1IiwiJmJyZXZlOyI6IsuYIiwiJmJydmJhciI6IsKmIiwiJmJydmJhcjsiOiLCpiIsIiZic2NyOyI6IvCdkrciLCImYnNlbWk7Ijoi4oGPIiwiJmJzaW07Ijoi4oi9IiwiJmJzaW1lOyI6IuKLjSIsIiZic29sOyI6IlxcIiwiJmJzb2xiOyI6IuKnhSIsIiZic29saHN1YjsiOiLin4giLCImYnVsbDsiOiLigKIiLCImYnVsbGV0OyI6IuKAoiIsIiZidW1wOyI6IuKJjiIsIiZidW1wRTsiOiLiqq4iLCImYnVtcGU7Ijoi4omPIiwiJmJ1bXBlcTsiOiLiiY8iLCImY2FjdXRlOyI6IsSHIiwiJmNhcDsiOiLiiKkiLCImY2FwYW5kOyI6IuKphCIsIiZjYXBicmN1cDsiOiLiqYkiLCImY2FwY2FwOyI6IuKpiyIsIiZjYXBjdXA7Ijoi4qmHIiwiJmNhcGRvdDsiOiLiqYAiLCImY2FwczsiOiLiiKnvuIAiLCImY2FyZXQ7Ijoi4oGBIiwiJmNhcm9uOyI6IsuHIiwiJmNjYXBzOyI6IuKpjSIsIiZjY2Fyb247IjoixI0iLCImY2NlZGlsIjoiw6ciLCImY2NlZGlsOyI6IsOnIiwiJmNjaXJjOyI6IsSJIiwiJmNjdXBzOyI6IuKpjCIsIiZjY3Vwc3NtOyI6IuKpkCIsIiZjZG90OyI6IsSLIiwiJmNlZGlsIjoiwrgiLCImY2VkaWw7IjoiwrgiLCImY2VtcHR5djsiOiLiprIiLCImY2VudCI6IsKiIiwiJmNlbnQ7IjoiwqIiLCImY2VudGVyZG90OyI6IsK3IiwiJmNmcjsiOiLwnZSgIiwiJmNoY3k7Ijoi0YciLCImY2hlY2s7Ijoi4pyTIiwiJmNoZWNrbWFyazsiOiLinJMiLCImY2hpOyI6Is+HIiwiJmNpcjsiOiLil4siLCImY2lyRTsiOiLip4MiLCImY2lyYzsiOiLLhiIsIiZjaXJjZXE7Ijoi4omXIiwiJmNpcmNsZWFycm93bGVmdDsiOiLihroiLCImY2lyY2xlYXJyb3dyaWdodDsiOiLihrsiLCImY2lyY2xlZFI7Ijoiwq4iLCImY2lyY2xlZFM7Ijoi4pOIIiwiJmNpcmNsZWRhc3Q7Ijoi4oqbIiwiJmNpcmNsZWRjaXJjOyI6IuKKmiIsIiZjaXJjbGVkZGFzaDsiOiLiip0iLCImY2lyZTsiOiLiiZciLCImY2lyZm5pbnQ7Ijoi4qiQIiwiJmNpcm1pZDsiOiLiq68iLCImY2lyc2NpcjsiOiLip4IiLCImY2x1YnM7Ijoi4pmjIiwiJmNsdWJzdWl0OyI6IuKZoyIsIiZjb2xvbjsiOiI6IiwiJmNvbG9uZTsiOiLiiZQiLCImY29sb25lcTsiOiLiiZQiLCImY29tbWE7IjoiLCIsIiZjb21tYXQ7IjoiQCIsIiZjb21wOyI6IuKIgSIsIiZjb21wZm47Ijoi4oiYIiwiJmNvbXBsZW1lbnQ7Ijoi4oiBIiwiJmNvbXBsZXhlczsiOiLihIIiLCImY29uZzsiOiLiiYUiLCImY29uZ2RvdDsiOiLiqa0iLCImY29uaW50OyI6IuKIriIsIiZjb3BmOyI6IvCdlZQiLCImY29wcm9kOyI6IuKIkCIsIiZjb3B5IjoiwqkiLCImY29weTsiOiLCqSIsIiZjb3B5c3I7Ijoi4oSXIiwiJmNyYXJyOyI6IuKGtSIsIiZjcm9zczsiOiLinJciLCImY3NjcjsiOiLwnZK4IiwiJmNzdWI7Ijoi4quPIiwiJmNzdWJlOyI6IuKrkSIsIiZjc3VwOyI6IuKrkCIsIiZjc3VwZTsiOiLiq5IiLCImY3Rkb3Q7Ijoi4ouvIiwiJmN1ZGFycmw7Ijoi4qS4IiwiJmN1ZGFycnI7Ijoi4qS1IiwiJmN1ZXByOyI6IuKLniIsIiZjdWVzYzsiOiLii58iLCImY3VsYXJyOyI6IuKGtiIsIiZjdWxhcnJwOyI6IuKkvSIsIiZjdXA7Ijoi4oiqIiwiJmN1cGJyY2FwOyI6IuKpiCIsIiZjdXBjYXA7Ijoi4qmGIiwiJmN1cGN1cDsiOiLiqYoiLCImY3VwZG90OyI6IuKKjSIsIiZjdXBvcjsiOiLiqYUiLCImY3VwczsiOiLiiKrvuIAiLCImY3VyYXJyOyI6IuKGtyIsIiZjdXJhcnJtOyI6IuKkvCIsIiZjdXJseWVxcHJlYzsiOiLii54iLCImY3VybHllcXN1Y2M7Ijoi4oufIiwiJmN1cmx5dmVlOyI6IuKLjiIsIiZjdXJseXdlZGdlOyI6IuKLjyIsIiZjdXJyZW4iOiLCpCIsIiZjdXJyZW47IjoiwqQiLCImY3VydmVhcnJvd2xlZnQ7Ijoi4oa2IiwiJmN1cnZlYXJyb3dyaWdodDsiOiLihrciLCImY3V2ZWU7Ijoi4ouOIiwiJmN1d2VkOyI6IuKLjyIsIiZjd2NvbmludDsiOiLiiLIiLCImY3dpbnQ7Ijoi4oixIiwiJmN5bGN0eTsiOiLijK0iLCImZEFycjsiOiLih5MiLCImZEhhcjsiOiLipaUiLCImZGFnZ2VyOyI6IuKAoCIsIiZkYWxldGg7Ijoi4oS4IiwiJmRhcnI7Ijoi4oaTIiwiJmRhc2g7Ijoi4oCQIiwiJmRhc2h2OyI6IuKKoyIsIiZkYmthcm93OyI6IuKkjyIsIiZkYmxhYzsiOiLLnSIsIiZkY2Fyb247IjoixI8iLCImZGN5OyI6ItC0IiwiJmRkOyI6IuKFhiIsIiZkZGFnZ2VyOyI6IuKAoSIsIiZkZGFycjsiOiLih4oiLCImZGRvdHNlcTsiOiLiqbciLCImZGVnIjoiwrAiLCImZGVnOyI6IsKwIiwiJmRlbHRhOyI6Is60IiwiJmRlbXB0eXY7Ijoi4qaxIiwiJmRmaXNodDsiOiLipb8iLCImZGZyOyI6IvCdlKEiLCImZGhhcmw7Ijoi4oeDIiwiJmRoYXJyOyI6IuKHgiIsIiZkaWFtOyI6IuKLhCIsIiZkaWFtb25kOyI6IuKLhCIsIiZkaWFtb25kc3VpdDsiOiLimaYiLCImZGlhbXM7Ijoi4pmmIiwiJmRpZTsiOiLCqCIsIiZkaWdhbW1hOyI6Is+dIiwiJmRpc2luOyI6IuKLsiIsIiZkaXY7Ijoiw7ciLCImZGl2aWRlIjoiw7ciLCImZGl2aWRlOyI6IsO3IiwiJmRpdmlkZW9udGltZXM7Ijoi4ouHIiwiJmRpdm9ueDsiOiLii4ciLCImZGpjeTsiOiLRkiIsIiZkbGNvcm47Ijoi4oyeIiwiJmRsY3JvcDsiOiLijI0iLCImZG9sbGFyOyI6IiQiLCImZG9wZjsiOiLwnZWVIiwiJmRvdDsiOiLLmSIsIiZkb3RlcTsiOiLiiZAiLCImZG90ZXFkb3Q7Ijoi4omRIiwiJmRvdG1pbnVzOyI6IuKIuCIsIiZkb3RwbHVzOyI6IuKIlCIsIiZkb3RzcXVhcmU7Ijoi4oqhIiwiJmRvdWJsZWJhcndlZGdlOyI6IuKMhiIsIiZkb3duYXJyb3c7Ijoi4oaTIiwiJmRvd25kb3duYXJyb3dzOyI6IuKHiiIsIiZkb3duaGFycG9vbmxlZnQ7Ijoi4oeDIiwiJmRvd25oYXJwb29ucmlnaHQ7Ijoi4oeCIiwiJmRyYmthcm93OyI6IuKkkCIsIiZkcmNvcm47Ijoi4oyfIiwiJmRyY3JvcDsiOiLijIwiLCImZHNjcjsiOiLwnZK5IiwiJmRzY3k7Ijoi0ZUiLCImZHNvbDsiOiLip7YiLCImZHN0cm9rOyI6IsSRIiwiJmR0ZG90OyI6IuKLsSIsIiZkdHJpOyI6IuKWvyIsIiZkdHJpZjsiOiLilr4iLCImZHVhcnI7Ijoi4oe1IiwiJmR1aGFyOyI6IuKlryIsIiZkd2FuZ2xlOyI6IuKmpiIsIiZkemN5OyI6ItGfIiwiJmR6aWdyYXJyOyI6IuKfvyIsIiZlRERvdDsiOiLiqbciLCImZURvdDsiOiLiiZEiLCImZWFjdXRlIjoiw6kiLCImZWFjdXRlOyI6IsOpIiwiJmVhc3RlcjsiOiLiqa4iLCImZWNhcm9uOyI6IsSbIiwiJmVjaXI7Ijoi4omWIiwiJmVjaXJjIjoiw6oiLCImZWNpcmM7Ijoiw6oiLCImZWNvbG9uOyI6IuKJlSIsIiZlY3k7Ijoi0Y0iLCImZWRvdDsiOiLElyIsIiZlZTsiOiLihYciLCImZWZEb3Q7Ijoi4omSIiwiJmVmcjsiOiLwnZSiIiwiJmVnOyI6IuKqmiIsIiZlZ3JhdmUiOiLDqCIsIiZlZ3JhdmU7Ijoiw6giLCImZWdzOyI6IuKqliIsIiZlZ3Nkb3Q7Ijoi4qqYIiwiJmVsOyI6IuKqmSIsIiZlbGludGVyczsiOiLij6ciLCImZWxsOyI6IuKEkyIsIiZlbHM7Ijoi4qqVIiwiJmVsc2RvdDsiOiLiqpciLCImZW1hY3I7IjoixJMiLCImZW1wdHk7Ijoi4oiFIiwiJmVtcHR5c2V0OyI6IuKIhSIsIiZlbXB0eXY7Ijoi4oiFIiwiJmVtc3AxMzsiOiLigIQiLCImZW1zcDE0OyI6IuKAhSIsIiZlbXNwOyI6IuKAgyIsIiZlbmc7IjoixYsiLCImZW5zcDsiOiLigIIiLCImZW9nb247IjoixJkiLCImZW9wZjsiOiLwnZWWIiwiJmVwYXI7Ijoi4ouVIiwiJmVwYXJzbDsiOiLip6MiLCImZXBsdXM7Ijoi4qmxIiwiJmVwc2k7IjoizrUiLCImZXBzaWxvbjsiOiLOtSIsIiZlcHNpdjsiOiLPtSIsIiZlcWNpcmM7Ijoi4omWIiwiJmVxY29sb247Ijoi4omVIiwiJmVxc2ltOyI6IuKJgiIsIiZlcXNsYW50Z3RyOyI6IuKqliIsIiZlcXNsYW50bGVzczsiOiLiqpUiLCImZXF1YWxzOyI6Ij0iLCImZXF1ZXN0OyI6IuKJnyIsIiZlcXVpdjsiOiLiiaEiLCImZXF1aXZERDsiOiLiqbgiLCImZXF2cGFyc2w7Ijoi4qelIiwiJmVyRG90OyI6IuKJkyIsIiZlcmFycjsiOiLipbEiLCImZXNjcjsiOiLihK8iLCImZXNkb3Q7Ijoi4omQIiwiJmVzaW07Ijoi4omCIiwiJmV0YTsiOiLOtyIsIiZldGgiOiLDsCIsIiZldGg7Ijoiw7AiLCImZXVtbCI6IsOrIiwiJmV1bWw7Ijoiw6siLCImZXVybzsiOiLigqwiLCImZXhjbDsiOiIhIiwiJmV4aXN0OyI6IuKIgyIsIiZleHBlY3RhdGlvbjsiOiLihLAiLCImZXhwb25lbnRpYWxlOyI6IuKFhyIsIiZmYWxsaW5nZG90c2VxOyI6IuKJkiIsIiZmY3k7Ijoi0YQiLCImZmVtYWxlOyI6IuKZgCIsIiZmZmlsaWc7Ijoi76yDIiwiJmZmbGlnOyI6Iu+sgCIsIiZmZmxsaWc7Ijoi76yEIiwiJmZmcjsiOiLwnZSjIiwiJmZpbGlnOyI6Iu+sgSIsIiZmamxpZzsiOiJmaiIsIiZmbGF0OyI6IuKZrSIsIiZmbGxpZzsiOiLvrIIiLCImZmx0bnM7Ijoi4paxIiwiJmZub2Y7IjoixpIiLCImZm9wZjsiOiLwnZWXIiwiJmZvcmFsbDsiOiLiiIAiLCImZm9yazsiOiLii5QiLCImZm9ya3Y7Ijoi4quZIiwiJmZwYXJ0aW50OyI6IuKojSIsIiZmcmFjMTIiOiLCvSIsIiZmcmFjMTI7Ijoiwr0iLCImZnJhYzEzOyI6IuKFkyIsIiZmcmFjMTQiOiLCvCIsIiZmcmFjMTQ7IjoiwrwiLCImZnJhYzE1OyI6IuKFlSIsIiZmcmFjMTY7Ijoi4oWZIiwiJmZyYWMxODsiOiLihZsiLCImZnJhYzIzOyI6IuKFlCIsIiZmcmFjMjU7Ijoi4oWWIiwiJmZyYWMzNCI6IsK+IiwiJmZyYWMzNDsiOiLCviIsIiZmcmFjMzU7Ijoi4oWXIiwiJmZyYWMzODsiOiLihZwiLCImZnJhYzQ1OyI6IuKFmCIsIiZmcmFjNTY7Ijoi4oWaIiwiJmZyYWM1ODsiOiLihZ0iLCImZnJhYzc4OyI6IuKFniIsIiZmcmFzbDsiOiLigYQiLCImZnJvd247Ijoi4oyiIiwiJmZzY3I7Ijoi8J2SuyIsIiZnRTsiOiLiiaciLCImZ0VsOyI6IuKqjCIsIiZnYWN1dGU7Ijoix7UiLCImZ2FtbWE7IjoizrMiLCImZ2FtbWFkOyI6Is+dIiwiJmdhcDsiOiLiqoYiLCImZ2JyZXZlOyI6IsSfIiwiJmdjaXJjOyI6IsSdIiwiJmdjeTsiOiLQsyIsIiZnZG90OyI6IsShIiwiJmdlOyI6IuKJpSIsIiZnZWw7Ijoi4oubIiwiJmdlcTsiOiLiiaUiLCImZ2VxcTsiOiLiiaciLCImZ2Vxc2xhbnQ7Ijoi4qm+IiwiJmdlczsiOiLiqb4iLCImZ2VzY2M7Ijoi4qqpIiwiJmdlc2RvdDsiOiLiqoAiLCImZ2VzZG90bzsiOiLiqoIiLCImZ2VzZG90b2w7Ijoi4qqEIiwiJmdlc2w7Ijoi4oub77iAIiwiJmdlc2xlczsiOiLiqpQiLCImZ2ZyOyI6IvCdlKQiLCImZ2c7Ijoi4omrIiwiJmdnZzsiOiLii5kiLCImZ2ltZWw7Ijoi4oS3IiwiJmdqY3k7Ijoi0ZMiLCImZ2w7Ijoi4om3IiwiJmdsRTsiOiLiqpIiLCImZ2xhOyI6IuKqpSIsIiZnbGo7Ijoi4qqkIiwiJmduRTsiOiLiiakiLCImZ25hcDsiOiLiqooiLCImZ25hcHByb3g7Ijoi4qqKIiwiJmduZTsiOiLiqogiLCImZ25lcTsiOiLiqogiLCImZ25lcXE7Ijoi4ompIiwiJmduc2ltOyI6IuKLpyIsIiZnb3BmOyI6IvCdlZgiLCImZ3JhdmU7IjoiYCIsIiZnc2NyOyI6IuKEiiIsIiZnc2ltOyI6IuKJsyIsIiZnc2ltZTsiOiLiqo4iLCImZ3NpbWw7Ijoi4qqQIiwiJmd0IjoiPiIsIiZndDsiOiI+IiwiJmd0Y2M7Ijoi4qqnIiwiJmd0Y2lyOyI6IuKpuiIsIiZndGRvdDsiOiLii5ciLCImZ3RsUGFyOyI6IuKmlSIsIiZndHF1ZXN0OyI6IuKpvCIsIiZndHJhcHByb3g7Ijoi4qqGIiwiJmd0cmFycjsiOiLipbgiLCImZ3RyZG90OyI6IuKLlyIsIiZndHJlcWxlc3M7Ijoi4oubIiwiJmd0cmVxcWxlc3M7Ijoi4qqMIiwiJmd0cmxlc3M7Ijoi4om3IiwiJmd0cnNpbTsiOiLiibMiLCImZ3ZlcnRuZXFxOyI6IuKJqe+4gCIsIiZndm5FOyI6IuKJqe+4gCIsIiZoQXJyOyI6IuKHlCIsIiZoYWlyc3A7Ijoi4oCKIiwiJmhhbGY7Ijoiwr0iLCImaGFtaWx0OyI6IuKEiyIsIiZoYXJkY3k7Ijoi0YoiLCImaGFycjsiOiLihpQiLCImaGFycmNpcjsiOiLipYgiLCImaGFycnc7Ijoi4oatIiwiJmhiYXI7Ijoi4oSPIiwiJmhjaXJjOyI6IsSlIiwiJmhlYXJ0czsiOiLimaUiLCImaGVhcnRzdWl0OyI6IuKZpSIsIiZoZWxsaXA7Ijoi4oCmIiwiJmhlcmNvbjsiOiLiirkiLCImaGZyOyI6IvCdlKUiLCImaGtzZWFyb3c7Ijoi4qSlIiwiJmhrc3dhcm93OyI6IuKkpiIsIiZob2FycjsiOiLih78iLCImaG9tdGh0OyI6IuKIuyIsIiZob29rbGVmdGFycm93OyI6IuKGqSIsIiZob29rcmlnaHRhcnJvdzsiOiLihqoiLCImaG9wZjsiOiLwnZWZIiwiJmhvcmJhcjsiOiLigJUiLCImaHNjcjsiOiLwnZK9IiwiJmhzbGFzaDsiOiLihI8iLCImaHN0cm9rOyI6IsSnIiwiJmh5YnVsbDsiOiLigYMiLCImaHlwaGVuOyI6IuKAkCIsIiZpYWN1dGUiOiLDrSIsIiZpYWN1dGU7Ijoiw60iLCImaWM7Ijoi4oGjIiwiJmljaXJjIjoiw64iLCImaWNpcmM7Ijoiw64iLCImaWN5OyI6ItC4IiwiJmllY3k7Ijoi0LUiLCImaWV4Y2wiOiLCoSIsIiZpZXhjbDsiOiLCoSIsIiZpZmY7Ijoi4oeUIiwiJmlmcjsiOiLwnZSmIiwiJmlncmF2ZSI6IsOsIiwiJmlncmF2ZTsiOiLDrCIsIiZpaTsiOiLihYgiLCImaWlpaW50OyI6IuKojCIsIiZpaWludDsiOiLiiK0iLCImaWluZmluOyI6IuKnnCIsIiZpaW90YTsiOiLihKkiLCImaWpsaWc7IjoixLMiLCImaW1hY3I7IjoixKsiLCImaW1hZ2U7Ijoi4oSRIiwiJmltYWdsaW5lOyI6IuKEkCIsIiZpbWFncGFydDsiOiLihJEiLCImaW1hdGg7IjoixLEiLCImaW1vZjsiOiLiirciLCImaW1wZWQ7IjoixrUiLCImaW47Ijoi4oiIIiwiJmluY2FyZTsiOiLihIUiLCImaW5maW47Ijoi4oieIiwiJmluZmludGllOyI6IuKnnSIsIiZpbm9kb3Q7IjoixLEiLCImaW50OyI6IuKIqyIsIiZpbnRjYWw7Ijoi4oq6IiwiJmludGVnZXJzOyI6IuKEpCIsIiZpbnRlcmNhbDsiOiLiiroiLCImaW50bGFyaGs7Ijoi4qiXIiwiJmludHByb2Q7Ijoi4qi8IiwiJmlvY3k7Ijoi0ZEiLCImaW9nb247IjoixK8iLCImaW9wZjsiOiLwnZWaIiwiJmlvdGE7IjoizrkiLCImaXByb2Q7Ijoi4qi8IiwiJmlxdWVzdCI6IsK/IiwiJmlxdWVzdDsiOiLCvyIsIiZpc2NyOyI6IvCdkr4iLCImaXNpbjsiOiLiiIgiLCImaXNpbkU7Ijoi4ou5IiwiJmlzaW5kb3Q7Ijoi4ou1IiwiJmlzaW5zOyI6IuKLtCIsIiZpc2luc3Y7Ijoi4ouzIiwiJmlzaW52OyI6IuKIiCIsIiZpdDsiOiLigaIiLCImaXRpbGRlOyI6IsSpIiwiJml1a2N5OyI6ItGWIiwiJml1bWwiOiLDryIsIiZpdW1sOyI6IsOvIiwiJmpjaXJjOyI6IsS1IiwiJmpjeTsiOiLQuSIsIiZqZnI7Ijoi8J2UpyIsIiZqbWF0aDsiOiLItyIsIiZqb3BmOyI6IvCdlZsiLCImanNjcjsiOiLwnZK/IiwiJmpzZXJjeTsiOiLRmCIsIiZqdWtjeTsiOiLRlCIsIiZrYXBwYTsiOiLOuiIsIiZrYXBwYXY7Ijoiz7AiLCIma2NlZGlsOyI6IsS3IiwiJmtjeTsiOiLQuiIsIiZrZnI7Ijoi8J2UqCIsIiZrZ3JlZW47IjoixLgiLCIma2hjeTsiOiLRhSIsIiZramN5OyI6ItGcIiwiJmtvcGY7Ijoi8J2VnCIsIiZrc2NyOyI6IvCdk4AiLCImbEFhcnI7Ijoi4oeaIiwiJmxBcnI7Ijoi4oeQIiwiJmxBdGFpbDsiOiLipJsiLCImbEJhcnI7Ijoi4qSOIiwiJmxFOyI6IuKJpiIsIiZsRWc7Ijoi4qqLIiwiJmxIYXI7Ijoi4qWiIiwiJmxhY3V0ZTsiOiLEuiIsIiZsYWVtcHR5djsiOiLiprQiLCImbGFncmFuOyI6IuKEkiIsIiZsYW1iZGE7IjoizrsiLCImbGFuZzsiOiLin6giLCImbGFuZ2Q7Ijoi4qaRIiwiJmxhbmdsZTsiOiLin6giLCImbGFwOyI6IuKqhSIsIiZsYXF1byI6IsKrIiwiJmxhcXVvOyI6IsKrIiwiJmxhcnI7Ijoi4oaQIiwiJmxhcnJiOyI6IuKHpCIsIiZsYXJyYmZzOyI6IuKknyIsIiZsYXJyZnM7Ijoi4qSdIiwiJmxhcnJoazsiOiLihqkiLCImbGFycmxwOyI6IuKGqyIsIiZsYXJycGw7Ijoi4qS5IiwiJmxhcnJzaW07Ijoi4qWzIiwiJmxhcnJ0bDsiOiLihqIiLCImbGF0OyI6IuKqqyIsIiZsYXRhaWw7Ijoi4qSZIiwiJmxhdGU7Ijoi4qqtIiwiJmxhdGVzOyI6IuKqre+4gCIsIiZsYmFycjsiOiLipIwiLCImbGJicms7Ijoi4p2yIiwiJmxicmFjZTsiOiJ7IiwiJmxicmFjazsiOiJbIiwiJmxicmtlOyI6IuKmiyIsIiZsYnJrc2xkOyI6IuKmjyIsIiZsYnJrc2x1OyI6IuKmjSIsIiZsY2Fyb247IjoixL4iLCImbGNlZGlsOyI6IsS8IiwiJmxjZWlsOyI6IuKMiCIsIiZsY3ViOyI6InsiLCImbGN5OyI6ItC7IiwiJmxkY2E7Ijoi4qS2IiwiJmxkcXVvOyI6IuKAnCIsIiZsZHF1b3I7Ijoi4oCeIiwiJmxkcmRoYXI7Ijoi4qWnIiwiJmxkcnVzaGFyOyI6IuKliyIsIiZsZHNoOyI6IuKGsiIsIiZsZTsiOiLiiaQiLCImbGVmdGFycm93OyI6IuKGkCIsIiZsZWZ0YXJyb3d0YWlsOyI6IuKGoiIsIiZsZWZ0aGFycG9vbmRvd247Ijoi4oa9IiwiJmxlZnRoYXJwb29udXA7Ijoi4oa8IiwiJmxlZnRsZWZ0YXJyb3dzOyI6IuKHhyIsIiZsZWZ0cmlnaHRhcnJvdzsiOiLihpQiLCImbGVmdHJpZ2h0YXJyb3dzOyI6IuKHhiIsIiZsZWZ0cmlnaHRoYXJwb29uczsiOiLih4siLCImbGVmdHJpZ2h0c3F1aWdhcnJvdzsiOiLihq0iLCImbGVmdHRocmVldGltZXM7Ijoi4ouLIiwiJmxlZzsiOiLii5oiLCImbGVxOyI6IuKJpCIsIiZsZXFxOyI6IuKJpiIsIiZsZXFzbGFudDsiOiLiqb0iLCImbGVzOyI6IuKpvSIsIiZsZXNjYzsiOiLiqqgiLCImbGVzZG90OyI6IuKpvyIsIiZsZXNkb3RvOyI6IuKqgSIsIiZsZXNkb3RvcjsiOiLiqoMiLCImbGVzZzsiOiLii5rvuIAiLCImbGVzZ2VzOyI6IuKqkyIsIiZsZXNzYXBwcm94OyI6IuKqhSIsIiZsZXNzZG90OyI6IuKLliIsIiZsZXNzZXFndHI7Ijoi4ouaIiwiJmxlc3NlcXFndHI7Ijoi4qqLIiwiJmxlc3NndHI7Ijoi4om2IiwiJmxlc3NzaW07Ijoi4omyIiwiJmxmaXNodDsiOiLipbwiLCImbGZsb29yOyI6IuKMiiIsIiZsZnI7Ijoi8J2UqSIsIiZsZzsiOiLiibYiLCImbGdFOyI6IuKqkSIsIiZsaGFyZDsiOiLihr0iLCImbGhhcnU7Ijoi4oa8IiwiJmxoYXJ1bDsiOiLipaoiLCImbGhibGs7Ijoi4paEIiwiJmxqY3k7Ijoi0ZkiLCImbGw7Ijoi4omqIiwiJmxsYXJyOyI6IuKHhyIsIiZsbGNvcm5lcjsiOiLijJ4iLCImbGxoYXJkOyI6IuKlqyIsIiZsbHRyaTsiOiLil7oiLCImbG1pZG90OyI6IsWAIiwiJmxtb3VzdDsiOiLijrAiLCImbG1vdXN0YWNoZTsiOiLijrAiLCImbG5FOyI6IuKJqCIsIiZsbmFwOyI6IuKqiSIsIiZsbmFwcHJveDsiOiLiqokiLCImbG5lOyI6IuKqhyIsIiZsbmVxOyI6IuKqhyIsIiZsbmVxcTsiOiLiiagiLCImbG5zaW07Ijoi4oumIiwiJmxvYW5nOyI6IuKfrCIsIiZsb2FycjsiOiLih70iLCImbG9icms7Ijoi4p+mIiwiJmxvbmdsZWZ0YXJyb3c7Ijoi4p+1IiwiJmxvbmdsZWZ0cmlnaHRhcnJvdzsiOiLin7ciLCImbG9uZ21hcHN0bzsiOiLin7wiLCImbG9uZ3JpZ2h0YXJyb3c7Ijoi4p+2IiwiJmxvb3BhcnJvd2xlZnQ7Ijoi4oarIiwiJmxvb3BhcnJvd3JpZ2h0OyI6IuKGrCIsIiZsb3BhcjsiOiLipoUiLCImbG9wZjsiOiLwnZWdIiwiJmxvcGx1czsiOiLiqK0iLCImbG90aW1lczsiOiLiqLQiLCImbG93YXN0OyI6IuKIlyIsIiZsb3diYXI7IjoiXyIsIiZsb3o7Ijoi4peKIiwiJmxvemVuZ2U7Ijoi4peKIiwiJmxvemY7Ijoi4qerIiwiJmxwYXI7IjoiKCIsIiZscGFybHQ7Ijoi4qaTIiwiJmxyYXJyOyI6IuKHhiIsIiZscmNvcm5lcjsiOiLijJ8iLCImbHJoYXI7Ijoi4oeLIiwiJmxyaGFyZDsiOiLipa0iLCImbHJtOyI6IuKAjiIsIiZscnRyaTsiOiLiir8iLCImbHNhcXVvOyI6IuKAuSIsIiZsc2NyOyI6IvCdk4EiLCImbHNoOyI6IuKGsCIsIiZsc2ltOyI6IuKJsiIsIiZsc2ltZTsiOiLiqo0iLCImbHNpbWc7Ijoi4qqPIiwiJmxzcWI7IjoiWyIsIiZsc3F1bzsiOiLigJgiLCImbHNxdW9yOyI6IuKAmiIsIiZsc3Ryb2s7IjoixYIiLCImbHQiOiI8IiwiJmx0OyI6IjwiLCImbHRjYzsiOiLiqqYiLCImbHRjaXI7Ijoi4qm5IiwiJmx0ZG90OyI6IuKLliIsIiZsdGhyZWU7Ijoi4ouLIiwiJmx0aW1lczsiOiLii4kiLCImbHRsYXJyOyI6IuKltiIsIiZsdHF1ZXN0OyI6IuKpuyIsIiZsdHJQYXI7Ijoi4qaWIiwiJmx0cmk7Ijoi4peDIiwiJmx0cmllOyI6IuKKtCIsIiZsdHJpZjsiOiLil4IiLCImbHVyZHNoYXI7Ijoi4qWKIiwiJmx1cnVoYXI7Ijoi4qWmIiwiJmx2ZXJ0bmVxcTsiOiLiiajvuIAiLCImbHZuRTsiOiLiiajvuIAiLCImbUREb3Q7Ijoi4oi6IiwiJm1hY3IiOiLCryIsIiZtYWNyOyI6IsKvIiwiJm1hbGU7Ijoi4pmCIiwiJm1hbHQ7Ijoi4pygIiwiJm1hbHRlc2U7Ijoi4pygIiwiJm1hcDsiOiLihqYiLCImbWFwc3RvOyI6IuKGpiIsIiZtYXBzdG9kb3duOyI6IuKGpyIsIiZtYXBzdG9sZWZ0OyI6IuKGpCIsIiZtYXBzdG91cDsiOiLihqUiLCImbWFya2VyOyI6IuKWriIsIiZtY29tbWE7Ijoi4qipIiwiJm1jeTsiOiLQvCIsIiZtZGFzaDsiOiLigJQiLCImbWVhc3VyZWRhbmdsZTsiOiLiiKEiLCImbWZyOyI6IvCdlKoiLCImbWhvOyI6IuKEpyIsIiZtaWNybyI6IsK1IiwiJm1pY3JvOyI6IsK1IiwiJm1pZDsiOiLiiKMiLCImbWlkYXN0OyI6IioiLCImbWlkY2lyOyI6IuKrsCIsIiZtaWRkb3QiOiLCtyIsIiZtaWRkb3Q7IjoiwrciLCImbWludXM7Ijoi4oiSIiwiJm1pbnVzYjsiOiLiip8iLCImbWludXNkOyI6IuKIuCIsIiZtaW51c2R1OyI6IuKoqiIsIiZtbGNwOyI6IuKrmyIsIiZtbGRyOyI6IuKApiIsIiZtbnBsdXM7Ijoi4oiTIiwiJm1vZGVsczsiOiLiiqciLCImbW9wZjsiOiLwnZWeIiwiJm1wOyI6IuKIkyIsIiZtc2NyOyI6IvCdk4IiLCImbXN0cG9zOyI6IuKIviIsIiZtdTsiOiLOvCIsIiZtdWx0aW1hcDsiOiLiirgiLCImbXVtYXA7Ijoi4oq4IiwiJm5HZzsiOiLii5nMuCIsIiZuR3Q7Ijoi4omr4oOSIiwiJm5HdHY7Ijoi4omrzLgiLCImbkxlZnRhcnJvdzsiOiLih40iLCImbkxlZnRyaWdodGFycm93OyI6IuKHjiIsIiZuTGw7Ijoi4ouYzLgiLCImbkx0OyI6IuKJquKDkiIsIiZuTHR2OyI6IuKJqsy4IiwiJm5SaWdodGFycm93OyI6IuKHjyIsIiZuVkRhc2g7Ijoi4oqvIiwiJm5WZGFzaDsiOiLiiq4iLCImbmFibGE7Ijoi4oiHIiwiJm5hY3V0ZTsiOiLFhCIsIiZuYW5nOyI6IuKIoOKDkiIsIiZuYXA7Ijoi4omJIiwiJm5hcEU7Ijoi4qmwzLgiLCImbmFwaWQ7Ijoi4omLzLgiLCImbmFwb3M7IjoixYkiLCImbmFwcHJveDsiOiLiiYkiLCImbmF0dXI7Ijoi4pmuIiwiJm5hdHVyYWw7Ijoi4pmuIiwiJm5hdHVyYWxzOyI6IuKElSIsIiZuYnNwIjoiwqAiLCImbmJzcDsiOiLCoCIsIiZuYnVtcDsiOiLiiY7MuCIsIiZuYnVtcGU7Ijoi4omPzLgiLCImbmNhcDsiOiLiqYMiLCImbmNhcm9uOyI6IsWIIiwiJm5jZWRpbDsiOiLFhiIsIiZuY29uZzsiOiLiiYciLCImbmNvbmdkb3Q7Ijoi4qmtzLgiLCImbmN1cDsiOiLiqYIiLCImbmN5OyI6ItC9IiwiJm5kYXNoOyI6IuKAkyIsIiZuZTsiOiLiiaAiLCImbmVBcnI7Ijoi4oeXIiwiJm5lYXJoazsiOiLipKQiLCImbmVhcnI7Ijoi4oaXIiwiJm5lYXJyb3c7Ijoi4oaXIiwiJm5lZG90OyI6IuKJkMy4IiwiJm5lcXVpdjsiOiLiiaIiLCImbmVzZWFyOyI6IuKkqCIsIiZuZXNpbTsiOiLiiYLMuCIsIiZuZXhpc3Q7Ijoi4oiEIiwiJm5leGlzdHM7Ijoi4oiEIiwiJm5mcjsiOiLwnZSrIiwiJm5nRTsiOiLiiafMuCIsIiZuZ2U7Ijoi4omxIiwiJm5nZXE7Ijoi4omxIiwiJm5nZXFxOyI6IuKJp8y4IiwiJm5nZXFzbGFudDsiOiLiqb7MuCIsIiZuZ2VzOyI6IuKpvsy4IiwiJm5nc2ltOyI6IuKJtSIsIiZuZ3Q7Ijoi4omvIiwiJm5ndHI7Ijoi4omvIiwiJm5oQXJyOyI6IuKHjiIsIiZuaGFycjsiOiLihq4iLCImbmhwYXI7Ijoi4quyIiwiJm5pOyI6IuKIiyIsIiZuaXM7Ijoi4ou8IiwiJm5pc2Q7Ijoi4ou6IiwiJm5pdjsiOiLiiIsiLCImbmpjeTsiOiLRmiIsIiZubEFycjsiOiLih40iLCImbmxFOyI6IuKJpsy4IiwiJm5sYXJyOyI6IuKGmiIsIiZubGRyOyI6IuKApSIsIiZubGU7Ijoi4omwIiwiJm5sZWZ0YXJyb3c7Ijoi4oaaIiwiJm5sZWZ0cmlnaHRhcnJvdzsiOiLihq4iLCImbmxlcTsiOiLiibAiLCImbmxlcXE7Ijoi4ommzLgiLCImbmxlcXNsYW50OyI6IuKpvcy4IiwiJm5sZXM7Ijoi4qm9zLgiLCImbmxlc3M7Ijoi4omuIiwiJm5sc2ltOyI6IuKJtCIsIiZubHQ7Ijoi4omuIiwiJm5sdHJpOyI6IuKLqiIsIiZubHRyaWU7Ijoi4ousIiwiJm5taWQ7Ijoi4oikIiwiJm5vcGY7Ijoi8J2VnyIsIiZub3QiOiLCrCIsIiZub3Q7IjoiwqwiLCImbm90aW47Ijoi4oiJIiwiJm5vdGluRTsiOiLii7nMuCIsIiZub3RpbmRvdDsiOiLii7XMuCIsIiZub3RpbnZhOyI6IuKIiSIsIiZub3RpbnZiOyI6IuKLtyIsIiZub3RpbnZjOyI6IuKLtiIsIiZub3RuaTsiOiLiiIwiLCImbm90bml2YTsiOiLiiIwiLCImbm90bml2YjsiOiLii74iLCImbm90bml2YzsiOiLii70iLCImbnBhcjsiOiLiiKYiLCImbnBhcmFsbGVsOyI6IuKIpiIsIiZucGFyc2w7Ijoi4qu94oOlIiwiJm5wYXJ0OyI6IuKIgsy4IiwiJm5wb2xpbnQ7Ijoi4qiUIiwiJm5wcjsiOiLiioAiLCImbnByY3VlOyI6IuKLoCIsIiZucHJlOyI6IuKqr8y4IiwiJm5wcmVjOyI6IuKKgCIsIiZucHJlY2VxOyI6IuKqr8y4IiwiJm5yQXJyOyI6IuKHjyIsIiZucmFycjsiOiLihpsiLCImbnJhcnJjOyI6IuKks8y4IiwiJm5yYXJydzsiOiLihp3MuCIsIiZucmlnaHRhcnJvdzsiOiLihpsiLCImbnJ0cmk7Ijoi4ourIiwiJm5ydHJpZTsiOiLii60iLCImbnNjOyI6IuKKgSIsIiZuc2NjdWU7Ijoi4ouhIiwiJm5zY2U7Ijoi4qqwzLgiLCImbnNjcjsiOiLwnZODIiwiJm5zaG9ydG1pZDsiOiLiiKQiLCImbnNob3J0cGFyYWxsZWw7Ijoi4oimIiwiJm5zaW07Ijoi4omBIiwiJm5zaW1lOyI6IuKJhCIsIiZuc2ltZXE7Ijoi4omEIiwiJm5zbWlkOyI6IuKIpCIsIiZuc3BhcjsiOiLiiKYiLCImbnNxc3ViZTsiOiLii6IiLCImbnNxc3VwZTsiOiLii6MiLCImbnN1YjsiOiLiioQiLCImbnN1YkU7Ijoi4quFzLgiLCImbnN1YmU7Ijoi4oqIIiwiJm5zdWJzZXQ7Ijoi4oqC4oOSIiwiJm5zdWJzZXRlcTsiOiLiiogiLCImbnN1YnNldGVxcTsiOiLiq4XMuCIsIiZuc3VjYzsiOiLiioEiLCImbnN1Y2NlcTsiOiLiqrDMuCIsIiZuc3VwOyI6IuKKhSIsIiZuc3VwRTsiOiLiq4bMuCIsIiZuc3VwZTsiOiLiiokiLCImbnN1cHNldDsiOiLiioPig5IiLCImbnN1cHNldGVxOyI6IuKKiSIsIiZuc3Vwc2V0ZXFxOyI6IuKrhsy4IiwiJm50Z2w7Ijoi4om5IiwiJm50aWxkZSI6IsOxIiwiJm50aWxkZTsiOiLDsSIsIiZudGxnOyI6IuKJuCIsIiZudHJpYW5nbGVsZWZ0OyI6IuKLqiIsIiZudHJpYW5nbGVsZWZ0ZXE7Ijoi4ousIiwiJm50cmlhbmdsZXJpZ2h0OyI6IuKLqyIsIiZudHJpYW5nbGVyaWdodGVxOyI6IuKLrSIsIiZudTsiOiLOvSIsIiZudW07IjoiIyIsIiZudW1lcm87Ijoi4oSWIiwiJm51bXNwOyI6IuKAhyIsIiZudkRhc2g7Ijoi4oqtIiwiJm52SGFycjsiOiLipIQiLCImbnZhcDsiOiLiiY3ig5IiLCImbnZkYXNoOyI6IuKKrCIsIiZudmdlOyI6IuKJpeKDkiIsIiZudmd0OyI6Ij7ig5IiLCImbnZpbmZpbjsiOiLip54iLCImbnZsQXJyOyI6IuKkgiIsIiZudmxlOyI6IuKJpOKDkiIsIiZudmx0OyI6Ijzig5IiLCImbnZsdHJpZTsiOiLiirTig5IiLCImbnZyQXJyOyI6IuKkgyIsIiZudnJ0cmllOyI6IuKKteKDkiIsIiZudnNpbTsiOiLiiLzig5IiLCImbndBcnI7Ijoi4oeWIiwiJm53YXJoazsiOiLipKMiLCImbndhcnI7Ijoi4oaWIiwiJm53YXJyb3c7Ijoi4oaWIiwiJm53bmVhcjsiOiLipKciLCImb1M7Ijoi4pOIIiwiJm9hY3V0ZSI6IsOzIiwiJm9hY3V0ZTsiOiLDsyIsIiZvYXN0OyI6IuKKmyIsIiZvY2lyOyI6IuKKmiIsIiZvY2lyYyI6IsO0IiwiJm9jaXJjOyI6IsO0IiwiJm9jeTsiOiLQviIsIiZvZGFzaDsiOiLiip0iLCImb2RibGFjOyI6IsWRIiwiJm9kaXY7Ijoi4qi4IiwiJm9kb3Q7Ijoi4oqZIiwiJm9kc29sZDsiOiLiprwiLCImb2VsaWc7IjoixZMiLCImb2ZjaXI7Ijoi4qa/IiwiJm9mcjsiOiLwnZSsIiwiJm9nb247Ijoiy5siLCImb2dyYXZlIjoiw7IiLCImb2dyYXZlOyI6IsOyIiwiJm9ndDsiOiLip4EiLCImb2hiYXI7Ijoi4qa1IiwiJm9obTsiOiLOqSIsIiZvaW50OyI6IuKIriIsIiZvbGFycjsiOiLihroiLCImb2xjaXI7Ijoi4qa+IiwiJm9sY3Jvc3M7Ijoi4qa7IiwiJm9saW5lOyI6IuKAviIsIiZvbHQ7Ijoi4qeAIiwiJm9tYWNyOyI6IsWNIiwiJm9tZWdhOyI6Is+JIiwiJm9taWNyb247Ijoizr8iLCImb21pZDsiOiLiprYiLCImb21pbnVzOyI6IuKKliIsIiZvb3BmOyI6IvCdlaAiLCImb3BhcjsiOiLiprciLCImb3BlcnA7Ijoi4qa5IiwiJm9wbHVzOyI6IuKKlSIsIiZvcjsiOiLiiKgiLCImb3JhcnI7Ijoi4oa7IiwiJm9yZDsiOiLiqZ0iLCImb3JkZXI7Ijoi4oS0IiwiJm9yZGVyb2Y7Ijoi4oS0IiwiJm9yZGYiOiLCqiIsIiZvcmRmOyI6IsKqIiwiJm9yZG0iOiLCuiIsIiZvcmRtOyI6IsK6IiwiJm9yaWdvZjsiOiLiirYiLCImb3JvcjsiOiLiqZYiLCImb3JzbG9wZTsiOiLiqZciLCImb3J2OyI6IuKpmyIsIiZvc2NyOyI6IuKEtCIsIiZvc2xhc2giOiLDuCIsIiZvc2xhc2g7Ijoiw7giLCImb3NvbDsiOiLiipgiLCImb3RpbGRlIjoiw7UiLCImb3RpbGRlOyI6IsO1IiwiJm90aW1lczsiOiLiipciLCImb3RpbWVzYXM7Ijoi4qi2IiwiJm91bWwiOiLDtiIsIiZvdW1sOyI6IsO2IiwiJm92YmFyOyI6IuKMvSIsIiZwYXI7Ijoi4oilIiwiJnBhcmEiOiLCtiIsIiZwYXJhOyI6IsK2IiwiJnBhcmFsbGVsOyI6IuKIpSIsIiZwYXJzaW07Ijoi4quzIiwiJnBhcnNsOyI6IuKrvSIsIiZwYXJ0OyI6IuKIgiIsIiZwY3k7Ijoi0L8iLCImcGVyY250OyI6IiUiLCImcGVyaW9kOyI6Ii4iLCImcGVybWlsOyI6IuKAsCIsIiZwZXJwOyI6IuKKpSIsIiZwZXJ0ZW5rOyI6IuKAsSIsIiZwZnI7Ijoi8J2UrSIsIiZwaGk7Ijoiz4YiLCImcGhpdjsiOiLPlSIsIiZwaG1tYXQ7Ijoi4oSzIiwiJnBob25lOyI6IuKYjiIsIiZwaTsiOiLPgCIsIiZwaXRjaGZvcms7Ijoi4ouUIiwiJnBpdjsiOiLPliIsIiZwbGFuY2s7Ijoi4oSPIiwiJnBsYW5ja2g7Ijoi4oSOIiwiJnBsYW5rdjsiOiLihI8iLCImcGx1czsiOiIrIiwiJnBsdXNhY2lyOyI6IuKooyIsIiZwbHVzYjsiOiLiip4iLCImcGx1c2NpcjsiOiLiqKIiLCImcGx1c2RvOyI6IuKIlCIsIiZwbHVzZHU7Ijoi4qilIiwiJnBsdXNlOyI6IuKpsiIsIiZwbHVzbW4iOiLCsSIsIiZwbHVzbW47IjoiwrEiLCImcGx1c3NpbTsiOiLiqKYiLCImcGx1c3R3bzsiOiLiqKciLCImcG07IjoiwrEiLCImcG9pbnRpbnQ7Ijoi4qiVIiwiJnBvcGY7Ijoi8J2VoSIsIiZwb3VuZCI6IsKjIiwiJnBvdW5kOyI6IsKjIiwiJnByOyI6IuKJuiIsIiZwckU7Ijoi4qqzIiwiJnByYXA7Ijoi4qq3IiwiJnByY3VlOyI6IuKJvCIsIiZwcmU7Ijoi4qqvIiwiJnByZWM7Ijoi4om6IiwiJnByZWNhcHByb3g7Ijoi4qq3IiwiJnByZWNjdXJseWVxOyI6IuKJvCIsIiZwcmVjZXE7Ijoi4qqvIiwiJnByZWNuYXBwcm94OyI6IuKquSIsIiZwcmVjbmVxcTsiOiLiqrUiLCImcHJlY25zaW07Ijoi4ouoIiwiJnByZWNzaW07Ijoi4om+IiwiJnByaW1lOyI6IuKAsiIsIiZwcmltZXM7Ijoi4oSZIiwiJnBybkU7Ijoi4qq1IiwiJnBybmFwOyI6IuKquSIsIiZwcm5zaW07Ijoi4ouoIiwiJnByb2Q7Ijoi4oiPIiwiJnByb2ZhbGFyOyI6IuKMriIsIiZwcm9mbGluZTsiOiLijJIiLCImcHJvZnN1cmY7Ijoi4oyTIiwiJnByb3A7Ijoi4oidIiwiJnByb3B0bzsiOiLiiJ0iLCImcHJzaW07Ijoi4om+IiwiJnBydXJlbDsiOiLiirAiLCImcHNjcjsiOiLwnZOFIiwiJnBzaTsiOiLPiCIsIiZwdW5jc3A7Ijoi4oCIIiwiJnFmcjsiOiLwnZSuIiwiJnFpbnQ7Ijoi4qiMIiwiJnFvcGY7Ijoi8J2VoiIsIiZxcHJpbWU7Ijoi4oGXIiwiJnFzY3I7Ijoi8J2ThiIsIiZxdWF0ZXJuaW9uczsiOiLihI0iLCImcXVhdGludDsiOiLiqJYiLCImcXVlc3Q7IjoiPyIsIiZxdWVzdGVxOyI6IuKJnyIsIiZxdW90IjonIicsIiZxdW90OyI6JyInLCImckFhcnI7Ijoi4oebIiwiJnJBcnI7Ijoi4oeSIiwiJnJBdGFpbDsiOiLipJwiLCImckJhcnI7Ijoi4qSPIiwiJnJIYXI7Ijoi4qWkIiwiJnJhY2U7Ijoi4oi9zLEiLCImcmFjdXRlOyI6IsWVIiwiJnJhZGljOyI6IuKImiIsIiZyYWVtcHR5djsiOiLiprMiLCImcmFuZzsiOiLin6kiLCImcmFuZ2Q7Ijoi4qaSIiwiJnJhbmdlOyI6IuKmpSIsIiZyYW5nbGU7Ijoi4p+pIiwiJnJhcXVvIjoiwrsiLCImcmFxdW87IjoiwrsiLCImcmFycjsiOiLihpIiLCImcmFycmFwOyI6IuKltSIsIiZyYXJyYjsiOiLih6UiLCImcmFycmJmczsiOiLipKAiLCImcmFycmM7Ijoi4qSzIiwiJnJhcnJmczsiOiLipJ4iLCImcmFycmhrOyI6IuKGqiIsIiZyYXJybHA7Ijoi4oasIiwiJnJhcnJwbDsiOiLipYUiLCImcmFycnNpbTsiOiLipbQiLCImcmFycnRsOyI6IuKGoyIsIiZyYXJydzsiOiLihp0iLCImcmF0YWlsOyI6IuKkmiIsIiZyYXRpbzsiOiLiiLYiLCImcmF0aW9uYWxzOyI6IuKEmiIsIiZyYmFycjsiOiLipI0iLCImcmJicms7Ijoi4p2zIiwiJnJicmFjZTsiOiJ9IiwiJnJicmFjazsiOiJdIiwiJnJicmtlOyI6IuKmjCIsIiZyYnJrc2xkOyI6IuKmjiIsIiZyYnJrc2x1OyI6IuKmkCIsIiZyY2Fyb247IjoixZkiLCImcmNlZGlsOyI6IsWXIiwiJnJjZWlsOyI6IuKMiSIsIiZyY3ViOyI6In0iLCImcmN5OyI6ItGAIiwiJnJkY2E7Ijoi4qS3IiwiJnJkbGRoYXI7Ijoi4qWpIiwiJnJkcXVvOyI6IuKAnSIsIiZyZHF1b3I7Ijoi4oCdIiwiJnJkc2g7Ijoi4oazIiwiJnJlYWw7Ijoi4oScIiwiJnJlYWxpbmU7Ijoi4oSbIiwiJnJlYWxwYXJ0OyI6IuKEnCIsIiZyZWFsczsiOiLihJ0iLCImcmVjdDsiOiLilq0iLCImcmVnIjoiwq4iLCImcmVnOyI6IsKuIiwiJnJmaXNodDsiOiLipb0iLCImcmZsb29yOyI6IuKMiyIsIiZyZnI7Ijoi8J2UryIsIiZyaGFyZDsiOiLih4EiLCImcmhhcnU7Ijoi4oeAIiwiJnJoYXJ1bDsiOiLipawiLCImcmhvOyI6Is+BIiwiJnJob3Y7Ijoiz7EiLCImcmlnaHRhcnJvdzsiOiLihpIiLCImcmlnaHRhcnJvd3RhaWw7Ijoi4oajIiwiJnJpZ2h0aGFycG9vbmRvd247Ijoi4oeBIiwiJnJpZ2h0aGFycG9vbnVwOyI6IuKHgCIsIiZyaWdodGxlZnRhcnJvd3M7Ijoi4oeEIiwiJnJpZ2h0bGVmdGhhcnBvb25zOyI6IuKHjCIsIiZyaWdodHJpZ2h0YXJyb3dzOyI6IuKHiSIsIiZyaWdodHNxdWlnYXJyb3c7Ijoi4oadIiwiJnJpZ2h0dGhyZWV0aW1lczsiOiLii4wiLCImcmluZzsiOiLLmiIsIiZyaXNpbmdkb3RzZXE7Ijoi4omTIiwiJnJsYXJyOyI6IuKHhCIsIiZybGhhcjsiOiLih4wiLCImcmxtOyI6IuKAjyIsIiZybW91c3Q7Ijoi4o6xIiwiJnJtb3VzdGFjaGU7Ijoi4o6xIiwiJnJubWlkOyI6IuKrriIsIiZyb2FuZzsiOiLin60iLCImcm9hcnI7Ijoi4oe+IiwiJnJvYnJrOyI6IuKfpyIsIiZyb3BhcjsiOiLipoYiLCImcm9wZjsiOiLwnZWjIiwiJnJvcGx1czsiOiLiqK4iLCImcm90aW1lczsiOiLiqLUiLCImcnBhcjsiOiIpIiwiJnJwYXJndDsiOiLippQiLCImcnBwb2xpbnQ7Ijoi4qiSIiwiJnJyYXJyOyI6IuKHiSIsIiZyc2FxdW87Ijoi4oC6IiwiJnJzY3I7Ijoi8J2ThyIsIiZyc2g7Ijoi4oaxIiwiJnJzcWI7IjoiXSIsIiZyc3F1bzsiOiLigJkiLCImcnNxdW9yOyI6IuKAmSIsIiZydGhyZWU7Ijoi4ouMIiwiJnJ0aW1lczsiOiLii4oiLCImcnRyaTsiOiLilrkiLCImcnRyaWU7Ijoi4oq1IiwiJnJ0cmlmOyI6IuKWuCIsIiZydHJpbHRyaTsiOiLip44iLCImcnVsdWhhcjsiOiLipagiLCImcng7Ijoi4oSeIiwiJnNhY3V0ZTsiOiLFmyIsIiZzYnF1bzsiOiLigJoiLCImc2M7Ijoi4om7IiwiJnNjRTsiOiLiqrQiLCImc2NhcDsiOiLiqrgiLCImc2Nhcm9uOyI6IsWhIiwiJnNjY3VlOyI6IuKJvSIsIiZzY2U7Ijoi4qqwIiwiJnNjZWRpbDsiOiLFnyIsIiZzY2lyYzsiOiLFnSIsIiZzY25FOyI6IuKqtiIsIiZzY25hcDsiOiLiqroiLCImc2Nuc2ltOyI6IuKLqSIsIiZzY3BvbGludDsiOiLiqJMiLCImc2NzaW07Ijoi4om/IiwiJnNjeTsiOiLRgSIsIiZzZG90OyI6IuKLhSIsIiZzZG90YjsiOiLiiqEiLCImc2RvdGU7Ijoi4qmmIiwiJnNlQXJyOyI6IuKHmCIsIiZzZWFyaGs7Ijoi4qSlIiwiJnNlYXJyOyI6IuKGmCIsIiZzZWFycm93OyI6IuKGmCIsIiZzZWN0IjoiwqciLCImc2VjdDsiOiLCpyIsIiZzZW1pOyI6IjsiLCImc2Vzd2FyOyI6IuKkqSIsIiZzZXRtaW51czsiOiLiiJYiLCImc2V0bW47Ijoi4oiWIiwiJnNleHQ7Ijoi4py2IiwiJnNmcjsiOiLwnZSwIiwiJnNmcm93bjsiOiLijKIiLCImc2hhcnA7Ijoi4pmvIiwiJnNoY2hjeTsiOiLRiSIsIiZzaGN5OyI6ItGIIiwiJnNob3J0bWlkOyI6IuKIoyIsIiZzaG9ydHBhcmFsbGVsOyI6IuKIpSIsIiZzaHkiOiLCrSIsIiZzaHk7Ijoiwq0iLCImc2lnbWE7Ijoiz4MiLCImc2lnbWFmOyI6Is+CIiwiJnNpZ21hdjsiOiLPgiIsIiZzaW07Ijoi4oi8IiwiJnNpbWRvdDsiOiLiqaoiLCImc2ltZTsiOiLiiYMiLCImc2ltZXE7Ijoi4omDIiwiJnNpbWc7Ijoi4qqeIiwiJnNpbWdFOyI6IuKqoCIsIiZzaW1sOyI6IuKqnSIsIiZzaW1sRTsiOiLiqp8iLCImc2ltbmU7Ijoi4omGIiwiJnNpbXBsdXM7Ijoi4qikIiwiJnNpbXJhcnI7Ijoi4qWyIiwiJnNsYXJyOyI6IuKGkCIsIiZzbWFsbHNldG1pbnVzOyI6IuKIliIsIiZzbWFzaHA7Ijoi4qizIiwiJnNtZXBhcnNsOyI6IuKnpCIsIiZzbWlkOyI6IuKIoyIsIiZzbWlsZTsiOiLijKMiLCImc210OyI6IuKqqiIsIiZzbXRlOyI6IuKqrCIsIiZzbXRlczsiOiLiqqzvuIAiLCImc29mdGN5OyI6ItGMIiwiJnNvbDsiOiIvIiwiJnNvbGI7Ijoi4qeEIiwiJnNvbGJhcjsiOiLijL8iLCImc29wZjsiOiLwnZWkIiwiJnNwYWRlczsiOiLimaAiLCImc3BhZGVzdWl0OyI6IuKZoCIsIiZzcGFyOyI6IuKIpSIsIiZzcWNhcDsiOiLiipMiLCImc3FjYXBzOyI6IuKKk++4gCIsIiZzcWN1cDsiOiLiipQiLCImc3FjdXBzOyI6IuKKlO+4gCIsIiZzcXN1YjsiOiLiio8iLCImc3FzdWJlOyI6IuKKkSIsIiZzcXN1YnNldDsiOiLiio8iLCImc3FzdWJzZXRlcTsiOiLiipEiLCImc3FzdXA7Ijoi4oqQIiwiJnNxc3VwZTsiOiLiipIiLCImc3FzdXBzZXQ7Ijoi4oqQIiwiJnNxc3Vwc2V0ZXE7Ijoi4oqSIiwiJnNxdTsiOiLilqEiLCImc3F1YXJlOyI6IuKWoSIsIiZzcXVhcmY7Ijoi4paqIiwiJnNxdWY7Ijoi4paqIiwiJnNyYXJyOyI6IuKGkiIsIiZzc2NyOyI6IvCdk4giLCImc3NldG1uOyI6IuKIliIsIiZzc21pbGU7Ijoi4oyjIiwiJnNzdGFyZjsiOiLii4YiLCImc3RhcjsiOiLimIYiLCImc3RhcmY7Ijoi4piFIiwiJnN0cmFpZ2h0ZXBzaWxvbjsiOiLPtSIsIiZzdHJhaWdodHBoaTsiOiLPlSIsIiZzdHJuczsiOiLCryIsIiZzdWI7Ijoi4oqCIiwiJnN1YkU7Ijoi4quFIiwiJnN1YmRvdDsiOiLiqr0iLCImc3ViZTsiOiLiioYiLCImc3ViZWRvdDsiOiLiq4MiLCImc3VibXVsdDsiOiLiq4EiLCImc3VibkU7Ijoi4quLIiwiJnN1Ym5lOyI6IuKKiiIsIiZzdWJwbHVzOyI6IuKqvyIsIiZzdWJyYXJyOyI6IuKluSIsIiZzdWJzZXQ7Ijoi4oqCIiwiJnN1YnNldGVxOyI6IuKKhiIsIiZzdWJzZXRlcXE7Ijoi4quFIiwiJnN1YnNldG5lcTsiOiLiiooiLCImc3Vic2V0bmVxcTsiOiLiq4siLCImc3Vic2ltOyI6IuKrhyIsIiZzdWJzdWI7Ijoi4quVIiwiJnN1YnN1cDsiOiLiq5MiLCImc3VjYzsiOiLiibsiLCImc3VjY2FwcHJveDsiOiLiqrgiLCImc3VjY2N1cmx5ZXE7Ijoi4om9IiwiJnN1Y2NlcTsiOiLiqrAiLCImc3VjY25hcHByb3g7Ijoi4qq6IiwiJnN1Y2NuZXFxOyI6IuKqtiIsIiZzdWNjbnNpbTsiOiLii6kiLCImc3VjY3NpbTsiOiLiib8iLCImc3VtOyI6IuKIkSIsIiZzdW5nOyI6IuKZqiIsIiZzdXAxIjoiwrkiLCImc3VwMTsiOiLCuSIsIiZzdXAyIjoiwrIiLCImc3VwMjsiOiLCsiIsIiZzdXAzIjoiwrMiLCImc3VwMzsiOiLCsyIsIiZzdXA7Ijoi4oqDIiwiJnN1cEU7Ijoi4quGIiwiJnN1cGRvdDsiOiLiqr4iLCImc3VwZHN1YjsiOiLiq5giLCImc3VwZTsiOiLiiociLCImc3VwZWRvdDsiOiLiq4QiLCImc3VwaHNvbDsiOiLin4kiLCImc3VwaHN1YjsiOiLiq5ciLCImc3VwbGFycjsiOiLipbsiLCImc3VwbXVsdDsiOiLiq4IiLCImc3VwbkU7Ijoi4quMIiwiJnN1cG5lOyI6IuKKiyIsIiZzdXBwbHVzOyI6IuKrgCIsIiZzdXBzZXQ7Ijoi4oqDIiwiJnN1cHNldGVxOyI6IuKKhyIsIiZzdXBzZXRlcXE7Ijoi4quGIiwiJnN1cHNldG5lcTsiOiLiiosiLCImc3Vwc2V0bmVxcTsiOiLiq4wiLCImc3Vwc2ltOyI6IuKriCIsIiZzdXBzdWI7Ijoi4quUIiwiJnN1cHN1cDsiOiLiq5YiLCImc3dBcnI7Ijoi4oeZIiwiJnN3YXJoazsiOiLipKYiLCImc3dhcnI7Ijoi4oaZIiwiJnN3YXJyb3c7Ijoi4oaZIiwiJnN3bndhcjsiOiLipKoiLCImc3psaWciOiLDnyIsIiZzemxpZzsiOiLDnyIsIiZ0YXJnZXQ7Ijoi4oyWIiwiJnRhdTsiOiLPhCIsIiZ0YnJrOyI6IuKOtCIsIiZ0Y2Fyb247IjoixaUiLCImdGNlZGlsOyI6IsWjIiwiJnRjeTsiOiLRgiIsIiZ0ZG90OyI6IuKDmyIsIiZ0ZWxyZWM7Ijoi4oyVIiwiJnRmcjsiOiLwnZSxIiwiJnRoZXJlNDsiOiLiiLQiLCImdGhlcmVmb3JlOyI6IuKItCIsIiZ0aGV0YTsiOiLOuCIsIiZ0aGV0YXN5bTsiOiLPkSIsIiZ0aGV0YXY7Ijoiz5EiLCImdGhpY2thcHByb3g7Ijoi4omIIiwiJnRoaWNrc2ltOyI6IuKIvCIsIiZ0aGluc3A7Ijoi4oCJIiwiJnRoa2FwOyI6IuKJiCIsIiZ0aGtzaW07Ijoi4oi8IiwiJnRob3JuIjoiw74iLCImdGhvcm47Ijoiw74iLCImdGlsZGU7Ijoiy5wiLCImdGltZXMiOiLDlyIsIiZ0aW1lczsiOiLDlyIsIiZ0aW1lc2I7Ijoi4oqgIiwiJnRpbWVzYmFyOyI6IuKosSIsIiZ0aW1lc2Q7Ijoi4qiwIiwiJnRpbnQ7Ijoi4oitIiwiJnRvZWE7Ijoi4qSoIiwiJnRvcDsiOiLiiqQiLCImdG9wYm90OyI6IuKMtiIsIiZ0b3BjaXI7Ijoi4quxIiwiJnRvcGY7Ijoi8J2VpSIsIiZ0b3Bmb3JrOyI6IuKrmiIsIiZ0b3NhOyI6IuKkqSIsIiZ0cHJpbWU7Ijoi4oC0IiwiJnRyYWRlOyI6IuKEoiIsIiZ0cmlhbmdsZTsiOiLilrUiLCImdHJpYW5nbGVkb3duOyI6IuKWvyIsIiZ0cmlhbmdsZWxlZnQ7Ijoi4peDIiwiJnRyaWFuZ2xlbGVmdGVxOyI6IuKKtCIsIiZ0cmlhbmdsZXE7Ijoi4omcIiwiJnRyaWFuZ2xlcmlnaHQ7Ijoi4pa5IiwiJnRyaWFuZ2xlcmlnaHRlcTsiOiLiirUiLCImdHJpZG90OyI6IuKXrCIsIiZ0cmllOyI6IuKJnCIsIiZ0cmltaW51czsiOiLiqLoiLCImdHJpcGx1czsiOiLiqLkiLCImdHJpc2I7Ijoi4qeNIiwiJnRyaXRpbWU7Ijoi4qi7IiwiJnRycGV6aXVtOyI6IuKPoiIsIiZ0c2NyOyI6IvCdk4kiLCImdHNjeTsiOiLRhiIsIiZ0c2hjeTsiOiLRmyIsIiZ0c3Ryb2s7IjoixaciLCImdHdpeHQ7Ijoi4omsIiwiJnR3b2hlYWRsZWZ0YXJyb3c7Ijoi4oaeIiwiJnR3b2hlYWRyaWdodGFycm93OyI6IuKGoCIsIiZ1QXJyOyI6IuKHkSIsIiZ1SGFyOyI6IuKloyIsIiZ1YWN1dGUiOiLDuiIsIiZ1YWN1dGU7Ijoiw7oiLCImdWFycjsiOiLihpEiLCImdWJyY3k7Ijoi0Z4iLCImdWJyZXZlOyI6IsWtIiwiJnVjaXJjIjoiw7siLCImdWNpcmM7Ijoiw7siLCImdWN5OyI6ItGDIiwiJnVkYXJyOyI6IuKHhSIsIiZ1ZGJsYWM7IjoixbEiLCImdWRoYXI7Ijoi4qWuIiwiJnVmaXNodDsiOiLipb4iLCImdWZyOyI6IvCdlLIiLCImdWdyYXZlIjoiw7kiLCImdWdyYXZlOyI6IsO5IiwiJnVoYXJsOyI6IuKGvyIsIiZ1aGFycjsiOiLihr4iLCImdWhibGs7Ijoi4paAIiwiJnVsY29ybjsiOiLijJwiLCImdWxjb3JuZXI7Ijoi4oycIiwiJnVsY3JvcDsiOiLijI8iLCImdWx0cmk7Ijoi4pe4IiwiJnVtYWNyOyI6IsWrIiwiJnVtbCI6IsKoIiwiJnVtbDsiOiLCqCIsIiZ1b2dvbjsiOiLFsyIsIiZ1b3BmOyI6IvCdlaYiLCImdXBhcnJvdzsiOiLihpEiLCImdXBkb3duYXJyb3c7Ijoi4oaVIiwiJnVwaGFycG9vbmxlZnQ7Ijoi4oa/IiwiJnVwaGFycG9vbnJpZ2h0OyI6IuKGviIsIiZ1cGx1czsiOiLiio4iLCImdXBzaTsiOiLPhSIsIiZ1cHNpaDsiOiLPkiIsIiZ1cHNpbG9uOyI6Is+FIiwiJnVwdXBhcnJvd3M7Ijoi4oeIIiwiJnVyY29ybjsiOiLijJ0iLCImdXJjb3JuZXI7Ijoi4oydIiwiJnVyY3JvcDsiOiLijI4iLCImdXJpbmc7Ijoixa8iLCImdXJ0cmk7Ijoi4pe5IiwiJnVzY3I7Ijoi8J2TiiIsIiZ1dGRvdDsiOiLii7AiLCImdXRpbGRlOyI6IsWpIiwiJnV0cmk7Ijoi4pa1IiwiJnV0cmlmOyI6IuKWtCIsIiZ1dWFycjsiOiLih4giLCImdXVtbCI6IsO8IiwiJnV1bWw7Ijoiw7wiLCImdXdhbmdsZTsiOiLipqciLCImdkFycjsiOiLih5UiLCImdkJhcjsiOiLiq6giLCImdkJhcnY7Ijoi4qupIiwiJnZEYXNoOyI6IuKKqCIsIiZ2YW5ncnQ7Ijoi4qacIiwiJnZhcmVwc2lsb247Ijoiz7UiLCImdmFya2FwcGE7Ijoiz7AiLCImdmFybm90aGluZzsiOiLiiIUiLCImdmFycGhpOyI6Is+VIiwiJnZhcnBpOyI6Is+WIiwiJnZhcnByb3B0bzsiOiLiiJ0iLCImdmFycjsiOiLihpUiLCImdmFycmhvOyI6Is+xIiwiJnZhcnNpZ21hOyI6Is+CIiwiJnZhcnN1YnNldG5lcTsiOiLiiorvuIAiLCImdmFyc3Vic2V0bmVxcTsiOiLiq4vvuIAiLCImdmFyc3Vwc2V0bmVxOyI6IuKKi++4gCIsIiZ2YXJzdXBzZXRuZXFxOyI6IuKrjO+4gCIsIiZ2YXJ0aGV0YTsiOiLPkSIsIiZ2YXJ0cmlhbmdsZWxlZnQ7Ijoi4oqyIiwiJnZhcnRyaWFuZ2xlcmlnaHQ7Ijoi4oqzIiwiJnZjeTsiOiLQsiIsIiZ2ZGFzaDsiOiLiiqIiLCImdmVlOyI6IuKIqCIsIiZ2ZWViYXI7Ijoi4oq7IiwiJnZlZWVxOyI6IuKJmiIsIiZ2ZWxsaXA7Ijoi4ouuIiwiJnZlcmJhcjsiOiJ8IiwiJnZlcnQ7IjoifCIsIiZ2ZnI7Ijoi8J2UsyIsIiZ2bHRyaTsiOiLiirIiLCImdm5zdWI7Ijoi4oqC4oOSIiwiJnZuc3VwOyI6IuKKg+KDkiIsIiZ2b3BmOyI6IvCdlaciLCImdnByb3A7Ijoi4oidIiwiJnZydHJpOyI6IuKKsyIsIiZ2c2NyOyI6IvCdk4siLCImdnN1Ym5FOyI6IuKri++4gCIsIiZ2c3VibmU7Ijoi4oqK77iAIiwiJnZzdXBuRTsiOiLiq4zvuIAiLCImdnN1cG5lOyI6IuKKi++4gCIsIiZ2emlnemFnOyI6IuKmmiIsIiZ3Y2lyYzsiOiLFtSIsIiZ3ZWRiYXI7Ijoi4qmfIiwiJndlZGdlOyI6IuKIpyIsIiZ3ZWRnZXE7Ijoi4omZIiwiJndlaWVycDsiOiLihJgiLCImd2ZyOyI6IvCdlLQiLCImd29wZjsiOiLwnZWoIiwiJndwOyI6IuKEmCIsIiZ3cjsiOiLiiYAiLCImd3JlYXRoOyI6IuKJgCIsIiZ3c2NyOyI6IvCdk4wiLCImeGNhcDsiOiLii4IiLCImeGNpcmM7Ijoi4pevIiwiJnhjdXA7Ijoi4ouDIiwiJnhkdHJpOyI6IuKWvSIsIiZ4ZnI7Ijoi8J2UtSIsIiZ4aEFycjsiOiLin7oiLCImeGhhcnI7Ijoi4p+3IiwiJnhpOyI6Is6+IiwiJnhsQXJyOyI6IuKfuCIsIiZ4bGFycjsiOiLin7UiLCImeG1hcDsiOiLin7wiLCImeG5pczsiOiLii7siLCImeG9kb3Q7Ijoi4qiAIiwiJnhvcGY7Ijoi8J2VqSIsIiZ4b3BsdXM7Ijoi4qiBIiwiJnhvdGltZTsiOiLiqIIiLCImeHJBcnI7Ijoi4p+5IiwiJnhyYXJyOyI6IuKftiIsIiZ4c2NyOyI6IvCdk40iLCImeHNxY3VwOyI6IuKohiIsIiZ4dXBsdXM7Ijoi4qiEIiwiJnh1dHJpOyI6IuKWsyIsIiZ4dmVlOyI6IuKLgSIsIiZ4d2VkZ2U7Ijoi4ouAIiwiJnlhY3V0ZSI6IsO9IiwiJnlhY3V0ZTsiOiLDvSIsIiZ5YWN5OyI6ItGPIiwiJnljaXJjOyI6IsW3IiwiJnljeTsiOiLRiyIsIiZ5ZW4iOiLCpSIsIiZ5ZW47IjoiwqUiLCImeWZyOyI6IvCdlLYiLCImeWljeTsiOiLRlyIsIiZ5b3BmOyI6IvCdlaoiLCImeXNjcjsiOiLwnZOOIiwiJnl1Y3k7Ijoi0Y4iLCImeXVtbCI6IsO/IiwiJnl1bWw7Ijoiw78iLCImemFjdXRlOyI6IsW6IiwiJnpjYXJvbjsiOiLFviIsIiZ6Y3k7Ijoi0LciLCImemRvdDsiOiLFvCIsIiZ6ZWV0cmY7Ijoi4oSoIiwiJnpldGE7IjoizrYiLCImemZyOyI6IvCdlLciLCImemhjeTsiOiLQtiIsIiZ6aWdyYXJyOyI6IuKHnSIsIiZ6b3BmOyI6IvCdlasiLCImenNjcjsiOiLwnZOPIiwiJnp3ajsiOiLigI0iLCImenduajsiOiLigIwifSxjaGFyYWN0ZXJzOnsiw4YiOiImQUVsaWc7IiwiJiI6IiZhbXA7Iiwiw4EiOiImQWFjdXRlOyIsIsSCIjoiJkFicmV2ZTsiLCLDgiI6IiZBY2lyYzsiLCLQkCI6IiZBY3k7Iiwi8J2UhCI6IiZBZnI7Iiwiw4AiOiImQWdyYXZlOyIsIs6RIjoiJkFscGhhOyIsIsSAIjoiJkFtYWNyOyIsIuKpkyI6IiZBbmQ7IiwixIQiOiImQW9nb247Iiwi8J2UuCI6IiZBb3BmOyIsIuKBoSI6IiZhZjsiLCLDhSI6IiZhbmdzdDsiLCLwnZKcIjoiJkFzY3I7Iiwi4omUIjoiJmNvbG9uZXE7Iiwiw4MiOiImQXRpbGRlOyIsIsOEIjoiJkF1bWw7Iiwi4oiWIjoiJnNzZXRtbjsiLCLiq6ciOiImQmFydjsiLCLijIYiOiImZG91YmxlYmFyd2VkZ2U7Iiwi0JEiOiImQmN5OyIsIuKItSI6IiZiZWNhdXNlOyIsIuKErCI6IiZiZXJub3U7IiwizpIiOiImQmV0YTsiLCLwnZSFIjoiJkJmcjsiLCLwnZS5IjoiJkJvcGY7Iiwiy5giOiImYnJldmU7Iiwi4omOIjoiJmJ1bXA7Iiwi0KciOiImQ0hjeTsiLCLCqSI6IiZjb3B5OyIsIsSGIjoiJkNhY3V0ZTsiLCLii5IiOiImQ2FwOyIsIuKFhSI6IiZERDsiLCLihK0iOiImQ2ZyOyIsIsSMIjoiJkNjYXJvbjsiLCLDhyI6IiZDY2VkaWw7IiwixIgiOiImQ2NpcmM7Iiwi4oiwIjoiJkNjb25pbnQ7IiwixIoiOiImQ2RvdDsiLCLCuCI6IiZjZWRpbDsiLCLCtyI6IiZtaWRkb3Q7IiwizqciOiImQ2hpOyIsIuKKmSI6IiZvZG90OyIsIuKKliI6IiZvbWludXM7Iiwi4oqVIjoiJm9wbHVzOyIsIuKKlyI6IiZvdGltZXM7Iiwi4oiyIjoiJmN3Y29uaW50OyIsIuKAnSI6IiZyZHF1b3I7Iiwi4oCZIjoiJnJzcXVvcjsiLCLiiLciOiImUHJvcG9ydGlvbjsiLCLiqbQiOiImQ29sb25lOyIsIuKJoSI6IiZlcXVpdjsiLCLiiK8iOiImRG91YmxlQ29udG91ckludGVncmFsOyIsIuKIriI6IiZvaW50OyIsIuKEgiI6IiZjb21wbGV4ZXM7Iiwi4oiQIjoiJmNvcHJvZDsiLCLiiLMiOiImYXdjb25pbnQ7Iiwi4qivIjoiJkNyb3NzOyIsIvCdkp4iOiImQ3NjcjsiLCLii5MiOiImQ3VwOyIsIuKJjSI6IiZhc3ltcGVxOyIsIuKkkSI6IiZERG90cmFoZDsiLCLQgiI6IiZESmN5OyIsItCFIjoiJkRTY3k7Iiwi0I8iOiImRFpjeTsiLCLigKEiOiImZGRhZ2dlcjsiLCLihqEiOiImRGFycjsiLCLiq6QiOiImRG91YmxlTGVmdFRlZTsiLCLEjiI6IiZEY2Fyb247Iiwi0JQiOiImRGN5OyIsIuKIhyI6IiZuYWJsYTsiLCLOlCI6IiZEZWx0YTsiLCLwnZSHIjoiJkRmcjsiLCLCtCI6IiZhY3V0ZTsiLCLLmSI6IiZkb3Q7Iiwiy50iOiImZGJsYWM7IiwiYCI6IiZncmF2ZTsiLCLLnCI6IiZ0aWxkZTsiLCLii4QiOiImZGlhbW9uZDsiLCLihYYiOiImZGQ7Iiwi8J2UuyI6IiZEb3BmOyIsIsKoIjoiJnVtbDsiLCLig5wiOiImRG90RG90OyIsIuKJkCI6IiZlc2RvdDsiLCLih5MiOiImZEFycjsiLCLih5AiOiImbEFycjsiLCLih5QiOiImaWZmOyIsIuKfuCI6IiZ4bEFycjsiLCLin7oiOiImeGhBcnI7Iiwi4p+5IjoiJnhyQXJyOyIsIuKHkiI6IiZyQXJyOyIsIuKKqCI6IiZ2RGFzaDsiLCLih5EiOiImdUFycjsiLCLih5UiOiImdkFycjsiLCLiiKUiOiImc3BhcjsiLCLihpMiOiImZG93bmFycm93OyIsIuKkkyI6IiZEb3duQXJyb3dCYXI7Iiwi4oe1IjoiJmR1YXJyOyIsIsyRIjoiJkRvd25CcmV2ZTsiLCLipZAiOiImRG93bkxlZnRSaWdodFZlY3RvcjsiLCLipZ4iOiImRG93bkxlZnRUZWVWZWN0b3I7Iiwi4oa9IjoiJmxoYXJkOyIsIuKlliI6IiZEb3duTGVmdFZlY3RvckJhcjsiLCLipZ8iOiImRG93blJpZ2h0VGVlVmVjdG9yOyIsIuKHgSI6IiZyaWdodGhhcnBvb25kb3duOyIsIuKllyI6IiZEb3duUmlnaHRWZWN0b3JCYXI7Iiwi4oqkIjoiJnRvcDsiLCLihqciOiImbWFwc3RvZG93bjsiLCLwnZKfIjoiJkRzY3I7IiwixJAiOiImRHN0cm9rOyIsIsWKIjoiJkVORzsiLCLDkCI6IiZFVEg7Iiwiw4kiOiImRWFjdXRlOyIsIsSaIjoiJkVjYXJvbjsiLCLDiiI6IiZFY2lyYzsiLCLQrSI6IiZFY3k7IiwixJYiOiImRWRvdDsiLCLwnZSIIjoiJkVmcjsiLCLDiCI6IiZFZ3JhdmU7Iiwi4oiIIjoiJmlzaW52OyIsIsSSIjoiJkVtYWNyOyIsIuKXuyI6IiZFbXB0eVNtYWxsU3F1YXJlOyIsIuKWqyI6IiZFbXB0eVZlcnlTbWFsbFNxdWFyZTsiLCLEmCI6IiZFb2dvbjsiLCLwnZS8IjoiJkVvcGY7IiwizpUiOiImRXBzaWxvbjsiLCLiqbUiOiImRXF1YWw7Iiwi4omCIjoiJmVzaW07Iiwi4oeMIjoiJnJsaGFyOyIsIuKEsCI6IiZleHBlY3RhdGlvbjsiLCLiqbMiOiImRXNpbTsiLCLOlyI6IiZFdGE7Iiwiw4siOiImRXVtbDsiLCLiiIMiOiImZXhpc3Q7Iiwi4oWHIjoiJmV4cG9uZW50aWFsZTsiLCLQpCI6IiZGY3k7Iiwi8J2UiSI6IiZGZnI7Iiwi4pe8IjoiJkZpbGxlZFNtYWxsU3F1YXJlOyIsIuKWqiI6IiZzcXVmOyIsIvCdlL0iOiImRm9wZjsiLCLiiIAiOiImZm9yYWxsOyIsIuKEsSI6IiZGc2NyOyIsItCDIjoiJkdKY3k7IiwiPiI6IiZndDsiLCLOkyI6IiZHYW1tYTsiLCLPnCI6IiZHYW1tYWQ7IiwixJ4iOiImR2JyZXZlOyIsIsSiIjoiJkdjZWRpbDsiLCLEnCI6IiZHY2lyYzsiLCLQkyI6IiZHY3k7IiwixKAiOiImR2RvdDsiLCLwnZSKIjoiJkdmcjsiLCLii5kiOiImZ2dnOyIsIvCdlL4iOiImR29wZjsiLCLiiaUiOiImZ2VxOyIsIuKLmyI6IiZndHJlcWxlc3M7Iiwi4omnIjoiJmdlcXE7Iiwi4qqiIjoiJkdyZWF0ZXJHcmVhdGVyOyIsIuKJtyI6IiZndHJsZXNzOyIsIuKpviI6IiZnZXM7Iiwi4omzIjoiJmd0cnNpbTsiLCLwnZKiIjoiJkdzY3I7Iiwi4omrIjoiJmdnOyIsItCqIjoiJkhBUkRjeTsiLCLLhyI6IiZjYXJvbjsiLCJeIjoiJkhhdDsiLCLEpCI6IiZIY2lyYzsiLCLihIwiOiImUG9pbmNhcmVwbGFuZTsiLCLihIsiOiImaGFtaWx0OyIsIuKEjSI6IiZxdWF0ZXJuaW9uczsiLCLilIAiOiImYm94aDsiLCLEpiI6IiZIc3Ryb2s7Iiwi4omPIjoiJmJ1bXBlcTsiLCLQlSI6IiZJRWN5OyIsIsSyIjoiJklKbGlnOyIsItCBIjoiJklPY3k7Iiwiw40iOiImSWFjdXRlOyIsIsOOIjoiJkljaXJjOyIsItCYIjoiJkljeTsiLCLEsCI6IiZJZG90OyIsIuKEkSI6IiZpbWFncGFydDsiLCLDjCI6IiZJZ3JhdmU7IiwixKoiOiImSW1hY3I7Iiwi4oWIIjoiJmlpOyIsIuKIrCI6IiZJbnQ7Iiwi4oirIjoiJmludDsiLCLii4IiOiImeGNhcDsiLCLigaMiOiImaWM7Iiwi4oGiIjoiJml0OyIsIsSuIjoiJklvZ29uOyIsIvCdlYAiOiImSW9wZjsiLCLOmSI6IiZJb3RhOyIsIuKEkCI6IiZpbWFnbGluZTsiLCLEqCI6IiZJdGlsZGU7Iiwi0IYiOiImSXVrY3k7Iiwiw48iOiImSXVtbDsiLCLEtCI6IiZKY2lyYzsiLCLQmSI6IiZKY3k7Iiwi8J2UjSI6IiZKZnI7Iiwi8J2VgSI6IiZKb3BmOyIsIvCdkqUiOiImSnNjcjsiLCLQiCI6IiZKc2VyY3k7Iiwi0IQiOiImSnVrY3k7Iiwi0KUiOiImS0hjeTsiLCLQjCI6IiZLSmN5OyIsIs6aIjoiJkthcHBhOyIsIsS2IjoiJktjZWRpbDsiLCLQmiI6IiZLY3k7Iiwi8J2UjiI6IiZLZnI7Iiwi8J2VgiI6IiZLb3BmOyIsIvCdkqYiOiImS3NjcjsiLCLQiSI6IiZMSmN5OyIsIjwiOiImbHQ7IiwixLkiOiImTGFjdXRlOyIsIs6bIjoiJkxhbWJkYTsiLCLin6oiOiImTGFuZzsiLCLihJIiOiImbGFncmFuOyIsIuKGniI6IiZ0d29oZWFkbGVmdGFycm93OyIsIsS9IjoiJkxjYXJvbjsiLCLEuyI6IiZMY2VkaWw7Iiwi0JsiOiImTGN5OyIsIuKfqCI6IiZsYW5nbGU7Iiwi4oaQIjoiJnNsYXJyOyIsIuKHpCI6IiZsYXJyYjsiLCLih4YiOiImbHJhcnI7Iiwi4oyIIjoiJmxjZWlsOyIsIuKfpiI6IiZsb2JyazsiLCLipaEiOiImTGVmdERvd25UZWVWZWN0b3I7Iiwi4oeDIjoiJmRvd25oYXJwb29ubGVmdDsiLCLipZkiOiImTGVmdERvd25WZWN0b3JCYXI7Iiwi4oyKIjoiJmxmbG9vcjsiLCLihpQiOiImbGVmdHJpZ2h0YXJyb3c7Iiwi4qWOIjoiJkxlZnRSaWdodFZlY3RvcjsiLCLiiqMiOiImZGFzaHY7Iiwi4oakIjoiJm1hcHN0b2xlZnQ7Iiwi4qWaIjoiJkxlZnRUZWVWZWN0b3I7Iiwi4oqyIjoiJnZsdHJpOyIsIuKnjyI6IiZMZWZ0VHJpYW5nbGVCYXI7Iiwi4oq0IjoiJnRyaWFuZ2xlbGVmdGVxOyIsIuKlkSI6IiZMZWZ0VXBEb3duVmVjdG9yOyIsIuKloCI6IiZMZWZ0VXBUZWVWZWN0b3I7Iiwi4oa/IjoiJnVwaGFycG9vbmxlZnQ7Iiwi4qWYIjoiJkxlZnRVcFZlY3RvckJhcjsiLCLihrwiOiImbGhhcnU7Iiwi4qWSIjoiJkxlZnRWZWN0b3JCYXI7Iiwi4ouaIjoiJmxlc3NlcWd0cjsiLCLiiaYiOiImbGVxcTsiLCLiibYiOiImbGc7Iiwi4qqhIjoiJkxlc3NMZXNzOyIsIuKpvSI6IiZsZXM7Iiwi4omyIjoiJmxzaW07Iiwi8J2UjyI6IiZMZnI7Iiwi4ouYIjoiJkxsOyIsIuKHmiI6IiZsQWFycjsiLCLEvyI6IiZMbWlkb3Q7Iiwi4p+1IjoiJnhsYXJyOyIsIuKftyI6IiZ4aGFycjsiLCLin7YiOiImeHJhcnI7Iiwi8J2VgyI6IiZMb3BmOyIsIuKGmSI6IiZzd2Fycm93OyIsIuKGmCI6IiZzZWFycm93OyIsIuKGsCI6IiZsc2g7IiwixYEiOiImTHN0cm9rOyIsIuKJqiI6IiZsbDsiLCLipIUiOiImTWFwOyIsItCcIjoiJk1jeTsiLCLigZ8iOiImTWVkaXVtU3BhY2U7Iiwi4oSzIjoiJnBobW1hdDsiLCLwnZSQIjoiJk1mcjsiLCLiiJMiOiImbXA7Iiwi8J2VhCI6IiZNb3BmOyIsIs6cIjoiJk11OyIsItCKIjoiJk5KY3k7IiwixYMiOiImTmFjdXRlOyIsIsWHIjoiJk5jYXJvbjsiLCLFhSI6IiZOY2VkaWw7Iiwi0J0iOiImTmN5OyIsIuKAiyI6IiZaZXJvV2lkdGhTcGFjZTsiLCJcbiI6IiZOZXdMaW5lOyIsIvCdlJEiOiImTmZyOyIsIuKBoCI6IiZOb0JyZWFrOyIsIsKgIjoiJm5ic3A7Iiwi4oSVIjoiJm5hdHVyYWxzOyIsIuKrrCI6IiZOb3Q7Iiwi4omiIjoiJm5lcXVpdjsiLCLiia0iOiImTm90Q3VwQ2FwOyIsIuKIpiI6IiZuc3BhcjsiLCLiiIkiOiImbm90aW52YTsiLCLiiaAiOiImbmU7Iiwi4omCzLgiOiImbmVzaW07Iiwi4oiEIjoiJm5leGlzdHM7Iiwi4omvIjoiJm5ndHI7Iiwi4omxIjoiJm5nZXE7Iiwi4omnzLgiOiImbmdlcXE7Iiwi4omrzLgiOiImbkd0djsiLCLiibkiOiImbnRnbDsiLCLiqb7MuCI6IiZuZ2VzOyIsIuKJtSI6IiZuZ3NpbTsiLCLiiY7MuCI6IiZuYnVtcDsiLCLiiY/MuCI6IiZuYnVtcGU7Iiwi4ouqIjoiJm50cmlhbmdsZWxlZnQ7Iiwi4qePzLgiOiImTm90TGVmdFRyaWFuZ2xlQmFyOyIsIuKLrCI6IiZudHJpYW5nbGVsZWZ0ZXE7Iiwi4omuIjoiJm5sdDsiLCLiibAiOiImbmxlcTsiLCLiibgiOiImbnRsZzsiLCLiiarMuCI6IiZuTHR2OyIsIuKpvcy4IjoiJm5sZXM7Iiwi4om0IjoiJm5sc2ltOyIsIuKqosy4IjoiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyOyIsIuKqocy4IjoiJk5vdE5lc3RlZExlc3NMZXNzOyIsIuKKgCI6IiZucHJlYzsiLCLiqq/MuCI6IiZucHJlY2VxOyIsIuKLoCI6IiZucHJjdWU7Iiwi4oiMIjoiJm5vdG5pdmE7Iiwi4ourIjoiJm50cmlhbmdsZXJpZ2h0OyIsIuKnkMy4IjoiJk5vdFJpZ2h0VHJpYW5nbGVCYXI7Iiwi4outIjoiJm50cmlhbmdsZXJpZ2h0ZXE7Iiwi4oqPzLgiOiImTm90U3F1YXJlU3Vic2V0OyIsIuKLoiI6IiZuc3FzdWJlOyIsIuKKkMy4IjoiJk5vdFNxdWFyZVN1cGVyc2V0OyIsIuKLoyI6IiZuc3FzdXBlOyIsIuKKguKDkiI6IiZ2bnN1YjsiLCLiiogiOiImbnN1YnNldGVxOyIsIuKKgSI6IiZuc3VjYzsiLCLiqrDMuCI6IiZuc3VjY2VxOyIsIuKLoSI6IiZuc2NjdWU7Iiwi4om/zLgiOiImTm90U3VjY2VlZHNUaWxkZTsiLCLiioPig5IiOiImdm5zdXA7Iiwi4oqJIjoiJm5zdXBzZXRlcTsiLCLiiYEiOiImbnNpbTsiLCLiiYQiOiImbnNpbWVxOyIsIuKJhyI6IiZuY29uZzsiLCLiiYkiOiImbmFwcHJveDsiLCLiiKQiOiImbnNtaWQ7Iiwi8J2SqSI6IiZOc2NyOyIsIsORIjoiJk50aWxkZTsiLCLOnSI6IiZOdTsiLCLFkiI6IiZPRWxpZzsiLCLDkyI6IiZPYWN1dGU7Iiwiw5QiOiImT2NpcmM7Iiwi0J4iOiImT2N5OyIsIsWQIjoiJk9kYmxhYzsiLCLwnZSSIjoiJk9mcjsiLCLDkiI6IiZPZ3JhdmU7IiwixYwiOiImT21hY3I7IiwizqkiOiImb2htOyIsIs6fIjoiJk9taWNyb247Iiwi8J2VhiI6IiZPb3BmOyIsIuKAnCI6IiZsZHF1bzsiLCLigJgiOiImbHNxdW87Iiwi4qmUIjoiJk9yOyIsIvCdkqoiOiImT3NjcjsiLCLDmCI6IiZPc2xhc2g7Iiwiw5UiOiImT3RpbGRlOyIsIuKotyI6IiZPdGltZXM7Iiwiw5YiOiImT3VtbDsiLCLigL4iOiImb2xpbmU7Iiwi4o+eIjoiJk92ZXJCcmFjZTsiLCLijrQiOiImdGJyazsiLCLij5wiOiImT3ZlclBhcmVudGhlc2lzOyIsIuKIgiI6IiZwYXJ0OyIsItCfIjoiJlBjeTsiLCLwnZSTIjoiJlBmcjsiLCLOpiI6IiZQaGk7IiwizqAiOiImUGk7IiwiwrEiOiImcG07Iiwi4oSZIjoiJnByaW1lczsiLCLiqrsiOiImUHI7Iiwi4om6IjoiJnByZWM7Iiwi4qqvIjoiJnByZWNlcTsiLCLiibwiOiImcHJlY2N1cmx5ZXE7Iiwi4om+IjoiJnByc2ltOyIsIuKAsyI6IiZQcmltZTsiLCLiiI8iOiImcHJvZDsiLCLiiJ0iOiImdnByb3A7Iiwi8J2SqyI6IiZQc2NyOyIsIs6oIjoiJlBzaTsiLCciJzoiJnF1b3Q7Iiwi8J2UlCI6IiZRZnI7Iiwi4oSaIjoiJnJhdGlvbmFsczsiLCLwnZKsIjoiJlFzY3I7Iiwi4qSQIjoiJmRyYmthcm93OyIsIsKuIjoiJnJlZzsiLCLFlCI6IiZSYWN1dGU7Iiwi4p+rIjoiJlJhbmc7Iiwi4oagIjoiJnR3b2hlYWRyaWdodGFycm93OyIsIuKkliI6IiZSYXJydGw7IiwixZgiOiImUmNhcm9uOyIsIsWWIjoiJlJjZWRpbDsiLCLQoCI6IiZSY3k7Iiwi4oScIjoiJnJlYWxwYXJ0OyIsIuKIiyI6IiZuaXY7Iiwi4oeLIjoiJmxyaGFyOyIsIuKlryI6IiZkdWhhcjsiLCLOoSI6IiZSaG87Iiwi4p+pIjoiJnJhbmdsZTsiLCLihpIiOiImc3JhcnI7Iiwi4oelIjoiJnJhcnJiOyIsIuKHhCI6IiZybGFycjsiLCLijIkiOiImcmNlaWw7Iiwi4p+nIjoiJnJvYnJrOyIsIuKlnSI6IiZSaWdodERvd25UZWVWZWN0b3I7Iiwi4oeCIjoiJmRvd25oYXJwb29ucmlnaHQ7Iiwi4qWVIjoiJlJpZ2h0RG93blZlY3RvckJhcjsiLCLijIsiOiImcmZsb29yOyIsIuKKoiI6IiZ2ZGFzaDsiLCLihqYiOiImbWFwc3RvOyIsIuKlmyI6IiZSaWdodFRlZVZlY3RvcjsiLCLiirMiOiImdnJ0cmk7Iiwi4qeQIjoiJlJpZ2h0VHJpYW5nbGVCYXI7Iiwi4oq1IjoiJnRyaWFuZ2xlcmlnaHRlcTsiLCLipY8iOiImUmlnaHRVcERvd25WZWN0b3I7Iiwi4qWcIjoiJlJpZ2h0VXBUZWVWZWN0b3I7Iiwi4oa+IjoiJnVwaGFycG9vbnJpZ2h0OyIsIuKllCI6IiZSaWdodFVwVmVjdG9yQmFyOyIsIuKHgCI6IiZyaWdodGhhcnBvb251cDsiLCLipZMiOiImUmlnaHRWZWN0b3JCYXI7Iiwi4oSdIjoiJnJlYWxzOyIsIuKlsCI6IiZSb3VuZEltcGxpZXM7Iiwi4oebIjoiJnJBYXJyOyIsIuKEmyI6IiZyZWFsaW5lOyIsIuKGsSI6IiZyc2g7Iiwi4qe0IjoiJlJ1bGVEZWxheWVkOyIsItCpIjoiJlNIQ0hjeTsiLCLQqCI6IiZTSGN5OyIsItCsIjoiJlNPRlRjeTsiLCLFmiI6IiZTYWN1dGU7Iiwi4qq8IjoiJlNjOyIsIsWgIjoiJlNjYXJvbjsiLCLFniI6IiZTY2VkaWw7IiwixZwiOiImU2NpcmM7Iiwi0KEiOiImU2N5OyIsIvCdlJYiOiImU2ZyOyIsIuKGkSI6IiZ1cGFycm93OyIsIs6jIjoiJlNpZ21hOyIsIuKImCI6IiZjb21wZm47Iiwi8J2ViiI6IiZTb3BmOyIsIuKImiI6IiZyYWRpYzsiLCLilqEiOiImc3F1YXJlOyIsIuKKkyI6IiZzcWNhcDsiLCLiio8iOiImc3FzdWJzZXQ7Iiwi4oqRIjoiJnNxc3Vic2V0ZXE7Iiwi4oqQIjoiJnNxc3Vwc2V0OyIsIuKKkiI6IiZzcXN1cHNldGVxOyIsIuKKlCI6IiZzcWN1cDsiLCLwnZKuIjoiJlNzY3I7Iiwi4ouGIjoiJnNzdGFyZjsiLCLii5AiOiImU3Vic2V0OyIsIuKKhiI6IiZzdWJzZXRlcTsiLCLiibsiOiImc3VjYzsiLCLiqrAiOiImc3VjY2VxOyIsIuKJvSI6IiZzdWNjY3VybHllcTsiLCLiib8iOiImc3VjY3NpbTsiLCLiiJEiOiImc3VtOyIsIuKLkSI6IiZTdXBzZXQ7Iiwi4oqDIjoiJnN1cHNldDsiLCLiiociOiImc3Vwc2V0ZXE7Iiwiw54iOiImVEhPUk47Iiwi4oSiIjoiJnRyYWRlOyIsItCLIjoiJlRTSGN5OyIsItCmIjoiJlRTY3k7IiwiXHQiOiImVGFiOyIsIs6kIjoiJlRhdTsiLCLFpCI6IiZUY2Fyb247IiwixaIiOiImVGNlZGlsOyIsItCiIjoiJlRjeTsiLCLwnZSXIjoiJlRmcjsiLCLiiLQiOiImdGhlcmVmb3JlOyIsIs6YIjoiJlRoZXRhOyIsIuKBn+KAiiI6IiZUaGlja1NwYWNlOyIsIuKAiSI6IiZ0aGluc3A7Iiwi4oi8IjoiJnRoa3NpbTsiLCLiiYMiOiImc2ltZXE7Iiwi4omFIjoiJmNvbmc7Iiwi4omIIjoiJnRoa2FwOyIsIvCdlYsiOiImVG9wZjsiLCLig5siOiImdGRvdDsiLCLwnZKvIjoiJlRzY3I7IiwixaYiOiImVHN0cm9rOyIsIsOaIjoiJlVhY3V0ZTsiLCLihp8iOiImVWFycjsiLCLipYkiOiImVWFycm9jaXI7Iiwi0I4iOiImVWJyY3k7IiwixawiOiImVWJyZXZlOyIsIsObIjoiJlVjaXJjOyIsItCjIjoiJlVjeTsiLCLFsCI6IiZVZGJsYWM7Iiwi8J2UmCI6IiZVZnI7Iiwiw5kiOiImVWdyYXZlOyIsIsWqIjoiJlVtYWNyOyIsXzoiJmxvd2JhcjsiLCLij58iOiImVW5kZXJCcmFjZTsiLCLijrUiOiImYmJyazsiLCLij50iOiImVW5kZXJQYXJlbnRoZXNpczsiLCLii4MiOiImeGN1cDsiLCLiio4iOiImdXBsdXM7IiwixbIiOiImVW9nb247Iiwi8J2VjCI6IiZVb3BmOyIsIuKkkiI6IiZVcEFycm93QmFyOyIsIuKHhSI6IiZ1ZGFycjsiLCLihpUiOiImdmFycjsiLCLipa4iOiImdWRoYXI7Iiwi4oqlIjoiJnBlcnA7Iiwi4oalIjoiJm1hcHN0b3VwOyIsIuKGliI6IiZud2Fycm93OyIsIuKGlyI6IiZuZWFycm93OyIsIs+SIjoiJnVwc2loOyIsIs6lIjoiJlVwc2lsb247Iiwixa4iOiImVXJpbmc7Iiwi8J2SsCI6IiZVc2NyOyIsIsWoIjoiJlV0aWxkZTsiLCLDnCI6IiZVdW1sOyIsIuKKqyI6IiZWRGFzaDsiLCLiq6siOiImVmJhcjsiLCLQkiI6IiZWY3k7Iiwi4oqpIjoiJlZkYXNoOyIsIuKrpiI6IiZWZGFzaGw7Iiwi4ouBIjoiJnh2ZWU7Iiwi4oCWIjoiJlZlcnQ7Iiwi4oijIjoiJnNtaWQ7IiwifCI6IiZ2ZXJ0OyIsIuKdmCI6IiZWZXJ0aWNhbFNlcGFyYXRvcjsiLCLiiYAiOiImd3JlYXRoOyIsIuKAiiI6IiZoYWlyc3A7Iiwi8J2UmSI6IiZWZnI7Iiwi8J2VjSI6IiZWb3BmOyIsIvCdkrEiOiImVnNjcjsiLCLiiqoiOiImVnZkYXNoOyIsIsW0IjoiJldjaXJjOyIsIuKLgCI6IiZ4d2VkZ2U7Iiwi8J2UmiI6IiZXZnI7Iiwi8J2VjiI6IiZXb3BmOyIsIvCdkrIiOiImV3NjcjsiLCLwnZSbIjoiJlhmcjsiLCLOniI6IiZYaTsiLCLwnZWPIjoiJlhvcGY7Iiwi8J2SsyI6IiZYc2NyOyIsItCvIjoiJllBY3k7Iiwi0IciOiImWUljeTsiLCLQriI6IiZZVWN5OyIsIsOdIjoiJllhY3V0ZTsiLCLFtiI6IiZZY2lyYzsiLCLQqyI6IiZZY3k7Iiwi8J2UnCI6IiZZZnI7Iiwi8J2VkCI6IiZZb3BmOyIsIvCdkrQiOiImWXNjcjsiLCLFuCI6IiZZdW1sOyIsItCWIjoiJlpIY3k7IiwixbkiOiImWmFjdXRlOyIsIsW9IjoiJlpjYXJvbjsiLCLQlyI6IiZaY3k7IiwixbsiOiImWmRvdDsiLCLOliI6IiZaZXRhOyIsIuKEqCI6IiZ6ZWV0cmY7Iiwi4oSkIjoiJmludGVnZXJzOyIsIvCdkrUiOiImWnNjcjsiLCLDoSI6IiZhYWN1dGU7IiwixIMiOiImYWJyZXZlOyIsIuKIviI6IiZtc3Rwb3M7Iiwi4oi+zLMiOiImYWNFOyIsIuKIvyI6IiZhY2Q7Iiwiw6IiOiImYWNpcmM7Iiwi0LAiOiImYWN5OyIsIsOmIjoiJmFlbGlnOyIsIvCdlJ4iOiImYWZyOyIsIsOgIjoiJmFncmF2ZTsiLCLihLUiOiImYWxlcGg7IiwizrEiOiImYWxwaGE7IiwixIEiOiImYW1hY3I7Iiwi4qi/IjoiJmFtYWxnOyIsIuKIpyI6IiZ3ZWRnZTsiLCLiqZUiOiImYW5kYW5kOyIsIuKpnCI6IiZhbmRkOyIsIuKpmCI6IiZhbmRzbG9wZTsiLCLiqZoiOiImYW5kdjsiLCLiiKAiOiImYW5nbGU7Iiwi4qakIjoiJmFuZ2U7Iiwi4oihIjoiJm1lYXN1cmVkYW5nbGU7Iiwi4qaoIjoiJmFuZ21zZGFhOyIsIuKmqSI6IiZhbmdtc2RhYjsiLCLipqoiOiImYW5nbXNkYWM7Iiwi4qarIjoiJmFuZ21zZGFkOyIsIuKmrCI6IiZhbmdtc2RhZTsiLCLipq0iOiImYW5nbXNkYWY7Iiwi4qauIjoiJmFuZ21zZGFnOyIsIuKmryI6IiZhbmdtc2RhaDsiLCLiiJ8iOiImYW5ncnQ7Iiwi4oq+IjoiJmFuZ3J0dmI7Iiwi4qadIjoiJmFuZ3J0dmJkOyIsIuKIoiI6IiZhbmdzcGg7Iiwi4o28IjoiJmFuZ3phcnI7IiwixIUiOiImYW9nb247Iiwi8J2VkiI6IiZhb3BmOyIsIuKpsCI6IiZhcEU7Iiwi4qmvIjoiJmFwYWNpcjsiLCLiiYoiOiImYXBwcm94ZXE7Iiwi4omLIjoiJmFwaWQ7IiwiJyI6IiZhcG9zOyIsIsOlIjoiJmFyaW5nOyIsIvCdkrYiOiImYXNjcjsiLCIqIjoiJm1pZGFzdDsiLCLDoyI6IiZhdGlsZGU7Iiwiw6QiOiImYXVtbDsiLCLiqJEiOiImYXdpbnQ7Iiwi4qutIjoiJmJOb3Q7Iiwi4omMIjoiJmJjb25nOyIsIs+2IjoiJmJlcHNpOyIsIuKAtSI6IiZicHJpbWU7Iiwi4oi9IjoiJmJzaW07Iiwi4ouNIjoiJmJzaW1lOyIsIuKKvSI6IiZiYXJ2ZWU7Iiwi4oyFIjoiJmJhcndlZGdlOyIsIuKOtiI6IiZiYnJrdGJyazsiLCLQsSI6IiZiY3k7Iiwi4oCeIjoiJmxkcXVvcjsiLCLiprAiOiImYmVtcHR5djsiLCLOsiI6IiZiZXRhOyIsIuKEtiI6IiZiZXRoOyIsIuKJrCI6IiZ0d2l4dDsiLCLwnZSfIjoiJmJmcjsiLCLil68iOiImeGNpcmM7Iiwi4qiAIjoiJnhvZG90OyIsIuKogSI6IiZ4b3BsdXM7Iiwi4qiCIjoiJnhvdGltZTsiLCLiqIYiOiImeHNxY3VwOyIsIuKYhSI6IiZzdGFyZjsiLCLilr0iOiImeGR0cmk7Iiwi4pazIjoiJnh1dHJpOyIsIuKohCI6IiZ4dXBsdXM7Iiwi4qSNIjoiJnJiYXJyOyIsIuKnqyI6IiZsb3pmOyIsIuKWtCI6IiZ1dHJpZjsiLCLilr4iOiImZHRyaWY7Iiwi4peCIjoiJmx0cmlmOyIsIuKWuCI6IiZydHJpZjsiLCLikKMiOiImYmxhbms7Iiwi4paSIjoiJmJsazEyOyIsIuKWkSI6IiZibGsxNDsiLCLilpMiOiImYmxrMzQ7Iiwi4paIIjoiJmJsb2NrOyIsIj3ig6UiOiImYm5lOyIsIuKJoeKDpSI6IiZibmVxdWl2OyIsIuKMkCI6IiZibm90OyIsIvCdlZMiOiImYm9wZjsiLCLii4giOiImYm93dGllOyIsIuKVlyI6IiZib3hETDsiLCLilZQiOiImYm94RFI7Iiwi4pWWIjoiJmJveERsOyIsIuKVkyI6IiZib3hEcjsiLCLilZAiOiImYm94SDsiLCLilaYiOiImYm94SEQ7Iiwi4pWpIjoiJmJveEhVOyIsIuKVpCI6IiZib3hIZDsiLCLilaciOiImYm94SHU7Iiwi4pWdIjoiJmJveFVMOyIsIuKVmiI6IiZib3hVUjsiLCLilZwiOiImYm94VWw7Iiwi4pWZIjoiJmJveFVyOyIsIuKVkSI6IiZib3hWOyIsIuKVrCI6IiZib3hWSDsiLCLilaMiOiImYm94Vkw7Iiwi4pWgIjoiJmJveFZSOyIsIuKVqyI6IiZib3hWaDsiLCLilaIiOiImYm94Vmw7Iiwi4pWfIjoiJmJveFZyOyIsIuKniSI6IiZib3hib3g7Iiwi4pWVIjoiJmJveGRMOyIsIuKVkiI6IiZib3hkUjsiLCLilJAiOiImYm94ZGw7Iiwi4pSMIjoiJmJveGRyOyIsIuKVpSI6IiZib3hoRDsiLCLilagiOiImYm94aFU7Iiwi4pSsIjoiJmJveGhkOyIsIuKUtCI6IiZib3hodTsiLCLiip8iOiImbWludXNiOyIsIuKKniI6IiZwbHVzYjsiLCLiiqAiOiImdGltZXNiOyIsIuKVmyI6IiZib3h1TDsiLCLilZgiOiImYm94dVI7Iiwi4pSYIjoiJmJveHVsOyIsIuKUlCI6IiZib3h1cjsiLCLilIIiOiImYm94djsiLCLilaoiOiImYm94dkg7Iiwi4pWhIjoiJmJveHZMOyIsIuKVniI6IiZib3h2UjsiLCLilLwiOiImYm94dmg7Iiwi4pSkIjoiJmJveHZsOyIsIuKUnCI6IiZib3h2cjsiLCLCpiI6IiZicnZiYXI7Iiwi8J2StyI6IiZic2NyOyIsIuKBjyI6IiZic2VtaTsiLCJcXCI6IiZic29sOyIsIuKnhSI6IiZic29sYjsiLCLin4giOiImYnNvbGhzdWI7Iiwi4oCiIjoiJmJ1bGxldDsiLCLiqq4iOiImYnVtcEU7IiwixIciOiImY2FjdXRlOyIsIuKIqSI6IiZjYXA7Iiwi4qmEIjoiJmNhcGFuZDsiLCLiqYkiOiImY2FwYnJjdXA7Iiwi4qmLIjoiJmNhcGNhcDsiLCLiqYciOiImY2FwY3VwOyIsIuKpgCI6IiZjYXBkb3Q7Iiwi4oip77iAIjoiJmNhcHM7Iiwi4oGBIjoiJmNhcmV0OyIsIuKpjSI6IiZjY2FwczsiLCLEjSI6IiZjY2Fyb247Iiwiw6ciOiImY2NlZGlsOyIsIsSJIjoiJmNjaXJjOyIsIuKpjCI6IiZjY3VwczsiLCLiqZAiOiImY2N1cHNzbTsiLCLEiyI6IiZjZG90OyIsIuKmsiI6IiZjZW1wdHl2OyIsIsKiIjoiJmNlbnQ7Iiwi8J2UoCI6IiZjZnI7Iiwi0YciOiImY2hjeTsiLCLinJMiOiImY2hlY2ttYXJrOyIsIs+HIjoiJmNoaTsiLCLil4siOiImY2lyOyIsIuKngyI6IiZjaXJFOyIsIsuGIjoiJmNpcmM7Iiwi4omXIjoiJmNpcmU7Iiwi4oa6IjoiJm9sYXJyOyIsIuKGuyI6IiZvcmFycjsiLCLik4giOiImb1M7Iiwi4oqbIjoiJm9hc3Q7Iiwi4oqaIjoiJm9jaXI7Iiwi4oqdIjoiJm9kYXNoOyIsIuKokCI6IiZjaXJmbmludDsiLCLiq68iOiImY2lybWlkOyIsIuKngiI6IiZjaXJzY2lyOyIsIuKZoyI6IiZjbHVic3VpdDsiLCI6IjoiJmNvbG9uOyIsIiwiOiImY29tbWE7IiwiQCI6IiZjb21tYXQ7Iiwi4oiBIjoiJmNvbXBsZW1lbnQ7Iiwi4qmtIjoiJmNvbmdkb3Q7Iiwi8J2VlCI6IiZjb3BmOyIsIuKElyI6IiZjb3B5c3I7Iiwi4oa1IjoiJmNyYXJyOyIsIuKclyI6IiZjcm9zczsiLCLwnZK4IjoiJmNzY3I7Iiwi4quPIjoiJmNzdWI7Iiwi4quRIjoiJmNzdWJlOyIsIuKrkCI6IiZjc3VwOyIsIuKrkiI6IiZjc3VwZTsiLCLii68iOiImY3Rkb3Q7Iiwi4qS4IjoiJmN1ZGFycmw7Iiwi4qS1IjoiJmN1ZGFycnI7Iiwi4oueIjoiJmN1cmx5ZXFwcmVjOyIsIuKLnyI6IiZjdXJseWVxc3VjYzsiLCLihrYiOiImY3VydmVhcnJvd2xlZnQ7Iiwi4qS9IjoiJmN1bGFycnA7Iiwi4oiqIjoiJmN1cDsiLCLiqYgiOiImY3VwYnJjYXA7Iiwi4qmGIjoiJmN1cGNhcDsiLCLiqYoiOiImY3VwY3VwOyIsIuKKjSI6IiZjdXBkb3Q7Iiwi4qmFIjoiJmN1cG9yOyIsIuKIqu+4gCI6IiZjdXBzOyIsIuKGtyI6IiZjdXJ2ZWFycm93cmlnaHQ7Iiwi4qS8IjoiJmN1cmFycm07Iiwi4ouOIjoiJmN1dmVlOyIsIuKLjyI6IiZjdXdlZDsiLCLCpCI6IiZjdXJyZW47Iiwi4oixIjoiJmN3aW50OyIsIuKMrSI6IiZjeWxjdHk7Iiwi4qWlIjoiJmRIYXI7Iiwi4oCgIjoiJmRhZ2dlcjsiLCLihLgiOiImZGFsZXRoOyIsIuKAkCI6IiZoeXBoZW47Iiwi4qSPIjoiJnJCYXJyOyIsIsSPIjoiJmRjYXJvbjsiLCLQtCI6IiZkY3k7Iiwi4oeKIjoiJmRvd25kb3duYXJyb3dzOyIsIuKptyI6IiZlRERvdDsiLCLCsCI6IiZkZWc7IiwizrQiOiImZGVsdGE7Iiwi4qaxIjoiJmRlbXB0eXY7Iiwi4qW/IjoiJmRmaXNodDsiLCLwnZShIjoiJmRmcjsiLCLimaYiOiImZGlhbXM7Iiwiz50iOiImZ2FtbWFkOyIsIuKLsiI6IiZkaXNpbjsiLCLDtyI6IiZkaXZpZGU7Iiwi4ouHIjoiJmRpdm9ueDsiLCLRkiI6IiZkamN5OyIsIuKMniI6IiZsbGNvcm5lcjsiLCLijI0iOiImZGxjcm9wOyIsJDoiJmRvbGxhcjsiLCLwnZWVIjoiJmRvcGY7Iiwi4omRIjoiJmVEb3Q7Iiwi4oi4IjoiJm1pbnVzZDsiLCLiiJQiOiImcGx1c2RvOyIsIuKKoSI6IiZzZG90YjsiLCLijJ8iOiImbHJjb3JuZXI7Iiwi4oyMIjoiJmRyY3JvcDsiLCLwnZK5IjoiJmRzY3I7Iiwi0ZUiOiImZHNjeTsiLCLip7YiOiImZHNvbDsiLCLEkSI6IiZkc3Ryb2s7Iiwi4ouxIjoiJmR0ZG90OyIsIuKWvyI6IiZ0cmlhbmdsZWRvd247Iiwi4qamIjoiJmR3YW5nbGU7Iiwi0Z8iOiImZHpjeTsiLCLin78iOiImZHppZ3JhcnI7Iiwiw6kiOiImZWFjdXRlOyIsIuKpriI6IiZlYXN0ZXI7IiwixJsiOiImZWNhcm9uOyIsIuKJliI6IiZlcWNpcmM7Iiwiw6oiOiImZWNpcmM7Iiwi4omVIjoiJmVxY29sb247Iiwi0Y0iOiImZWN5OyIsIsSXIjoiJmVkb3Q7Iiwi4omSIjoiJmZhbGxpbmdkb3RzZXE7Iiwi8J2UoiI6IiZlZnI7Iiwi4qqaIjoiJmVnOyIsIsOoIjoiJmVncmF2ZTsiLCLiqpYiOiImZXFzbGFudGd0cjsiLCLiqpgiOiImZWdzZG90OyIsIuKqmSI6IiZlbDsiLCLij6ciOiImZWxpbnRlcnM7Iiwi4oSTIjoiJmVsbDsiLCLiqpUiOiImZXFzbGFudGxlc3M7Iiwi4qqXIjoiJmVsc2RvdDsiLCLEkyI6IiZlbWFjcjsiLCLiiIUiOiImdmFybm90aGluZzsiLCLigIQiOiImZW1zcDEzOyIsIuKAhSI6IiZlbXNwMTQ7Iiwi4oCDIjoiJmVtc3A7IiwixYsiOiImZW5nOyIsIuKAgiI6IiZlbnNwOyIsIsSZIjoiJmVvZ29uOyIsIvCdlZYiOiImZW9wZjsiLCLii5UiOiImZXBhcjsiLCLip6MiOiImZXBhcnNsOyIsIuKpsSI6IiZlcGx1czsiLCLOtSI6IiZlcHNpbG9uOyIsIs+1IjoiJnZhcmVwc2lsb247IiwiPSI6IiZlcXVhbHM7Iiwi4omfIjoiJnF1ZXN0ZXE7Iiwi4qm4IjoiJmVxdWl2REQ7Iiwi4qelIjoiJmVxdnBhcnNsOyIsIuKJkyI6IiZyaXNpbmdkb3RzZXE7Iiwi4qWxIjoiJmVyYXJyOyIsIuKEryI6IiZlc2NyOyIsIs63IjoiJmV0YTsiLCLDsCI6IiZldGg7Iiwiw6siOiImZXVtbDsiLCLigqwiOiImZXVybzsiLCIhIjoiJmV4Y2w7Iiwi0YQiOiImZmN5OyIsIuKZgCI6IiZmZW1hbGU7Iiwi76yDIjoiJmZmaWxpZzsiLCLvrIAiOiImZmZsaWc7Iiwi76yEIjoiJmZmbGxpZzsiLCLwnZSjIjoiJmZmcjsiLCLvrIEiOiImZmlsaWc7IixmajoiJmZqbGlnOyIsIuKZrSI6IiZmbGF0OyIsIu+sgiI6IiZmbGxpZzsiLCLilrEiOiImZmx0bnM7IiwixpIiOiImZm5vZjsiLCLwnZWXIjoiJmZvcGY7Iiwi4ouUIjoiJnBpdGNoZm9yazsiLCLiq5kiOiImZm9ya3Y7Iiwi4qiNIjoiJmZwYXJ0aW50OyIsIsK9IjoiJmhhbGY7Iiwi4oWTIjoiJmZyYWMxMzsiLCLCvCI6IiZmcmFjMTQ7Iiwi4oWVIjoiJmZyYWMxNTsiLCLihZkiOiImZnJhYzE2OyIsIuKFmyI6IiZmcmFjMTg7Iiwi4oWUIjoiJmZyYWMyMzsiLCLihZYiOiImZnJhYzI1OyIsIsK+IjoiJmZyYWMzNDsiLCLihZciOiImZnJhYzM1OyIsIuKFnCI6IiZmcmFjMzg7Iiwi4oWYIjoiJmZyYWM0NTsiLCLihZoiOiImZnJhYzU2OyIsIuKFnSI6IiZmcmFjNTg7Iiwi4oWeIjoiJmZyYWM3ODsiLCLigYQiOiImZnJhc2w7Iiwi4oyiIjoiJnNmcm93bjsiLCLwnZK7IjoiJmZzY3I7Iiwi4qqMIjoiJmd0cmVxcWxlc3M7Iiwix7UiOiImZ2FjdXRlOyIsIs6zIjoiJmdhbW1hOyIsIuKqhiI6IiZndHJhcHByb3g7IiwixJ8iOiImZ2JyZXZlOyIsIsSdIjoiJmdjaXJjOyIsItCzIjoiJmdjeTsiLCLEoSI6IiZnZG90OyIsIuKqqSI6IiZnZXNjYzsiLCLiqoAiOiImZ2VzZG90OyIsIuKqgiI6IiZnZXNkb3RvOyIsIuKqhCI6IiZnZXNkb3RvbDsiLCLii5vvuIAiOiImZ2VzbDsiLCLiqpQiOiImZ2VzbGVzOyIsIvCdlKQiOiImZ2ZyOyIsIuKEtyI6IiZnaW1lbDsiLCLRkyI6IiZnamN5OyIsIuKqkiI6IiZnbEU7Iiwi4qqlIjoiJmdsYTsiLCLiqqQiOiImZ2xqOyIsIuKJqSI6IiZnbmVxcTsiLCLiqooiOiImZ25hcHByb3g7Iiwi4qqIIjoiJmduZXE7Iiwi4ounIjoiJmduc2ltOyIsIvCdlZgiOiImZ29wZjsiLCLihIoiOiImZ3NjcjsiLCLiqo4iOiImZ3NpbWU7Iiwi4qqQIjoiJmdzaW1sOyIsIuKqpyI6IiZndGNjOyIsIuKpuiI6IiZndGNpcjsiLCLii5ciOiImZ3RyZG90OyIsIuKmlSI6IiZndGxQYXI7Iiwi4qm8IjoiJmd0cXVlc3Q7Iiwi4qW4IjoiJmd0cmFycjsiLCLiianvuIAiOiImZ3ZuRTsiLCLRiiI6IiZoYXJkY3k7Iiwi4qWIIjoiJmhhcnJjaXI7Iiwi4oatIjoiJmxlZnRyaWdodHNxdWlnYXJyb3c7Iiwi4oSPIjoiJnBsYW5rdjsiLCLEpSI6IiZoY2lyYzsiLCLimaUiOiImaGVhcnRzdWl0OyIsIuKApiI6IiZtbGRyOyIsIuKKuSI6IiZoZXJjb247Iiwi8J2UpSI6IiZoZnI7Iiwi4qSlIjoiJnNlYXJoazsiLCLipKYiOiImc3dhcmhrOyIsIuKHvyI6IiZob2FycjsiLCLiiLsiOiImaG9tdGh0OyIsIuKGqSI6IiZsYXJyaGs7Iiwi4oaqIjoiJnJhcnJoazsiLCLwnZWZIjoiJmhvcGY7Iiwi4oCVIjoiJmhvcmJhcjsiLCLwnZK9IjoiJmhzY3I7IiwixKciOiImaHN0cm9rOyIsIuKBgyI6IiZoeWJ1bGw7Iiwiw60iOiImaWFjdXRlOyIsIsOuIjoiJmljaXJjOyIsItC4IjoiJmljeTsiLCLQtSI6IiZpZWN5OyIsIsKhIjoiJmlleGNsOyIsIvCdlKYiOiImaWZyOyIsIsOsIjoiJmlncmF2ZTsiLCLiqIwiOiImcWludDsiLCLiiK0iOiImdGludDsiLCLip5wiOiImaWluZmluOyIsIuKEqSI6IiZpaW90YTsiLCLEsyI6IiZpamxpZzsiLCLEqyI6IiZpbWFjcjsiLCLEsSI6IiZpbm9kb3Q7Iiwi4oq3IjoiJmltb2Y7IiwixrUiOiImaW1wZWQ7Iiwi4oSFIjoiJmluY2FyZTsiLCLiiJ4iOiImaW5maW47Iiwi4qedIjoiJmluZmludGllOyIsIuKKuiI6IiZpbnRlcmNhbDsiLCLiqJciOiImaW50bGFyaGs7Iiwi4qi8IjoiJmlwcm9kOyIsItGRIjoiJmlvY3k7IiwixK8iOiImaW9nb247Iiwi8J2VmiI6IiZpb3BmOyIsIs65IjoiJmlvdGE7Iiwiwr8iOiImaXF1ZXN0OyIsIvCdkr4iOiImaXNjcjsiLCLii7kiOiImaXNpbkU7Iiwi4ou1IjoiJmlzaW5kb3Q7Iiwi4ou0IjoiJmlzaW5zOyIsIuKLsyI6IiZpc2luc3Y7IiwixKkiOiImaXRpbGRlOyIsItGWIjoiJml1a2N5OyIsIsOvIjoiJml1bWw7IiwixLUiOiImamNpcmM7Iiwi0LkiOiImamN5OyIsIvCdlKciOiImamZyOyIsIsi3IjoiJmptYXRoOyIsIvCdlZsiOiImam9wZjsiLCLwnZK/IjoiJmpzY3I7Iiwi0ZgiOiImanNlcmN5OyIsItGUIjoiJmp1a2N5OyIsIs66IjoiJmthcHBhOyIsIs+wIjoiJnZhcmthcHBhOyIsIsS3IjoiJmtjZWRpbDsiLCLQuiI6IiZrY3k7Iiwi8J2UqCI6IiZrZnI7IiwixLgiOiIma2dyZWVuOyIsItGFIjoiJmtoY3k7Iiwi0ZwiOiIma2pjeTsiLCLwnZWcIjoiJmtvcGY7Iiwi8J2TgCI6IiZrc2NyOyIsIuKkmyI6IiZsQXRhaWw7Iiwi4qSOIjoiJmxCYXJyOyIsIuKqiyI6IiZsZXNzZXFxZ3RyOyIsIuKloiI6IiZsSGFyOyIsIsS6IjoiJmxhY3V0ZTsiLCLiprQiOiImbGFlbXB0eXY7IiwizrsiOiImbGFtYmRhOyIsIuKmkSI6IiZsYW5nZDsiLCLiqoUiOiImbGVzc2FwcHJveDsiLCLCqyI6IiZsYXF1bzsiLCLipJ8iOiImbGFycmJmczsiLCLipJ0iOiImbGFycmZzOyIsIuKGqyI6IiZsb29wYXJyb3dsZWZ0OyIsIuKkuSI6IiZsYXJycGw7Iiwi4qWzIjoiJmxhcnJzaW07Iiwi4oaiIjoiJmxlZnRhcnJvd3RhaWw7Iiwi4qqrIjoiJmxhdDsiLCLipJkiOiImbGF0YWlsOyIsIuKqrSI6IiZsYXRlOyIsIuKqre+4gCI6IiZsYXRlczsiLCLipIwiOiImbGJhcnI7Iiwi4p2yIjoiJmxiYnJrOyIsInsiOiImbGN1YjsiLCJbIjoiJmxzcWI7Iiwi4qaLIjoiJmxicmtlOyIsIuKmjyI6IiZsYnJrc2xkOyIsIuKmjSI6IiZsYnJrc2x1OyIsIsS+IjoiJmxjYXJvbjsiLCLEvCI6IiZsY2VkaWw7Iiwi0LsiOiImbGN5OyIsIuKktiI6IiZsZGNhOyIsIuKlpyI6IiZsZHJkaGFyOyIsIuKliyI6IiZsZHJ1c2hhcjsiLCLihrIiOiImbGRzaDsiLCLiiaQiOiImbGVxOyIsIuKHhyI6IiZsbGFycjsiLCLii4siOiImbHRocmVlOyIsIuKqqCI6IiZsZXNjYzsiLCLiqb8iOiImbGVzZG90OyIsIuKqgSI6IiZsZXNkb3RvOyIsIuKqgyI6IiZsZXNkb3RvcjsiLCLii5rvuIAiOiImbGVzZzsiLCLiqpMiOiImbGVzZ2VzOyIsIuKLliI6IiZsdGRvdDsiLCLipbwiOiImbGZpc2h0OyIsIvCdlKkiOiImbGZyOyIsIuKqkSI6IiZsZ0U7Iiwi4qWqIjoiJmxoYXJ1bDsiLCLiloQiOiImbGhibGs7Iiwi0ZkiOiImbGpjeTsiLCLipasiOiImbGxoYXJkOyIsIuKXuiI6IiZsbHRyaTsiLCLFgCI6IiZsbWlkb3Q7Iiwi4o6wIjoiJmxtb3VzdGFjaGU7Iiwi4omoIjoiJmxuZXFxOyIsIuKqiSI6IiZsbmFwcHJveDsiLCLiqociOiImbG5lcTsiLCLii6YiOiImbG5zaW07Iiwi4p+sIjoiJmxvYW5nOyIsIuKHvSI6IiZsb2FycjsiLCLin7wiOiImeG1hcDsiLCLihqwiOiImcmFycmxwOyIsIuKmhSI6IiZsb3BhcjsiLCLwnZWdIjoiJmxvcGY7Iiwi4qitIjoiJmxvcGx1czsiLCLiqLQiOiImbG90aW1lczsiLCLiiJciOiImbG93YXN0OyIsIuKXiiI6IiZsb3plbmdlOyIsIigiOiImbHBhcjsiLCLippMiOiImbHBhcmx0OyIsIuKlrSI6IiZscmhhcmQ7Iiwi4oCOIjoiJmxybTsiLCLiir8iOiImbHJ0cmk7Iiwi4oC5IjoiJmxzYXF1bzsiLCLwnZOBIjoiJmxzY3I7Iiwi4qqNIjoiJmxzaW1lOyIsIuKqjyI6IiZsc2ltZzsiLCLigJoiOiImc2JxdW87IiwixYIiOiImbHN0cm9rOyIsIuKqpiI6IiZsdGNjOyIsIuKpuSI6IiZsdGNpcjsiLCLii4kiOiImbHRpbWVzOyIsIuKltiI6IiZsdGxhcnI7Iiwi4qm7IjoiJmx0cXVlc3Q7Iiwi4qaWIjoiJmx0clBhcjsiLCLil4MiOiImdHJpYW5nbGVsZWZ0OyIsIuKliiI6IiZsdXJkc2hhcjsiLCLipaYiOiImbHVydWhhcjsiLCLiiajvuIAiOiImbHZuRTsiLCLiiLoiOiImbUREb3Q7Iiwiwq8iOiImc3RybnM7Iiwi4pmCIjoiJm1hbGU7Iiwi4pygIjoiJm1hbHRlc2U7Iiwi4pauIjoiJm1hcmtlcjsiLCLiqKkiOiImbWNvbW1hOyIsItC8IjoiJm1jeTsiLCLigJQiOiImbWRhc2g7Iiwi8J2UqiI6IiZtZnI7Iiwi4oSnIjoiJm1obzsiLCLCtSI6IiZtaWNybzsiLCLiq7AiOiImbWlkY2lyOyIsIuKIkiI6IiZtaW51czsiLCLiqKoiOiImbWludXNkdTsiLCLiq5siOiImbWxjcDsiLCLiiqciOiImbW9kZWxzOyIsIvCdlZ4iOiImbW9wZjsiLCLwnZOCIjoiJm1zY3I7IiwizrwiOiImbXU7Iiwi4oq4IjoiJm11bWFwOyIsIuKLmcy4IjoiJm5HZzsiLCLiiavig5IiOiImbkd0OyIsIuKHjSI6IiZubEFycjsiLCLih44iOiImbmhBcnI7Iiwi4ouYzLgiOiImbkxsOyIsIuKJquKDkiI6IiZuTHQ7Iiwi4oePIjoiJm5yQXJyOyIsIuKKryI6IiZuVkRhc2g7Iiwi4oquIjoiJm5WZGFzaDsiLCLFhCI6IiZuYWN1dGU7Iiwi4oig4oOSIjoiJm5hbmc7Iiwi4qmwzLgiOiImbmFwRTsiLCLiiYvMuCI6IiZuYXBpZDsiLCLFiSI6IiZuYXBvczsiLCLima4iOiImbmF0dXJhbDsiLCLiqYMiOiImbmNhcDsiLCLFiCI6IiZuY2Fyb247IiwixYYiOiImbmNlZGlsOyIsIuKprcy4IjoiJm5jb25nZG90OyIsIuKpgiI6IiZuY3VwOyIsItC9IjoiJm5jeTsiLCLigJMiOiImbmRhc2g7Iiwi4oeXIjoiJm5lQXJyOyIsIuKkpCI6IiZuZWFyaGs7Iiwi4omQzLgiOiImbmVkb3Q7Iiwi4qSoIjoiJnRvZWE7Iiwi8J2UqyI6IiZuZnI7Iiwi4oauIjoiJm5sZWZ0cmlnaHRhcnJvdzsiLCLiq7IiOiImbmhwYXI7Iiwi4ou8IjoiJm5pczsiLCLii7oiOiImbmlzZDsiLCLRmiI6IiZuamN5OyIsIuKJpsy4IjoiJm5sZXFxOyIsIuKGmiI6IiZubGVmdGFycm93OyIsIuKApSI6IiZubGRyOyIsIvCdlZ8iOiImbm9wZjsiLCLCrCI6IiZub3Q7Iiwi4ou5zLgiOiImbm90aW5FOyIsIuKLtcy4IjoiJm5vdGluZG90OyIsIuKLtyI6IiZub3RpbnZiOyIsIuKLtiI6IiZub3RpbnZjOyIsIuKLviI6IiZub3RuaXZiOyIsIuKLvSI6IiZub3RuaXZjOyIsIuKrveKDpSI6IiZucGFyc2w7Iiwi4oiCzLgiOiImbnBhcnQ7Iiwi4qiUIjoiJm5wb2xpbnQ7Iiwi4oabIjoiJm5yaWdodGFycm93OyIsIuKks8y4IjoiJm5yYXJyYzsiLCLihp3MuCI6IiZucmFycnc7Iiwi8J2TgyI6IiZuc2NyOyIsIuKKhCI6IiZuc3ViOyIsIuKrhcy4IjoiJm5zdWJzZXRlcXE7Iiwi4oqFIjoiJm5zdXA7Iiwi4quGzLgiOiImbnN1cHNldGVxcTsiLCLDsSI6IiZudGlsZGU7Iiwizr0iOiImbnU7IiwiIyI6IiZudW07Iiwi4oSWIjoiJm51bWVybzsiLCLigIciOiImbnVtc3A7Iiwi4oqtIjoiJm52RGFzaDsiLCLipIQiOiImbnZIYXJyOyIsIuKJjeKDkiI6IiZudmFwOyIsIuKKrCI6IiZudmRhc2g7Iiwi4oml4oOSIjoiJm52Z2U7IiwiPuKDkiI6IiZudmd0OyIsIuKnniI6IiZudmluZmluOyIsIuKkgiI6IiZudmxBcnI7Iiwi4omk4oOSIjoiJm52bGU7IiwiPOKDkiI6IiZudmx0OyIsIuKKtOKDkiI6IiZudmx0cmllOyIsIuKkgyI6IiZudnJBcnI7Iiwi4oq14oOSIjoiJm52cnRyaWU7Iiwi4oi84oOSIjoiJm52c2ltOyIsIuKHliI6IiZud0FycjsiLCLipKMiOiImbndhcmhrOyIsIuKkpyI6IiZud25lYXI7Iiwiw7MiOiImb2FjdXRlOyIsIsO0IjoiJm9jaXJjOyIsItC+IjoiJm9jeTsiLCLFkSI6IiZvZGJsYWM7Iiwi4qi4IjoiJm9kaXY7Iiwi4qa8IjoiJm9kc29sZDsiLCLFkyI6IiZvZWxpZzsiLCLipr8iOiImb2ZjaXI7Iiwi8J2UrCI6IiZvZnI7Iiwiy5siOiImb2dvbjsiLCLDsiI6IiZvZ3JhdmU7Iiwi4qeBIjoiJm9ndDsiLCLiprUiOiImb2hiYXI7Iiwi4qa+IjoiJm9sY2lyOyIsIuKmuyI6IiZvbGNyb3NzOyIsIuKngCI6IiZvbHQ7IiwixY0iOiImb21hY3I7Iiwiz4kiOiImb21lZ2E7Iiwizr8iOiImb21pY3JvbjsiLCLiprYiOiImb21pZDsiLCLwnZWgIjoiJm9vcGY7Iiwi4qa3IjoiJm9wYXI7Iiwi4qa5IjoiJm9wZXJwOyIsIuKIqCI6IiZ2ZWU7Iiwi4qmdIjoiJm9yZDsiLCLihLQiOiImb3NjcjsiLCLCqiI6IiZvcmRmOyIsIsK6IjoiJm9yZG07Iiwi4oq2IjoiJm9yaWdvZjsiLCLiqZYiOiImb3JvcjsiLCLiqZciOiImb3JzbG9wZTsiLCLiqZsiOiImb3J2OyIsIsO4IjoiJm9zbGFzaDsiLCLiipgiOiImb3NvbDsiLCLDtSI6IiZvdGlsZGU7Iiwi4qi2IjoiJm90aW1lc2FzOyIsIsO2IjoiJm91bWw7Iiwi4oy9IjoiJm92YmFyOyIsIsK2IjoiJnBhcmE7Iiwi4quzIjoiJnBhcnNpbTsiLCLiq70iOiImcGFyc2w7Iiwi0L8iOiImcGN5OyIsIiUiOiImcGVyY250OyIsIi4iOiImcGVyaW9kOyIsIuKAsCI6IiZwZXJtaWw7Iiwi4oCxIjoiJnBlcnRlbms7Iiwi8J2UrSI6IiZwZnI7Iiwiz4YiOiImcGhpOyIsIs+VIjoiJnZhcnBoaTsiLCLimI4iOiImcGhvbmU7Iiwiz4AiOiImcGk7Iiwiz5YiOiImdmFycGk7Iiwi4oSOIjoiJnBsYW5ja2g7IiwiKyI6IiZwbHVzOyIsIuKooyI6IiZwbHVzYWNpcjsiLCLiqKIiOiImcGx1c2NpcjsiLCLiqKUiOiImcGx1c2R1OyIsIuKpsiI6IiZwbHVzZTsiLCLiqKYiOiImcGx1c3NpbTsiLCLiqKciOiImcGx1c3R3bzsiLCLiqJUiOiImcG9pbnRpbnQ7Iiwi8J2VoSI6IiZwb3BmOyIsIsKjIjoiJnBvdW5kOyIsIuKqsyI6IiZwckU7Iiwi4qq3IjoiJnByZWNhcHByb3g7Iiwi4qq5IjoiJnBybmFwOyIsIuKqtSI6IiZwcm5FOyIsIuKLqCI6IiZwcm5zaW07Iiwi4oCyIjoiJnByaW1lOyIsIuKMriI6IiZwcm9mYWxhcjsiLCLijJIiOiImcHJvZmxpbmU7Iiwi4oyTIjoiJnByb2ZzdXJmOyIsIuKKsCI6IiZwcnVyZWw7Iiwi8J2ThSI6IiZwc2NyOyIsIs+IIjoiJnBzaTsiLCLigIgiOiImcHVuY3NwOyIsIvCdlK4iOiImcWZyOyIsIvCdlaIiOiImcW9wZjsiLCLigZciOiImcXByaW1lOyIsIvCdk4YiOiImcXNjcjsiLCLiqJYiOiImcXVhdGludDsiLCI/IjoiJnF1ZXN0OyIsIuKknCI6IiZyQXRhaWw7Iiwi4qWkIjoiJnJIYXI7Iiwi4oi9zLEiOiImcmFjZTsiLCLFlSI6IiZyYWN1dGU7Iiwi4qazIjoiJnJhZW1wdHl2OyIsIuKmkiI6IiZyYW5nZDsiLCLipqUiOiImcmFuZ2U7IiwiwrsiOiImcmFxdW87Iiwi4qW1IjoiJnJhcnJhcDsiLCLipKAiOiImcmFycmJmczsiLCLipLMiOiImcmFycmM7Iiwi4qSeIjoiJnJhcnJmczsiLCLipYUiOiImcmFycnBsOyIsIuKltCI6IiZyYXJyc2ltOyIsIuKGoyI6IiZyaWdodGFycm93dGFpbDsiLCLihp0iOiImcmlnaHRzcXVpZ2Fycm93OyIsIuKkmiI6IiZyYXRhaWw7Iiwi4oi2IjoiJnJhdGlvOyIsIuKdsyI6IiZyYmJyazsiLCJ9IjoiJnJjdWI7IiwiXSI6IiZyc3FiOyIsIuKmjCI6IiZyYnJrZTsiLCLipo4iOiImcmJya3NsZDsiLCLippAiOiImcmJya3NsdTsiLCLFmSI6IiZyY2Fyb247IiwixZciOiImcmNlZGlsOyIsItGAIjoiJnJjeTsiLCLipLciOiImcmRjYTsiLCLipakiOiImcmRsZGhhcjsiLCLihrMiOiImcmRzaDsiLCLilq0iOiImcmVjdDsiLCLipb0iOiImcmZpc2h0OyIsIvCdlK8iOiImcmZyOyIsIuKlrCI6IiZyaGFydWw7Iiwiz4EiOiImcmhvOyIsIs+xIjoiJnZhcnJobzsiLCLih4kiOiImcnJhcnI7Iiwi4ouMIjoiJnJ0aHJlZTsiLCLLmiI6IiZyaW5nOyIsIuKAjyI6IiZybG07Iiwi4o6xIjoiJnJtb3VzdGFjaGU7Iiwi4quuIjoiJnJubWlkOyIsIuKfrSI6IiZyb2FuZzsiLCLih74iOiImcm9hcnI7Iiwi4qaGIjoiJnJvcGFyOyIsIvCdlaMiOiImcm9wZjsiLCLiqK4iOiImcm9wbHVzOyIsIuKotSI6IiZyb3RpbWVzOyIsIikiOiImcnBhcjsiLCLippQiOiImcnBhcmd0OyIsIuKokiI6IiZycHBvbGludDsiLCLigLoiOiImcnNhcXVvOyIsIvCdk4ciOiImcnNjcjsiLCLii4oiOiImcnRpbWVzOyIsIuKWuSI6IiZ0cmlhbmdsZXJpZ2h0OyIsIuKnjiI6IiZydHJpbHRyaTsiLCLipagiOiImcnVsdWhhcjsiLCLihJ4iOiImcng7IiwixZsiOiImc2FjdXRlOyIsIuKqtCI6IiZzY0U7Iiwi4qq4IjoiJnN1Y2NhcHByb3g7IiwixaEiOiImc2Nhcm9uOyIsIsWfIjoiJnNjZWRpbDsiLCLFnSI6IiZzY2lyYzsiLCLiqrYiOiImc3VjY25lcXE7Iiwi4qq6IjoiJnN1Y2NuYXBwcm94OyIsIuKLqSI6IiZzdWNjbnNpbTsiLCLiqJMiOiImc2Nwb2xpbnQ7Iiwi0YEiOiImc2N5OyIsIuKLhSI6IiZzZG90OyIsIuKppiI6IiZzZG90ZTsiLCLih5giOiImc2VBcnI7IiwiwqciOiImc2VjdDsiLCI7IjoiJnNlbWk7Iiwi4qSpIjoiJnRvc2E7Iiwi4py2IjoiJnNleHQ7Iiwi8J2UsCI6IiZzZnI7Iiwi4pmvIjoiJnNoYXJwOyIsItGJIjoiJnNoY2hjeTsiLCLRiCI6IiZzaGN5OyIsIsKtIjoiJnNoeTsiLCLPgyI6IiZzaWdtYTsiLCLPgiI6IiZ2YXJzaWdtYTsiLCLiqaoiOiImc2ltZG90OyIsIuKqniI6IiZzaW1nOyIsIuKqoCI6IiZzaW1nRTsiLCLiqp0iOiImc2ltbDsiLCLiqp8iOiImc2ltbEU7Iiwi4omGIjoiJnNpbW5lOyIsIuKopCI6IiZzaW1wbHVzOyIsIuKlsiI6IiZzaW1yYXJyOyIsIuKosyI6IiZzbWFzaHA7Iiwi4qekIjoiJnNtZXBhcnNsOyIsIuKMoyI6IiZzc21pbGU7Iiwi4qqqIjoiJnNtdDsiLCLiqqwiOiImc210ZTsiLCLiqqzvuIAiOiImc210ZXM7Iiwi0YwiOiImc29mdGN5OyIsIi8iOiImc29sOyIsIuKnhCI6IiZzb2xiOyIsIuKMvyI6IiZzb2xiYXI7Iiwi8J2VpCI6IiZzb3BmOyIsIuKZoCI6IiZzcGFkZXN1aXQ7Iiwi4oqT77iAIjoiJnNxY2FwczsiLCLiipTvuIAiOiImc3FjdXBzOyIsIvCdk4giOiImc3NjcjsiLCLimIYiOiImc3RhcjsiLCLiioIiOiImc3Vic2V0OyIsIuKrhSI6IiZzdWJzZXRlcXE7Iiwi4qq9IjoiJnN1YmRvdDsiLCLiq4MiOiImc3ViZWRvdDsiLCLiq4EiOiImc3VibXVsdDsiLCLiq4siOiImc3Vic2V0bmVxcTsiLCLiiooiOiImc3Vic2V0bmVxOyIsIuKqvyI6IiZzdWJwbHVzOyIsIuKluSI6IiZzdWJyYXJyOyIsIuKrhyI6IiZzdWJzaW07Iiwi4quVIjoiJnN1YnN1YjsiLCLiq5MiOiImc3Vic3VwOyIsIuKZqiI6IiZzdW5nOyIsIsK5IjoiJnN1cDE7IiwiwrIiOiImc3VwMjsiLCLCsyI6IiZzdXAzOyIsIuKrhiI6IiZzdXBzZXRlcXE7Iiwi4qq+IjoiJnN1cGRvdDsiLCLiq5giOiImc3VwZHN1YjsiLCLiq4QiOiImc3VwZWRvdDsiLCLin4kiOiImc3VwaHNvbDsiLCLiq5ciOiImc3VwaHN1YjsiLCLipbsiOiImc3VwbGFycjsiLCLiq4IiOiImc3VwbXVsdDsiLCLiq4wiOiImc3Vwc2V0bmVxcTsiLCLiiosiOiImc3Vwc2V0bmVxOyIsIuKrgCI6IiZzdXBwbHVzOyIsIuKriCI6IiZzdXBzaW07Iiwi4quUIjoiJnN1cHN1YjsiLCLiq5YiOiImc3Vwc3VwOyIsIuKHmSI6IiZzd0FycjsiLCLipKoiOiImc3dud2FyOyIsIsOfIjoiJnN6bGlnOyIsIuKMliI6IiZ0YXJnZXQ7Iiwiz4QiOiImdGF1OyIsIsWlIjoiJnRjYXJvbjsiLCLFoyI6IiZ0Y2VkaWw7Iiwi0YIiOiImdGN5OyIsIuKMlSI6IiZ0ZWxyZWM7Iiwi8J2UsSI6IiZ0ZnI7IiwizrgiOiImdGhldGE7Iiwiz5EiOiImdmFydGhldGE7Iiwiw74iOiImdGhvcm47Iiwiw5ciOiImdGltZXM7Iiwi4qixIjoiJnRpbWVzYmFyOyIsIuKosCI6IiZ0aW1lc2Q7Iiwi4oy2IjoiJnRvcGJvdDsiLCLiq7EiOiImdG9wY2lyOyIsIvCdlaUiOiImdG9wZjsiLCLiq5oiOiImdG9wZm9yazsiLCLigLQiOiImdHByaW1lOyIsIuKWtSI6IiZ1dHJpOyIsIuKJnCI6IiZ0cmllOyIsIuKXrCI6IiZ0cmlkb3Q7Iiwi4qi6IjoiJnRyaW1pbnVzOyIsIuKouSI6IiZ0cmlwbHVzOyIsIuKnjSI6IiZ0cmlzYjsiLCLiqLsiOiImdHJpdGltZTsiLCLij6IiOiImdHJwZXppdW07Iiwi8J2TiSI6IiZ0c2NyOyIsItGGIjoiJnRzY3k7Iiwi0ZsiOiImdHNoY3k7IiwixaciOiImdHN0cm9rOyIsIuKloyI6IiZ1SGFyOyIsIsO6IjoiJnVhY3V0ZTsiLCLRniI6IiZ1YnJjeTsiLCLFrSI6IiZ1YnJldmU7Iiwiw7siOiImdWNpcmM7Iiwi0YMiOiImdWN5OyIsIsWxIjoiJnVkYmxhYzsiLCLipb4iOiImdWZpc2h0OyIsIvCdlLIiOiImdWZyOyIsIsO5IjoiJnVncmF2ZTsiLCLiloAiOiImdWhibGs7Iiwi4oycIjoiJnVsY29ybmVyOyIsIuKMjyI6IiZ1bGNyb3A7Iiwi4pe4IjoiJnVsdHJpOyIsIsWrIjoiJnVtYWNyOyIsIsWzIjoiJnVvZ29uOyIsIvCdlaYiOiImdW9wZjsiLCLPhSI6IiZ1cHNpbG9uOyIsIuKHiCI6IiZ1dWFycjsiLCLijJ0iOiImdXJjb3JuZXI7Iiwi4oyOIjoiJnVyY3JvcDsiLCLFryI6IiZ1cmluZzsiLCLil7kiOiImdXJ0cmk7Iiwi8J2TiiI6IiZ1c2NyOyIsIuKLsCI6IiZ1dGRvdDsiLCLFqSI6IiZ1dGlsZGU7Iiwiw7wiOiImdXVtbDsiLCLipqciOiImdXdhbmdsZTsiLCLiq6giOiImdkJhcjsiLCLiq6kiOiImdkJhcnY7Iiwi4qacIjoiJnZhbmdydDsiLCLiiorvuIAiOiImdnN1Ym5lOyIsIuKri++4gCI6IiZ2c3VibkU7Iiwi4oqL77iAIjoiJnZzdXBuZTsiLCLiq4zvuIAiOiImdnN1cG5FOyIsItCyIjoiJnZjeTsiLCLiirsiOiImdmVlYmFyOyIsIuKJmiI6IiZ2ZWVlcTsiLCLii64iOiImdmVsbGlwOyIsIvCdlLMiOiImdmZyOyIsIvCdlaciOiImdm9wZjsiLCLwnZOLIjoiJnZzY3I7Iiwi4qaaIjoiJnZ6aWd6YWc7IiwixbUiOiImd2NpcmM7Iiwi4qmfIjoiJndlZGJhcjsiLCLiiZkiOiImd2VkZ2VxOyIsIuKEmCI6IiZ3cDsiLCLwnZS0IjoiJndmcjsiLCLwnZWoIjoiJndvcGY7Iiwi8J2TjCI6IiZ3c2NyOyIsIvCdlLUiOiImeGZyOyIsIs6+IjoiJnhpOyIsIuKLuyI6IiZ4bmlzOyIsIvCdlakiOiImeG9wZjsiLCLwnZONIjoiJnhzY3I7Iiwiw70iOiImeWFjdXRlOyIsItGPIjoiJnlhY3k7IiwixbciOiImeWNpcmM7Iiwi0YsiOiImeWN5OyIsIsKlIjoiJnllbjsiLCLwnZS2IjoiJnlmcjsiLCLRlyI6IiZ5aWN5OyIsIvCdlaoiOiImeW9wZjsiLCLwnZOOIjoiJnlzY3I7Iiwi0Y4iOiImeXVjeTsiLCLDvyI6IiZ5dW1sOyIsIsW6IjoiJnphY3V0ZTsiLCLFviI6IiZ6Y2Fyb247Iiwi0LciOiImemN5OyIsIsW8IjoiJnpkb3Q7IiwizrYiOiImemV0YTsiLCLwnZS3IjoiJnpmcjsiLCLQtiI6IiZ6aGN5OyIsIuKHnSI6IiZ6aWdyYXJyOyIsIvCdlasiOiImem9wZjsiLCLwnZOPIjoiJnpzY3I7Iiwi4oCNIjoiJnp3ajsiLCLigIwiOiImenduajsifX19OwoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vY2FjaGUvaHRtbC1lbnRpdGllcy1ucG0tMi4zLjMtZTBhYWM2NTZhZi05MjUyMTUwMWRhLnppcC9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvbnVtZXJpYy11bmljb2RlLW1hcC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vY2FjaGUvaHRtbC1lbnRpdGllcy1ucG0tMi4zLjMtZTBhYWM2NTZhZi05MjUyMTUwMWRhLnppcC9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvbnVtZXJpYy11bmljb2RlLW1hcC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4gewoKInVzZSBzdHJpY3QiOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCAoe3ZhbHVlOnRydWV9KSk7ZXhwb3J0cy5udW1lcmljVW5pY29kZU1hcD17MDo2NTUzMywxMjg6ODM2NCwxMzA6ODIxOCwxMzE6NDAyLDEzMjo4MjIyLDEzMzo4MjMwLDEzNDo4MjI0LDEzNTo4MjI1LDEzNjo3MTAsMTM3OjgyNDAsMTM4OjM1MiwxMzk6ODI0OSwxNDA6MzM4LDE0MjozODEsMTQ1OjgyMTYsMTQ2OjgyMTcsMTQ3OjgyMjAsMTQ4OjgyMjEsMTQ5OjgyMjYsMTUwOjgyMTEsMTUxOjgyMTIsMTUyOjczMiwxNTM6ODQ4MiwxNTQ6MzUzLDE1NTo4MjUwLDE1NjozMzksMTU4OjM4MiwxNTk6Mzc2fTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL2NhY2hlL2h0bWwtZW50aXRpZXMtbnBtLTIuMy4zLWUwYWFjNjU2YWYtOTI1MjE1MDFkYS56aXAvbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL3N1cnJvZ2F0ZS1wYWlycy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9zdXJyb2dhdGUtcGFpcnMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4gewoKInVzZSBzdHJpY3QiOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCAoe3ZhbHVlOnRydWV9KSk7ZXhwb3J0cy5mcm9tQ29kZVBvaW50PVN0cmluZy5mcm9tQ29kZVBvaW50fHxmdW5jdGlvbihhc3RyYWxDb2RlUG9pbnQpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKE1hdGguZmxvb3IoKGFzdHJhbENvZGVQb2ludC02NTUzNikvMTAyNCkrNTUyOTYsKGFzdHJhbENvZGVQb2ludC02NTUzNiklMTAyNCs1NjMyMCl9O2V4cG9ydHMuZ2V0Q29kZVBvaW50PVN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQ/ZnVuY3Rpb24oaW5wdXQscG9zaXRpb24pe3JldHVybiBpbnB1dC5jb2RlUG9pbnRBdChwb3NpdGlvbil9OmZ1bmN0aW9uKGlucHV0LHBvc2l0aW9uKXtyZXR1cm4oaW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbiktNTUyOTYpKjEwMjQraW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbisxKS01NjMyMCs2NTUzNn07ZXhwb3J0cy5oaWdoU3Vycm9nYXRlRnJvbT01NTI5NjtleHBvcnRzLmhpZ2hTdXJyb2dhdGVUbz01NjMxOTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL2NhY2hlL29iamVjdC1hc3NpZ24tbnBtLTQuMS4xLTEwMDRhZDZkZWMtZmNjNmU0ZWE4Yy56aXAvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL2NhY2hlL29iamVjdC1hc3NpZ24tbnBtLTQuMS4xLTEwMDRhZDZkZWMtZmNjNmU0ZWE4Yy56aXAvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7CgoidXNlIHN0cmljdCI7Ci8qCm9iamVjdC1hc3NpZ24KKGMpIFNpbmRyZSBTb3JodXMKQGxpY2Vuc2UgTUlUCiovCgoKLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi8KdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7CnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsKCmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkgewoJaWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkgewoJCXRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7Cgl9CgoJcmV0dXJuIE9iamVjdCh2YWwpOwp9CgpmdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7Cgl0cnkgewoJCWlmICghT2JqZWN0LmFzc2lnbikgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuCgoJCS8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMTgKCQl2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzCgkJdGVzdDFbNV0gPSAnZGUnOwoJCWlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1JykgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2CgkJdmFyIHRlc3QyID0ge307CgkJZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7CgkJCXRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTsKCQl9CgkJdmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHsKCQkJcmV0dXJuIHRlc3QyW25dOwoJCX0pOwoJCWlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5JykgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2CgkJdmFyIHRlc3QzID0ge307CgkJJ2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7CgkJCXRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7CgkJfSk7CgkJaWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09CgkJCQknYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCXJldHVybiB0cnVlOwoJfSBjYXRjaCAoZXJyKSB7CgkJLy8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS4KCQlyZXR1cm4gZmFsc2U7Cgl9Cn0KCm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7Cgl2YXIgZnJvbTsKCXZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7Cgl2YXIgc3ltYm9sczsKCglmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykgewoJCWZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTsKCgkJZm9yICh2YXIga2V5IGluIGZyb20pIHsKCQkJaWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkgewoJCQkJdG9ba2V5XSA9IGZyb21ba2V5XTsKCQkJfQoJCX0KCgkJaWYgKGdldE93blByb3BlcnR5U3ltYm9scykgewoJCQlzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pOwoJCQlmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHsKCQkJCWlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHsKCQkJCQl0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07CgkJCQl9CgkJCX0KCQl9Cgl9CgoJcmV0dXJuIHRvOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL2NhY2hlL3JlYWN0LW5wbS0xNy4wLjItOTliYTM3ZDkzMS1iMjU0Y2MxN2NlLnppcC9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vY2FjaGUvcmVhY3QtbnBtLTE3LjAuMi05OWJhMzdkOTMxLWIyNTRjYzE3Y2UuemlwL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Ci8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yCiAqIHJlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzCiAqCiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLgogKgogKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGUKICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgogKi8KCgoKaWYgKHRydWUpIHsKICAoZnVuY3Rpb24oKSB7Cid1c2Ugc3RyaWN0JzsKCnZhciBSZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovICJyZWFjdCIpOwp2YXIgX2Fzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIG9iamVjdC1hc3NpZ24gKi8gIi4uLy4uLy55YXJuL2NhY2hlL29iamVjdC1hc3NpZ24tbnBtLTQuMS4xLTEwMDRhZDZkZWMtZmNjNmU0ZWE4Yy56aXAvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiKTsKCi8vIEFUVEVOVElPTgovLyBXaGVuIGFkZGluZyBuZXcgc3ltYm9scyB0byB0aGlzIGZpbGUsCi8vIFBsZWFzZSBjb25zaWRlciBhbHNvIGFkZGluZyB0byAncmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL1JlYWN0U3ltYm9scycKLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50LWxpa2UgdHlwZXMuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2wKLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLgp2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gMHhlYWM3Owp2YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSAweGVhY2E7CmV4cG9ydHMuRnJhZ21lbnQgPSAweGVhY2I7CnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gMHhlYWNjOwp2YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IDB4ZWFkMjsKdmFyIFJFQUNUX1BST1ZJREVSX1RZUEUgPSAweGVhY2Q7CnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSAweGVhY2U7CnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gMHhlYWQwOwp2YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IDB4ZWFkMTsKdmFyIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IDB4ZWFkODsKdmFyIFJFQUNUX01FTU9fVFlQRSA9IDB4ZWFkMzsKdmFyIFJFQUNUX0xBWllfVFlQRSA9IDB4ZWFkNDsKdmFyIFJFQUNUX0JMT0NLX1RZUEUgPSAweGVhZDk7CnZhciBSRUFDVF9TRVJWRVJfQkxPQ0tfVFlQRSA9IDB4ZWFkYTsKdmFyIFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgPSAweGVhZDU7CnZhciBSRUFDVF9TQ09QRV9UWVBFID0gMHhlYWQ3Owp2YXIgUkVBQ1RfT1BBUVVFX0lEX1RZUEUgPSAweGVhZTA7CnZhciBSRUFDVF9ERUJVR19UUkFDSU5HX01PREVfVFlQRSA9IDB4ZWFlMTsKdmFyIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gMHhlYWUyOwp2YXIgUkVBQ1RfTEVHQUNZX0hJRERFTl9UWVBFID0gMHhlYWUzOwoKaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcikgewogIHZhciBzeW1ib2xGb3IgPSBTeW1ib2wuZm9yOwogIFJFQUNUX0VMRU1FTlRfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuZWxlbWVudCcpOwogIFJFQUNUX1BPUlRBTF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5wb3J0YWwnKTsKICBleHBvcnRzLkZyYWdtZW50ID0gc3ltYm9sRm9yKCdyZWFjdC5mcmFnbWVudCcpOwogIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnN0cmljdF9tb2RlJyk7CiAgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QucHJvZmlsZXInKTsKICBSRUFDVF9QUk9WSURFUl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5wcm92aWRlcicpOwogIFJFQUNUX0NPTlRFWFRfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuY29udGV4dCcpOwogIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmZvcndhcmRfcmVmJyk7CiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IHN5bWJvbEZvcigncmVhY3Quc3VzcGVuc2UnKTsKICBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnN1c3BlbnNlX2xpc3QnKTsKICBSRUFDVF9NRU1PX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0Lm1lbW8nKTsKICBSRUFDVF9MQVpZX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmxhenknKTsKICBSRUFDVF9CTE9DS19UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5ibG9jaycpOwogIFJFQUNUX1NFUlZFUl9CTE9DS19UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zZXJ2ZXIuYmxvY2snKTsKICBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5mdW5kYW1lbnRhbCcpOwogIFJFQUNUX1NDT1BFX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnNjb3BlJyk7CiAgUkVBQ1RfT1BBUVVFX0lEX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0Lm9wYXF1ZS5pZCcpOwogIFJFQUNUX0RFQlVHX1RSQUNJTkdfTU9ERV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5kZWJ1Z190cmFjZV9tb2RlJyk7CiAgUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0Lm9mZnNjcmVlbicpOwogIFJFQUNUX0xFR0FDWV9ISURERU5fVFlQRSA9IHN5bWJvbEZvcigncmVhY3QubGVnYWN5X2hpZGRlbicpOwp9Cgp2YXIgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7CnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsKZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7CiAgaWYgKG1heWJlSXRlcmFibGUgPT09IG51bGwgfHwgdHlwZW9mIG1heWJlSXRlcmFibGUgIT09ICdvYmplY3QnKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIHZhciBtYXliZUl0ZXJhdG9yID0gTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXTsKCiAgaWYgKHR5cGVvZiBtYXliZUl0ZXJhdG9yID09PSAnZnVuY3Rpb24nKSB7CiAgICByZXR1cm4gbWF5YmVJdGVyYXRvcjsKICB9CgogIHJldHVybiBudWxsOwp9Cgp2YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSBSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDsKCmZ1bmN0aW9uIGVycm9yKGZvcm1hdCkgewogIHsKICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7CiAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07CiAgICB9CgogICAgcHJpbnRXYXJuaW5nKCdlcnJvcicsIGZvcm1hdCwgYXJncyk7CiAgfQp9CgpmdW5jdGlvbiBwcmludFdhcm5pbmcobGV2ZWwsIGZvcm1hdCwgYXJncykgewogIC8vIFdoZW4gY2hhbmdpbmcgdGhpcyBsb2dpYywgeW91IG1pZ2h0IHdhbnQgdG8gYWxzbwogIC8vIHVwZGF0ZSBjb25zb2xlV2l0aFN0YWNrRGV2Lnd3dy5qcyBhcyB3ZWxsLgogIHsKICAgIHZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTsKICAgIHZhciBzdGFjayA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSgpOwoKICAgIGlmIChzdGFjayAhPT0gJycpIHsKICAgICAgZm9ybWF0ICs9ICclcyc7CiAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChbc3RhY2tdKTsKICAgIH0KCiAgICB2YXIgYXJnc1dpdGhGb3JtYXQgPSBhcmdzLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICByZXR1cm4gJycgKyBpdGVtOwogICAgfSk7IC8vIENhcmVmdWw6IFJOIGN1cnJlbnRseSBkZXBlbmRzIG9uIHRoaXMgcHJlZml4CgogICAgYXJnc1dpdGhGb3JtYXQudW5zaGlmdCgnV2FybmluZzogJyArIGZvcm1hdCk7IC8vIFdlIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIHNwcmVhZCAob3IgLmFwcGx5KSBkaXJlY3RseSBiZWNhdXNlIGl0CiAgICAvLyBicmVha3MgSUU5OiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEzNjEwCiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nCgogICAgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZVtsZXZlbF0sIGNvbnNvbGUsIGFyZ3NXaXRoRm9ybWF0KTsKICB9Cn0KCi8vIEZpbHRlciBjZXJ0YWluIERPTSBhdHRyaWJ1dGVzIChlLmcuIHNyYywgaHJlZikgaWYgdGhlaXIgdmFsdWVzIGFyZSBlbXB0eSBzdHJpbmdzLgoKdmFyIGVuYWJsZVNjb3BlQVBJID0gZmFsc2U7IC8vIEV4cGVyaW1lbnRhbCBDcmVhdGUgRXZlbnQgSGFuZGxlIEFQSS4KCmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKSB7CiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgcmV0dXJuIHRydWU7CiAgfSAvLyBOb3RlOiB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyAoZS5nLiBpZiBpdCdzIGEgcG9seWZpbGwpLgoKCiAgaWYgKHR5cGUgPT09IGV4cG9ydHMuRnJhZ21lbnQgfHwgdHlwZSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9ERUJVR19UUkFDSU5HX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX0xFR0FDWV9ISURERU5fVFlQRSB8fCBlbmFibGVTY29wZUFQSSApIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsKSB7CiAgICBpZiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQkxPQ0tfVFlQRSB8fCB0eXBlWzBdID09PSBSRUFDVF9TRVJWRVJfQkxPQ0tfVFlQRSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CgogIHJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gZ2V0V3JhcHBlZE5hbWUob3V0ZXJUeXBlLCBpbm5lclR5cGUsIHdyYXBwZXJOYW1lKSB7CiAgdmFyIGZ1bmN0aW9uTmFtZSA9IGlubmVyVHlwZS5kaXNwbGF5TmFtZSB8fCBpbm5lclR5cGUubmFtZSB8fCAnJzsKICByZXR1cm4gb3V0ZXJUeXBlLmRpc3BsYXlOYW1lIHx8IChmdW5jdGlvbk5hbWUgIT09ICcnID8gd3JhcHBlck5hbWUgKyAiKCIgKyBmdW5jdGlvbk5hbWUgKyAiKSIgOiB3cmFwcGVyTmFtZSk7Cn0KCmZ1bmN0aW9uIGdldENvbnRleHROYW1lKHR5cGUpIHsKICByZXR1cm4gdHlwZS5kaXNwbGF5TmFtZSB8fCAnQ29udGV4dCc7Cn0KCmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUodHlwZSkgewogIGlmICh0eXBlID09IG51bGwpIHsKICAgIC8vIEhvc3Qgcm9vdCwgdGV4dCBub2RlIG9yIGp1c3QgaW52YWxpZCB0eXBlLgogICAgcmV0dXJuIG51bGw7CiAgfQoKICB7CiAgICBpZiAodHlwZW9mIHR5cGUudGFnID09PSAnbnVtYmVyJykgewogICAgICBlcnJvcignUmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBvYmplY3QgaW4gZ2V0Q29tcG9uZW50TmFtZSgpLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTsKICAgIH0KICB9CgogIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IG51bGw7CiAgfQoKICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7CiAgICByZXR1cm4gdHlwZTsKICB9CgogIHN3aXRjaCAodHlwZSkgewogICAgY2FzZSBleHBvcnRzLkZyYWdtZW50OgogICAgICByZXR1cm4gJ0ZyYWdtZW50JzsKCiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOgogICAgICByZXR1cm4gJ1BvcnRhbCc7CgogICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOgogICAgICByZXR1cm4gJ1Byb2ZpbGVyJzsKCiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6CiAgICAgIHJldHVybiAnU3RyaWN0TW9kZSc7CgogICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOgogICAgICByZXR1cm4gJ1N1c3BlbnNlJzsKCiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRToKICAgICAgcmV0dXJuICdTdXNwZW5zZUxpc3QnOwogIH0KCiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JykgewogICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7CiAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOgogICAgICAgIHZhciBjb250ZXh0ID0gdHlwZTsKICAgICAgICByZXR1cm4gZ2V0Q29udGV4dE5hbWUoY29udGV4dCkgKyAnLkNvbnN1bWVyJzsKCiAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRToKICAgICAgICB2YXIgcHJvdmlkZXIgPSB0eXBlOwogICAgICAgIHJldHVybiBnZXRDb250ZXh0TmFtZShwcm92aWRlci5fY29udGV4dCkgKyAnLlByb3ZpZGVyJzsKCiAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRToKICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUodHlwZSwgdHlwZS5yZW5kZXIsICdGb3J3YXJkUmVmJyk7CgogICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRToKICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZSh0eXBlLnR5cGUpOwoKICAgICAgY2FzZSBSRUFDVF9CTE9DS19UWVBFOgogICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lKHR5cGUuX3JlbmRlcik7CgogICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRToKICAgICAgICB7CiAgICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IHR5cGU7CiAgICAgICAgICB2YXIgcGF5bG9hZCA9IGxhenlDb21wb25lbnQuX3BheWxvYWQ7CiAgICAgICAgICB2YXIgaW5pdCA9IGxhenlDb21wb25lbnQuX2luaXQ7CgogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWUoaW5pdChwYXlsb2FkKSk7CiAgICAgICAgICB9IGNhdGNoICh4KSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBudWxsOwp9CgovLyBIZWxwZXJzIHRvIHBhdGNoIGNvbnNvbGUubG9ncyB0byBhdm9pZCBsb2dnaW5nIGR1cmluZyBzaWRlLWVmZmVjdCBmcmVlCi8vIHJlcGxheWluZyBvbiByZW5kZXIgZnVuY3Rpb24uIFRoaXMgY3VycmVudGx5IG9ubHkgcGF0Y2hlcyB0aGUgb2JqZWN0Ci8vIGxhemlseSB3aGljaCB3b24ndCBjb3ZlciBpZiB0aGUgbG9nIGZ1bmN0aW9uIHdhcyBleHRyYWN0ZWQgZWFnZXJseS4KLy8gV2UgY291bGQgYWxzbyBlYWdlcmx5IHBhdGNoIHRoZSBtZXRob2QuCnZhciBkaXNhYmxlZERlcHRoID0gMDsKdmFyIHByZXZMb2c7CnZhciBwcmV2SW5mbzsKdmFyIHByZXZXYXJuOwp2YXIgcHJldkVycm9yOwp2YXIgcHJldkdyb3VwOwp2YXIgcHJldkdyb3VwQ29sbGFwc2VkOwp2YXIgcHJldkdyb3VwRW5kOwoKZnVuY3Rpb24gZGlzYWJsZWRMb2coKSB7fQoKZGlzYWJsZWRMb2cuX19yZWFjdERpc2FibGVkTG9nID0gdHJ1ZTsKZnVuY3Rpb24gZGlzYWJsZUxvZ3MoKSB7CiAgewogICAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHsKICAgICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovCiAgICAgIHByZXZMb2cgPSBjb25zb2xlLmxvZzsKICAgICAgcHJldkluZm8gPSBjb25zb2xlLmluZm87CiAgICAgIHByZXZXYXJuID0gY29uc29sZS53YXJuOwogICAgICBwcmV2RXJyb3IgPSBjb25zb2xlLmVycm9yOwogICAgICBwcmV2R3JvdXAgPSBjb25zb2xlLmdyb3VwOwogICAgICBwcmV2R3JvdXBDb2xsYXBzZWQgPSBjb25zb2xlLmdyb3VwQ29sbGFwc2VkOwogICAgICBwcmV2R3JvdXBFbmQgPSBjb25zb2xlLmdyb3VwRW5kOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE5MDk5CgogICAgICB2YXIgcHJvcHMgPSB7CiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgICAgdmFsdWU6IGRpc2FibGVkTG9nLAogICAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICAgIH07IC8vICRGbG93Rml4TWUgRmxvdyB0aGlua3MgY29uc29sZSBpcyBpbW11dGFibGUuCgogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjb25zb2xlLCB7CiAgICAgICAgaW5mbzogcHJvcHMsCiAgICAgICAgbG9nOiBwcm9wcywKICAgICAgICB3YXJuOiBwcm9wcywKICAgICAgICBlcnJvcjogcHJvcHMsCiAgICAgICAgZ3JvdXA6IHByb3BzLAogICAgICAgIGdyb3VwQ29sbGFwc2VkOiBwcm9wcywKICAgICAgICBncm91cEVuZDogcHJvcHMKICAgICAgfSk7CiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovCiAgICB9CgogICAgZGlzYWJsZWREZXB0aCsrOwogIH0KfQpmdW5jdGlvbiByZWVuYWJsZUxvZ3MoKSB7CiAgewogICAgZGlzYWJsZWREZXB0aC0tOwoKICAgIGlmIChkaXNhYmxlZERlcHRoID09PSAwKSB7CiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqLwogICAgICB2YXIgcHJvcHMgPSB7CiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgICAgd3JpdGFibGU6IHRydWUKICAgICAgfTsgLy8gJEZsb3dGaXhNZSBGbG93IHRoaW5rcyBjb25zb2xlIGlzIGltbXV0YWJsZS4KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNvbnNvbGUsIHsKICAgICAgICBsb2c6IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkxvZwogICAgICAgIH0pLAogICAgICAgIGluZm86IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkluZm8KICAgICAgICB9KSwKICAgICAgICB3YXJuOiBfYXNzaWduKHt9LCBwcm9wcywgewogICAgICAgICAgdmFsdWU6IHByZXZXYXJuCiAgICAgICAgfSksCiAgICAgICAgZXJyb3I6IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkVycm9yCiAgICAgICAgfSksCiAgICAgICAgZ3JvdXA6IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwCiAgICAgICAgfSksCiAgICAgICAgZ3JvdXBDb2xsYXBzZWQ6IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwQ29sbGFwc2VkCiAgICAgICAgfSksCiAgICAgICAgZ3JvdXBFbmQ6IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwRW5kCiAgICAgICAgfSkKICAgICAgfSk7CiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovCiAgICB9CgogICAgaWYgKGRpc2FibGVkRGVwdGggPCAwKSB7CiAgICAgIGVycm9yKCdkaXNhYmxlZERlcHRoIGZlbGwgYmVsb3cgemVyby4gJyArICdUaGlzIGlzIGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTsKICAgIH0KICB9Cn0KCnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjsKdmFyIHByZWZpeDsKZnVuY3Rpb24gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUobmFtZSwgc291cmNlLCBvd25lckZuKSB7CiAgewogICAgaWYgKHByZWZpeCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIC8vIEV4dHJhY3QgdGhlIFZNIHNwZWNpZmljIHByZWZpeCB1c2VkIGJ5IGVhY2ggbGluZS4KICAgICAgdHJ5IHsKICAgICAgICB0aHJvdyBFcnJvcigpOwogICAgICB9IGNhdGNoICh4KSB7CiAgICAgICAgdmFyIG1hdGNoID0geC5zdGFjay50cmltKCkubWF0Y2goL1xuKCAqKGF0ICk/KS8pOwogICAgICAgIHByZWZpeCA9IG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnOwogICAgICB9CiAgICB9IC8vIFdlIHVzZSB0aGUgcHJlZml4IHRvIGVuc3VyZSBvdXIgc3RhY2tzIGxpbmUgdXAgd2l0aCBuYXRpdmUgc3RhY2sgZnJhbWVzLgoKCiAgICByZXR1cm4gJ1xuJyArIHByZWZpeCArIG5hbWU7CiAgfQp9CnZhciByZWVudHJ5ID0gZmFsc2U7CnZhciBjb21wb25lbnRGcmFtZUNhY2hlOwoKewogIHZhciBQb3NzaWJseVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBNYXA7CiAgY29tcG9uZW50RnJhbWVDYWNoZSA9IG5ldyBQb3NzaWJseVdlYWtNYXAoKTsKfQoKZnVuY3Rpb24gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShmbiwgY29uc3RydWN0KSB7CiAgLy8gSWYgc29tZXRoaW5nIGFza2VkIGZvciBhIHN0YWNrIGluc2lkZSBhIGZha2UgcmVuZGVyLCBpdCBzaG91bGQgZ2V0IGlnbm9yZWQuCiAgaWYgKCFmbiB8fCByZWVudHJ5KSB7CiAgICByZXR1cm4gJyc7CiAgfQoKICB7CiAgICB2YXIgZnJhbWUgPSBjb21wb25lbnRGcmFtZUNhY2hlLmdldChmbik7CgogICAgaWYgKGZyYW1lICE9PSB1bmRlZmluZWQpIHsKICAgICAgcmV0dXJuIGZyYW1lOwogICAgfQogIH0KCiAgdmFyIGNvbnRyb2w7CiAgcmVlbnRyeSA9IHRydWU7CiAgdmFyIHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTsgLy8gJEZsb3dGaXhNZSBJdCBkb2VzIGFjY2VwdCB1bmRlZmluZWQuCgogIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gdW5kZWZpbmVkOwogIHZhciBwcmV2aW91c0Rpc3BhdGNoZXI7CgogIHsKICAgIHByZXZpb3VzRGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudDsgLy8gU2V0IHRoZSBkaXNwYXRjaGVyIGluIERFViBiZWNhdXNlIHRoaXMgbWlnaHQgYmUgY2FsbCBpbiB0aGUgcmVuZGVyIGZ1bmN0aW9uCiAgICAvLyBmb3Igd2FybmluZ3MuCgogICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50ID0gbnVsbDsKICAgIGRpc2FibGVMb2dzKCk7CiAgfQoKICB0cnkgewogICAgLy8gVGhpcyBzaG91bGQgdGhyb3cuCiAgICBpZiAoY29uc3RydWN0KSB7CiAgICAgIC8vIFNvbWV0aGluZyBzaG91bGQgYmUgc2V0dGluZyB0aGUgcHJvcHMgaW4gdGhlIGNvbnN0cnVjdG9yLgogICAgICB2YXIgRmFrZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aHJvdyBFcnJvcigpOwogICAgICB9OyAvLyAkRmxvd0ZpeE1lCgoKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZha2UucHJvdG90eXBlLCAncHJvcHMnLCB7CiAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBXZSB1c2UgYSB0aHJvd2luZyBzZXR0ZXIgaW5zdGVhZCBvZiBmcm96ZW4gb3Igbm9uLXdyaXRhYmxlIHByb3BzCiAgICAgICAgICAvLyBiZWNhdXNlIHRoYXQgd29uJ3QgdGhyb3cgaW4gYSBub24tc3RyaWN0IG1vZGUgZnVuY3Rpb24uCiAgICAgICAgICB0aHJvdyBFcnJvcigpOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnICYmIFJlZmxlY3QuY29uc3RydWN0KSB7CiAgICAgICAgLy8gV2UgY29uc3RydWN0IGEgZGlmZmVyZW50IGNvbnRyb2wgZm9yIHRoaXMgY2FzZSB0byBpbmNsdWRlIGFueSBleHRyYQogICAgICAgIC8vIGZyYW1lcyBhZGRlZCBieSB0aGUgY29uc3RydWN0IGNhbGwuCiAgICAgICAgdHJ5IHsKICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KEZha2UsIFtdKTsKICAgICAgICB9IGNhdGNoICh4KSB7CiAgICAgICAgICBjb250cm9sID0geDsKICAgICAgICB9CgogICAgICAgIFJlZmxlY3QuY29uc3RydWN0KGZuLCBbXSwgRmFrZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIEZha2UuY2FsbCgpOwogICAgICAgIH0gY2F0Y2ggKHgpIHsKICAgICAgICAgIGNvbnRyb2wgPSB4OwogICAgICAgIH0KCiAgICAgICAgZm4uY2FsbChGYWtlLnByb3RvdHlwZSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRyeSB7CiAgICAgICAgdGhyb3cgRXJyb3IoKTsKICAgICAgfSBjYXRjaCAoeCkgewogICAgICAgIGNvbnRyb2wgPSB4OwogICAgICB9CgogICAgICBmbigpOwogICAgfQogIH0gY2F0Y2ggKHNhbXBsZSkgewogICAgLy8gVGhpcyBpcyBpbmxpbmVkIG1hbnVhbGx5IGJlY2F1c2UgY2xvc3VyZSBkb2Vzbid0IGRvIGl0IGZvciB1cy4KICAgIGlmIChzYW1wbGUgJiYgY29udHJvbCAmJiB0eXBlb2Ygc2FtcGxlLnN0YWNrID09PSAnc3RyaW5nJykgewogICAgICAvLyBUaGlzIGV4dHJhY3RzIHRoZSBmaXJzdCBmcmFtZSBmcm9tIHRoZSBzYW1wbGUgdGhhdCBpc24ndCBhbHNvIGluIHRoZSBjb250cm9sLgogICAgICAvLyBTa2lwcGluZyBvbmUgZnJhbWUgdGhhdCB3ZSBhc3N1bWUgaXMgdGhlIGZyYW1lIHRoYXQgY2FsbHMgdGhlIHR3by4KICAgICAgdmFyIHNhbXBsZUxpbmVzID0gc2FtcGxlLnN0YWNrLnNwbGl0KCdcbicpOwogICAgICB2YXIgY29udHJvbExpbmVzID0gY29udHJvbC5zdGFjay5zcGxpdCgnXG4nKTsKICAgICAgdmFyIHMgPSBzYW1wbGVMaW5lcy5sZW5ndGggLSAxOwogICAgICB2YXIgYyA9IGNvbnRyb2xMaW5lcy5sZW5ndGggLSAxOwoKICAgICAgd2hpbGUgKHMgPj0gMSAmJiBjID49IDAgJiYgc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkgewogICAgICAgIC8vIFdlIGV4cGVjdCBhdCBsZWFzdCBvbmUgc3RhY2sgZnJhbWUgdG8gYmUgc2hhcmVkLgogICAgICAgIC8vIFR5cGljYWxseSB0aGlzIHdpbGwgYmUgdGhlIHJvb3QgbW9zdCBvbmUuIEhvd2V2ZXIsIHN0YWNrIGZyYW1lcyBtYXkgYmUKICAgICAgICAvLyBjdXQgb2ZmIGR1ZSB0byBtYXhpbXVtIHN0YWNrIGxpbWl0cy4gSW4gdGhpcyBjYXNlLCBvbmUgbWF5YmUgY3V0IG9mZgogICAgICAgIC8vIGVhcmxpZXIgdGhhbiB0aGUgb3RoZXIuIFdlIGFzc3VtZSB0aGF0IHRoZSBzYW1wbGUgaXMgbG9uZ2VyIG9yIHRoZSBzYW1lCiAgICAgICAgLy8gYW5kIHRoZXJlIGZvciBjdXQgb2ZmIGVhcmxpZXIuIFNvIHdlIHNob3VsZCBmaW5kIHRoZSByb290IG1vc3QgZnJhbWUgaW4KICAgICAgICAvLyB0aGUgc2FtcGxlIHNvbWV3aGVyZSBpbiB0aGUgY29udHJvbC4KICAgICAgICBjLS07CiAgICAgIH0KCiAgICAgIGZvciAoOyBzID49IDEgJiYgYyA+PSAwOyBzLS0sIGMtLSkgewogICAgICAgIC8vIE5leHQgd2UgZmluZCB0aGUgZmlyc3Qgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgd2hpY2ggc2hvdWxkIGJlIHRoZQogICAgICAgIC8vIGZyYW1lIHRoYXQgY2FsbGVkIG91ciBzYW1wbGUgZnVuY3Rpb24gYW5kIHRoZSBjb250cm9sLgogICAgICAgIGlmIChzYW1wbGVMaW5lc1tzXSAhPT0gY29udHJvbExpbmVzW2NdKSB7CiAgICAgICAgICAvLyBJbiBWOCwgdGhlIGZpcnN0IGxpbmUgaXMgZGVzY3JpYmluZyB0aGUgbWVzc2FnZSBidXQgb3RoZXIgVk1zIGRvbid0LgogICAgICAgICAgLy8gSWYgd2UncmUgYWJvdXQgdG8gcmV0dXJuIHRoZSBmaXJzdCBsaW5lLCBhbmQgdGhlIGNvbnRyb2wgaXMgYWxzbyBvbiB0aGUgc2FtZQogICAgICAgICAgLy8gbGluZSwgdGhhdCdzIGEgcHJldHR5IGdvb2QgaW5kaWNhdG9yIHRoYXQgb3VyIHNhbXBsZSB0aHJldyBhdCBzYW1lIGxpbmUgYXMKICAgICAgICAgIC8vIHRoZSBjb250cm9sLiBJLmUuIGJlZm9yZSB3ZSBlbnRlcmVkIHRoZSBzYW1wbGUgZnJhbWUuIFNvIHdlIGlnbm9yZSB0aGlzIHJlc3VsdC4KICAgICAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgcGFzc2VkIGEgY2xhc3MgdG8gZnVuY3Rpb24gY29tcG9uZW50LCBvciBub24tZnVuY3Rpb24uCiAgICAgICAgICBpZiAocyAhPT0gMSB8fCBjICE9PSAxKSB7CiAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICBzLS07CiAgICAgICAgICAgICAgYy0tOyAvLyBXZSBtYXkgc3RpbGwgaGF2ZSBzaW1pbGFyIGludGVybWVkaWF0ZSBmcmFtZXMgZnJvbSB0aGUgY29uc3RydWN0IGNhbGwuCiAgICAgICAgICAgICAgLy8gVGhlIG5leHQgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgc2hvdWxkIGJlIG91ciBtYXRjaCB0aG91Z2guCgogICAgICAgICAgICAgIGlmIChjIDwgMCB8fCBzYW1wbGVMaW5lc1tzXSAhPT0gY29udHJvbExpbmVzW2NdKSB7CiAgICAgICAgICAgICAgICAvLyBWOCBhZGRzIGEgIm5ldyIgcHJlZml4IGZvciBuYXRpdmUgY2xhc3Nlcy4gTGV0J3MgcmVtb3ZlIGl0IHRvIG1ha2UgaXQgcHJldHRpZXIuCiAgICAgICAgICAgICAgICB2YXIgX2ZyYW1lID0gJ1xuJyArIHNhbXBsZUxpbmVzW3NdLnJlcGxhY2UoJyBhdCBuZXcgJywgJyBhdCAnKTsKCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRGcmFtZUNhY2hlLnNldChmbiwgX2ZyYW1lKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSAvLyBSZXR1cm4gdGhlIGxpbmUgd2UgZm91bmQuCgoKICAgICAgICAgICAgICAgIHJldHVybiBfZnJhbWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IHdoaWxlIChzID49IDEgJiYgYyA+PSAwKTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9IGZpbmFsbHkgewogICAgcmVlbnRyeSA9IGZhbHNlOwoKICAgIHsKICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50ID0gcHJldmlvdXNEaXNwYXRjaGVyOwogICAgICByZWVuYWJsZUxvZ3MoKTsKICAgIH0KCiAgICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2U7CiAgfSAvLyBGYWxsYmFjayB0byBqdXN0IHVzaW5nIHRoZSBuYW1lIGlmIHdlIGNvdWxkbid0IG1ha2UgaXQgdGhyb3cuCgoKICB2YXIgbmFtZSA9IGZuID8gZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSA6ICcnOwogIHZhciBzeW50aGV0aWNGcmFtZSA9IG5hbWUgPyBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lKSA6ICcnOwoKICB7CiAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIGNvbXBvbmVudEZyYW1lQ2FjaGUuc2V0KGZuLCBzeW50aGV0aWNGcmFtZSk7CiAgICB9CiAgfQoKICByZXR1cm4gc3ludGhldGljRnJhbWU7Cn0KZnVuY3Rpb24gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKGZuLCBzb3VyY2UsIG93bmVyRm4pIHsKICB7CiAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShmbiwgZmFsc2UpOwogIH0KfQoKZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkgewogIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlOwogIHJldHVybiAhIShwcm90b3R5cGUgJiYgcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpOwp9CgpmdW5jdGlvbiBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYodHlwZSwgc291cmNlLCBvd25lckZuKSB7CgogIGlmICh0eXBlID09IG51bGwpIHsKICAgIHJldHVybiAnJzsKICB9CgogIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgewogICAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZSh0eXBlLCBzaG91bGRDb25zdHJ1Y3QodHlwZSkpOwogICAgfQogIH0KCiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykgewogICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKHR5cGUpOwogIH0KCiAgc3dpdGNoICh0eXBlKSB7CiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6CiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSgnU3VzcGVuc2UnKTsKCiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRToKICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKCdTdXNwZW5zZUxpc3QnKTsKICB9CgogIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHsKICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikgewogICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6CiAgICAgICAgcmV0dXJuIGRlc2NyaWJlRnVuY3Rpb25Db21wb25lbnRGcmFtZSh0eXBlLnJlbmRlcik7CgogICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRToKICAgICAgICAvLyBNZW1vIG1heSBjb250YWluIGFueSBjb21wb25lbnQgdHlwZSBzbyB3ZSByZWN1cnNpdmVseSByZXNvbHZlIGl0LgogICAgICAgIHJldHVybiBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYodHlwZS50eXBlLCBzb3VyY2UsIG93bmVyRm4pOwoKICAgICAgY2FzZSBSRUFDVF9CTE9DS19UWVBFOgogICAgICAgIHJldHVybiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUodHlwZS5fcmVuZGVyKTsKCiAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOgogICAgICAgIHsKICAgICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gdHlwZTsKICAgICAgICAgIHZhciBwYXlsb2FkID0gbGF6eUNvbXBvbmVudC5fcGF5bG9hZDsKICAgICAgICAgIHZhciBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDsKCiAgICAgICAgICB0cnkgewogICAgICAgICAgICAvLyBMYXp5IG1heSBjb250YWluIGFueSBjb21wb25lbnQgdHlwZSBzbyB3ZSByZWN1cnNpdmVseSByZXNvbHZlIGl0LgogICAgICAgICAgICByZXR1cm4gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGluaXQocGF5bG9hZCksIHNvdXJjZSwgb3duZXJGbik7CiAgICAgICAgICB9IGNhdGNoICh4KSB7fQogICAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiAnJzsKfQoKdmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9Owp2YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7CgpmdW5jdGlvbiBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KSB7CiAgewogICAgaWYgKGVsZW1lbnQpIHsKICAgICAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7CiAgICAgIHZhciBzdGFjayA9IGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVihlbGVtZW50LnR5cGUsIGVsZW1lbnQuX3NvdXJjZSwgb3duZXIgPyBvd25lci50eXBlIDogbnVsbCk7CiAgICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuc2V0RXh0cmFTdGFja0ZyYW1lKHN0YWNrKTsKICAgIH0gZWxzZSB7CiAgICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuc2V0RXh0cmFTdGFja0ZyYW1lKG51bGwpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBlbGVtZW50KSB7CiAgewogICAgLy8gJEZsb3dGaXhNZSBUaGlzIGlzIG9rYXkgYnV0IEZsb3cgZG9lc24ndCBrbm93IGl0LgogICAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTsKCiAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7CiAgICAgIGlmIChoYXModHlwZVNwZWNzLCB0eXBlU3BlY05hbWUpKSB7CiAgICAgICAgdmFyIGVycm9yJDEgPSB2b2lkIDA7IC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvCiAgICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LgogICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy4KCiAgICAgICAgdHJ5IHsKICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZQogICAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLgogICAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiAnICsgbG9jYXRpb24gKyAnIHR5cGUgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyAnICsgJ2l0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAnICsgdHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICsgJ2AuJyArICdUaGlzIG9mdGVuIGhhcHBlbnMgYmVjYXVzZSBvZiB0eXBvcyBzdWNoIGFzIGBQcm9wVHlwZXMuZnVuY3Rpb25gIGluc3RlYWQgb2YgYFByb3BUeXBlcy5mdW5jYC4nKTsKICAgICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7CiAgICAgICAgICAgIHRocm93IGVycjsKICAgICAgICAgIH0KCiAgICAgICAgICBlcnJvciQxID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnKTsKICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgICAgZXJyb3IkMSA9IGV4OwogICAgICAgIH0KCiAgICAgICAgaWYgKGVycm9yJDEgJiYgIShlcnJvciQxIGluc3RhbmNlb2YgRXJyb3IpKSB7CiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KTsKCiAgICAgICAgICBlcnJvcignJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcycgKyAnIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvciQxKTsKCiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTsKICAgICAgICB9CgogICAgICAgIGlmIChlcnJvciQxIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvciQxLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkgewogICAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlCiAgICAgICAgICAvLyBzYW1lIGVycm9yLgogICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yJDEubWVzc2FnZV0gPSB0cnVlOwogICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCk7CgogICAgICAgICAgZXJyb3IoJ0ZhaWxlZCAlcyB0eXBlOiAlcycsIGxvY2F0aW9uLCBlcnJvciQxLm1lc3NhZ2UpOwoKICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KG51bGwpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQoKdmFyIFJlYWN0Q3VycmVudE93bmVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7CnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CnZhciBSRVNFUlZFRF9QUk9QUyA9IHsKICBrZXk6IHRydWUsCiAgcmVmOiB0cnVlLAogIF9fc2VsZjogdHJ1ZSwKICBfX3NvdXJjZTogdHJ1ZQp9Owp2YXIgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd247CnZhciBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bjsKdmFyIGRpZFdhcm5BYm91dFN0cmluZ1JlZnM7Cgp7CiAgZGlkV2FybkFib3V0U3RyaW5nUmVmcyA9IHt9Owp9CgpmdW5jdGlvbiBoYXNWYWxpZFJlZihjb25maWcpIHsKICB7CiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdyZWYnKSkgewogICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdyZWYnKS5nZXQ7CgogICAgICBpZiAoZ2V0dGVyICYmIGdldHRlci5pc1JlYWN0V2FybmluZykgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIGNvbmZpZy5yZWYgIT09IHVuZGVmaW5lZDsKfQoKZnVuY3Rpb24gaGFzVmFsaWRLZXkoY29uZmlnKSB7CiAgewogICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCAna2V5JykpIHsKICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAna2V5JykuZ2V0OwoKICAgICAgaWYgKGdldHRlciAmJiBnZXR0ZXIuaXNSZWFjdFdhcm5pbmcpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBjb25maWcua2V5ICE9PSB1bmRlZmluZWQ7Cn0KCmZ1bmN0aW9uIHdhcm5JZlN0cmluZ1JlZkNhbm5vdEJlQXV0b0NvbnZlcnRlZChjb25maWcsIHNlbGYpIHsKICB7CiAgICBpZiAodHlwZW9mIGNvbmZpZy5yZWYgPT09ICdzdHJpbmcnICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgc2VsZiAmJiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnN0YXRlTm9kZSAhPT0gc2VsZikgewogICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC50eXBlKTsKCiAgICAgIGlmICghZGlkV2FybkFib3V0U3RyaW5nUmVmc1tjb21wb25lbnROYW1lXSkgewogICAgICAgIGVycm9yKCdDb21wb25lbnQgIiVzIiBjb250YWlucyB0aGUgc3RyaW5nIHJlZiAiJXMiLiAnICsgJ1N1cHBvcnQgZm9yIHN0cmluZyByZWZzIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiAnICsgJ1RoaXMgY2FzZSBjYW5ub3QgYmUgYXV0b21hdGljYWxseSBjb252ZXJ0ZWQgdG8gYW4gYXJyb3cgZnVuY3Rpb24uICcgKyAnV2UgYXNrIHlvdSB0byBtYW51YWxseSBmaXggdGhpcyBjYXNlIGJ5IHVzaW5nIHVzZVJlZigpIG9yIGNyZWF0ZVJlZigpIGluc3RlYWQuICcgKyAnTGVhcm4gbW9yZSBhYm91dCB1c2luZyByZWZzIHNhZmVseSBoZXJlOiAnICsgJ2h0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9zdHJpY3QtbW9kZS1zdHJpbmctcmVmJywgZ2V0Q29tcG9uZW50TmFtZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpLCBjb25maWcucmVmKTsKCiAgICAgICAgZGlkV2FybkFib3V0U3RyaW5nUmVmc1tjb21wb25lbnROYW1lXSA9IHRydWU7CiAgICAgIH0KICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkgewogIHsKICAgIHZhciB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICghc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24pIHsKICAgICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHRydWU7CgogICAgICAgIGVycm9yKCclczogYGtleWAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9zcGVjaWFsLXByb3BzKScsIGRpc3BsYXlOYW1lKTsKICAgICAgfQogICAgfTsKCiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkuaXNSZWFjdFdhcm5pbmcgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAna2V5JywgewogICAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ0tleSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkgewogIHsKICAgIHZhciB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICghc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24pIHsKICAgICAgICBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHRydWU7CgogICAgICAgIGVycm9yKCclczogYHJlZmAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9zcGVjaWFsLXByb3BzKScsIGRpc3BsYXlOYW1lKTsKICAgICAgfQogICAgfTsKCiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYuaXNSZWFjdFdhcm5pbmcgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAncmVmJywgewogICAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ1JlZiwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9KTsKICB9Cn0KLyoqCiAqIEZhY3RvcnkgbWV0aG9kIHRvIGNyZWF0ZSBhIG5ldyBSZWFjdCBlbGVtZW50LiBUaGlzIG5vIGxvbmdlciBhZGhlcmVzIHRvCiAqIHRoZSBjbGFzcyBwYXR0ZXJuLCBzbyBkbyBub3QgdXNlIG5ldyB0byBjYWxsIGl0LiBBbHNvLCBpbnN0YW5jZW9mIGNoZWNrCiAqIHdpbGwgbm90IHdvcmsuIEluc3RlYWQgdGVzdCAkJHR5cGVvZiBmaWVsZCBhZ2FpbnN0IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSB0byBjaGVjawogKiBpZiBzb21ldGhpbmcgaXMgYSBSZWFjdCBFbGVtZW50LgogKgogKiBAcGFyYW0geyp9IHR5cGUKICogQHBhcmFtIHsqfSBwcm9wcwogKiBAcGFyYW0geyp9IGtleQogKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlZgogKiBAcGFyYW0geyp9IG93bmVyCiAqIEBwYXJhbSB7Kn0gc2VsZiBBICp0ZW1wb3JhcnkqIGhlbHBlciB0byBkZXRlY3QgcGxhY2VzIHdoZXJlIGB0aGlzYCBpcwogKiBkaWZmZXJlbnQgZnJvbSB0aGUgYG93bmVyYCB3aGVuIFJlYWN0LmNyZWF0ZUVsZW1lbnQgaXMgY2FsbGVkLCBzbyB0aGF0IHdlCiAqIGNhbiB3YXJuLiBXZSB3YW50IHRvIGdldCByaWQgb2Ygb3duZXIgYW5kIHJlcGxhY2Ugc3RyaW5nIGByZWZgcyB3aXRoIGFycm93CiAqIGZ1bmN0aW9ucywgYW5kIGFzIGxvbmcgYXMgYHRoaXNgIGFuZCBvd25lciBhcmUgdGhlIHNhbWUsIHRoZXJlIHdpbGwgYmUgbm8KICogY2hhbmdlIGluIGJlaGF2aW9yLgogKiBAcGFyYW0geyp9IHNvdXJjZSBBbiBhbm5vdGF0aW9uIG9iamVjdCAoYWRkZWQgYnkgYSB0cmFuc3BpbGVyIG9yIG90aGVyd2lzZSkKICogaW5kaWNhdGluZyBmaWxlbmFtZSwgbGluZSBudW1iZXIsIGFuZC9vciBvdGhlciBpbmZvcm1hdGlvbi4KICogQGludGVybmFsCiAqLwoKCnZhciBSZWFjdEVsZW1lbnQgPSBmdW5jdGlvbiAodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKSB7CiAgdmFyIGVsZW1lbnQgPSB7CiAgICAvLyBUaGlzIHRhZyBhbGxvd3MgdXMgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyBhcyBhIFJlYWN0IEVsZW1lbnQKICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsCiAgICAvLyBCdWlsdC1pbiBwcm9wZXJ0aWVzIHRoYXQgYmVsb25nIG9uIHRoZSBlbGVtZW50CiAgICB0eXBlOiB0eXBlLAogICAga2V5OiBrZXksCiAgICByZWY6IHJlZiwKICAgIHByb3BzOiBwcm9wcywKICAgIC8vIFJlY29yZCB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGlzIGVsZW1lbnQuCiAgICBfb3duZXI6IG93bmVyCiAgfTsKCiAgewogICAgLy8gVGhlIHZhbGlkYXRpb24gZmxhZyBpcyBjdXJyZW50bHkgbXV0YXRpdmUuIFdlIHB1dCBpdCBvbgogICAgLy8gYW4gZXh0ZXJuYWwgYmFja2luZyBzdG9yZSBzbyB0aGF0IHdlIGNhbiBmcmVlemUgdGhlIHdob2xlIG9iamVjdC4KICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW4KICAgIC8vIGNvbW1vbmx5IHVzZWQgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzLgogICAgZWxlbWVudC5fc3RvcmUgPSB7fTsgLy8gVG8gbWFrZSBjb21wYXJpbmcgUmVhY3RFbGVtZW50cyBlYXNpZXIgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHdlIG1ha2UKICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGQKICAgIC8vIGluY2x1ZGUgZXZlcnkgZW52aXJvbm1lbnQgd2UgcnVuIHRlc3RzIGluKSwgc28gdGhlIHRlc3QgZnJhbWV3b3JrCiAgICAvLyBpZ25vcmVzIGl0LgoKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50Ll9zdG9yZSwgJ3ZhbGlkYXRlZCcsIHsKICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSwKICAgICAgZW51bWVyYWJsZTogZmFsc2UsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICB2YWx1ZTogZmFsc2UKICAgIH0pOyAvLyBzZWxmIGFuZCBzb3VyY2UgYXJlIERFViBvbmx5IHByb3BlcnRpZXMuCgogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc2VsZicsIHsKICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSwKICAgICAgZW51bWVyYWJsZTogZmFsc2UsCiAgICAgIHdyaXRhYmxlOiBmYWxzZSwKICAgICAgdmFsdWU6IHNlbGYKICAgIH0pOyAvLyBUd28gZWxlbWVudHMgY3JlYXRlZCBpbiB0d28gZGlmZmVyZW50IHBsYWNlcyBzaG91bGQgYmUgY29uc2lkZXJlZAogICAgLy8gZXF1YWwgZm9yIHRlc3RpbmcgcHVycG9zZXMgYW5kIHRoZXJlZm9yZSB3ZSBoaWRlIGl0IGZyb20gZW51bWVyYXRpb24uCgogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc291cmNlJywgewogICAgICBjb25maWd1cmFibGU6IGZhbHNlLAogICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgICAgd3JpdGFibGU6IGZhbHNlLAogICAgICB2YWx1ZTogc291cmNlCiAgICB9KTsKCiAgICBpZiAoT2JqZWN0LmZyZWV6ZSkgewogICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpOwogICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQpOwogICAgfQogIH0KCiAgcmV0dXJuIGVsZW1lbnQ7Cn07Ci8qKgogKiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZmNzL3B1bGwvMTA3CiAqIEBwYXJhbSB7Kn0gdHlwZQogKiBAcGFyYW0ge29iamVjdH0gcHJvcHMKICogQHBhcmFtIHtzdHJpbmd9IGtleQogKi8KCmZ1bmN0aW9uIGpzeERFVih0eXBlLCBjb25maWcsIG1heWJlS2V5LCBzb3VyY2UsIHNlbGYpIHsKICB7CiAgICB2YXIgcHJvcE5hbWU7IC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWQKCiAgICB2YXIgcHJvcHMgPSB7fTsKICAgIHZhciBrZXkgPSBudWxsOwogICAgdmFyIHJlZiA9IG51bGw7IC8vIEN1cnJlbnRseSwga2V5IGNhbiBiZSBzcHJlYWQgaW4gYXMgYSBwcm9wLiBUaGlzIGNhdXNlcyBhIHBvdGVudGlhbAogICAgLy8gaXNzdWUgaWYga2V5IGlzIGFsc28gZXhwbGljaXRseSBkZWNsYXJlZCAoaWUuIDxkaXYgey4uLnByb3BzfSBrZXk9IkhpIiAvPgogICAgLy8gb3IgPGRpdiBrZXk9IkhpIiB7Li4ucHJvcHN9IC8+ICkuIFdlIHdhbnQgdG8gZGVwcmVjYXRlIGtleSBzcHJlYWQsCiAgICAvLyBidXQgYXMgYW4gaW50ZXJtZWRpYXJ5IHN0ZXAsIHdlIHdpbGwgdXNlIGpzeERFViBmb3IgZXZlcnl0aGluZyBleGNlcHQKICAgIC8vIDxkaXYgey4uLnByb3BzfSBrZXk9IkhpIiAvPiwgYmVjYXVzZSB3ZSBhcmVuJ3QgY3VycmVudGx5IGFibGUgdG8gdGVsbCBpZgogICAgLy8ga2V5IGlzIGV4cGxpY2l0bHkgZGVjbGFyZWQgdG8gYmUgdW5kZWZpbmVkIG9yIG5vdC4KCiAgICBpZiAobWF5YmVLZXkgIT09IHVuZGVmaW5lZCkgewogICAgICBrZXkgPSAnJyArIG1heWJlS2V5OwogICAgfQoKICAgIGlmIChoYXNWYWxpZEtleShjb25maWcpKSB7CiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTsKICAgIH0KCiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkgewogICAgICByZWYgPSBjb25maWcucmVmOwogICAgICB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnLCBzZWxmKTsKICAgIH0gLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgYXJlIGFkZGVkIHRvIGEgbmV3IHByb3BzIG9iamVjdAoKCiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykgewogICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7CiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTsKICAgICAgfQogICAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHMKCgogICAgaWYgKHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHMpIHsKICAgICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzOwoKICAgICAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHsKICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKGtleSB8fCByZWYpIHsKICAgICAgdmFyIGRpc3BsYXlOYW1lID0gdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgPyB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCAnVW5rbm93bicgOiB0eXBlOwoKICAgICAgaWYgKGtleSkgewogICAgICAgIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7CiAgICAgIH0KCiAgICAgIGlmIChyZWYpIHsKICAgICAgICBkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LCBwcm9wcyk7CiAgfQp9Cgp2YXIgUmVhY3RDdXJyZW50T3duZXIkMSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0Q3VycmVudE93bmVyOwp2YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTsKCmZ1bmN0aW9uIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEoZWxlbWVudCkgewogIHsKICAgIGlmIChlbGVtZW50KSB7CiAgICAgIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyOwogICAgICB2YXIgc3RhY2sgPSBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYoZWxlbWVudC50eXBlLCBlbGVtZW50Ll9zb3VyY2UsIG93bmVyID8gb3duZXIudHlwZSA6IG51bGwpOwogICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuc2V0RXh0cmFTdGFja0ZyYW1lKHN0YWNrKTsKICAgIH0gZWxzZSB7CiAgICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMS5zZXRFeHRyYVN0YWNrRnJhbWUobnVsbCk7CiAgICB9CiAgfQp9Cgp2YXIgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd247Cgp7CiAgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24gPSBmYWxzZTsKfQovKioKICogVmVyaWZpZXMgdGhlIG9iamVjdCBpcyBhIFJlYWN0RWxlbWVudC4KICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNpc3ZhbGlkZWxlbWVudAogKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdAogKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgUmVhY3RFbGVtZW50LgogKiBAZmluYWwKICovCgpmdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChvYmplY3QpIHsKICB7CiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFOwogIH0KfQoKZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkgewogIHsKICAgIGlmIChSZWFjdEN1cnJlbnRPd25lciQxLmN1cnJlbnQpIHsKICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKFJlYWN0Q3VycmVudE93bmVyJDEuY3VycmVudC50eXBlKTsKCiAgICAgIGlmIChuYW1lKSB7CiAgICAgICAgcmV0dXJuICdcblxuQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJzsKICAgICAgfQogICAgfQoKICAgIHJldHVybiAnJzsKICB9Cn0KCmZ1bmN0aW9uIGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKHNvdXJjZSkgewogIHsKICAgIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCkgewogICAgICB2YXIgZmlsZU5hbWUgPSBzb3VyY2UuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXC9dLywgJycpOwogICAgICB2YXIgbGluZU51bWJlciA9IHNvdXJjZS5saW5lTnVtYmVyOwogICAgICByZXR1cm4gJ1xuXG5DaGVjayB5b3VyIGNvZGUgYXQgJyArIGZpbGVOYW1lICsgJzonICsgbGluZU51bWJlciArICcuJzsKICAgIH0KCiAgICByZXR1cm4gJyc7CiAgfQp9Ci8qKgogKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yCiAqIG9iamVjdCBrZXlzIGFyZSBub3QgdmFsaWQuIFRoaXMgYWxsb3dzIHVzIHRvIGtlZXAgdHJhY2sgb2YgY2hpbGRyZW4gYmV0d2VlbgogKiB1cGRhdGVzLgogKi8KCgp2YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307CgpmdW5jdGlvbiBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpIHsKICB7CiAgICB2YXIgaW5mbyA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpOwoKICAgIGlmICghaW5mbykgewogICAgICB2YXIgcGFyZW50TmFtZSA9IHR5cGVvZiBwYXJlbnRUeXBlID09PSAnc3RyaW5nJyA/IHBhcmVudFR5cGUgOiBwYXJlbnRUeXBlLmRpc3BsYXlOYW1lIHx8IHBhcmVudFR5cGUubmFtZTsKCiAgICAgIGlmIChwYXJlbnROYW1lKSB7CiAgICAgICAgaW5mbyA9ICJcblxuQ2hlY2sgdGhlIHRvcC1sZXZlbCByZW5kZXIgY2FsbCB1c2luZyA8IiArIHBhcmVudE5hbWUgKyAiPi4iOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGluZm87CiAgfQp9Ci8qKgogKiBXYXJuIGlmIHRoZSBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhbiBleHBsaWNpdCBrZXkgYXNzaWduZWQgdG8gaXQuCiAqIFRoaXMgZWxlbWVudCBpcyBpbiBhbiBhcnJheS4gVGhlIGFycmF5IGNvdWxkIGdyb3cgYW5kIHNocmluayBvciBiZQogKiByZW9yZGVyZWQuIEFsbCBjaGlsZHJlbiB0aGF0IGhhdmVuJ3QgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCBhcmUgcmVxdWlyZWQgdG8KICogaGF2ZSBhICJrZXkiIHByb3BlcnR5IGFzc2lnbmVkIHRvIGl0LiBFcnJvciBzdGF0dXNlcyBhcmUgY2FjaGVkIHNvIGEgd2FybmluZwogKiB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS4KICoKICogQGludGVybmFsCiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGhhdCByZXF1aXJlcyBhIGtleS4KICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGVsZW1lbnQncyBwYXJlbnQncyB0eXBlLgogKi8KCgpmdW5jdGlvbiB2YWxpZGF0ZUV4cGxpY2l0S2V5KGVsZW1lbnQsIHBhcmVudFR5cGUpIHsKICB7CiAgICBpZiAoIWVsZW1lbnQuX3N0b3JlIHx8IGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCB8fCBlbGVtZW50LmtleSAhPSBudWxsKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlOwogICAgdmFyIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8gPSBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpOwoKICAgIGlmIChvd25lckhhc0tleVVzZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10pIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7IC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhCiAgICAvLyBwcm9wZXJ0eSwgaXQgbWF5IGJlIHRoZSBjcmVhdG9yIG9mIHRoZSBjaGlsZCB0aGF0J3MgcmVzcG9uc2libGUgZm9yCiAgICAvLyBhc3NpZ25pbmcgaXQgYSBrZXkuCgogICAgdmFyIGNoaWxkT3duZXIgPSAnJzsKCiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIkMS5jdXJyZW50KSB7CiAgICAgIC8vIEdpdmUgdGhlIGNvbXBvbmVudCB0aGF0IG9yaWdpbmFsbHkgY3JlYXRlZCB0aGlzIGNoaWxkLgogICAgICBjaGlsZE93bmVyID0gIiBJdCB3YXMgcGFzc2VkIGEgY2hpbGQgZnJvbSAiICsgZ2V0Q29tcG9uZW50TmFtZShlbGVtZW50Ll9vd25lci50eXBlKSArICIuIjsKICAgIH0KCiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGVsZW1lbnQpOwoKICAgIGVycm9yKCdFYWNoIGNoaWxkIGluIGEgbGlzdCBzaG91bGQgaGF2ZSBhIHVuaXF1ZSAia2V5IiBwcm9wLicgKyAnJXMlcyBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3dhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLCBjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvLCBjaGlsZE93bmVyKTsKCiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKG51bGwpOwogIH0KfQovKioKICogRW5zdXJlIHRoYXQgZXZlcnkgZWxlbWVudCBlaXRoZXIgaXMgcGFzc2VkIGluIGEgc3RhdGljIGxvY2F0aW9uLCBpbiBhbgogKiBhcnJheSB3aXRoIGFuIGV4cGxpY2l0IGtleXMgcHJvcGVydHkgZGVmaW5lZCwgb3IgaW4gYW4gb2JqZWN0IGxpdGVyYWwKICogd2l0aCB2YWxpZCBrZXkgcHJvcGVydHkuCiAqCiAqIEBpbnRlcm5hbAogKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZSBTdGF0aWNhbGx5IHBhc3NlZCBjaGlsZCBvZiBhbnkgdHlwZS4KICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIG5vZGUncyBwYXJlbnQncyB0eXBlLgogKi8KCgpmdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhub2RlLCBwYXJlbnRUeXBlKSB7CiAgewogICAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0JykgewogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTsKCiAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KGNoaWxkKSkgewogICAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShjaGlsZCwgcGFyZW50VHlwZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKGlzVmFsaWRFbGVtZW50KG5vZGUpKSB7CiAgICAgIC8vIFRoaXMgZWxlbWVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uCiAgICAgIGlmIChub2RlLl9zdG9yZSkgewogICAgICAgIG5vZGUuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAobm9kZSkgewogICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obm9kZSk7CgogICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAvLyBFbnRyeSBpdGVyYXRvcnMgdXNlZCB0byBwcm92aWRlIGltcGxpY2l0IGtleXMsCiAgICAgICAgLy8gYnV0IG5vdyB3ZSBwcmludCBhIHNlcGFyYXRlIHdhcm5pbmcgZm9yIHRoZW0gbGF0ZXIuCiAgICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IG5vZGUuZW50cmllcykgewogICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpOwogICAgICAgICAgdmFyIHN0ZXA7CgogICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkgewogICAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoc3RlcC52YWx1ZSkpIHsKICAgICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUsIHBhcmVudFR5cGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Ci8qKgogKiBHaXZlbiBhbiBlbGVtZW50LCB2YWxpZGF0ZSB0aGF0IGl0cyBwcm9wcyBmb2xsb3cgdGhlIHByb3BUeXBlcyBkZWZpbml0aW9uLAogKiBwcm92aWRlZCBieSB0aGUgdHlwZS4KICoKICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQKICovCgoKZnVuY3Rpb24gdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCkgewogIHsKICAgIHZhciB0eXBlID0gZWxlbWVudC50eXBlOwoKICAgIGlmICh0eXBlID09PSBudWxsIHx8IHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBwcm9wVHlwZXM7CgogICAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzOwogICAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgLy8gTm90ZTogTWVtbyBvbmx5IGNoZWNrcyBvdXRlciBwcm9wcyBoZXJlLgogICAgLy8gSW5uZXIgcHJvcHMgYXJlIGNoZWNrZWQgaW4gdGhlIHJlY29uY2lsZXIuCiAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUpKSB7CiAgICAgIHByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChwcm9wVHlwZXMpIHsKICAgICAgLy8gSW50ZW50aW9uYWxseSBpbnNpZGUgdG8gYXZvaWQgdHJpZ2dlcmluZyBsYXp5IGluaXRpYWxpemVyczoKICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKHR5cGUpOwogICAgICBjaGVja1Byb3BUeXBlcyhwcm9wVHlwZXMsIGVsZW1lbnQucHJvcHMsICdwcm9wJywgbmFtZSwgZWxlbWVudCk7CiAgICB9IGVsc2UgaWYgKHR5cGUuUHJvcFR5cGVzICE9PSB1bmRlZmluZWQgJiYgIXByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duKSB7CiAgICAgIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duID0gdHJ1ZTsgLy8gSW50ZW50aW9uYWxseSBpbnNpZGUgdG8gYXZvaWQgdHJpZ2dlcmluZyBsYXp5IGluaXRpYWxpemVyczoKCiAgICAgIHZhciBfbmFtZSA9IGdldENvbXBvbmVudE5hbWUodHlwZSk7CgogICAgICBlcnJvcignQ29tcG9uZW50ICVzIGRlY2xhcmVkIGBQcm9wVHlwZXNgIGluc3RlYWQgb2YgYHByb3BUeXBlc2AuIERpZCB5b3UgbWlzc3BlbGwgdGhlIHByb3BlcnR5IGFzc2lnbm1lbnQ/JywgX25hbWUgfHwgJ1Vua25vd24nKTsKICAgIH0KCiAgICBpZiAodHlwZW9mIHR5cGUuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nICYmICF0eXBlLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCkgewogICAgICBlcnJvcignZ2V0RGVmYXVsdFByb3BzIGlzIG9ubHkgdXNlZCBvbiBjbGFzc2ljIFJlYWN0LmNyZWF0ZUNsYXNzICcgKyAnZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLicpOwogICAgfQogIH0KfQovKioKICogR2l2ZW4gYSBmcmFnbWVudCwgdmFsaWRhdGUgdGhhdCBpdCBjYW4gb25seSBiZSBwcm92aWRlZCB3aXRoIGZyYWdtZW50IHByb3BzCiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBmcmFnbWVudAogKi8KCgpmdW5jdGlvbiB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZnJhZ21lbnQpIHsKICB7CiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZyYWdtZW50LnByb3BzKTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGtleSA9IGtleXNbaV07CgogICAgICBpZiAoa2V5ICE9PSAnY2hpbGRyZW4nICYmIGtleSAhPT0gJ2tleScpIHsKICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGZyYWdtZW50KTsKCiAgICAgICAgZXJyb3IoJ0ludmFsaWQgcHJvcCBgJXNgIHN1cHBsaWVkIHRvIGBSZWFjdC5GcmFnbWVudGAuICcgKyAnUmVhY3QuRnJhZ21lbnQgY2FuIG9ubHkgaGF2ZSBga2V5YCBhbmQgYGNoaWxkcmVuYCBwcm9wcy4nLCBrZXkpOwoKICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKG51bGwpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgaWYgKGZyYWdtZW50LnJlZiAhPT0gbnVsbCkgewogICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGZyYWdtZW50KTsKCiAgICAgIGVycm9yKCdJbnZhbGlkIGF0dHJpYnV0ZSBgcmVmYCBzdXBwbGllZCB0byBgUmVhY3QuRnJhZ21lbnRgLicpOwoKICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQkMShudWxsKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGpzeFdpdGhWYWxpZGF0aW9uKHR5cGUsIHByb3BzLCBrZXksIGlzU3RhdGljQ2hpbGRyZW4sIHNvdXJjZSwgc2VsZikgewogIHsKICAgIHZhciB2YWxpZFR5cGUgPSBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSk7IC8vIFdlIHdhcm4gaW4gdGhpcyBjYXNlIGJ1dCBkb24ndCB0aHJvdy4gV2UgZXhwZWN0IHRoZSBlbGVtZW50IGNyZWF0aW9uIHRvCiAgICAvLyBzdWNjZWVkIGFuZCB0aGVyZSB3aWxsIGxpa2VseSBiZSBlcnJvcnMgaW4gcmVuZGVyLgoKICAgIGlmICghdmFsaWRUeXBlKSB7CiAgICAgIHZhciBpbmZvID0gJyc7CgogICAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmIE9iamVjdC5rZXlzKHR5cGUpLmxlbmd0aCA9PT0gMCkgewogICAgICAgIGluZm8gKz0gJyBZb3UgbGlrZWx5IGZvcmdvdCB0byBleHBvcnQgeW91ciBjb21wb25lbnQgZnJvbSB0aGUgZmlsZSAnICsgIml0J3MgZGVmaW5lZCBpbiwgb3IgeW91IG1pZ2h0IGhhdmUgbWl4ZWQgdXAgZGVmYXVsdCBhbmQgbmFtZWQgaW1wb3J0cy4iOwogICAgICB9CgogICAgICB2YXIgc291cmNlSW5mbyA9IGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKHNvdXJjZSk7CgogICAgICBpZiAoc291cmNlSW5mbykgewogICAgICAgIGluZm8gKz0gc291cmNlSW5mbzsKICAgICAgfSBlbHNlIHsKICAgICAgICBpbmZvICs9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpOwogICAgICB9CgogICAgICB2YXIgdHlwZVN0cmluZzsKCiAgICAgIGlmICh0eXBlID09PSBudWxsKSB7CiAgICAgICAgdHlwZVN0cmluZyA9ICdudWxsJzsKICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7CiAgICAgICAgdHlwZVN0cmluZyA9ICdhcnJheSc7CiAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRSkgewogICAgICAgIHR5cGVTdHJpbmcgPSAiPCIgKyAoZ2V0Q29tcG9uZW50TmFtZSh0eXBlLnR5cGUpIHx8ICdVbmtub3duJykgKyAiIC8+IjsKICAgICAgICBpbmZvID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBleHBvcnQgYSBKU1ggbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY29tcG9uZW50Pyc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHlwZVN0cmluZyA9IHR5cGVvZiB0eXBlOwogICAgICB9CgogICAgICBlcnJvcignUmVhY3QuanN4OiB0eXBlIGlzIGludmFsaWQgLS0gZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciAnICsgJ2J1aWx0LWluIGNvbXBvbmVudHMpIG9yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgJyArICdjb21wb25lbnRzKSBidXQgZ290OiAlcy4lcycsIHR5cGVTdHJpbmcsIGluZm8pOwogICAgfQoKICAgIHZhciBlbGVtZW50ID0ganN4REVWKHR5cGUsIHByb3BzLCBrZXksIHNvdXJjZSwgc2VsZik7IC8vIFRoZSByZXN1bHQgY2FuIGJlIG51bGxpc2ggaWYgYSBtb2NrIG9yIGEgY3VzdG9tIGZ1bmN0aW9uIGlzIHVzZWQuCiAgICAvLyBUT0RPOiBEcm9wIHRoaXMgd2hlbiB0aGVzZSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQuCgogICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkgewogICAgICByZXR1cm4gZWxlbWVudDsKICAgIH0gLy8gU2tpcCBrZXkgd2FybmluZyBpZiB0aGUgdHlwZSBpc24ndCB2YWxpZCBzaW5jZSBvdXIga2V5IHZhbGlkYXRpb24gbG9naWMKICAgIC8vIGRvZXNuJ3QgZXhwZWN0IGEgbm9uLXN0cmluZy9mdW5jdGlvbiB0eXBlIGFuZCBjYW4gdGhyb3cgY29uZnVzaW5nIGVycm9ycy4KICAgIC8vIFdlIGRvbid0IHdhbnQgZXhjZXB0aW9uIGJlaGF2aW9yIHRvIGRpZmZlciBiZXR3ZWVuIGRldiBhbmQgcHJvZC4KICAgIC8vIChSZW5kZXJpbmcgd2lsbCB0aHJvdyB3aXRoIGEgaGVscGZ1bCBtZXNzYWdlIGFuZCBhcyBzb29uIGFzIHRoZSB0eXBlIGlzCiAgICAvLyBmaXhlZCwgdGhlIGtleSB3YXJuaW5ncyB3aWxsIGFwcGVhci4pCgoKICAgIGlmICh2YWxpZFR5cGUpIHsKICAgICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47CgogICAgICBpZiAoY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChpc1N0YXRpY0NoaWxkcmVuKSB7CiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGNoaWxkcmVuW2ldLCB0eXBlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKE9iamVjdC5mcmVlemUpIHsKICAgICAgICAgICAgICBPYmplY3QuZnJlZXplKGNoaWxkcmVuKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZXJyb3IoJ1JlYWN0LmpzeDogU3RhdGljIGNoaWxkcmVuIHNob3VsZCBhbHdheXMgYmUgYW4gYXJyYXkuICcgKyAnWW91IGFyZSBsaWtlbHkgZXhwbGljaXRseSBjYWxsaW5nIFJlYWN0LmpzeHMgb3IgUmVhY3QuanN4REVWLiAnICsgJ1VzZSB0aGUgQmFiZWwgdHJhbnNmb3JtIGluc3RlYWQuJyk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGNoaWxkcmVuLCB0eXBlKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZiAodHlwZSA9PT0gZXhwb3J0cy5GcmFnbWVudCkgewogICAgICB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZWxlbWVudCk7CiAgICB9IGVsc2UgewogICAgICB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KTsKICAgIH0KCiAgICByZXR1cm4gZWxlbWVudDsKICB9Cn0gLy8gVGhlc2UgdHdvIGZ1bmN0aW9ucyBleGlzdCB0byBzdGlsbCBnZXQgY2hpbGQgd2FybmluZ3MgaW4gZGV2Ci8vIGV2ZW4gd2l0aCB0aGUgcHJvZCB0cmFuc2Zvcm0uIFRoaXMgbWVhbnMgdGhhdCBqc3hERVYgaXMgcHVyZWx5Ci8vIG9wdC1pbiBiZWhhdmlvciBmb3IgYmV0dGVyIG1lc3NhZ2VzIGJ1dCB0aGF0IHdlIHdvbid0IHN0b3AKLy8gZ2l2aW5nIHlvdSB3YXJuaW5ncyBpZiB5b3UgdXNlIHByb2R1Y3Rpb24gYXBpcy4KCmZ1bmN0aW9uIGpzeFdpdGhWYWxpZGF0aW9uU3RhdGljKHR5cGUsIHByb3BzLCBrZXkpIHsKICB7CiAgICByZXR1cm4ganN4V2l0aFZhbGlkYXRpb24odHlwZSwgcHJvcHMsIGtleSwgdHJ1ZSk7CiAgfQp9CmZ1bmN0aW9uIGpzeFdpdGhWYWxpZGF0aW9uRHluYW1pYyh0eXBlLCBwcm9wcywga2V5KSB7CiAgewogICAgcmV0dXJuIGpzeFdpdGhWYWxpZGF0aW9uKHR5cGUsIHByb3BzLCBrZXksIGZhbHNlKTsKICB9Cn0KCnZhciBqc3ggPSAganN4V2l0aFZhbGlkYXRpb25EeW5hbWljIDsgLy8gd2UgbWF5IHdhbnQgdG8gc3BlY2lhbCBjYXNlIGpzeHMgaW50ZXJuYWxseSB0byB0YWtlIGFkdmFudGFnZSBvZiBzdGF0aWMgY2hpbGRyZW4uCi8vIGZvciBub3cgd2UgY2FuIHNoaXAgaWRlbnRpY2FsIHByb2QgZnVuY3Rpb25zCgp2YXIganN4cyA9ICBqc3hXaXRoVmFsaWRhdGlvblN0YXRpYyA7CgpleHBvcnRzLmpzeCA9IGpzeDsKZXhwb3J0cy5qc3hzID0ganN4czsKICB9KSgpOwp9CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vY2FjaGUvcmVhY3QtbnBtLTE3LjAuMi05OWJhMzdkOTMxLWIyNTRjYzE3Y2UuemlwL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vY2FjaGUvcmVhY3QtbnBtLTE3LjAuMi05OWJhMzdkOTMxLWIyNTRjYzE3Y2UuemlwL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwoKCmlmIChmYWxzZSkge30gZWxzZSB7CiAgbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcyAqLyAiLi4vLi4vLnlhcm4vY2FjaGUvcmVhY3QtbnBtLTE3LjAuMi05OWJhMzdkOTMxLWIyNTRjYzE3Y2UuemlwL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMiKTsKfQoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL2NhY2hlL3JlYWN0LXJlZnJlc2gtbnBtLTAuMTQuMC03OGVmNWVlYjczLWRjNjlmYThjOTkuemlwL25vZGVfbW9kdWxlcy9yZWFjdC1yZWZyZXNoL2Nqcy9yZWFjdC1yZWZyZXNoLXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL2NhY2hlL3JlYWN0LXJlZnJlc2gtbnBtLTAuMTQuMC03OGVmNWVlYjczLWRjNjlmYThjOTkuemlwL25vZGVfbW9kdWxlcy9yZWFjdC1yZWZyZXNoL2Nqcy9yZWFjdC1yZWZyZXNoLXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMpID0+IHsKCiJ1c2Ugc3RyaWN0IjsKLyoqCiAqIEBsaWNlbnNlIFJlYWN0CiAqIHJlYWN0LXJlZnJlc2gtcnVudGltZS5kZXZlbG9wbWVudC5qcwogKgogKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy4KICoKICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlCiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4KICovCgoKCmlmICh0cnVlKSB7CiAgKGZ1bmN0aW9uKCkgewondXNlIHN0cmljdCc7CgovLyBBVFRFTlRJT04KdmFyIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5mb3J3YXJkX3JlZicpOwp2YXIgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcigncmVhY3QubWVtbycpOwoKdmFyIFBvc3NpYmx5V2Vha01hcCA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nID8gV2Vha01hcCA6IE1hcDsgLy8gV2UgbmV2ZXIgcmVtb3ZlIHRoZXNlIGFzc29jaWF0aW9ucy4KLy8gSXQncyBPSyB0byByZWZlcmVuY2UgZmFtaWxpZXMsIGJ1dCB1c2UgV2Vha01hcC9TZXQgZm9yIHR5cGVzLgoKdmFyIGFsbEZhbWlsaWVzQnlJRCA9IG5ldyBNYXAoKTsKdmFyIGFsbEZhbWlsaWVzQnlUeXBlID0gbmV3IFBvc3NpYmx5V2Vha01hcCgpOwp2YXIgYWxsU2lnbmF0dXJlc0J5VHlwZSA9IG5ldyBQb3NzaWJseVdlYWtNYXAoKTsgLy8gVGhpcyBXZWFrTWFwIGlzIHJlYWQgYnkgUmVhY3QsIHNvIHdlIG9ubHkgcHV0IGZhbWlsaWVzCi8vIHRoYXQgaGF2ZSBhY3R1YWxseSBiZWVuIGVkaXRlZCBoZXJlLiBUaGlzIGtlZXBzIGNoZWNrcyBmYXN0LgovLyAkRmxvd0lzc3VlCgp2YXIgdXBkYXRlZEZhbWlsaWVzQnlUeXBlID0gbmV3IFBvc3NpYmx5V2Vha01hcCgpOyAvLyBUaGlzIGlzIGNsZWFyZWQgb24gZXZlcnkgcGVyZm9ybVJlYWN0UmVmcmVzaCgpIGNhbGwuCi8vIEl0IGlzIGFuIGFycmF5IG9mIFtGYW1pbHksIE5leHRUeXBlXSB0dXBsZXMuCgp2YXIgcGVuZGluZ1VwZGF0ZXMgPSBbXTsgLy8gVGhpcyBpcyBpbmplY3RlZCBieSB0aGUgcmVuZGVyZXIgdmlhIERldlRvb2xzIGdsb2JhbCBob29rLgoKdmFyIGhlbHBlcnNCeVJlbmRlcmVySUQgPSBuZXcgTWFwKCk7CnZhciBoZWxwZXJzQnlSb290ID0gbmV3IE1hcCgpOyAvLyBXZSBrZWVwIHRyYWNrIG9mIG1vdW50ZWQgcm9vdHMgc28gd2UgY2FuIHNjaGVkdWxlIHVwZGF0ZXMuCgp2YXIgbW91bnRlZFJvb3RzID0gbmV3IFNldCgpOyAvLyBJZiBhIHJvb3QgY2FwdHVyZXMgYW4gZXJyb3IsIHdlIHJlbWVtYmVyIGl0IHNvIHdlIGNhbiByZXRyeSBvbiBlZGl0LgoKdmFyIGZhaWxlZFJvb3RzID0gbmV3IFNldCgpOyAvLyBJbiBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IFdlYWtNYXAsIHdlIGFsc28gcmVtZW1iZXIgdGhlIGxhc3QgZWxlbWVudCBmb3IgZXZlcnkgcm9vdC4KLy8gSXQgbmVlZHMgdG8gYmUgd2VhayBiZWNhdXNlIHdlIGRvIHRoaXMgZXZlbiBmb3Igcm9vdHMgdGhhdCBmYWlsZWQgdG8gbW91bnQuCi8vIElmIHRoZXJlIGlzIG5vIFdlYWtNYXAsIHdlIHdvbid0IGF0dGVtcHQgdG8gZG8gcmV0cnlpbmcuCi8vICRGbG93SXNzdWUKCnZhciByb290RWxlbWVudHMgPSAvLyAkRmxvd0lzc3VlCnR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nID8gbmV3IFdlYWtNYXAoKSA6IG51bGw7CnZhciBpc1BlcmZvcm1pbmdSZWZyZXNoID0gZmFsc2U7CgpmdW5jdGlvbiBjb21wdXRlRnVsbEtleShzaWduYXR1cmUpIHsKICBpZiAoc2lnbmF0dXJlLmZ1bGxLZXkgIT09IG51bGwpIHsKICAgIHJldHVybiBzaWduYXR1cmUuZnVsbEtleTsKICB9CgogIHZhciBmdWxsS2V5ID0gc2lnbmF0dXJlLm93bktleTsKICB2YXIgaG9va3M7CgogIHRyeSB7CiAgICBob29rcyA9IHNpZ25hdHVyZS5nZXRDdXN0b21Ib29rcygpOwogIH0gY2F0Y2ggKGVycikgewogICAgLy8gVGhpcyBjYW4gaGFwcGVuIGluIGFuIGVkZ2UgY2FzZSwgZS5nLiBpZiBleHByZXNzaW9uIGxpa2UgRm9vLnVzZVNvbWV0aGluZwogICAgLy8gZGVwZW5kcyBvbiBGb28gd2hpY2ggaXMgbGF6aWx5IGluaXRpYWxpemVkIGR1cmluZyByZW5kZXJpbmcuCiAgICAvLyBJbiB0aGF0IGNhc2UganVzdCBhc3N1bWUgd2UnbGwgaGF2ZSB0byByZW1vdW50LgogICAgc2lnbmF0dXJlLmZvcmNlUmVzZXQgPSB0cnVlOwogICAgc2lnbmF0dXJlLmZ1bGxLZXkgPSBmdWxsS2V5OwogICAgcmV0dXJuIGZ1bGxLZXk7CiAgfQoKICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgaG9vayA9IGhvb2tzW2ldOwoKICAgIGlmICh0eXBlb2YgaG9vayAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAvLyBTb21ldGhpbmcncyB3cm9uZy4gQXNzdW1lIHdlIG5lZWQgdG8gcmVtb3VudC4KICAgICAgc2lnbmF0dXJlLmZvcmNlUmVzZXQgPSB0cnVlOwogICAgICBzaWduYXR1cmUuZnVsbEtleSA9IGZ1bGxLZXk7CiAgICAgIHJldHVybiBmdWxsS2V5OwogICAgfQoKICAgIHZhciBuZXN0ZWRIb29rU2lnbmF0dXJlID0gYWxsU2lnbmF0dXJlc0J5VHlwZS5nZXQoaG9vayk7CgogICAgaWYgKG5lc3RlZEhvb2tTaWduYXR1cmUgPT09IHVuZGVmaW5lZCkgewogICAgICAvLyBObyBzaWduYXR1cmUgbWVhbnMgSG9vayB3YXNuJ3QgaW4gdGhlIHNvdXJjZSBjb2RlLCBlLmcuIGluIGEgbGlicmFyeS4KICAgICAgLy8gV2UnbGwgc2tpcCBpdCBiZWNhdXNlIHdlIGNhbiBhc3N1bWUgaXQgd29uJ3QgY2hhbmdlIGR1cmluZyB0aGlzIHNlc3Npb24uCiAgICAgIGNvbnRpbnVlOwogICAgfQoKICAgIHZhciBuZXN0ZWRIb29rS2V5ID0gY29tcHV0ZUZ1bGxLZXkobmVzdGVkSG9va1NpZ25hdHVyZSk7CgogICAgaWYgKG5lc3RlZEhvb2tTaWduYXR1cmUuZm9yY2VSZXNldCkgewogICAgICBzaWduYXR1cmUuZm9yY2VSZXNldCA9IHRydWU7CiAgICB9CgogICAgZnVsbEtleSArPSAnXG4tLS1cbicgKyBuZXN0ZWRIb29rS2V5OwogIH0KCiAgc2lnbmF0dXJlLmZ1bGxLZXkgPSBmdWxsS2V5OwogIHJldHVybiBmdWxsS2V5Owp9CgpmdW5jdGlvbiBoYXZlRXF1YWxTaWduYXR1cmVzKHByZXZUeXBlLCBuZXh0VHlwZSkgewogIHZhciBwcmV2U2lnbmF0dXJlID0gYWxsU2lnbmF0dXJlc0J5VHlwZS5nZXQocHJldlR5cGUpOwogIHZhciBuZXh0U2lnbmF0dXJlID0gYWxsU2lnbmF0dXJlc0J5VHlwZS5nZXQobmV4dFR5cGUpOwoKICBpZiAocHJldlNpZ25hdHVyZSA9PT0gdW5kZWZpbmVkICYmIG5leHRTaWduYXR1cmUgPT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuIHRydWU7CiAgfQoKICBpZiAocHJldlNpZ25hdHVyZSA9PT0gdW5kZWZpbmVkIHx8IG5leHRTaWduYXR1cmUgPT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgaWYgKGNvbXB1dGVGdWxsS2V5KHByZXZTaWduYXR1cmUpICE9PSBjb21wdXRlRnVsbEtleShuZXh0U2lnbmF0dXJlKSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgaWYgKG5leHRTaWduYXR1cmUuZm9yY2VSZXNldCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KCiAgcmV0dXJuIHRydWU7Cn0KCmZ1bmN0aW9uIGlzUmVhY3RDbGFzcyh0eXBlKSB7CiAgcmV0dXJuIHR5cGUucHJvdG90eXBlICYmIHR5cGUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ7Cn0KCmZ1bmN0aW9uIGNhblByZXNlcnZlU3RhdGVCZXR3ZWVuKHByZXZUeXBlLCBuZXh0VHlwZSkgewogIGlmIChpc1JlYWN0Q2xhc3MocHJldlR5cGUpIHx8IGlzUmVhY3RDbGFzcyhuZXh0VHlwZSkpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIGlmIChoYXZlRXF1YWxTaWduYXR1cmVzKHByZXZUeXBlLCBuZXh0VHlwZSkpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgcmV0dXJuIGZhbHNlOwp9CgpmdW5jdGlvbiByZXNvbHZlRmFtaWx5KHR5cGUpIHsKICAvLyBPbmx5IGNoZWNrIHVwZGF0ZWQgdHlwZXMgdG8ga2VlcCBsb29rdXBzIGZhc3QuCiAgcmV0dXJuIHVwZGF0ZWRGYW1pbGllc0J5VHlwZS5nZXQodHlwZSk7Cn0gLy8gSWYgd2UgZGlkbid0IGNhcmUgYWJvdXQgSUUxMSwgd2UgY291bGQgdXNlIG5ldyBNYXAvU2V0KGl0ZXJhYmxlKS4KCgpmdW5jdGlvbiBjbG9uZU1hcChtYXApIHsKICB2YXIgY2xvbmUgPSBuZXcgTWFwKCk7CiAgbWFwLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHsKICAgIGNsb25lLnNldChrZXksIHZhbHVlKTsKICB9KTsKICByZXR1cm4gY2xvbmU7Cn0KCmZ1bmN0aW9uIGNsb25lU2V0KHNldCkgewogIHZhciBjbG9uZSA9IG5ldyBTZXQoKTsKICBzZXQuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHsKICAgIGNsb25lLmFkZCh2YWx1ZSk7CiAgfSk7CiAgcmV0dXJuIGNsb25lOwp9IC8vIFRoaXMgaXMgYSBzYWZldHkgbWVjaGFuaXNtIHRvIHByb3RlY3QgYWdhaW5zdCByb2d1ZSBnZXR0ZXJzIGFuZCBQcm94aWVzLgoKCmZ1bmN0aW9uIGdldFByb3BlcnR5KG9iamVjdCwgcHJvcGVydHkpIHsKICB0cnkgewogICAgcmV0dXJuIG9iamVjdFtwcm9wZXJ0eV07CiAgfSBjYXRjaCAoZXJyKSB7CiAgICAvLyBJbnRlbnRpb25hbGx5IGlnbm9yZS4KICAgIHJldHVybiB1bmRlZmluZWQ7CiAgfQp9CgpmdW5jdGlvbiBwZXJmb3JtUmVhY3RSZWZyZXNoKCkgewoKICBpZiAocGVuZGluZ1VwZGF0ZXMubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIGlmIChpc1BlcmZvcm1pbmdSZWZyZXNoKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIGlzUGVyZm9ybWluZ1JlZnJlc2ggPSB0cnVlOwoKICB0cnkgewogICAgdmFyIHN0YWxlRmFtaWxpZXMgPSBuZXcgU2V0KCk7CiAgICB2YXIgdXBkYXRlZEZhbWlsaWVzID0gbmV3IFNldCgpOwogICAgdmFyIHVwZGF0ZXMgPSBwZW5kaW5nVXBkYXRlczsKICAgIHBlbmRpbmdVcGRhdGVzID0gW107CiAgICB1cGRhdGVzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgdmFyIGZhbWlseSA9IF9yZWZbMF0sCiAgICAgICAgICBuZXh0VHlwZSA9IF9yZWZbMV07CiAgICAgIC8vIE5vdyB0aGF0IHdlIGdvdCBhIHJlYWwgZWRpdCwgd2UgY2FuIGNyZWF0ZSBhc3NvY2lhdGlvbnMKICAgICAgLy8gdGhhdCB3aWxsIGJlIHJlYWQgYnkgdGhlIFJlYWN0IHJlY29uY2lsZXIuCiAgICAgIHZhciBwcmV2VHlwZSA9IGZhbWlseS5jdXJyZW50OwogICAgICB1cGRhdGVkRmFtaWxpZXNCeVR5cGUuc2V0KHByZXZUeXBlLCBmYW1pbHkpOwogICAgICB1cGRhdGVkRmFtaWxpZXNCeVR5cGUuc2V0KG5leHRUeXBlLCBmYW1pbHkpOwogICAgICBmYW1pbHkuY3VycmVudCA9IG5leHRUeXBlOyAvLyBEZXRlcm1pbmUgd2hldGhlciB0aGlzIHNob3VsZCBiZSBhIHJlLXJlbmRlciBvciBhIHJlLW1vdW50LgoKICAgICAgaWYgKGNhblByZXNlcnZlU3RhdGVCZXR3ZWVuKHByZXZUeXBlLCBuZXh0VHlwZSkpIHsKICAgICAgICB1cGRhdGVkRmFtaWxpZXMuYWRkKGZhbWlseSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RhbGVGYW1pbGllcy5hZGQoZmFtaWx5KTsKICAgICAgfQogICAgfSk7IC8vIFRPRE86IHJlbmFtZSB0aGVzZSBmaWVsZHMgdG8gc29tZXRoaW5nIG1vcmUgbWVhbmluZ2Z1bC4KCiAgICB2YXIgdXBkYXRlID0gewogICAgICB1cGRhdGVkRmFtaWxpZXM6IHVwZGF0ZWRGYW1pbGllcywKICAgICAgLy8gRmFtaWxpZXMgdGhhdCB3aWxsIHJlLXJlbmRlciBwcmVzZXJ2aW5nIHN0YXRlCiAgICAgIHN0YWxlRmFtaWxpZXM6IHN0YWxlRmFtaWxpZXMgLy8gRmFtaWxpZXMgdGhhdCB3aWxsIGJlIHJlbW91bnRlZAoKICAgIH07CiAgICBoZWxwZXJzQnlSZW5kZXJlcklELmZvckVhY2goZnVuY3Rpb24gKGhlbHBlcnMpIHsKICAgICAgLy8gRXZlbiBpZiB0aGVyZSBhcmUgbm8gcm9vdHMsIHNldCB0aGUgaGFuZGxlciBvbiBmaXJzdCB1cGRhdGUuCiAgICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0IGlmICpuZXcqIHJvb3RzIGFyZSBtb3VudGVkLCB0aGV5J2xsIHVzZSB0aGUgcmVzb2x2ZSBoYW5kbGVyLgogICAgICBoZWxwZXJzLnNldFJlZnJlc2hIYW5kbGVyKHJlc29sdmVGYW1pbHkpOwogICAgfSk7CiAgICB2YXIgZGlkRXJyb3IgPSBmYWxzZTsKICAgIHZhciBmaXJzdEVycm9yID0gbnVsbDsgLy8gV2Ugc25hcHNob3QgbWFwcyBhbmQgc2V0cyB0aGF0IGFyZSBtdXRhdGVkIGR1cmluZyBjb21taXRzLgogICAgLy8gSWYgd2UgZG9uJ3QgZG8gdGhpcywgdGhlcmUgaXMgYSByaXNrIHRoZXkgd2lsbCBiZSBtdXRhdGVkIHdoaWxlCiAgICAvLyB3ZSBpdGVyYXRlIG92ZXIgdGhlbS4gRm9yIGV4YW1wbGUsIHRyeWluZyB0byByZWNvdmVyIGEgZmFpbGVkIHJvb3QKICAgIC8vIG1heSBjYXVzZSBhbm90aGVyIHJvb3QgdG8gYmUgYWRkZWQgdG8gdGhlIGZhaWxlZCBsaXN0IC0tIGFuIGluZmluaXRlIGxvb3AuCgogICAgdmFyIGZhaWxlZFJvb3RzU25hcHNob3QgPSBjbG9uZVNldChmYWlsZWRSb290cyk7CiAgICB2YXIgbW91bnRlZFJvb3RzU25hcHNob3QgPSBjbG9uZVNldChtb3VudGVkUm9vdHMpOwogICAgdmFyIGhlbHBlcnNCeVJvb3RTbmFwc2hvdCA9IGNsb25lTWFwKGhlbHBlcnNCeVJvb3QpOwogICAgZmFpbGVkUm9vdHNTbmFwc2hvdC5mb3JFYWNoKGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHZhciBoZWxwZXJzID0gaGVscGVyc0J5Um9vdFNuYXBzaG90LmdldChyb290KTsKCiAgICAgIGlmIChoZWxwZXJzID09PSB1bmRlZmluZWQpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIGhlbHBlcnMgZm9yIGEgcm9vdC4gVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdCBSZWZyZXNoLicpOwogICAgICB9CgogICAgICBpZiAoIWZhaWxlZFJvb3RzLmhhcyhyb290KSkgey8vIE5vIGxvbmdlciBmYWlsZWQuCiAgICAgIH0KCiAgICAgIGlmIChyb290RWxlbWVudHMgPT09IG51bGwpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICghcm9vdEVsZW1lbnRzLmhhcyhyb290KSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGVsZW1lbnQgPSByb290RWxlbWVudHMuZ2V0KHJvb3QpOwoKICAgICAgdHJ5IHsKICAgICAgICBoZWxwZXJzLnNjaGVkdWxlUm9vdChyb290LCBlbGVtZW50KTsKICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgaWYgKCFkaWRFcnJvcikgewogICAgICAgICAgZGlkRXJyb3IgPSB0cnVlOwogICAgICAgICAgZmlyc3RFcnJvciA9IGVycjsKICAgICAgICB9IC8vIEtlZXAgdHJ5aW5nIG90aGVyIHJvb3RzLgoKICAgICAgfQogICAgfSk7CiAgICBtb3VudGVkUm9vdHNTbmFwc2hvdC5mb3JFYWNoKGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHZhciBoZWxwZXJzID0gaGVscGVyc0J5Um9vdFNuYXBzaG90LmdldChyb290KTsKCiAgICAgIGlmIChoZWxwZXJzID09PSB1bmRlZmluZWQpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIGhlbHBlcnMgZm9yIGEgcm9vdC4gVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdCBSZWZyZXNoLicpOwogICAgICB9CgogICAgICBpZiAoIW1vdW50ZWRSb290cy5oYXMocm9vdCkpIHsvLyBObyBsb25nZXIgbW91bnRlZC4KICAgICAgfQoKICAgICAgdHJ5IHsKICAgICAgICBoZWxwZXJzLnNjaGVkdWxlUmVmcmVzaChyb290LCB1cGRhdGUpOwogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBpZiAoIWRpZEVycm9yKSB7CiAgICAgICAgICBkaWRFcnJvciA9IHRydWU7CiAgICAgICAgICBmaXJzdEVycm9yID0gZXJyOwogICAgICAgIH0gLy8gS2VlcCB0cnlpbmcgb3RoZXIgcm9vdHMuCgogICAgICB9CiAgICB9KTsKCiAgICBpZiAoZGlkRXJyb3IpIHsKICAgICAgdGhyb3cgZmlyc3RFcnJvcjsKICAgIH0KCiAgICByZXR1cm4gdXBkYXRlOwogIH0gZmluYWxseSB7CiAgICBpc1BlcmZvcm1pbmdSZWZyZXNoID0gZmFsc2U7CiAgfQp9CmZ1bmN0aW9uIHJlZ2lzdGVyKHR5cGUsIGlkKSB7CiAgewogICAgaWYgKHR5cGUgPT09IG51bGwpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZSAhPT0gJ29iamVjdCcpIHsKICAgICAgcmV0dXJuOwogICAgfSAvLyBUaGlzIGNhbiBoYXBwZW4gaW4gYW4gZWRnZSBjYXNlLCBlLmcuIGlmIHdlIHJlZ2lzdGVyCiAgICAvLyByZXR1cm4gdmFsdWUgb2YgYSBIT0MgYnV0IGl0IHJldHVybnMgYSBjYWNoZWQgY29tcG9uZW50LgogICAgLy8gSWdub3JlIGFueXRoaW5nIGJ1dCB0aGUgZmlyc3QgcmVnaXN0cmF0aW9uIGZvciBlYWNoIHR5cGUuCgoKICAgIGlmIChhbGxGYW1pbGllc0J5VHlwZS5oYXModHlwZSkpIHsKICAgICAgcmV0dXJuOwogICAgfSAvLyBDcmVhdGUgZmFtaWx5IG9yIHJlbWVtYmVyIHRvIHVwZGF0ZSBpdC4KICAgIC8vIE5vbmUgb2YgdGhpcyBib29ra2VlcGluZyBhZmZlY3RzIHJlY29uY2lsaWF0aW9uCiAgICAvLyB1bnRpbCB0aGUgZmlyc3QgcGVyZm9ybVJlYWN0UmVmcmVzaCgpIGNhbGwgYWJvdmUuCgoKICAgIHZhciBmYW1pbHkgPSBhbGxGYW1pbGllc0J5SUQuZ2V0KGlkKTsKCiAgICBpZiAoZmFtaWx5ID09PSB1bmRlZmluZWQpIHsKICAgICAgZmFtaWx5ID0gewogICAgICAgIGN1cnJlbnQ6IHR5cGUKICAgICAgfTsKICAgICAgYWxsRmFtaWxpZXNCeUlELnNldChpZCwgZmFtaWx5KTsKICAgIH0gZWxzZSB7CiAgICAgIHBlbmRpbmdVcGRhdGVzLnB1c2goW2ZhbWlseSwgdHlwZV0pOwogICAgfQoKICAgIGFsbEZhbWlsaWVzQnlUeXBlLnNldCh0eXBlLCBmYW1pbHkpOyAvLyBWaXNpdCBpbm5lciB0eXBlcyBiZWNhdXNlIHdlIG1pZ2h0IG5vdCBoYXZlIHJlZ2lzdGVyZWQgdGhlbS4KCiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHsKICAgICAgc3dpdGNoIChnZXRQcm9wZXJ0eSh0eXBlLCAnJCR0eXBlb2YnKSkgewogICAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRToKICAgICAgICAgIHJlZ2lzdGVyKHR5cGUucmVuZGVyLCBpZCArICckcmVuZGVyJyk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6CiAgICAgICAgICByZWdpc3Rlcih0eXBlLnR5cGUsIGlkICsgJyR0eXBlJyk7CiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogIH0KfQpmdW5jdGlvbiBzZXRTaWduYXR1cmUodHlwZSwga2V5KSB7CiAgdmFyIGZvcmNlUmVzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlOwogIHZhciBnZXRDdXN0b21Ib29rcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkOwoKICB7CiAgICBpZiAoIWFsbFNpZ25hdHVyZXNCeVR5cGUuaGFzKHR5cGUpKSB7CiAgICAgIGFsbFNpZ25hdHVyZXNCeVR5cGUuc2V0KHR5cGUsIHsKICAgICAgICBmb3JjZVJlc2V0OiBmb3JjZVJlc2V0LAogICAgICAgIG93bktleToga2V5LAogICAgICAgIGZ1bGxLZXk6IG51bGwsCiAgICAgICAgZ2V0Q3VzdG9tSG9va3M6IGdldEN1c3RvbUhvb2tzIHx8IGZ1bmN0aW9uICgpIHsKICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSAvLyBWaXNpdCBpbm5lciB0eXBlcyBiZWNhdXNlIHdlIG1pZ2h0IG5vdCBoYXZlIHNpZ25lZCB0aGVtLgoKCiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHsKICAgICAgc3dpdGNoIChnZXRQcm9wZXJ0eSh0eXBlLCAnJCR0eXBlb2YnKSkgewogICAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRToKICAgICAgICAgIHNldFNpZ25hdHVyZSh0eXBlLnJlbmRlciwga2V5LCBmb3JjZVJlc2V0LCBnZXRDdXN0b21Ib29rcyk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6CiAgICAgICAgICBzZXRTaWduYXR1cmUodHlwZS50eXBlLCBrZXksIGZvcmNlUmVzZXQsIGdldEN1c3RvbUhvb2tzKTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfQp9IC8vIFRoaXMgaXMgbGF6aWx5IGNhbGxlZCBkdXJpbmcgZmlyc3QgcmVuZGVyIGZvciBhIHR5cGUuCi8vIEl0IGNhcHR1cmVzIEhvb2sgbGlzdCBhdCB0aGF0IHRpbWUgc28gaW5saW5lIHJlcXVpcmVzIGRvbid0IGJyZWFrIGNvbXBhcmlzb25zLgoKZnVuY3Rpb24gY29sbGVjdEN1c3RvbUhvb2tzRm9yU2lnbmF0dXJlKHR5cGUpIHsKICB7CiAgICB2YXIgc2lnbmF0dXJlID0gYWxsU2lnbmF0dXJlc0J5VHlwZS5nZXQodHlwZSk7CgogICAgaWYgKHNpZ25hdHVyZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGNvbXB1dGVGdWxsS2V5KHNpZ25hdHVyZSk7CiAgICB9CiAgfQp9CmZ1bmN0aW9uIGdldEZhbWlseUJ5SUQoaWQpIHsKICB7CiAgICByZXR1cm4gYWxsRmFtaWxpZXNCeUlELmdldChpZCk7CiAgfQp9CmZ1bmN0aW9uIGdldEZhbWlseUJ5VHlwZSh0eXBlKSB7CiAgewogICAgcmV0dXJuIGFsbEZhbWlsaWVzQnlUeXBlLmdldCh0eXBlKTsKICB9Cn0KZnVuY3Rpb24gZmluZEFmZmVjdGVkSG9zdEluc3RhbmNlcyhmYW1pbGllcykgewogIHsKICAgIHZhciBhZmZlY3RlZEluc3RhbmNlcyA9IG5ldyBTZXQoKTsKICAgIG1vdW50ZWRSb290cy5mb3JFYWNoKGZ1bmN0aW9uIChyb290KSB7CiAgICAgIHZhciBoZWxwZXJzID0gaGVscGVyc0J5Um9vdC5nZXQocm9vdCk7CgogICAgICBpZiAoaGVscGVycyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBoZWxwZXJzIGZvciBhIHJvb3QuIFRoaXMgaXMgYSBidWcgaW4gUmVhY3QgUmVmcmVzaC4nKTsKICAgICAgfQoKICAgICAgdmFyIGluc3RhbmNlc0ZvclJvb3QgPSBoZWxwZXJzLmZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaChyb290LCBmYW1pbGllcyk7CiAgICAgIGluc3RhbmNlc0ZvclJvb3QuZm9yRWFjaChmdW5jdGlvbiAoaW5zdCkgewogICAgICAgIGFmZmVjdGVkSW5zdGFuY2VzLmFkZChpbnN0KTsKICAgICAgfSk7CiAgICB9KTsKICAgIHJldHVybiBhZmZlY3RlZEluc3RhbmNlczsKICB9Cn0KZnVuY3Rpb24gaW5qZWN0SW50b0dsb2JhbEhvb2soZ2xvYmFsT2JqZWN0KSB7CiAgewogICAgLy8gRm9yIFJlYWN0IE5hdGl2ZSwgdGhlIGdsb2JhbCBob29rIHdpbGwgYmUgc2V0IHVwIGJ5IHJlcXVpcmUoJ3JlYWN0LWRldnRvb2xzLWNvcmUnKS4KICAgIC8vIFRoYXQgY29kZSB3aWxsIHJ1biBiZWZvcmUgdXMuIFNvIHdlIG5lZWQgdG8gbW9ua2V5cGF0Y2ggZnVuY3Rpb25zIG9uIGV4aXN0aW5nIGhvb2suCiAgICAvLyBGb3IgUmVhY3QgV2ViLCB0aGUgZ2xvYmFsIGhvb2sgd2lsbCBiZSBzZXQgdXAgYnkgdGhlIGV4dGVuc2lvbi4KICAgIC8vIFRoaXMgd2lsbCBhbHNvIHJ1biBiZWZvcmUgdXMuCiAgICB2YXIgaG9vayA9IGdsb2JhbE9iamVjdC5fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187CgogICAgaWYgKGhvb2sgPT09IHVuZGVmaW5lZCkgewogICAgICAvLyBIb3dldmVyLCBpZiB0aGVyZSBpcyBubyBEZXZUb29scyBleHRlbnNpb24sIHdlJ2xsIG5lZWQgdG8gc2V0IHVwIHRoZSBnbG9iYWwgaG9vayBvdXJzZWx2ZXMuCiAgICAgIC8vIE5vdGUgdGhhdCBpbiB0aGlzIGNhc2UgaXQncyBpbXBvcnRhbnQgdGhhdCByZW5kZXJlciBjb2RlIHJ1bnMgKmFmdGVyKiB0aGlzIG1ldGhvZCBjYWxsLgogICAgICAvLyBPdGhlcndpc2UsIHRoZSByZW5kZXJlciB3aWxsIHRoaW5rIHRoYXQgdGhlcmUgaXMgbm8gZ2xvYmFsIGhvb2ssIGFuZCB3b24ndCBkbyB0aGUgaW5qZWN0aW9uLgogICAgICB2YXIgbmV4dElEID0gMDsKICAgICAgZ2xvYmFsT2JqZWN0Ll9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9IGhvb2sgPSB7CiAgICAgICAgcmVuZGVyZXJzOiBuZXcgTWFwKCksCiAgICAgICAgc3VwcG9ydHNGaWJlcjogdHJ1ZSwKICAgICAgICBpbmplY3Q6IGZ1bmN0aW9uIChpbmplY3RlZCkgewogICAgICAgICAgcmV0dXJuIG5leHRJRCsrOwogICAgICAgIH0sCiAgICAgICAgb25TY2hlZHVsZUZpYmVyUm9vdDogZnVuY3Rpb24gKGlkLCByb290LCBjaGlsZHJlbikge30sCiAgICAgICAgb25Db21taXRGaWJlclJvb3Q6IGZ1bmN0aW9uIChpZCwgcm9vdCwgbWF5YmVQcmlvcml0eUxldmVsLCBkaWRFcnJvcikge30sCiAgICAgICAgb25Db21taXRGaWJlclVubW91bnQ6IGZ1bmN0aW9uICgpIHt9CiAgICAgIH07CiAgICB9CgogICAgaWYgKGhvb2suaXNEaXNhYmxlZCkgewogICAgICAvLyBUaGlzIGlzbid0IGEgcmVhbCBwcm9wZXJ0eSBvbiB0aGUgaG9vaywgYnV0IGl0IGNhbiBiZSBzZXQgdG8gb3B0IG91dAogICAgICAvLyBvZiBEZXZUb29scyBpbnRlZ3JhdGlvbiBhbmQgYXNzb2NpYXRlZCB3YXJuaW5ncyBhbmQgbG9ncy4KICAgICAgLy8gVXNpbmcgY29uc29sZVsnd2FybiddIHRvIGV2YWRlIEJhYmVsIGFuZCBFU0xpbnQKICAgICAgY29uc29sZVsnd2FybiddKCdTb21ldGhpbmcgaGFzIHNoaW1tZWQgdGhlIFJlYWN0IERldlRvb2xzIGdsb2JhbCBob29rIChfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pLiAnICsgJ0Zhc3QgUmVmcmVzaCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoaXMgc2hpbSBhbmQgd2lsbCBiZSBkaXNhYmxlZC4nKTsKICAgICAgcmV0dXJuOwogICAgfSAvLyBIZXJlLCB3ZSBqdXN0IHdhbnQgdG8gZ2V0IGEgcmVmZXJlbmNlIHRvIHNjaGVkdWxlUmVmcmVzaC4KCgogICAgdmFyIG9sZEluamVjdCA9IGhvb2suaW5qZWN0OwoKICAgIGhvb2suaW5qZWN0ID0gZnVuY3Rpb24gKGluamVjdGVkKSB7CiAgICAgIHZhciBpZCA9IG9sZEluamVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwoKICAgICAgaWYgKHR5cGVvZiBpbmplY3RlZC5zY2hlZHVsZVJlZnJlc2ggPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGluamVjdGVkLnNldFJlZnJlc2hIYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgLy8gVGhpcyB2ZXJzaW9uIHN1cHBvcnRzIFJlYWN0IFJlZnJlc2guCiAgICAgICAgaGVscGVyc0J5UmVuZGVyZXJJRC5zZXQoaWQsIGluamVjdGVkKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGlkOwogICAgfTsgLy8gRG8gdGhlIHNhbWUgZm9yIGFueSBhbHJlYWR5IGluamVjdGVkIHJvb3RzLgogICAgLy8gVGhpcyBpcyB1c2VmdWwgaWYgUmVhY3RET00gaGFzIGFscmVhZHkgYmVlbiBpbml0aWFsaXplZC4KICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTc2MjYKCgogICAgaG9vay5yZW5kZXJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaW5qZWN0ZWQsIGlkKSB7CiAgICAgIGlmICh0eXBlb2YgaW5qZWN0ZWQuc2NoZWR1bGVSZWZyZXNoID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbmplY3RlZC5zZXRSZWZyZXNoSGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIC8vIFRoaXMgdmVyc2lvbiBzdXBwb3J0cyBSZWFjdCBSZWZyZXNoLgogICAgICAgIGhlbHBlcnNCeVJlbmRlcmVySUQuc2V0KGlkLCBpbmplY3RlZCk7CiAgICAgIH0KICAgIH0pOyAvLyBXZSBhbHNvIHdhbnQgdG8gdHJhY2sgY3VycmVudGx5IG1vdW50ZWQgcm9vdHMuCgogICAgdmFyIG9sZE9uQ29tbWl0RmliZXJSb290ID0gaG9vay5vbkNvbW1pdEZpYmVyUm9vdDsKCiAgICB2YXIgb2xkT25TY2hlZHVsZUZpYmVyUm9vdCA9IGhvb2sub25TY2hlZHVsZUZpYmVyUm9vdCB8fCBmdW5jdGlvbiAoKSB7fTsKCiAgICBob29rLm9uU2NoZWR1bGVGaWJlclJvb3QgPSBmdW5jdGlvbiAoaWQsIHJvb3QsIGNoaWxkcmVuKSB7CiAgICAgIGlmICghaXNQZXJmb3JtaW5nUmVmcmVzaCkgewogICAgICAgIC8vIElmIGl0IHdhcyBpbnRlbnRpb25hbGx5IHNjaGVkdWxlZCwgZG9uJ3QgYXR0ZW1wdCB0byByZXN0b3JlLgogICAgICAgIC8vIFRoaXMgaW5jbHVkZXMgaW50ZW50aW9uYWxseSBzY2hlZHVsZWQgdW5tb3VudHMuCiAgICAgICAgZmFpbGVkUm9vdHMuZGVsZXRlKHJvb3QpOwoKICAgICAgICBpZiAocm9vdEVsZW1lbnRzICE9PSBudWxsKSB7CiAgICAgICAgICByb290RWxlbWVudHMuc2V0KHJvb3QsIGNoaWxkcmVuKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBvbGRPblNjaGVkdWxlRmliZXJSb290LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwoKICAgIGhvb2sub25Db21taXRGaWJlclJvb3QgPSBmdW5jdGlvbiAoaWQsIHJvb3QsIG1heWJlUHJpb3JpdHlMZXZlbCwgZGlkRXJyb3IpIHsKICAgICAgdmFyIGhlbHBlcnMgPSBoZWxwZXJzQnlSZW5kZXJlcklELmdldChpZCk7CgogICAgICBpZiAoaGVscGVycyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaGVscGVyc0J5Um9vdC5zZXQocm9vdCwgaGVscGVycyk7CiAgICAgICAgdmFyIGN1cnJlbnQgPSByb290LmN1cnJlbnQ7CiAgICAgICAgdmFyIGFsdGVybmF0ZSA9IGN1cnJlbnQuYWx0ZXJuYXRlOyAvLyBXZSBuZWVkIHRvIGRldGVybWluZSB3aGV0aGVyIHRoaXMgcm9vdCBoYXMganVzdCAodW4pbW91bnRlZC4KICAgICAgICAvLyBUaGlzIGxvZ2ljIGlzIGNvcHktcGFzdGVkIGZyb20gc2ltaWxhciBsb2dpYyBpbiB0aGUgRGV2VG9vbHMgYmFja2VuZC4KICAgICAgICAvLyBJZiB0aGlzIGJyZWFrcyB3aXRoIHNvbWUgcmVmYWN0b3JpbmcsIHlvdSdsbCB3YW50IHRvIHVwZGF0ZSBEZXZUb29scyB0b28uCgogICAgICAgIGlmIChhbHRlcm5hdGUgIT09IG51bGwpIHsKICAgICAgICAgIHZhciB3YXNNb3VudGVkID0gYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUgIT0gbnVsbCAmJiBhbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5lbGVtZW50ICE9IG51bGwgJiYgbW91bnRlZFJvb3RzLmhhcyhyb290KTsKICAgICAgICAgIHZhciBpc01vdW50ZWQgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGUgIT0gbnVsbCAmJiBjdXJyZW50Lm1lbW9pemVkU3RhdGUuZWxlbWVudCAhPSBudWxsOwoKICAgICAgICAgIGlmICghd2FzTW91bnRlZCAmJiBpc01vdW50ZWQpIHsKICAgICAgICAgICAgLy8gTW91bnQgYSBuZXcgcm9vdC4KICAgICAgICAgICAgbW91bnRlZFJvb3RzLmFkZChyb290KTsKICAgICAgICAgICAgZmFpbGVkUm9vdHMuZGVsZXRlKHJvb3QpOwogICAgICAgICAgfSBlbHNlIGlmICh3YXNNb3VudGVkICYmIGlzTW91bnRlZCkgOyBlbHNlIGlmICh3YXNNb3VudGVkICYmICFpc01vdW50ZWQpIHsKICAgICAgICAgICAgLy8gVW5tb3VudCBhbiBleGlzdGluZyByb290LgogICAgICAgICAgICBtb3VudGVkUm9vdHMuZGVsZXRlKHJvb3QpOwoKICAgICAgICAgICAgaWYgKGRpZEVycm9yKSB7CiAgICAgICAgICAgICAgLy8gV2UnbGwgcmVtb3VudCBpdCBvbiBmdXR1cmUgZWRpdHMuCiAgICAgICAgICAgICAgZmFpbGVkUm9vdHMuYWRkKHJvb3QpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGhlbHBlcnNCeVJvb3QuZGVsZXRlKHJvb3QpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKCF3YXNNb3VudGVkICYmICFpc01vdW50ZWQpIHsKICAgICAgICAgICAgaWYgKGRpZEVycm9yKSB7CiAgICAgICAgICAgICAgLy8gV2UnbGwgcmVtb3VudCBpdCBvbiBmdXR1cmUgZWRpdHMuCiAgICAgICAgICAgICAgZmFpbGVkUm9vdHMuYWRkKHJvb3QpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIE1vdW50IGEgbmV3IHJvb3QuCiAgICAgICAgICBtb3VudGVkUm9vdHMuYWRkKHJvb3QpOwogICAgICAgIH0KICAgICAgfSAvLyBBbHdheXMgY2FsbCB0aGUgZGVjb3JhdGVkIERldlRvb2xzIGhvb2suCgoKICAgICAgcmV0dXJuIG9sZE9uQ29tbWl0RmliZXJSb290LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwogIH0KfQpmdW5jdGlvbiBoYXNVbnJlY292ZXJhYmxlRXJyb3JzKCkgewogIC8vIFRPRE86IGRlbGV0ZSB0aGlzIGFmdGVyIHJlbW92aW5nIGRlcGVuZGVuY3kgaW4gUk4uCiAgcmV0dXJuIGZhbHNlOwp9IC8vIEV4cG9zZWQgZm9yIHRlc3RpbmcuCgpmdW5jdGlvbiBfZ2V0TW91bnRlZFJvb3RDb3VudCgpIHsKICB7CiAgICByZXR1cm4gbW91bnRlZFJvb3RzLnNpemU7CiAgfQp9IC8vIFRoaXMgaXMgYSB3cmFwcGVyIG92ZXIgbW9yZSBwcmltaXRpdmUgZnVuY3Rpb25zIGZvciBzZXR0aW5nIHNpZ25hdHVyZS4KLy8gU2lnbmF0dXJlcyBsZXQgdXMgZGVjaWRlIHdoZXRoZXIgdGhlIEhvb2sgb3JkZXIgaGFzIGNoYW5nZWQgb24gcmVmcmVzaC4KLy8KLy8gVGhpcyBmdW5jdGlvbiBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGFzIGEgdHJhbnNmb3JtIHRhcmdldCwgZS5nLjoKLy8gdmFyIF9zID0gY3JlYXRlU2lnbmF0dXJlRnVuY3Rpb25Gb3JUcmFuc2Zvcm0oKQovLwovLyBmdW5jdGlvbiBIZWxsbygpIHsKLy8gICBjb25zdCBbZm9vLCBzZXRGb29dID0gdXNlU3RhdGUoMCk7Ci8vICAgY29uc3QgdmFsdWUgPSB1c2VDdXN0b21Ib29rKCk7Ci8vICAgX3MoKTsgLyogQ2FsbCB3aXRob3V0IGFyZ3VtZW50cyB0cmlnZ2VycyBjb2xsZWN0aW5nIHRoZSBjdXN0b20gSG9vayBsaXN0LgovLyAgICAgICAgICAqIFRoaXMgZG9lc24ndCBoYXBwZW4gZHVyaW5nIHRoZSBtb2R1bGUgZXZhbHVhdGlvbiBiZWNhdXNlIHdlCi8vICAgICAgICAgICogZG9uJ3Qgd2FudCB0byBjaGFuZ2UgdGhlIG1vZHVsZSBvcmRlciB3aXRoIGlubGluZSByZXF1aXJlcy4KLy8gICAgICAgICAgKiBOZXh0IGNhbGxzIGFyZSBub29wcy4gKi8KLy8gICByZXR1cm4gPGgxPkhpPC9oMT47Ci8vIH0KLy8KLy8gLyogQ2FsbCB3aXRoIGFyZ3VtZW50cyBhdHRhY2hlcyB0aGUgc2lnbmF0dXJlIHRvIHRoZSB0eXBlOiAqLwovLyBfcygKLy8gICBIZWxsbywKLy8gICAndXNlU3RhdGV7W2Zvbywgc2V0Rm9vXX0oMCknLAovLyAgICgpID0+IFt1c2VDdXN0b21Ib29rXSwgLyogTGF6eSB0byBhdm9pZCB0cmlnZ2VyaW5nIGlubGluZSByZXF1aXJlcyAqLwovLyApOwoKZnVuY3Rpb24gY3JlYXRlU2lnbmF0dXJlRnVuY3Rpb25Gb3JUcmFuc2Zvcm0oKSB7CiAgewogICAgdmFyIHNhdmVkVHlwZTsKICAgIHZhciBoYXNDdXN0b21Ib29rczsKICAgIHZhciBkaWRDb2xsZWN0SG9va3MgPSBmYWxzZTsKICAgIHJldHVybiBmdW5jdGlvbiAodHlwZSwga2V5LCBmb3JjZVJlc2V0LCBnZXRDdXN0b21Ib29rcykgewogICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAvLyBXZSdyZSBpbiB0aGUgaW5pdGlhbCBwaGFzZSB0aGF0IGFzc29jaWF0ZXMgc2lnbmF0dXJlcwogICAgICAgIC8vIHdpdGggdGhlIGZ1bmN0aW9ucy4gTm90ZSB0aGlzIG1heSBiZSBjYWxsZWQgbXVsdGlwbGUgdGltZXMKICAgICAgICAvLyBpbiBIT0MgY2hhaW5zIGxpa2UgX3MoaG9jMShfcyhob2MyKF9zKGFjdHVhbEZ1bmN0aW9uKSkpKSkuCiAgICAgICAgaWYgKCFzYXZlZFR5cGUpIHsKICAgICAgICAgIC8vIFdlJ3JlIGluIHRoZSBpbm5lcm1vc3QgY2FsbCwgc28gdGhpcyBpcyB0aGUgYWN0dWFsIHR5cGUuCiAgICAgICAgICBzYXZlZFR5cGUgPSB0eXBlOwogICAgICAgICAgaGFzQ3VzdG9tSG9va3MgPSB0eXBlb2YgZ2V0Q3VzdG9tSG9va3MgPT09ICdmdW5jdGlvbic7CiAgICAgICAgfSAvLyBTZXQgdGhlIHNpZ25hdHVyZSBmb3IgYWxsIHR5cGVzIChldmVuIHdyYXBwZXJzISkgaW4gY2FzZQogICAgICAgIC8vIHRoZXkgaGF2ZSBubyBzaWduYXR1cmVzIG9mIHRoZWlyIG93bi4gVGhpcyBpcyB0byBwcmV2ZW50CiAgICAgICAgLy8gcHJvYmxlbXMgbGlrZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzIwNDE3LgoKCiAgICAgICAgaWYgKHR5cGUgIT0gbnVsbCAmJiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnKSkgewogICAgICAgICAgc2V0U2lnbmF0dXJlKHR5cGUsIGtleSwgZm9yY2VSZXNldCwgZ2V0Q3VzdG9tSG9va3MpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHR5cGU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gV2UncmUgaW4gdGhlIF9zKCkgY2FsbCB3aXRob3V0IGFyZ3VtZW50cywgd2hpY2ggbWVhbnMKICAgICAgICAvLyB0aGlzIGlzIHRoZSB0aW1lIHRvIGNvbGxlY3QgY3VzdG9tIEhvb2sgc2lnbmF0dXJlcy4KICAgICAgICAvLyBPbmx5IGRvIHRoaXMgb25jZS4gVGhpcyBwYXRoIGlzIGhvdCBhbmQgcnVucyAqaW5zaWRlKiBldmVyeSByZW5kZXIhCiAgICAgICAgaWYgKCFkaWRDb2xsZWN0SG9va3MgJiYgaGFzQ3VzdG9tSG9va3MpIHsKICAgICAgICAgIGRpZENvbGxlY3RIb29rcyA9IHRydWU7CiAgICAgICAgICBjb2xsZWN0Q3VzdG9tSG9va3NGb3JTaWduYXR1cmUoc2F2ZWRUeXBlKTsKICAgICAgICB9CiAgICAgIH0KICAgIH07CiAgfQp9CmZ1bmN0aW9uIGlzTGlrZWx5Q29tcG9uZW50VHlwZSh0eXBlKSB7CiAgewogICAgc3dpdGNoICh0eXBlb2YgdHlwZSkgewogICAgICBjYXNlICdmdW5jdGlvbic6CiAgICAgICAgewogICAgICAgICAgLy8gRmlyc3QsIGRlYWwgd2l0aCBjbGFzc2VzLgogICAgICAgICAgaWYgKHR5cGUucHJvdG90eXBlICE9IG51bGwpIHsKICAgICAgICAgICAgaWYgKHR5cGUucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHsKICAgICAgICAgICAgICAvLyBSZWFjdCBjbGFzcy4KICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIG93bk5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModHlwZS5wcm90b3R5cGUpOwoKICAgICAgICAgICAgaWYgKG93bk5hbWVzLmxlbmd0aCA+IDEgfHwgb3duTmFtZXNbMF0gIT09ICdjb25zdHJ1Y3RvcicpIHsKICAgICAgICAgICAgICAvLyBUaGlzIGxvb2tzIGxpa2UgYSBjbGFzcy4KICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvCgoKICAgICAgICAgICAgaWYgKHR5cGUucHJvdG90eXBlLl9fcHJvdG9fXyAhPT0gT2JqZWN0LnByb3RvdHlwZSkgewogICAgICAgICAgICAgIC8vIEl0IGhhcyBhIHN1cGVyY2xhc3MuCiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9IC8vIFBhc3MgdGhyb3VnaC4KICAgICAgICAgICAgLy8gVGhpcyBsb29rcyBsaWtlIGEgcmVndWxhciBmdW5jdGlvbiB3aXRoIGVtcHR5IHByb3RvdHlwZS4KCiAgICAgICAgICB9IC8vIEZvciBwbGFpbiBmdW5jdGlvbnMgYW5kIGFycm93cywgdXNlIG5hbWUgYXMgYSBoZXVyaXN0aWMuCgoKICAgICAgICAgIHZhciBuYW1lID0gdHlwZS5uYW1lIHx8IHR5cGUuZGlzcGxheU5hbWU7CiAgICAgICAgICByZXR1cm4gdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnICYmIC9eW0EtWl0vLnRlc3QobmFtZSk7CiAgICAgICAgfQoKICAgICAgY2FzZSAnb2JqZWN0JzoKICAgICAgICB7CiAgICAgICAgICBpZiAodHlwZSAhPSBudWxsKSB7CiAgICAgICAgICAgIHN3aXRjaCAoZ2V0UHJvcGVydHkodHlwZSwgJyQkdHlwZW9mJykpIHsKICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6CiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6CiAgICAgICAgICAgICAgICAvLyBEZWZpbml0ZWx5IFJlYWN0IGNvbXBvbmVudHMuCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKCiAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CgogICAgICBkZWZhdWx0OgogICAgICAgIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9CiAgfQp9CgpleHBvcnRzLl9nZXRNb3VudGVkUm9vdENvdW50ID0gX2dldE1vdW50ZWRSb290Q291bnQ7CmV4cG9ydHMuY29sbGVjdEN1c3RvbUhvb2tzRm9yU2lnbmF0dXJlID0gY29sbGVjdEN1c3RvbUhvb2tzRm9yU2lnbmF0dXJlOwpleHBvcnRzLmNyZWF0ZVNpZ25hdHVyZUZ1bmN0aW9uRm9yVHJhbnNmb3JtID0gY3JlYXRlU2lnbmF0dXJlRnVuY3Rpb25Gb3JUcmFuc2Zvcm07CmV4cG9ydHMuZmluZEFmZmVjdGVkSG9zdEluc3RhbmNlcyA9IGZpbmRBZmZlY3RlZEhvc3RJbnN0YW5jZXM7CmV4cG9ydHMuZ2V0RmFtaWx5QnlJRCA9IGdldEZhbWlseUJ5SUQ7CmV4cG9ydHMuZ2V0RmFtaWx5QnlUeXBlID0gZ2V0RmFtaWx5QnlUeXBlOwpleHBvcnRzLmhhc1VucmVjb3ZlcmFibGVFcnJvcnMgPSBoYXNVbnJlY292ZXJhYmxlRXJyb3JzOwpleHBvcnRzLmluamVjdEludG9HbG9iYWxIb29rID0gaW5qZWN0SW50b0dsb2JhbEhvb2s7CmV4cG9ydHMuaXNMaWtlbHlDb21wb25lbnRUeXBlID0gaXNMaWtlbHlDb21wb25lbnRUeXBlOwpleHBvcnRzLnBlcmZvcm1SZWFjdFJlZnJlc2ggPSBwZXJmb3JtUmVhY3RSZWZyZXNoOwpleHBvcnRzLnJlZ2lzdGVyID0gcmVnaXN0ZXI7CmV4cG9ydHMuc2V0U2lnbmF0dXJlID0gc2V0U2lnbmF0dXJlOwogIH0pKCk7Cn0KCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9jYWNoZS9yZWFjdC1yZWZyZXNoLW5wbS0wLjE0LjAtNzhlZjVlZWI3My1kYzY5ZmE4Yzk5LnppcC9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmVzaC9ydW50aW1lLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9jYWNoZS9yZWFjdC1yZWZyZXNoLW5wbS0wLjE0LjAtNzhlZjVlZWI3My1kYzY5ZmE4Yzk5LnppcC9ub2RlX21vZHVsZXMvcmVhY3QtcmVmcmVzaC9ydW50aW1lLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7CgoKaWYgKGZhbHNlKSB7fSBlbHNlIHsKICBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY2pzL3JlYWN0LXJlZnJlc2gtcnVudGltZS5kZXZlbG9wbWVudC5qcyAqLyAiLi4vLi4vLnlhcm4vY2FjaGUvcmVhY3QtcmVmcmVzaC1ucG0tMC4xNC4wLTc4ZWY1ZWViNzMtZGM2OWZhOGM5OS56aXAvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZnJlc2gvY2pzL3JlYWN0LXJlZnJlc2gtcnVudGltZS5kZXZlbG9wbWVudC5qcyIpOwp9CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vY2FjaGUvc3RhY2tmcmFtZS1ucG0tMS4zLjQtYmY0YjdjYzhmZC1iYWUxNTk2ODczLnppcC9ub2RlX21vZHVsZXMvc3RhY2tmcmFtZS9zdGFja2ZyYW1lLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL2NhY2hlL3N0YWNrZnJhbWUtbnBtLTEuMy40LWJmNGI3Y2M4ZmQtYmFlMTU5Njg3My56aXAvbm9kZV9tb2R1bGVzL3N0YWNrZnJhbWUvc3RhY2tmcmFtZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7Cgp2YXIgX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXzsoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgLy8gVW5pdmVyc2FsIE1vZHVsZSBEZWZpbml0aW9uIChVTUQpIHRvIHN1cHBvcnQgQU1ELCBDb21tb25KUy9Ob2RlLmpzLCBSaGlubywgYW5kIGJyb3dzZXJzLgoKICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovCiAgICBpZiAodHJ1ZSkgewogICAgICAgICEoX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyA9IFtdLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18gPSAoZmFjdG9yeSksCgkJX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18gPSAodHlwZW9mIF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyA9PT0gJ2Z1bmN0aW9uJyA/CgkJKF9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXy5hcHBseShleHBvcnRzLCBfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSkgOiBfX1dFQlBBQ0tfQU1EX0RFRklORV9GQUNUT1JZX18pLAoJCV9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fICE9PSB1bmRlZmluZWQgJiYgKG1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18pKTsKICAgIH0gZWxzZSB7fQp9KHRoaXMsIGZ1bmN0aW9uKCkgewogICAgJ3VzZSBzdHJpY3QnOwogICAgZnVuY3Rpb24gX2lzTnVtYmVyKG4pIHsKICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQobikpICYmIGlzRmluaXRlKG4pOwogICAgfQoKICAgIGZ1bmN0aW9uIF9jYXBpdGFsaXplKHN0cikgewogICAgICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc3Vic3RyaW5nKDEpOwogICAgfQoKICAgIGZ1bmN0aW9uIF9nZXR0ZXIocCkgewogICAgICAgIHJldHVybiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXNbcF07CiAgICAgICAgfTsKICAgIH0KCiAgICB2YXIgYm9vbGVhblByb3BzID0gWydpc0NvbnN0cnVjdG9yJywgJ2lzRXZhbCcsICdpc05hdGl2ZScsICdpc1RvcGxldmVsJ107CiAgICB2YXIgbnVtZXJpY1Byb3BzID0gWydjb2x1bW5OdW1iZXInLCAnbGluZU51bWJlciddOwogICAgdmFyIHN0cmluZ1Byb3BzID0gWydmaWxlTmFtZScsICdmdW5jdGlvbk5hbWUnLCAnc291cmNlJ107CiAgICB2YXIgYXJyYXlQcm9wcyA9IFsnYXJncyddOwogICAgdmFyIG9iamVjdFByb3BzID0gWydldmFsT3JpZ2luJ107CgogICAgdmFyIHByb3BzID0gYm9vbGVhblByb3BzLmNvbmNhdChudW1lcmljUHJvcHMsIHN0cmluZ1Byb3BzLCBhcnJheVByb3BzLCBvYmplY3RQcm9wcyk7CgogICAgZnVuY3Rpb24gU3RhY2tGcmFtZShvYmopIHsKICAgICAgICBpZiAoIW9iaikgcmV0dXJuOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKG9ialtwcm9wc1tpXV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgdGhpc1snc2V0JyArIF9jYXBpdGFsaXplKHByb3BzW2ldKV0ob2JqW3Byb3BzW2ldXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgU3RhY2tGcmFtZS5wcm90b3R5cGUgPSB7CiAgICAgICAgZ2V0QXJnczogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmFyZ3M7CiAgICAgICAgfSwKICAgICAgICBzZXRBcmdzOiBmdW5jdGlvbih2KSB7CiAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodikgIT09ICdbb2JqZWN0IEFycmF5XScpIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3MgbXVzdCBiZSBhbiBBcnJheScpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuYXJncyA9IHY7CiAgICAgICAgfSwKCiAgICAgICAgZ2V0RXZhbE9yaWdpbjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmV2YWxPcmlnaW47CiAgICAgICAgfSwKICAgICAgICBzZXRFdmFsT3JpZ2luOiBmdW5jdGlvbih2KSB7CiAgICAgICAgICAgIGlmICh2IGluc3RhbmNlb2YgU3RhY2tGcmFtZSkgewogICAgICAgICAgICAgICAgdGhpcy5ldmFsT3JpZ2luID0gdjsKICAgICAgICAgICAgfSBlbHNlIGlmICh2IGluc3RhbmNlb2YgT2JqZWN0KSB7CiAgICAgICAgICAgICAgICB0aGlzLmV2YWxPcmlnaW4gPSBuZXcgU3RhY2tGcmFtZSh2KTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V2YWwgT3JpZ2luIG11c3QgYmUgYW4gT2JqZWN0IG9yIFN0YWNrRnJhbWUnKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGZpbGVOYW1lID0gdGhpcy5nZXRGaWxlTmFtZSgpIHx8ICcnOwogICAgICAgICAgICB2YXIgbGluZU51bWJlciA9IHRoaXMuZ2V0TGluZU51bWJlcigpIHx8ICcnOwogICAgICAgICAgICB2YXIgY29sdW1uTnVtYmVyID0gdGhpcy5nZXRDb2x1bW5OdW1iZXIoKSB8fCAnJzsKICAgICAgICAgICAgdmFyIGZ1bmN0aW9uTmFtZSA9IHRoaXMuZ2V0RnVuY3Rpb25OYW1lKCkgfHwgJyc7CiAgICAgICAgICAgIGlmICh0aGlzLmdldElzRXZhbCgpKSB7CiAgICAgICAgICAgICAgICBpZiAoZmlsZU5hbWUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1tldmFsXSAoJyArIGZpbGVOYW1lICsgJzonICsgbGluZU51bWJlciArICc6JyArIGNvbHVtbk51bWJlciArICcpJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiAnW2V2YWxdOicgKyBsaW5lTnVtYmVyICsgJzonICsgY29sdW1uTnVtYmVyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChmdW5jdGlvbk5hbWUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbk5hbWUgKyAnICgnICsgZmlsZU5hbWUgKyAnOicgKyBsaW5lTnVtYmVyICsgJzonICsgY29sdW1uTnVtYmVyICsgJyknOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmaWxlTmFtZSArICc6JyArIGxpbmVOdW1iZXIgKyAnOicgKyBjb2x1bW5OdW1iZXI7CiAgICAgICAgfQogICAgfTsKCiAgICBTdGFja0ZyYW1lLmZyb21TdHJpbmcgPSBmdW5jdGlvbiBTdGFja0ZyYW1lJCRmcm9tU3RyaW5nKHN0cikgewogICAgICAgIHZhciBhcmdzU3RhcnRJbmRleCA9IHN0ci5pbmRleE9mKCcoJyk7CiAgICAgICAgdmFyIGFyZ3NFbmRJbmRleCA9IHN0ci5sYXN0SW5kZXhPZignKScpOwoKICAgICAgICB2YXIgZnVuY3Rpb25OYW1lID0gc3RyLnN1YnN0cmluZygwLCBhcmdzU3RhcnRJbmRleCk7CiAgICAgICAgdmFyIGFyZ3MgPSBzdHIuc3Vic3RyaW5nKGFyZ3NTdGFydEluZGV4ICsgMSwgYXJnc0VuZEluZGV4KS5zcGxpdCgnLCcpOwogICAgICAgIHZhciBsb2NhdGlvblN0cmluZyA9IHN0ci5zdWJzdHJpbmcoYXJnc0VuZEluZGV4ICsgMSk7CgogICAgICAgIGlmIChsb2NhdGlvblN0cmluZy5pbmRleE9mKCdAJykgPT09IDApIHsKICAgICAgICAgICAgdmFyIHBhcnRzID0gL0AoLis/KSg/OjooXGQrKSk/KD86OihcZCspKT8kLy5leGVjKGxvY2F0aW9uU3RyaW5nLCAnJyk7CiAgICAgICAgICAgIHZhciBmaWxlTmFtZSA9IHBhcnRzWzFdOwogICAgICAgICAgICB2YXIgbGluZU51bWJlciA9IHBhcnRzWzJdOwogICAgICAgICAgICB2YXIgY29sdW1uTnVtYmVyID0gcGFydHNbM107CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbmV3IFN0YWNrRnJhbWUoewogICAgICAgICAgICBmdW5jdGlvbk5hbWU6IGZ1bmN0aW9uTmFtZSwKICAgICAgICAgICAgYXJnczogYXJncyB8fCB1bmRlZmluZWQsCiAgICAgICAgICAgIGZpbGVOYW1lOiBmaWxlTmFtZSwKICAgICAgICAgICAgbGluZU51bWJlcjogbGluZU51bWJlciB8fCB1bmRlZmluZWQsCiAgICAgICAgICAgIGNvbHVtbk51bWJlcjogY29sdW1uTnVtYmVyIHx8IHVuZGVmaW5lZAogICAgICAgIH0pOwogICAgfTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvb2xlYW5Qcm9wcy5sZW5ndGg7IGkrKykgewogICAgICAgIFN0YWNrRnJhbWUucHJvdG90eXBlWydnZXQnICsgX2NhcGl0YWxpemUoYm9vbGVhblByb3BzW2ldKV0gPSBfZ2V0dGVyKGJvb2xlYW5Qcm9wc1tpXSk7CiAgICAgICAgU3RhY2tGcmFtZS5wcm90b3R5cGVbJ3NldCcgKyBfY2FwaXRhbGl6ZShib29sZWFuUHJvcHNbaV0pXSA9IChmdW5jdGlvbihwKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2KSB7CiAgICAgICAgICAgICAgICB0aGlzW3BdID0gQm9vbGVhbih2KTsKICAgICAgICAgICAgfTsKICAgICAgICB9KShib29sZWFuUHJvcHNbaV0pOwogICAgfQoKICAgIGZvciAodmFyIGogPSAwOyBqIDwgbnVtZXJpY1Byb3BzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgU3RhY2tGcmFtZS5wcm90b3R5cGVbJ2dldCcgKyBfY2FwaXRhbGl6ZShudW1lcmljUHJvcHNbal0pXSA9IF9nZXR0ZXIobnVtZXJpY1Byb3BzW2pdKTsKICAgICAgICBTdGFja0ZyYW1lLnByb3RvdHlwZVsnc2V0JyArIF9jYXBpdGFsaXplKG51bWVyaWNQcm9wc1tqXSldID0gKGZ1bmN0aW9uKHApIHsKICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHYpIHsKICAgICAgICAgICAgICAgIGlmICghX2lzTnVtYmVyKHYpKSB7CiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihwICsgJyBtdXN0IGJlIGEgTnVtYmVyJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzW3BdID0gTnVtYmVyKHYpOwogICAgICAgICAgICB9OwogICAgICAgIH0pKG51bWVyaWNQcm9wc1tqXSk7CiAgICB9CgogICAgZm9yICh2YXIgayA9IDA7IGsgPCBzdHJpbmdQcm9wcy5sZW5ndGg7IGsrKykgewogICAgICAgIFN0YWNrRnJhbWUucHJvdG90eXBlWydnZXQnICsgX2NhcGl0YWxpemUoc3RyaW5nUHJvcHNba10pXSA9IF9nZXR0ZXIoc3RyaW5nUHJvcHNba10pOwogICAgICAgIFN0YWNrRnJhbWUucHJvdG90eXBlWydzZXQnICsgX2NhcGl0YWxpemUoc3RyaW5nUHJvcHNba10pXSA9IChmdW5jdGlvbihwKSB7CiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbih2KSB7CiAgICAgICAgICAgICAgICB0aGlzW3BdID0gU3RyaW5nKHYpOwogICAgICAgICAgICB9OwogICAgICAgIH0pKHN0cmluZ1Byb3BzW2tdKTsKICAgIH0KCiAgICByZXR1cm4gU3RhY2tGcmFtZTsKfSkpOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvYWN0dWFsL2dsb2JhbC10aGlzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9hY3R1YWwvZ2xvYmFsLXRoaXMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgcGFyZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vc3RhYmxlL2dsb2JhbC10aGlzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9nbG9iYWwtdGhpcy5qcyIpOwoKbW9kdWxlLmV4cG9ydHMgPSBwYXJlbnQ7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9nbG9iYWwtdGhpcy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9lcy9nbG9iYWwtdGhpcy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vbW9kdWxlcy9lcy5nbG9iYWwtdGhpcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLmdsb2JhbC10aGlzLmpzIik7Cgptb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nbG9iYWwgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dsb2JhbC5qcyIpOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZmVhdHVyZXMvZ2xvYmFsLXRoaXMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZmVhdHVyZXMvZ2xvYmFsLXRoaXMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vZnVsbC9nbG9iYWwtdGhpcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mdWxsL2dsb2JhbC10aGlzLmpzIik7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mdWxsL2dsb2JhbC10aGlzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvZnVsbC9nbG9iYWwtdGhpcy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgovLyBUT0RPOiByZW1vdmUgZnJvbSBgY29yZS1qc0A0YApfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9tb2R1bGVzL2VzbmV4dC5nbG9iYWwtdGhpcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzbmV4dC5nbG9iYWwtdGhpcy5qcyIpOwoKdmFyIHBhcmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2FjdHVhbC9nbG9iYWwtdGhpcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9hY3R1YWwvZ2xvYmFsLXRoaXMuanMiKTsKCm1vZHVsZS5leHBvcnRzID0gcGFyZW50OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2EtY2FsbGFibGUuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2EtY2FsbGFibGUuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIpOwp2YXIgdHJ5VG9TdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdHJ5LXRvLXN0cmluZy5qcyIpOwoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7CgovLyBgQXNzZXJ0OiBJc0NhbGxhYmxlKGFyZ3VtZW50KSBpcyB0cnVlYAptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkgewogIGlmIChpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50OwogIHRocm93ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgaXNDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1jYWxsYWJsZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiKTsKCnZhciAkU3RyaW5nID0gU3RyaW5nOwp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgaWYgKHR5cGVvZiBhcmd1bWVudCA9PSAnb2JqZWN0JyB8fCBpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGFyZ3VtZW50OwogIHRocm93ICRUeXBlRXJyb3IoIkNhbid0IHNldCAiICsgJFN0cmluZyhhcmd1bWVudCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBpc1Byb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YuanMiKTsKCnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFByb3RvdHlwZSkgewogIGlmIChpc1Byb3RvdHlwZU9mKFByb3RvdHlwZSwgaXQpKSByZXR1cm4gaXQ7CiAgdGhyb3cgJFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hbi1vYmplY3QuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1vYmplY3QgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIpOwoKdmFyICRTdHJpbmcgPSBTdHJpbmc7CnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yOwoKLy8gYEFzc2VydDogVHlwZShhcmd1bWVudCkgaXMgT2JqZWN0YAptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkgewogIGlmIChpc09iamVjdChhcmd1bWVudCkpIHJldHVybiBhcmd1bWVudDsKICB0aHJvdyAkVHlwZUVycm9yKCRTdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwoKdmFyIGJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiKTsKdmFyIGNhbGwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbC5qcyIpOwp2YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8tb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1vYmplY3QuanMiKTsKdmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIik7CnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMiKTsKdmFyIGlzQ29uc3RydWN0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3IgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yLmpzIik7CnZhciBsZW5ndGhPZkFycmF5TGlrZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UuanMiKTsKdmFyIGNyZWF0ZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LmpzIik7CnZhciBnZXRJdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nZXQtaXRlcmF0b3IgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1pdGVyYXRvci5qcyIpOwp2YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIpOwoKdmFyICRBcnJheSA9IEFycmF5OwoKLy8gYEFycmF5LmZyb21gIG1ldGhvZCBpbXBsZW1lbnRhdGlvbgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb20KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7CiAgdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpOwogIHZhciBJU19DT05TVFJVQ1RPUiA9IGlzQ29uc3RydWN0b3IodGhpcyk7CiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDsKICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7CiAgaWYgKG1hcHBpbmcpIG1hcGZuID0gYmluZChtYXBmbiwgYXJndW1lbnRzTGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCk7CiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7CiAgdmFyIGluZGV4ID0gMDsKICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yLCBuZXh0LCB2YWx1ZTsKICAvLyBpZiB0aGUgdGFyZ2V0IGlzIG5vdCBpdGVyYWJsZSBvciBpdCdzIGFuIGFycmF5IHdpdGggdGhlIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2UgYSBzaW1wbGUgY2FzZQogIGlmIChpdGVyYXRvck1ldGhvZCAmJiAhKHRoaXMgPT09ICRBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkgewogICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihPLCBpdGVyYXRvck1ldGhvZCk7CiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDsKICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMoKSA6IFtdOwogICAgZm9yICg7IShzdGVwID0gY2FsbChuZXh0LCBpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHsKICAgICAgdmFsdWUgPSBtYXBwaW5nID8gY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyhpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZTsKICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpOwogICAgfQogIH0gZWxzZSB7CiAgICBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTsKICAgIHJlc3VsdCA9IElTX0NPTlNUUlVDVE9SID8gbmV3IHRoaXMobGVuZ3RoKSA6ICRBcnJheShsZW5ndGgpOwogICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHsKICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdOwogICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7CiAgICB9CiAgfQogIHJlc3VsdC5sZW5ndGggPSBpbmRleDsKICByZXR1cm4gcmVzdWx0Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgdG9JbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIpOwp2YXIgdG9BYnNvbHV0ZUluZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyIpOwp2YXIgbGVuZ3RoT2ZBcnJheUxpa2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlLmpzIik7CgovLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvbgp2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7CiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkgewogICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpOwogICAgdmFyIGxlbmd0aCA9IGxlbmd0aE9mQXJyYXlMaWtlKE8pOwogICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTsKICAgIHZhciB2YWx1ZTsKICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG0KICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrCiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkgewogICAgICB2YWx1ZSA9IE9baW5kZXgrK107CiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrCiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7CiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90CiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHsKICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwOwogICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xOwogIH07Cn07Cgptb2R1bGUuZXhwb3J0cyA9IHsKICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlcwogIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksCiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2QKICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mCiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIHRvQWJzb2x1dGVJbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiKTsKdmFyIGxlbmd0aE9mQXJyYXlMaWtlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9sZW5ndGgtb2YtYXJyYXktbGlrZS5qcyIpOwp2YXIgY3JlYXRlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiKTsKCnZhciAkQXJyYXkgPSBBcnJheTsKdmFyIG1heCA9IE1hdGgubWF4OwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgc3RhcnQsIGVuZCkgewogIHZhciBsZW5ndGggPSBsZW5ndGhPZkFycmF5TGlrZShPKTsKICB2YXIgayA9IHRvQWJzb2x1dGVJbmRleChzdGFydCwgbGVuZ3RoKTsKICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kLCBsZW5ndGgpOwogIHZhciByZXN1bHQgPSAkQXJyYXkobWF4KGZpbiAtIGssIDApKTsKICBmb3IgKHZhciBuID0gMDsgayA8IGZpbjsgaysrLCBuKyspIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgbiwgT1trXSk7CiAgcmVzdWx0Lmxlbmd0aCA9IG47CiAgcmV0dXJuIHJlc3VsdDsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1zb3J0LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1zb3J0LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgYXJyYXlTbGljZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FycmF5LXNsaWNlLXNpbXBsZS5qcyIpOwoKdmFyIGZsb29yID0gTWF0aC5mbG9vcjsKCnZhciBtZXJnZVNvcnQgPSBmdW5jdGlvbiAoYXJyYXksIGNvbXBhcmVmbikgewogIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7CiAgdmFyIG1pZGRsZSA9IGZsb29yKGxlbmd0aCAvIDIpOwogIHJldHVybiBsZW5ndGggPCA4ID8gaW5zZXJ0aW9uU29ydChhcnJheSwgY29tcGFyZWZuKSA6IG1lcmdlKAogICAgYXJyYXksCiAgICBtZXJnZVNvcnQoYXJyYXlTbGljZShhcnJheSwgMCwgbWlkZGxlKSwgY29tcGFyZWZuKSwKICAgIG1lcmdlU29ydChhcnJheVNsaWNlKGFycmF5LCBtaWRkbGUpLCBjb21wYXJlZm4pLAogICAgY29tcGFyZWZuCiAgKTsKfTsKCnZhciBpbnNlcnRpb25Tb3J0ID0gZnVuY3Rpb24gKGFycmF5LCBjb21wYXJlZm4pIHsKICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoOwogIHZhciBpID0gMTsKICB2YXIgZWxlbWVudCwgajsKCiAgd2hpbGUgKGkgPCBsZW5ndGgpIHsKICAgIGogPSBpOwogICAgZWxlbWVudCA9IGFycmF5W2ldOwogICAgd2hpbGUgKGogJiYgY29tcGFyZWZuKGFycmF5W2ogLSAxXSwgZWxlbWVudCkgPiAwKSB7CiAgICAgIGFycmF5W2pdID0gYXJyYXlbLS1qXTsKICAgIH0KICAgIGlmIChqICE9PSBpKyspIGFycmF5W2pdID0gZWxlbWVudDsKICB9IHJldHVybiBhcnJheTsKfTsKCnZhciBtZXJnZSA9IGZ1bmN0aW9uIChhcnJheSwgbGVmdCwgcmlnaHQsIGNvbXBhcmVmbikgewogIHZhciBsbGVuZ3RoID0gbGVmdC5sZW5ndGg7CiAgdmFyIHJsZW5ndGggPSByaWdodC5sZW5ndGg7CiAgdmFyIGxpbmRleCA9IDA7CiAgdmFyIHJpbmRleCA9IDA7CgogIHdoaWxlIChsaW5kZXggPCBsbGVuZ3RoIHx8IHJpbmRleCA8IHJsZW5ndGgpIHsKICAgIGFycmF5W2xpbmRleCArIHJpbmRleF0gPSAobGluZGV4IDwgbGxlbmd0aCAmJiByaW5kZXggPCBybGVuZ3RoKQogICAgICA/IGNvbXBhcmVmbihsZWZ0W2xpbmRleF0sIHJpZ2h0W3JpbmRleF0pIDw9IDAgPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXQogICAgICA6IGxpbmRleCA8IGxsZW5ndGggPyBsZWZ0W2xpbmRleCsrXSA6IHJpZ2h0W3JpbmRleCsrXTsKICB9IHJldHVybiBhcnJheTsKfTsKCm1vZHVsZS5leHBvcnRzID0gbWVyZ2VTb3J0OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvYW4tb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hbi1vYmplY3QuanMiKTsKdmFyIGl0ZXJhdG9yQ2xvc2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIik7CgovLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHsKICB0cnkgewogICAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTsKICB9IGNhdGNoIChlcnJvcikgewogICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvciwgJ3Rocm93JywgZXJyb3IpOwogIH0KfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIik7Cgp2YXIgdG9TdHJpbmcgPSB1bmN1cnJ5VGhpcyh7fS50b1N0cmluZyk7CnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIHN0cmluZ1NsaWNlKHRvU3RyaW5nKGl0KSwgOCwgLTEpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NsYXNzb2YuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NsYXNzb2YuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiKTsKdmFyIGlzQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLWNhbGxhYmxlLmpzIik7CnZhciBjbGFzc29mUmF3ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIpOwp2YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIpOwoKdmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7CnZhciAkT2JqZWN0ID0gT2JqZWN0OwoKLy8gRVMzIHdyb25nIGhlcmUKdmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7CgovLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvcgp2YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHsKICB0cnkgewogICAgcmV0dXJuIGl0W2tleV07CiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfQp9OwoKLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYAptb2R1bGUuZXhwb3J0cyA9IFRPX1NUUklOR19UQUdfU1VQUE9SVCA/IGNsYXNzb2ZSYXcgOiBmdW5jdGlvbiAoaXQpIHsKICB2YXIgTywgdGFnLCByZXN1bHQ7CiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnCiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2UKICAgIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9ICRPYmplY3QoaXQpLCBUT19TVFJJTkdfVEFHKSkgPT0gJ3N0cmluZycgPyB0YWcKICAgIC8vIGJ1aWx0aW5UYWcgY2FzZQogICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTykKICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2sKICAgIDogKHJlc3VsdCA9IGNsYXNzb2ZSYXcoTykpID09ICdPYmplY3QnICYmIGlzQ2FsbGFibGUoTy5jYWxsZWUpID8gJ0FyZ3VtZW50cycgOiByZXN1bHQ7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZmFpbHMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2ZhaWxzLmpzIik7Cgptb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfQogIEYucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gbnVsbDsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldHByb3RvdHlwZW9mIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nCiAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZihuZXcgRigpKSAhPT0gRi5wcm90b3R5cGU7Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7CgovLyBgQ3JlYXRlSXRlclJlc3VsdE9iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlaXRlcnJlc3VsdG9iamVjdAptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh2YWx1ZSwgZG9uZSkgewogIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogZG9uZSB9Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIpOwp2YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIpOwp2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIpOwoKbW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHsKICByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7Cn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7CiAgb2JqZWN0W2tleV0gPSB2YWx1ZTsKICByZXR1cm4gb2JqZWN0Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkgewogIHJldHVybiB7CiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLAogICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLAogICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksCiAgICB2YWx1ZTogdmFsdWUKICB9Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwoKdmFyIHRvUHJvcGVydHlLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXkuanMiKTsKdmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiKTsKdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvciAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkgewogIHZhciBwcm9wZXJ0eUtleSA9IHRvUHJvcGVydHlLZXkoa2V5KTsKICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpOwogIGVsc2Ugb2JqZWN0W3Byb3BlcnR5S2V5XSA9IHZhbHVlOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3Nvci5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3IuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIGRlZmluZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcikgewogIHJldHVybiBkZWZpbmVQcm9wZXJ0eS5mKHRhcmdldCwgbmFtZSwgZGVzY3JpcHRvcik7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIik7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSwgdmFsdWUsIG9wdGlvbnMpIHsKICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmVudW1lcmFibGUpIHRhcmdldFtrZXldID0gdmFsdWU7CiAgZWxzZSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodGFyZ2V0LCBrZXksIHZhbHVlKTsKICByZXR1cm4gdGFyZ2V0Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBkZWZpbmVCdWlsdEluID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbiAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLmpzIik7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykgewogIGZvciAodmFyIGtleSBpbiBzcmMpIHsKICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudW5zYWZlICYmIHRhcmdldFtrZXldKSB0YXJnZXRba2V5XSA9IHNyY1trZXldOwogICAgZWxzZSBkZWZpbmVCdWlsdEluKHRhcmdldCwga2V5LCBzcmNba2V5XSwgb3B0aW9ucyk7CiAgfSByZXR1cm4gdGFyZ2V0Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHkuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RlZmluZS1nbG9iYWwtcHJvcGVydHkuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZ2xvYmFsICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nbG9iYWwuanMiKTsKCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZQp2YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7CiAgdHJ5IHsKICAgIGRlZmluZVByb3BlcnR5KGdsb2JhbCwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsKICB9IGNhdGNoIChlcnJvcikgewogICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTsKICB9IHJldHVybiB2YWx1ZTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2ZhaWxzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mYWlscy5qcyIpOwoKLy8gRGV0ZWN0IElFOCdzIGluY29tcGxldGUgZGVmaW5lUHJvcGVydHkgaW1wbGVtZW50YXRpb24KbW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcKICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3Owp9KTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kb2N1bWVudC1hbGwuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZG9jdW1lbnQtYWxsLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7Cgp2YXIgZG9jdW1lbnRBbGwgPSB0eXBlb2YgZG9jdW1lbnQgPT0gJ29iamVjdCcgJiYgZG9jdW1lbnQuYWxsOwoKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1Jc0hUTUxEREEtaW50ZXJuYWwtc2xvdAovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgdW5pY29ybi9uby10eXBlb2YtdW5kZWZpbmVkIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nCnZhciBJU19IVE1MRERBID0gdHlwZW9mIGRvY3VtZW50QWxsID09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50QWxsICE9PSB1bmRlZmluZWQ7Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBhbGw6IGRvY3VtZW50QWxsLAogIElTX0hUTUxEREE6IElTX0hUTUxEREEKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nbG9iYWwgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dsb2JhbC5qcyIpOwp2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1vYmplY3QuanMiKTsKCnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDsKLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFCnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgbmF2aWdhdG9yICE9ICd1bmRlZmluZWQnICYmIFN0cmluZyhuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAnJzsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nbG9iYWwgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dsb2JhbC5qcyIpOwp2YXIgdXNlckFnZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIpOwoKdmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzczsKdmFyIERlbm8gPSBnbG9iYWwuRGVubzsKdmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zIHx8IERlbm8gJiYgRGVuby52ZXJzaW9uOwp2YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODsKdmFyIG1hdGNoLCB2ZXJzaW9uOwoKaWYgKHY4KSB7CiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpOwogIC8vIGluIG9sZCBDaHJvbWUsIHZlcnNpb25zIG9mIFY4IGlzbid0IFY4ID0gQ2hyb21lIC8gMTAKICAvLyBidXQgdGhlaXIgY29ycmVjdCB2ZXJzaW9ucyBhcmUgbm90IGludGVyZXN0aW5nIGZvciB1cwogIHZlcnNpb24gPSBtYXRjaFswXSA+IDAgJiYgbWF0Y2hbMF0gPCA0ID8gMSA6ICsobWF0Y2hbMF0gKyBtYXRjaFsxXSk7Cn0KCi8vIEJyb3dzZXJGUyBOb2RlSlMgYHByb2Nlc3NgIHBvbHlmaWxsIGluY29ycmVjdGx5IHNldCBgLnY4YCB0byBgMC4wYAovLyBzbyBjaGVjayBgdXNlckFnZW50YCBldmVuIGlmIGAudjhgIGV4aXN0cywgYnV0IDAKaWYgKCF2ZXJzaW9uICYmIHVzZXJBZ2VudCkgewogIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXC8oXGQrKS8pOwogIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHsKICAgIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9DaHJvbWVcLyhcZCspLyk7CiAgICBpZiAobWF0Y2gpIHZlcnNpb24gPSArbWF0Y2hbMV07CiAgfQp9Cgptb2R1bGUuZXhwb3J0cyA9IHZlcnNpb247CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUpID0+IHsKCi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5cwptb2R1bGUuZXhwb3J0cyA9IFsKICAnY29uc3RydWN0b3InLAogICdoYXNPd25Qcm9wZXJ0eScsCiAgJ2lzUHJvdG90eXBlT2YnLAogICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsCiAgJ3RvTG9jYWxlU3RyaW5nJywKICAndG9TdHJpbmcnLAogICd2YWx1ZU9mJwpdOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2V4cG9ydC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9leHBvcnQuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwoKdmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nbG9iYWwgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dsb2JhbC5qcyIpOwp2YXIgYXBwbHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYXBwbHkgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5LmpzIik7CnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtY2xhdXNlLmpzIik7CnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIpOwp2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIikuZik7CnZhciBpc0ZvcmNlZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1mb3JjZWQgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIpOwp2YXIgcGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9wYXRoICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9wYXRoLmpzIik7CnZhciBiaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIik7CnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiKTsKdmFyIGhhc093biA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5LmpzIik7Cgp2YXIgd3JhcENvbnN0cnVjdG9yID0gZnVuY3Rpb24gKE5hdGl2ZUNvbnN0cnVjdG9yKSB7CiAgdmFyIFdyYXBwZXIgPSBmdW5jdGlvbiAoYSwgYiwgYykgewogICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBXcmFwcGVyKSB7CiAgICAgIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkgewogICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpOwogICAgICAgIGNhc2UgMTogcmV0dXJuIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihhKTsKICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgTmF0aXZlQ29uc3RydWN0b3IoYSwgYik7CiAgICAgIH0gcmV0dXJuIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcihhLCBiLCBjKTsKICAgIH0gcmV0dXJuIGFwcGx5KE5hdGl2ZUNvbnN0cnVjdG9yLCB0aGlzLCBhcmd1bWVudHMpOwogIH07CiAgV3JhcHBlci5wcm90b3R5cGUgPSBOYXRpdmVDb25zdHJ1Y3Rvci5wcm90b3R5cGU7CiAgcmV0dXJuIFdyYXBwZXI7Cn07CgovKgogIG9wdGlvbnMudGFyZ2V0ICAgICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0CiAgb3B0aW9ucy5nbG9iYWwgICAgICAgICAtIHRhcmdldCBpcyB0aGUgZ2xvYmFsIG9iamVjdAogIG9wdGlvbnMuc3RhdCAgICAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0CiAgb3B0aW9ucy5wcm90byAgICAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXQKICBvcHRpb25zLnJlYWwgICAgICAgICAgIC0gcmVhbCBwcm90b3R5cGUgbWV0aG9kIGZvciB0aGUgYHB1cmVgIHZlcnNpb24KICBvcHRpb25zLmZvcmNlZCAgICAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZQogIG9wdGlvbnMuYmluZCAgICAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvbgogIG9wdGlvbnMud3JhcCAgICAgICAgICAgLSB3cmFwIGNvbnN0cnVjdG9ycyB0byBwcmV2ZW50aW5nIGdsb2JhbCBwb2xsdXRpb24sIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb24KICBvcHRpb25zLnVuc2FmZSAgICAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5CiAgb3B0aW9ucy5zaGFtICAgICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHMKICBvcHRpb25zLmVudW1lcmFibGUgICAgIC0gZXhwb3J0IGFzIGVudW1lcmFibGUgcHJvcGVydHkKICBvcHRpb25zLmRvbnRDYWxsR2V0U2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldAogIG9wdGlvbnMubmFtZSAgICAgICAgICAgLSB0aGUgLm5hbWUgb2YgdGhlIGZ1bmN0aW9uIGlmIGl0IGRvZXMgbm90IG1hdGNoIHRoZSBrZXkKKi8KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7CiAgdmFyIFRBUkdFVCA9IG9wdGlvbnMudGFyZ2V0OwogIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDsKICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0OwogIHZhciBQUk9UTyA9IG9wdGlvbnMucHJvdG87CgogIHZhciBuYXRpdmVTb3VyY2UgPSBHTE9CQUwgPyBnbG9iYWwgOiBTVEFUSUMgPyBnbG9iYWxbVEFSR0VUXSA6IChnbG9iYWxbVEFSR0VUXSB8fCB7fSkucHJvdG90eXBlOwoKICB2YXIgdGFyZ2V0ID0gR0xPQkFMID8gcGF0aCA6IHBhdGhbVEFSR0VUXSB8fCBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocGF0aCwgVEFSR0VULCB7fSlbVEFSR0VUXTsKICB2YXIgdGFyZ2V0UHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTsKCiAgdmFyIEZPUkNFRCwgVVNFX05BVElWRSwgVklSVFVBTF9QUk9UT1RZUEU7CiAgdmFyIGtleSwgc291cmNlUHJvcGVydHksIHRhcmdldFByb3BlcnR5LCBuYXRpdmVQcm9wZXJ0eSwgcmVzdWx0UHJvcGVydHksIGRlc2NyaXB0b3I7CgogIGZvciAoa2V5IGluIHNvdXJjZSkgewogICAgRk9SQ0VEID0gaXNGb3JjZWQoR0xPQkFMID8ga2V5IDogVEFSR0VUICsgKFNUQVRJQyA/ICcuJyA6ICcjJykgKyBrZXksIG9wdGlvbnMuZm9yY2VkKTsKICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZQogICAgVVNFX05BVElWRSA9ICFGT1JDRUQgJiYgbmF0aXZlU291cmNlICYmIGhhc093bihuYXRpdmVTb3VyY2UsIGtleSk7CgogICAgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTsKCiAgICBpZiAoVVNFX05BVElWRSkgaWYgKG9wdGlvbnMuZG9udENhbGxHZXRTZXQpIHsKICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihuYXRpdmVTb3VyY2UsIGtleSk7CiAgICAgIG5hdGl2ZVByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlOwogICAgfSBlbHNlIG5hdGl2ZVByb3BlcnR5ID0gbmF0aXZlU291cmNlW2tleV07CgogICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBpbXBsZW1lbnRhdGlvbgogICAgc291cmNlUHJvcGVydHkgPSAoVVNFX05BVElWRSAmJiBuYXRpdmVQcm9wZXJ0eSkgPyBuYXRpdmVQcm9wZXJ0eSA6IHNvdXJjZVtrZXldOwoKICAgIGlmIChVU0VfTkFUSVZFICYmIHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSA9PSB0eXBlb2Ygc291cmNlUHJvcGVydHkpIGNvbnRpbnVlOwoKICAgIC8vIGJpbmQgbWV0aG9kcyB0byBnbG9iYWwgZm9yIGNhbGxpbmcgZnJvbSBleHBvcnQgY29udGV4dAogICAgaWYgKG9wdGlvbnMuYmluZCAmJiBVU0VfTkFUSVZFKSByZXN1bHRQcm9wZXJ0eSA9IGJpbmQoc291cmNlUHJvcGVydHksIGdsb2JhbCk7CiAgICAvLyB3cmFwIGdsb2JhbCBjb25zdHJ1Y3RvcnMgZm9yIHByZXZlbnQgY2hhbmdlcyBpbiB0aGlzIHZlcnNpb24KICAgIGVsc2UgaWYgKG9wdGlvbnMud3JhcCAmJiBVU0VfTkFUSVZFKSByZXN1bHRQcm9wZXJ0eSA9IHdyYXBDb25zdHJ1Y3Rvcihzb3VyY2VQcm9wZXJ0eSk7CiAgICAvLyBtYWtlIHN0YXRpYyB2ZXJzaW9ucyBmb3IgcHJvdG90eXBlIG1ldGhvZHMKICAgIGVsc2UgaWYgKFBST1RPICYmIGlzQ2FsbGFibGUoc291cmNlUHJvcGVydHkpKSByZXN1bHRQcm9wZXJ0eSA9IHVuY3VycnlUaGlzKHNvdXJjZVByb3BlcnR5KTsKICAgIC8vIGRlZmF1bHQgY2FzZQogICAgZWxzZSByZXN1bHRQcm9wZXJ0eSA9IHNvdXJjZVByb3BlcnR5OwoKICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHMKICAgIGlmIChvcHRpb25zLnNoYW0gfHwgKHNvdXJjZVByb3BlcnR5ICYmIHNvdXJjZVByb3BlcnR5LnNoYW0pIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkgewogICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkocmVzdWx0UHJvcGVydHksICdzaGFtJywgdHJ1ZSk7CiAgICB9CgogICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRhcmdldCwga2V5LCByZXN1bHRQcm9wZXJ0eSk7CgogICAgaWYgKFBST1RPKSB7CiAgICAgIFZJUlRVQUxfUFJPVE9UWVBFID0gVEFSR0VUICsgJ1Byb3RvdHlwZSc7CiAgICAgIGlmICghaGFzT3duKHBhdGgsIFZJUlRVQUxfUFJPVE9UWVBFKSkgewogICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShwYXRoLCBWSVJUVUFMX1BST1RPVFlQRSwge30pOwogICAgICB9CiAgICAgIC8vIGV4cG9ydCB2aXJ0dWFsIHByb3RvdHlwZSBtZXRob2RzCiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShwYXRoW1ZJUlRVQUxfUFJPVE9UWVBFXSwga2V5LCBzb3VyY2VQcm9wZXJ0eSk7CiAgICAgIC8vIGV4cG9ydCByZWFsIHByb3RvdHlwZSBtZXRob2RzCiAgICAgIGlmIChvcHRpb25zLnJlYWwgJiYgdGFyZ2V0UHJvdG90eXBlICYmIChGT1JDRUQgfHwgIXRhcmdldFByb3RvdHlwZVtrZXldKSkgewogICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSh0YXJnZXRQcm90b3R5cGUsIGtleSwgc291cmNlUHJvcGVydHkpOwogICAgICB9CiAgICB9CiAgfQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2ZhaWxzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZmFpbHMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykgewogIHRyeSB7CiAgICByZXR1cm4gISFleGVjKCk7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJldHVybiB0cnVlOwogIH0KfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1hcHBseS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLWFwcGx5LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIE5BVElWRV9CSU5EID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZS5qcyIpOwoKdmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlOwp2YXIgYXBwbHkgPSBGdW5jdGlvblByb3RvdHlwZS5hcHBseTsKdmFyIGNhbGwgPSBGdW5jdGlvblByb3RvdHlwZS5jYWxsOwoKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXJlZmxlY3QgLS0gc2FmZQptb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBSZWZsZWN0ID09ICdvYmplY3QnICYmIFJlZmxlY3QuYXBwbHkgfHwgKE5BVElWRV9CSU5EID8gY2FsbC5iaW5kKGFwcGx5KSA6IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gY2FsbC5hcHBseShhcHBseSwgYXJndW1lbnRzKTsKfSk7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWNsYXVzZS5qcyIpOwp2YXIgYUNhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2EtY2FsbGFibGUuanMiKTsKdmFyIE5BVElWRV9CSU5EID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZS5qcyIpOwoKdmFyIGJpbmQgPSB1bmN1cnJ5VGhpcyh1bmN1cnJ5VGhpcy5iaW5kKTsKCi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCkgewogIGFDYWxsYWJsZShmbik7CiAgcmV0dXJuIHRoYXQgPT09IHVuZGVmaW5lZCA/IGZuIDogTkFUSVZFX0JJTkQgPyBiaW5kKGZuLCB0aGF0KSA6IGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7CiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTsKICB9Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZmFpbHMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2ZhaWxzLmpzIik7Cgptb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLWZ1bmN0aW9uLXByb3RvdHlwZS1iaW5kIC0tIHNhZmUKICB2YXIgdGVzdCA9IChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pLmJpbmQoKTsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIC0tIHNhZmUKICByZXR1cm4gdHlwZW9mIHRlc3QgIT0gJ2Z1bmN0aW9uJyB8fCB0ZXN0Lmhhc093blByb3BlcnR5KCdwcm90b3R5cGUnKTsKfSk7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tY2FsbC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIE5BVElWRV9CSU5EID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLW5hdGl2ZS5qcyIpOwoKdmFyIGNhbGwgPSBGdW5jdGlvbi5wcm90b3R5cGUuY2FsbDsKCm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX0JJTkQgPyBjYWxsLmJpbmQoY2FsbCkgOiBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGNhbGwuYXBwbHkoY2FsbCwgYXJndW1lbnRzKTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIik7CnZhciBoYXNPd24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIpOwoKdmFyIEZ1bmN0aW9uUHJvdG90eXBlID0gRnVuY3Rpb24ucHJvdG90eXBlOwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlCnZhciBnZXREZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsKCnZhciBFWElTVFMgPSBoYXNPd24oRnVuY3Rpb25Qcm90b3R5cGUsICduYW1lJyk7Ci8vIGFkZGl0aW9uYWwgcHJvdGVjdGlvbiBmcm9tIG1pbmlmaWVkIC8gbWFuZ2xlZCAvIGRyb3BwZWQgZnVuY3Rpb24gbmFtZXMKdmFyIFBST1BFUiA9IEVYSVNUUyAmJiAoZnVuY3Rpb24gc29tZXRoaW5nKCkgeyAvKiBlbXB0eSAqLyB9KS5uYW1lID09PSAnc29tZXRoaW5nJzsKdmFyIENPTkZJR1VSQUJMRSA9IEVYSVNUUyAmJiAoIURFU0NSSVBUT1JTIHx8IChERVNDUklQVE9SUyAmJiBnZXREZXNjcmlwdG9yKEZ1bmN0aW9uUHJvdG90eXBlLCAnbmFtZScpLmNvbmZpZ3VyYWJsZSkpOwoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgRVhJU1RTOiBFWElTVFMsCiAgUFJPUEVSOiBQUk9QRVIsCiAgQ09ORklHVVJBQkxFOiBDT05GSUdVUkFCTEUKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtYWNjZXNzb3IuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWFjY2Vzc29yLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIpOwp2YXIgYUNhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2EtY2FsbGFibGUuanMiKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCBtZXRob2QpIHsKICB0cnkgewogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IgLS0gc2FmZQogICAgcmV0dXJuIHVuY3VycnlUaGlzKGFDYWxsYWJsZShPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwga2V5KVttZXRob2RdKSk7CiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1jbGF1c2UuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy1jbGF1c2UuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBjbGFzc29mUmF3ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIpOwp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuKSB7CiAgLy8gTmFzaG9ybiBidWc6CiAgLy8gICBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTEyOAogIC8vICAgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzExMzAKICBpZiAoY2xhc3NvZlJhdyhmbikgPT09ICdGdW5jdGlvbicpIHJldHVybiB1bmN1cnJ5VGhpcyhmbik7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgTkFUSVZFX0JJTkQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1uYXRpdmUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtbmF0aXZlLmpzIik7Cgp2YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7CnZhciBjYWxsID0gRnVuY3Rpb25Qcm90b3R5cGUuY2FsbDsKdmFyIHVuY3VycnlUaGlzV2l0aEJpbmQgPSBOQVRJVkVfQklORCAmJiBGdW5jdGlvblByb3RvdHlwZS5iaW5kLmJpbmQoY2FsbCwgY2FsbCk7Cgptb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9CSU5EID8gdW5jdXJyeVRoaXNXaXRoQmluZCA6IGZ1bmN0aW9uIChmbikgewogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gY2FsbC5hcHBseShmbiwgYXJndW1lbnRzKTsKICB9Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIHBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvcGF0aCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvcGF0aC5qcyIpOwp2YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2dsb2JhbCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZ2xvYmFsLmpzIik7CnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIpOwoKdmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkgewogIHJldHVybiBpc0NhbGxhYmxlKHZhcmlhYmxlKSA/IHZhcmlhYmxlIDogdW5kZWZpbmVkOwp9OwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZXNwYWNlLCBtZXRob2QpIHsKICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDIgPyBhRnVuY3Rpb24ocGF0aFtuYW1lc3BhY2VdKSB8fCBhRnVuY3Rpb24oZ2xvYmFsW25hbWVzcGFjZV0pCiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NsYXNzb2YgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NsYXNzb2YuanMiKTsKdmFyIGdldE1ldGhvZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nZXQtbWV0aG9kICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nZXQtbWV0aG9kLmpzIik7CnZhciBpc051bGxPclVuZGVmaW5lZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQuanMiKTsKdmFyIEl0ZXJhdG9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pdGVyYXRvcnMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIpOwp2YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIpOwoKdmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICBpZiAoIWlzTnVsbE9yVW5kZWZpbmVkKGl0KSkgcmV0dXJuIGdldE1ldGhvZChpdCwgSVRFUkFUT1IpCiAgICB8fCBnZXRNZXRob2QoaXQsICdAQGl0ZXJhdG9yJykKICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1pdGVyYXRvci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIik7CnZhciBhQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvYS1jYWxsYWJsZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYS1jYWxsYWJsZS5qcyIpOwp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvYW4tb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hbi1vYmplY3QuanMiKTsKdmFyIHRyeVRvU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RyeS10by1zdHJpbmcgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RyeS10by1zdHJpbmcuanMiKTsKdmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QuanMiKTsKCnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQsIHVzaW5nSXRlcmF0b3IpIHsKICB2YXIgaXRlcmF0b3JNZXRob2QgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGdldEl0ZXJhdG9yTWV0aG9kKGFyZ3VtZW50KSA6IHVzaW5nSXRlcmF0b3I7CiAgaWYgKGFDYWxsYWJsZShpdGVyYXRvck1ldGhvZCkpIHJldHVybiBhbk9iamVjdChjYWxsKGl0ZXJhdG9yTWV0aG9kLCBhcmd1bWVudCkpOwogIHRocm93ICRUeXBlRXJyb3IodHJ5VG9TdHJpbmcoYXJndW1lbnQpICsgJyBpcyBub3QgaXRlcmFibGUnKTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nZXQtbWV0aG9kLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nZXQtbWV0aG9kLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgYUNhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2EtY2FsbGFibGUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2EtY2FsbGFibGUuanMiKTsKdmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZC5qcyIpOwoKLy8gYEdldE1ldGhvZGAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtZ2V0bWV0aG9kCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFYsIFApIHsKICB2YXIgZnVuYyA9IFZbUF07CiAgcmV0dXJuIGlzTnVsbE9yVW5kZWZpbmVkKGZ1bmMpID8gdW5kZWZpbmVkIDogYUNhbGxhYmxlKGZ1bmMpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dsb2JhbC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nbG9iYWwuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIGl0ICYmIGl0Lk1hdGggPT0gTWF0aCAmJiBpdDsKfTsKCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy84NiNpc3N1ZWNvbW1lbnQtMTE1NzU5MDI4Cm1vZHVsZS5leHBvcnRzID0KICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tZ2xvYmFsLXRoaXMgLS0gc2FmZQogIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8CiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFscyAtLSBzYWZlCiAgY2hlY2sodHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZikgfHwKICBjaGVjayh0eXBlb2YgX193ZWJwYWNrX3JlcXVpcmVfXy5nID09ICdvYmplY3QnICYmIF9fd2VicGFja19yZXF1aXJlX18uZykgfHwKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmMgLS0gZmFsbGJhY2sKICAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSkoKSB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHkuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHkuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIpOwp2YXIgdG9PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8tb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1vYmplY3QuanMiKTsKCnZhciBoYXNPd25Qcm9wZXJ0eSA9IHVuY3VycnlUaGlzKHt9Lmhhc093blByb3BlcnR5KTsKCi8vIGBIYXNPd25Qcm9wZXJ0eWAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaGFzb3ducHJvcGVydHkKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1oYXNvd24gLS0gc2FmZQptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5oYXNPd24gfHwgZnVuY3Rpb24gaGFzT3duKGl0LCBrZXkpIHsKICByZXR1cm4gaGFzT3duUHJvcGVydHkodG9PYmplY3QoaXQpLCBrZXkpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKbW9kdWxlLmV4cG9ydHMgPSB7fTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9odG1sLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9odG1sLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgZ2V0QnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4gKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIpOwoKbW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdkb2N1bWVudCcsICdkb2N1bWVudEVsZW1lbnQnKTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIpOwp2YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZmFpbHMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2ZhaWxzLmpzIik7CnZhciBjcmVhdGVFbGVtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIpOwoKLy8gVGhhbmtzIHRvIElFOCBmb3IgaXRzIGZ1bm55IGRlZmluZVByb3BlcnR5Cm1vZHVsZS5leHBvcnRzID0gIURFU0NSSVBUT1JTICYmICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZwogIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3JlYXRlRWxlbWVudCgnZGl2JyksICdhJywgewogICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9CiAgfSkuYSAhPSA3Owp9KTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIik7CnZhciBmYWlscyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mYWlscyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZmFpbHMuanMiKTsKdmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NsYXNzb2YtcmF3LmpzIik7Cgp2YXIgJE9iamVjdCA9IE9iamVjdDsKdmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpOwoKLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3MKbW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7CiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NgogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZQogIHJldHVybiAhJE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApOwp9KSA/IGZ1bmN0aW9uIChpdCkgewogIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0KGl0LCAnJykgOiAkT2JqZWN0KGl0KTsKfSA6ICRPYmplY3Q7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIpOwp2YXIgaXNDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1jYWxsYWJsZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiKTsKdmFyIHN0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIik7Cgp2YXIgZnVuY3Rpb25Ub1N0cmluZyA9IHVuY3VycnlUaGlzKEZ1bmN0aW9uLnRvU3RyaW5nKTsKCi8vIHRoaXMgaGVscGVyIGJyb2tlbiBpbiBgY29yZS1qc0AzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXIKaWYgKCFpc0NhbGxhYmxlKHN0b3JlLmluc3BlY3RTb3VyY2UpKSB7CiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkgewogICAgcmV0dXJuIGZ1bmN0aW9uVG9TdHJpbmcoaXQpOwogIH07Cn0KCm1vZHVsZS5leHBvcnRzID0gc3RvcmUuaW5zcGVjdFNvdXJjZTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIE5BVElWRV9XRUFLX01BUCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy93ZWFrLW1hcC1iYXNpYy1kZXRlY3Rpb24gKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3dlYWstbWFwLWJhc2ljLWRldGVjdGlvbi5qcyIpOwp2YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2dsb2JhbCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZ2xvYmFsLmpzIik7CnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1vYmplY3QgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIpOwp2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIik7CnZhciBoYXNPd24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIpOwp2YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIik7CnZhciBzaGFyZWRLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvc2hhcmVkLWtleSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIpOwp2YXIgaGlkZGVuS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9oaWRkZW4ta2V5cyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiKTsKCnZhciBPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCA9ICdPYmplY3QgYWxyZWFkeSBpbml0aWFsaXplZCc7CnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yOwp2YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwOwp2YXIgc2V0LCBnZXQsIGhhczsKCnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7Cn07Cgp2YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHsKICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7CiAgICB2YXIgc3RhdGU7CiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7CiAgICAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTsKICAgIH0gcmV0dXJuIHN0YXRlOwogIH07Cn07CgppZiAoTkFUSVZFX1dFQUtfTUFQIHx8IHNoYXJlZC5zdGF0ZSkgewogIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7CiAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1hc3NpZ24gLS0gcHJvdG90eXBlIG1ldGhvZHMgcHJvdGVjdGlvbiAqLwogIHN0b3JlLmdldCA9IHN0b3JlLmdldDsKICBzdG9yZS5oYXMgPSBzdG9yZS5oYXM7CiAgc3RvcmUuc2V0ID0gc3RvcmUuc2V0OwogIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1hc3NpZ24gLS0gcHJvdG90eXBlIG1ldGhvZHMgcHJvdGVjdGlvbiAqLwogIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHsKICAgIGlmIChzdG9yZS5oYXMoaXQpKSB0aHJvdyBUeXBlRXJyb3IoT0JKRUNUX0FMUkVBRFlfSU5JVElBTElaRUQpOwogICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7CiAgICBzdG9yZS5zZXQoaXQsIG1ldGFkYXRhKTsKICAgIHJldHVybiBtZXRhZGF0YTsKICB9OwogIGdldCA9IGZ1bmN0aW9uIChpdCkgewogICAgcmV0dXJuIHN0b3JlLmdldChpdCkgfHwge307CiAgfTsKICBoYXMgPSBmdW5jdGlvbiAoaXQpIHsKICAgIHJldHVybiBzdG9yZS5oYXMoaXQpOwogIH07Cn0gZWxzZSB7CiAgdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpOwogIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTsKICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7CiAgICBpZiAoaGFzT3duKGl0LCBTVEFURSkpIHRocm93IFR5cGVFcnJvcihPQkpFQ1RfQUxSRUFEWV9JTklUSUFMSVpFRCk7CiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDsKICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTsKICAgIHJldHVybiBtZXRhZGF0YTsKICB9OwogIGdldCA9IGZ1bmN0aW9uIChpdCkgewogICAgcmV0dXJuIGhhc093bihpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307CiAgfTsKICBoYXMgPSBmdW5jdGlvbiAoaXQpIHsKICAgIHJldHVybiBoYXNPd24oaXQsIFNUQVRFKTsKICB9Owp9Cgptb2R1bGUuZXhwb3J0cyA9IHsKICBzZXQ6IHNldCwKICBnZXQ6IGdldCwKICBoYXM6IGhhcywKICBlbmZvcmNlOiBlbmZvcmNlLAogIGdldHRlckZvcjogZ2V0dGVyRm9yCn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIpOwp2YXIgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIik7Cgp2YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7CnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTsKCi8vIGNoZWNrIG9uIGRlZmF1bHQgQXJyYXkgaXRlcmF0b3IKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLWNhbGxhYmxlLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyICRkb2N1bWVudEFsbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kb2N1bWVudC1hbGwgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RvY3VtZW50LWFsbC5qcyIpOwoKdmFyIGRvY3VtZW50QWxsID0gJGRvY3VtZW50QWxsLmFsbDsKCi8vIGBJc0NhbGxhYmxlYCBhYnN0cmFjdCBvcGVyYXRpb24KLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NhbGxhYmxlCm1vZHVsZS5leHBvcnRzID0gJGRvY3VtZW50QWxsLklTX0hUTUxEREEgPyBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICByZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09ICdmdW5jdGlvbicgfHwgYXJndW1lbnQgPT09IGRvY3VtZW50QWxsOwp9IDogZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgcmV0dXJuIHR5cGVvZiBhcmd1bWVudCA9PSAnZnVuY3Rpb24nOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLWNvbnN0cnVjdG9yLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtY29uc3RydWN0b3IuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiKTsKdmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2ZhaWxzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mYWlscy5qcyIpOwp2YXIgaXNDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1jYWxsYWJsZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiKTsKdmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY2xhc3NvZiAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY2xhc3NvZi5qcyIpOwp2YXIgZ2V0QnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4gKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIpOwp2YXIgaW5zcGVjdFNvdXJjZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiKTsKCnZhciBub29wID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9Owp2YXIgZW1wdHkgPSBbXTsKdmFyIGNvbnN0cnVjdCA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnY29uc3RydWN0Jyk7CnZhciBjb25zdHJ1Y3RvclJlZ0V4cCA9IC9eXHMqKD86Y2xhc3N8ZnVuY3Rpb24pXGIvOwp2YXIgZXhlYyA9IHVuY3VycnlUaGlzKGNvbnN0cnVjdG9yUmVnRXhwLmV4ZWMpOwp2YXIgSU5DT1JSRUNUX1RPX1NUUklORyA9ICFjb25zdHJ1Y3RvclJlZ0V4cC5leGVjKG5vb3ApOwoKdmFyIGlzQ29uc3RydWN0b3JNb2Rlcm4gPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7CiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlOwogIHRyeSB7CiAgICBjb25zdHJ1Y3Qobm9vcCwgZW1wdHksIGFyZ3VtZW50KTsKICAgIHJldHVybiB0cnVlOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQp9OwoKdmFyIGlzQ29uc3RydWN0b3JMZWdhY3kgPSBmdW5jdGlvbiBpc0NvbnN0cnVjdG9yKGFyZ3VtZW50KSB7CiAgaWYgKCFpc0NhbGxhYmxlKGFyZ3VtZW50KSkgcmV0dXJuIGZhbHNlOwogIHN3aXRjaCAoY2xhc3NvZihhcmd1bWVudCkpIHsKICAgIGNhc2UgJ0FzeW5jRnVuY3Rpb24nOgogICAgY2FzZSAnR2VuZXJhdG9yRnVuY3Rpb24nOgogICAgY2FzZSAnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbic6IHJldHVybiBmYWxzZTsKICB9CiAgdHJ5IHsKICAgIC8vIHdlIGNhbid0IGNoZWNrIC5wcm90b3R5cGUgc2luY2UgY29uc3RydWN0b3JzIHByb2R1Y2VkIGJ5IC5iaW5kIGhhdmVuJ3QgaXQKICAgIC8vIGBGdW5jdGlvbiN0b1N0cmluZ2AgdGhyb3dzIG9uIHNvbWUgYnVpbHQtaXQgZnVuY3Rpb24gaW4gc29tZSBsZWdhY3kgZW5naW5lcwogICAgLy8gKGZvciBleGFtcGxlLCBgRE9NUXVhZGAgYW5kIHNpbWlsYXIgaW4gRkY0MS0pCiAgICByZXR1cm4gSU5DT1JSRUNUX1RPX1NUUklORyB8fCAhIWV4ZWMoY29uc3RydWN0b3JSZWdFeHAsIGluc3BlY3RTb3VyY2UoYXJndW1lbnQpKTsKICB9IGNhdGNoIChlcnJvcikgewogICAgcmV0dXJuIHRydWU7CiAgfQp9OwoKaXNDb25zdHJ1Y3RvckxlZ2FjeS5zaGFtID0gdHJ1ZTsKCi8vIGBJc0NvbnN0cnVjdG9yYCBhYnN0cmFjdCBvcGVyYXRpb24KLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1pc2NvbnN0cnVjdG9yCm1vZHVsZS5leHBvcnRzID0gIWNvbnN0cnVjdCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7CiAgdmFyIGNhbGxlZDsKICByZXR1cm4gaXNDb25zdHJ1Y3Rvck1vZGVybihpc0NvbnN0cnVjdG9yTW9kZXJuLmNhbGwpCiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihPYmplY3QpCiAgICB8fCAhaXNDb25zdHJ1Y3Rvck1vZGVybihmdW5jdGlvbiAoKSB7IGNhbGxlZCA9IHRydWU7IH0pCiAgICB8fCBjYWxsZWQ7Cn0pID8gaXNDb25zdHJ1Y3RvckxlZ2FjeSA6IGlzQ29uc3RydWN0b3JNb2Rlcm47CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZmFpbHMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2ZhaWxzLmpzIik7CnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIpOwoKdmFyIHJlcGxhY2VtZW50ID0gLyN8XC5wcm90b3R5cGVcLi87Cgp2YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7CiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldOwogIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWUKICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2UKICAgIDogaXNDYWxsYWJsZShkZXRlY3Rpb24pID8gZmFpbHMoZGV0ZWN0aW9uKQogICAgOiAhIWRldGVjdGlvbjsKfTsKCnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7CiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTsKfTsKCnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9Owp2YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nOwp2YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJzsKCm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtbnVsbC1vci11bmRlZmluZWQuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7CgovLyB3ZSBjYW4ndCB1c2UganVzdCBgaXQgPT0gbnVsbGAgc2luY2Ugb2YgYGRvY3VtZW50LmFsbGAgc3BlY2lhbCBjYXNlCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtSXNIVE1MRERBLWludGVybmFsLXNsb3QtYWVjCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIGl0ID09PSBudWxsIHx8IGl0ID09PSB1bmRlZmluZWQ7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgaXNDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1jYWxsYWJsZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiKTsKdmFyICRkb2N1bWVudEFsbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kb2N1bWVudC1hbGwgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RvY3VtZW50LWFsbC5qcyIpOwoKdmFyIGRvY3VtZW50QWxsID0gJGRvY3VtZW50QWxsLmFsbDsKCm1vZHVsZS5leHBvcnRzID0gJGRvY3VtZW50QWxsLklTX0hUTUxEREEgPyBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KSB8fCBpdCA9PT0gZG9jdW1lbnRBbGw7Cn0gOiBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gdHlwZW9mIGl0ID09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiBpc0NhbGxhYmxlKGl0KTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1wdXJlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1wdXJlLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKbW9kdWxlLmV4cG9ydHMgPSB0cnVlOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1zeW1ib2wuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIGdldEJ1aWx0SW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiKTsKdmFyIGlzQ2FsbGFibGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtY2FsbGFibGUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLWNhbGxhYmxlLmpzIik7CnZhciBpc1Byb3RvdHlwZU9mID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1pcy1wcm90b3R5cGUtb2YuanMiKTsKdmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIpOwoKdmFyICRPYmplY3QgPSBPYmplY3Q7Cgptb2R1bGUuZXhwb3J0cyA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJzsKfSA6IGZ1bmN0aW9uIChpdCkgewogIHZhciAkU3ltYm9sID0gZ2V0QnVpbHRJbignU3ltYm9sJyk7CiAgcmV0dXJuIGlzQ2FsbGFibGUoJFN5bWJvbCkgJiYgaXNQcm90b3R5cGVPZigkU3ltYm9sLnByb3RvdHlwZSwgJE9iamVjdChpdCkpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0b3ItY2xvc2UuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIik7CnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hbi1vYmplY3QgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIpOwp2YXIgZ2V0TWV0aG9kID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2dldC1tZXRob2QgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1tZXRob2QuanMiKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBraW5kLCB2YWx1ZSkgewogIHZhciBpbm5lclJlc3VsdCwgaW5uZXJFcnJvcjsKICBhbk9iamVjdChpdGVyYXRvcik7CiAgdHJ5IHsKICAgIGlubmVyUmVzdWx0ID0gZ2V0TWV0aG9kKGl0ZXJhdG9yLCAncmV0dXJuJyk7CiAgICBpZiAoIWlubmVyUmVzdWx0KSB7CiAgICAgIGlmIChraW5kID09PSAndGhyb3cnKSB0aHJvdyB2YWx1ZTsKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQogICAgaW5uZXJSZXN1bHQgPSBjYWxsKGlubmVyUmVzdWx0LCBpdGVyYXRvcik7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIGlubmVyRXJyb3IgPSB0cnVlOwogICAgaW5uZXJSZXN1bHQgPSBlcnJvcjsKICB9CiAgaWYgKGtpbmQgPT09ICd0aHJvdycpIHRocm93IHZhbHVlOwogIGlmIChpbm5lckVycm9yKSB0aHJvdyBpbm5lclJlc3VsdDsKICBhbk9iamVjdChpbm5lclJlc3VsdCk7CiAgcmV0dXJuIHZhbHVlOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3Rvci5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3IuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwoKdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUuanMiKS5JdGVyYXRvclByb3RvdHlwZSk7CnZhciBjcmVhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIpOwp2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIpOwp2YXIgc2V0VG9TdHJpbmdUYWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIik7CnZhciBJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXRlcmF0b3JzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pdGVyYXRvcnMuanMiKTsKCnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQsIEVOVU1FUkFCTEVfTkVYVCkgewogIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InOwogIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigrIUVOVU1FUkFCTEVfTkVYVCwgbmV4dCkgfSk7CiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpOwogIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7CiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cgp2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9leHBvcnQgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2V4cG9ydC5qcyIpOwp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIik7CnZhciBJU19QVVJFID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLXB1cmUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLXB1cmUuanMiKTsKdmFyIEZ1bmN0aW9uTmFtZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi1uYW1lICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1uYW1lLmpzIik7CnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIpOwp2YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3IgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3Rvci5qcyIpOwp2YXIgZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIik7CnZhciBzZXRQcm90b3R5cGVPZiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZiAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiKTsKdmFyIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIpOwp2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIik7CnZhciBkZWZpbmVCdWlsdEluID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbiAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLmpzIik7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIik7CnZhciBJdGVyYXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXRlcmF0b3JzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pdGVyYXRvcnMuanMiKTsKdmFyIEl0ZXJhdG9yc0NvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIik7Cgp2YXIgUFJPUEVSX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuUFJPUEVSOwp2YXIgQ09ORklHVVJBQkxFX0ZVTkNUSU9OX05BTUUgPSBGdW5jdGlvbk5hbWUuQ09ORklHVVJBQkxFOwp2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvcnNDb3JlLkl0ZXJhdG9yUHJvdG90eXBlOwp2YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUzsKdmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpOwp2YXIgS0VZUyA9ICdrZXlzJzsKdmFyIFZBTFVFUyA9ICd2YWx1ZXMnOwp2YXIgRU5UUklFUyA9ICdlbnRyaWVzJzsKCnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhYmxlLCBOQU1FLCBJdGVyYXRvckNvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkgewogIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7CgogIHZhciBnZXRJdGVyYXRpb25NZXRob2QgPSBmdW5jdGlvbiAoS0lORCkgewogICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yOwogICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTsKICAgIHN3aXRjaCAoS0lORCkgewogICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07CiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07CiAgICAgIGNhc2UgRU5UUklFUzogcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTsKICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9OwogIH07CgogIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InOwogIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTsKICB2YXIgSXRlcmFibGVQcm90b3R5cGUgPSBJdGVyYWJsZS5wcm90b3R5cGU7CiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdCiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddCiAgICB8fCBERUZBVUxUICYmIEl0ZXJhYmxlUHJvdG90eXBlW0RFRkFVTFRdOwogIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7CiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yOwogIHZhciBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIG1ldGhvZHMsIEtFWTsKCiAgLy8gZml4IG5hdGl2ZQogIGlmIChhbnlOYXRpdmVJdGVyYXRvcikgewogICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpOwogICAgaWYgKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkgewogICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHsKICAgICAgICBpZiAoc2V0UHJvdG90eXBlT2YpIHsKICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpOwogICAgICAgIH0gZWxzZSBpZiAoIWlzQ2FsbGFibGUoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSkpIHsKICAgICAgICAgIGRlZmluZUJ1aWx0SW4oQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7CiAgICAgICAgfQogICAgICB9CiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnMKICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTsKICAgICAgaWYgKElTX1BVUkUpIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7CiAgICB9CiAgfQoKICAvLyBmaXggQXJyYXkucHJvdG90eXBlLnsgdmFsdWVzLCBAQGl0ZXJhdG9yIH0ubmFtZSBpbiBWOCAvIEZGCiAgaWYgKFBST1BFUl9GVU5DVElPTl9OQU1FICYmIERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykgewogICAgaWYgKCFJU19QVVJFICYmIENPTkZJR1VSQUJMRV9GVU5DVElPTl9OQU1FKSB7CiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYWJsZVByb3RvdHlwZSwgJ25hbWUnLCBWQUxVRVMpOwogICAgfSBlbHNlIHsKICAgICAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTsKICAgICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gY2FsbChuYXRpdmVJdGVyYXRvciwgdGhpcyk7IH07CiAgICB9CiAgfQoKICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzCiAgaWYgKERFRkFVTFQpIHsKICAgIG1ldGhvZHMgPSB7CiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksCiAgICAgIGtleXM6IElTX1NFVCA/IGRlZmF1bHRJdGVyYXRvciA6IGdldEl0ZXJhdGlvbk1ldGhvZChLRVlTKSwKICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpCiAgICB9OwogICAgaWYgKEZPUkNFRCkgZm9yIChLRVkgaW4gbWV0aG9kcykgewogICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7CiAgICAgICAgZGVmaW5lQnVpbHRJbihJdGVyYWJsZVByb3RvdHlwZSwgS0VZLCBtZXRob2RzW0tFWV0pOwogICAgICB9CiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7CiAgfQoKICAvLyBkZWZpbmUgaXRlcmF0b3IKICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHsKICAgIGRlZmluZUJ1aWx0SW4oSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IsIHsgbmFtZTogREVGQVVMVCB9KTsKICB9CiAgSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yOwoKICByZXR1cm4gbWV0aG9kczsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwoKdmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2ZhaWxzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mYWlscy5qcyIpOwp2YXIgaXNDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1jYWxsYWJsZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiKTsKdmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLW9iamVjdCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIik7CnZhciBjcmVhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIpOwp2YXIgZ2V0UHJvdG90eXBlT2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mLmpzIik7CnZhciBkZWZpbmVCdWlsdEluID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbiAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLmpzIik7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIik7CnZhciBJU19QVVJFID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLXB1cmUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLXB1cmUuanMiKTsKCnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTsKdmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTsKCi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0laXRlcmF0b3Jwcm90b3R5cGUlLW9iamVjdAp2YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjsKCi8qIGVzbGludC1kaXNhYmxlIGVzL25vLWFycmF5LXByb3RvdHlwZS1rZXlzIC0tIHNhZmUgKi8KaWYgKFtdLmtleXMpIHsKICBhcnJheUl0ZXJhdG9yID0gW10ua2V5cygpOwogIC8vIFNhZmFyaSA4IGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YAogIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7CiAgZWxzZSB7CiAgICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7CiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTsKICB9Cn0KCnZhciBORVdfSVRFUkFUT1JfUFJPVE9UWVBFID0gIWlzT2JqZWN0KEl0ZXJhdG9yUHJvdG90eXBlKSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7CiAgdmFyIHRlc3QgPSB7fTsKICAvLyBGRjQ0LSBsZWdhY3kgaXRlcmF0b3JzIGNhc2UKICByZXR1cm4gSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwodGVzdCkgIT09IHRlc3Q7Cn0pOwoKaWYgKE5FV19JVEVSQVRPUl9QUk9UT1RZUEUpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307CmVsc2UgaWYgKElTX1BVUkUpIEl0ZXJhdG9yUHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTsKCi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClgIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtQEBpdGVyYXRvcgppZiAoIWlzQ2FsbGFibGUoSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdKSkgewogIGRlZmluZUJ1aWx0SW4oSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpczsKICB9KTsKfQoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLAogIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlM6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pdGVyYXRvcnMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7Cgptb2R1bGUuZXhwb3J0cyA9IHt9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2xlbmd0aC1vZi1hcnJheS1saWtlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvbGVuZ3RoLW9mLWFycmF5LWxpa2UuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgdG9MZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1sZW5ndGguanMiKTsKCi8vIGBMZW5ndGhPZkFycmF5TGlrZWAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbGVuZ3Rob2ZhcnJheWxpa2UKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqKSB7CiAgcmV0dXJuIHRvTGVuZ3RoKG9iai5sZW5ndGgpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL21hdGgtdHJ1bmMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL21hdGgtdHJ1bmMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7Cgp2YXIgY2VpbCA9IE1hdGguY2VpbDsKdmFyIGZsb29yID0gTWF0aC5mbG9vcjsKCi8vIGBNYXRoLnRydW5jYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1tYXRoLnRydW5jCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1tYXRoLXRydW5jIC0tIHNhZmUKbW9kdWxlLmV4cG9ydHMgPSBNYXRoLnRydW5jIHx8IGZ1bmN0aW9uIHRydW5jKHgpIHsKICB2YXIgbiA9ICt4OwogIHJldHVybiAobiA+IDAgPyBmbG9vciA6IGNlaWwpKG4pOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1hc3NpZ24uanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1hc3NpZ24uanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kZXNjcmlwdG9ycyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiKTsKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIik7CnZhciBjYWxsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLWNhbGwuanMiKTsKdmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2ZhaWxzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mYWlscy5qcyIpOwp2YXIgb2JqZWN0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3Qta2V5cyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiKTsKdmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIik7CnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiKTsKdmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLW9iamVjdCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIik7CnZhciBJbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIpOwoKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1hc3NpZ24gLS0gc2FmZQp2YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcKdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5Owp2YXIgY29uY2F0ID0gdW5jdXJyeVRoaXMoW10uY29uY2F0KTsKCi8vIGBPYmplY3QuYXNzaWduYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuYXNzaWduCm1vZHVsZS5leHBvcnRzID0gISRhc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkgewogIC8vIHNob3VsZCBoYXZlIGNvcnJlY3Qgb3JkZXIgb2Ygb3BlcmF0aW9ucyAoRWRnZSBidWcpCiAgaWYgKERFU0NSSVBUT1JTICYmICRhc3NpZ24oeyBiOiAxIH0sICRhc3NpZ24oZGVmaW5lUHJvcGVydHkoe30sICdhJywgewogICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgIGdldDogZnVuY3Rpb24gKCkgewogICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHsKICAgICAgICB2YWx1ZTogMywKICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZQogICAgICB9KTsKICAgIH0KICB9KSwgeyBiOiAyIH0pKS5iICE9PSAxKSByZXR1cm4gdHJ1ZTsKICAvLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZykKICB2YXIgQSA9IHt9OwogIHZhciBCID0ge307CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLXN5bWJvbCAtLSBzYWZlCiAgdmFyIHN5bWJvbCA9IFN5bWJvbCgpOwogIHZhciBhbHBoYWJldCA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7CiAgQVtzeW1ib2xdID0gNzsKICBhbHBoYWJldC5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoY2hyKSB7IEJbY2hyXSA9IGNocjsgfSk7CiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKCRhc3NpZ24oe30sIEIpKS5qb2luKCcnKSAhPSBhbHBoYWJldDsKfSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgCiAgdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpOwogIHZhciBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOwogIHZhciBpbmRleCA9IDE7CiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mOwogIHZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7CiAgd2hpbGUgKGFyZ3VtZW50c0xlbmd0aCA+IGluZGV4KSB7CiAgICB2YXIgUyA9IEluZGV4ZWRPYmplY3QoYXJndW1lbnRzW2luZGV4KytdKTsKICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gY29uY2F0KG9iamVjdEtleXMoUyksIGdldE93blByb3BlcnR5U3ltYm9scyhTKSkgOiBvYmplY3RLZXlzKFMpOwogICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoOwogICAgdmFyIGogPSAwOwogICAgdmFyIGtleTsKICAgIHdoaWxlIChsZW5ndGggPiBqKSB7CiAgICAgIGtleSA9IGtleXNbaisrXTsKICAgICAgaWYgKCFERVNDUklQVE9SUyB8fCBjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlLCBTLCBrZXkpKSBUW2tleV0gPSBTW2tleV07CiAgICB9CiAgfSByZXR1cm4gVDsKfSA6ICRhc3NpZ247CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKLyogZ2xvYmFsIEFjdGl2ZVhPYmplY3QgLS0gb2xkIElFLCBXU0ggKi8KdmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2FuLW9iamVjdCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIik7CnZhciBkZWZpbmVQcm9wZXJ0aWVzTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIik7CnZhciBlbnVtQnVnS2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIik7CnZhciBoaWRkZW5LZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIpOwp2YXIgaHRtbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9odG1sICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9odG1sLmpzIik7CnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50LmpzIik7CnZhciBzaGFyZWRLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvc2hhcmVkLWtleSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIpOwoKdmFyIEdUID0gJz4nOwp2YXIgTFQgPSAnPCc7CnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJzsKdmFyIFNDUklQVCA9ICdzY3JpcHQnOwp2YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7Cgp2YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTsKCnZhciBzY3JpcHRUYWcgPSBmdW5jdGlvbiAoY29udGVudCkgewogIHJldHVybiBMVCArIFNDUklQVCArIEdUICsgY29udGVudCArIExUICsgJy8nICsgU0NSSVBUICsgR1Q7Cn07CgovLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgQWN0aXZlWCBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZQp2YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHsKICBhY3RpdmVYRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCcnKSk7CiAgYWN0aXZlWERvY3VtZW50LmNsb3NlKCk7CiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDsKICBhY3RpdmVYRG9jdW1lbnQgPSBudWxsOyAvLyBhdm9pZCBtZW1vcnkgbGVhawogIHJldHVybiB0ZW1wOwp9OwoKLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZQp2YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkgewogIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnCiAgdmFyIGlmcmFtZSA9IGRvY3VtZW50Q3JlYXRlRWxlbWVudCgnaWZyYW1lJyk7CiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonOwogIHZhciBpZnJhbWVEb2N1bWVudDsKICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7CiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzQ3NQogIGlmcmFtZS5zcmMgPSBTdHJpbmcoSlMpOwogIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7CiAgaWZyYW1lRG9jdW1lbnQub3BlbigpOwogIGlmcmFtZURvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnZG9jdW1lbnQuRj1PYmplY3QnKSk7CiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTsKICByZXR1cm4gaWZyYW1lRG9jdW1lbnQuRjsKfTsKCi8vIENoZWNrIGZvciBkb2N1bWVudC5kb21haW4gYW5kIGFjdGl2ZSB4IHN1cHBvcnQKLy8gTm8gbmVlZCB0byB1c2UgYWN0aXZlIHggYXBwcm9hY2ggd2hlbiBkb2N1bWVudC5kb21haW4gaXMgbm90IHNldAovLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTAKLy8gdmFyaWF0aW9uIG9mIGh0dHBzOi8vZ2l0aHViLmNvbS9raXRjYW1icmlkZ2UvZXM1LXNoaW0vY29tbWl0LzRmNzM4YWMwNjYzNDYKLy8gYXZvaWQgSUUgR0MgYnVnCnZhciBhY3RpdmVYRG9jdW1lbnQ7CnZhciBOdWxsUHJvdG9PYmplY3QgPSBmdW5jdGlvbiAoKSB7CiAgdHJ5IHsKICAgIGFjdGl2ZVhEb2N1bWVudCA9IG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpOwogIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGlnbm9yZSAqLyB9CiAgTnVsbFByb3RvT2JqZWN0ID0gdHlwZW9mIGRvY3VtZW50ICE9ICd1bmRlZmluZWQnCiAgICA/IGRvY3VtZW50LmRvbWFpbiAmJiBhY3RpdmVYRG9jdW1lbnQKICAgICAgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgLy8gb2xkIElFCiAgICAgIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCkKICAgIDogTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpOyAvLyBXU0gKICB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoOwogIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dOwogIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTsKfTsKCmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTsKCi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuY3JlYXRlCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtY3JlYXRlIC0tIHNhZmUKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7CiAgdmFyIHJlc3VsdDsKICBpZiAoTyAhPT0gbnVsbCkgewogICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7CiAgICByZXN1bHQgPSBuZXcgRW1wdHlDb25zdHJ1Y3RvcigpOwogICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDsKICAgIC8vIGFkZCAiX19wcm90b19fIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsCiAgICByZXN1bHRbSUVfUFJPVE9dID0gTzsKICB9IGVsc2UgcmVzdWx0ID0gTnVsbFByb3RvT2JqZWN0KCk7CiAgcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXNNb2R1bGUuZihyZXN1bHQsIFByb3BlcnRpZXMpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIpOwp2YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnLmpzIik7CnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5LmpzIik7CnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hbi1vYmplY3QgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIpOwp2YXIgdG9JbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIpOwp2YXIgb2JqZWN0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3Qta2V5cyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiKTsKCi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXMKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0aWVzIC0tIHNhZmUKZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgJiYgIVY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHsKICBhbk9iamVjdChPKTsKICB2YXIgcHJvcHMgPSB0b0luZGV4ZWRPYmplY3QoUHJvcGVydGllcyk7CiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpOwogIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDsKICB2YXIgaW5kZXggPSAwOwogIHZhciBrZXk7CiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIHByb3BzW2tleV0pOwogIHJldHVybiBPOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kZXNjcmlwdG9ycyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiKTsKdmFyIElFOF9ET01fREVGSU5FID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIpOwp2YXIgVjhfUFJPVE9UWVBFX0RFRklORV9CVUcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3Y4LXByb3RvdHlwZS1kZWZpbmUtYnVnLmpzIik7CnZhciBhbk9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hbi1vYmplY3QgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FuLW9iamVjdC5qcyIpOwp2YXIgdG9Qcm9wZXJ0eUtleSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXkgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyIpOwoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZGVmaW5lcHJvcGVydHkgLS0gc2FmZQp2YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5OwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlCnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsKdmFyIEVOVU1FUkFCTEUgPSAnZW51bWVyYWJsZSc7CnZhciBDT05GSUdVUkFCTEUgPSAnY29uZmlndXJhYmxlJzsKdmFyIFdSSVRBQkxFID0gJ3dyaXRhYmxlJzsKCi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eQpleHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IFY4X1BST1RPVFlQRV9ERUZJTkVfQlVHID8gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykgewogIGFuT2JqZWN0KE8pOwogIFAgPSB0b1Byb3BlcnR5S2V5KFApOwogIGFuT2JqZWN0KEF0dHJpYnV0ZXMpOwogIGlmICh0eXBlb2YgTyA9PT0gJ2Z1bmN0aW9uJyAmJiBQID09PSAncHJvdG90eXBlJyAmJiAndmFsdWUnIGluIEF0dHJpYnV0ZXMgJiYgV1JJVEFCTEUgaW4gQXR0cmlidXRlcyAmJiAhQXR0cmlidXRlc1tXUklUQUJMRV0pIHsKICAgIHZhciBjdXJyZW50ID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTsKICAgIGlmIChjdXJyZW50ICYmIGN1cnJlbnRbV1JJVEFCTEVdKSB7CiAgICAgIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlOwogICAgICBBdHRyaWJ1dGVzID0gewogICAgICAgIGNvbmZpZ3VyYWJsZTogQ09ORklHVVJBQkxFIGluIEF0dHJpYnV0ZXMgPyBBdHRyaWJ1dGVzW0NPTkZJR1VSQUJMRV0gOiBjdXJyZW50W0NPTkZJR1VSQUJMRV0sCiAgICAgICAgZW51bWVyYWJsZTogRU5VTUVSQUJMRSBpbiBBdHRyaWJ1dGVzID8gQXR0cmlidXRlc1tFTlVNRVJBQkxFXSA6IGN1cnJlbnRbRU5VTUVSQUJMRV0sCiAgICAgICAgd3JpdGFibGU6IGZhbHNlCiAgICAgIH07CiAgICB9CiAgfSByZXR1cm4gJGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpOwp9IDogJGRlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykgewogIGFuT2JqZWN0KE8pOwogIFAgPSB0b1Byb3BlcnR5S2V5KFApOwogIGFuT2JqZWN0KEF0dHJpYnV0ZXMpOwogIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHsKICAgIHJldHVybiAkZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7CiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfQogIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93ICRUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7CiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7CiAgcmV0dXJuIE87Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIERFU0NSSVBUT1JTID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIpOwp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIik7CnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiKTsKdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvciAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiKTsKdmFyIHRvSW5kZXhlZE9iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiKTsKdmFyIHRvUHJvcGVydHlLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8tcHJvcGVydHkta2V5ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXkuanMiKTsKdmFyIGhhc093biA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5LmpzIik7CnZhciBJRThfRE9NX0RFRklORSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiKTsKCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmUKdmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOwoKLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3IKZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHsKICBPID0gdG9JbmRleGVkT2JqZWN0KE8pOwogIFAgPSB0b1Byb3BlcnR5S2V5KFApOwogIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHsKICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApOwogIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH0KICBpZiAoaGFzT3duKE8sIFApKSByZXR1cm4gY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKCFjYWxsKHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYsIE8sIFApLCBPW1BdKTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7CgovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5c3ltYm9scyAtLSBzYWZlCmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBoYXNPd24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIpOwp2YXIgaXNDYWxsYWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1jYWxsYWJsZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtY2FsbGFibGUuanMiKTsKdmFyIHRvT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLW9iamVjdCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIik7CnZhciBzaGFyZWRLZXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvc2hhcmVkLWtleSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLWtleS5qcyIpOwp2YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlciAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIik7Cgp2YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7CnZhciAkT2JqZWN0ID0gT2JqZWN0Owp2YXIgT2JqZWN0UHJvdG90eXBlID0gJE9iamVjdC5wcm90b3R5cGU7CgovLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2YKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRwcm90b3R5cGVvZiAtLSBzYWZlCm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gJE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7CiAgdmFyIG9iamVjdCA9IHRvT2JqZWN0KE8pOwogIGlmIChoYXNPd24ob2JqZWN0LCBJRV9QUk9UTykpIHJldHVybiBvYmplY3RbSUVfUFJPVE9dOwogIHZhciBjb25zdHJ1Y3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcjsKICBpZiAoaXNDYWxsYWJsZShjb25zdHJ1Y3RvcikgJiYgb2JqZWN0IGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHsKICAgIHJldHVybiBjb25zdHJ1Y3Rvci5wcm90b3R5cGU7CiAgfSByZXR1cm4gb2JqZWN0IGluc3RhbmNlb2YgJE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZi5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWlzLXByb3RvdHlwZS1vZi5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIik7Cgptb2R1bGUuZXhwb3J0cyA9IHVuY3VycnlUaGlzKHt9LmlzUHJvdG90eXBlT2YpOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiKTsKdmFyIGhhc093biA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5LmpzIik7CnZhciB0b0luZGV4ZWRPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIik7CnZhciBpbmRleE9mID0gKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiKS5pbmRleE9mKTsKdmFyIGhpZGRlbktleXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIik7Cgp2YXIgcHVzaCA9IHVuY3VycnlUaGlzKFtdLnB1c2gpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBuYW1lcykgewogIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7CiAgdmFyIGkgPSAwOwogIHZhciByZXN1bHQgPSBbXTsKICB2YXIga2V5OwogIGZvciAoa2V5IGluIE8pICFoYXNPd24oaGlkZGVuS2V5cywga2V5KSAmJiBoYXNPd24oTywga2V5KSAmJiBwdXNoKHJlc3VsdCwga2V5KTsKICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzCiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXNPd24oTywga2V5ID0gbmFtZXNbaSsrXSkpIHsKICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCBwdXNoKHJlc3VsdCwga2V5KTsKICB9CiAgcmV0dXJuIHJlc3VsdDsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1rZXlzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIGludGVybmFsT2JqZWN0S2V5cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiKTsKdmFyIGVudW1CdWdLZXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2VudW0tYnVnLWtleXMuanMiKTsKCi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXMKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1rZXlzIC0tIHNhZmUKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHsKICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4gewoKInVzZSBzdHJpY3QiOwoKdmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlOwovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXMvbm8tb2JqZWN0LWdldG93bnByb3BlcnR5ZGVzY3JpcHRvciAtLSBzYWZlCnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOwoKLy8gTmFzaG9ybiB+IEpESzggYnVnCnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhJHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpOwoKLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvbgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGUKZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7CiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7CiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7Cn0gOiAkcHJvcGVydHlJc0VudW1lcmFibGU7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvIC0tIHNhZmUgKi8KdmFyIHVuY3VycnlUaGlzQWNjZXNzb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLWFjY2Vzc29yICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMtYWNjZXNzb3IuanMiKTsKdmFyIGFuT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2FuLW9iamVjdCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIik7CnZhciBhUG9zc2libGVQcm90b3R5cGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIik7CgovLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2YKLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuCi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3Qtc2V0cHJvdG90eXBlb2YgLS0gc2FmZQptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7CiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7CiAgdmFyIHRlc3QgPSB7fTsKICB2YXIgc2V0dGVyOwogIHRyeSB7CiAgICBzZXR0ZXIgPSB1bmN1cnJ5VGhpc0FjY2Vzc29yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nLCAnc2V0Jyk7CiAgICBzZXR0ZXIodGVzdCwgW10pOwogICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7CiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfQogIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykgewogICAgYW5PYmplY3QoTyk7CiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pOwogICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIoTywgcHJvdG8pOwogICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvOwogICAgcmV0dXJuIE87CiAgfTsKfSgpIDogdW5kZWZpbmVkKTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cgp2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIik7CnZhciBjbGFzc29mID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NsYXNzb2YgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NsYXNzb2YuanMiKTsKCi8vIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QgaW1wbGVtZW50YXRpb24KLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nCm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIik7CnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIpOwp2YXIgaXNPYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1vYmplY3QuanMiKTsKCnZhciAkVHlwZUVycm9yID0gVHlwZUVycm9yOwoKLy8gYE9yZGluYXJ5VG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvbgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9yZGluYXJ5dG9wcmltaXRpdmUKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHsKICB2YXIgZm4sIHZhbDsKICBpZiAocHJlZiA9PT0gJ3N0cmluZycgJiYgaXNDYWxsYWJsZShmbiA9IGlucHV0LnRvU3RyaW5nKSAmJiAhaXNPYmplY3QodmFsID0gY2FsbChmbiwgaW5wdXQpKSkgcmV0dXJuIHZhbDsKICBpZiAoaXNDYWxsYWJsZShmbiA9IGlucHV0LnZhbHVlT2YpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsOwogIGlmIChwcmVmICE9PSAnc3RyaW5nJyAmJiBpc0NhbGxhYmxlKGZuID0gaW5wdXQudG9TdHJpbmcpICYmICFpc09iamVjdCh2YWwgPSBjYWxsKGZuLCBpbnB1dCkpKSByZXR1cm4gdmFsOwogIHRocm93ICRUeXBlRXJyb3IoIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZSIpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3BhdGguanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3BhdGguanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7Cgptb2R1bGUuZXhwb3J0cyA9IHt9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIGlzTnVsbE9yVW5kZWZpbmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLW51bGwtb3ItdW5kZWZpbmVkICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1udWxsLW9yLXVuZGVmaW5lZC5qcyIpOwoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7CgovLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZQptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogIGlmIChpc051bGxPclVuZGVmaW5lZChpdCkpIHRocm93ICRUeXBlRXJyb3IoIkNhbid0IGNhbGwgbWV0aG9kIG9uICIgKyBpdCk7CiAgcmV0dXJuIGl0Owp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tc3RyaW5nLXRhZy1zdXBwb3J0LmpzIik7CnZhciBkZWZpbmVQcm9wZXJ0eSA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIpLmYpOwp2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5LmpzIik7CnZhciBoYXNPd24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIpOwp2YXIgdG9TdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIpOwp2YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIpOwoKdmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMsIFNFVF9NRVRIT0QpIHsKICBpZiAoaXQpIHsKICAgIHZhciB0YXJnZXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZTsKICAgIGlmICghaGFzT3duKHRhcmdldCwgVE9fU1RSSU5HX1RBRykpIHsKICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTsKICAgIH0KICAgIGlmIChTRVRfTUVUSE9EICYmICFUT19TVFJJTkdfVEFHX1NVUFBPUlQpIHsKICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRhcmdldCwgJ3RvU3RyaW5nJywgdG9TdHJpbmcpOwogICAgfQogIH0KfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zaGFyZWQta2V5LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zaGFyZWQta2V5LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NoYXJlZCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLmpzIik7CnZhciB1aWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdWlkICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy91aWQuanMiKTsKCnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHsKICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3NoYXJlZC1zdG9yZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2dsb2JhbCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZ2xvYmFsLmpzIik7CnZhciBkZWZpbmVHbG9iYWxQcm9wZXJ0eSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kZWZpbmUtZ2xvYmFsLXByb3BlcnR5LmpzIik7Cgp2YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7CnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IGRlZmluZUdsb2JhbFByb3BlcnR5KFNIQVJFRCwge30pOwoKbW9kdWxlLmV4cG9ydHMgPSBzdG9yZTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zaGFyZWQuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBJU19QVVJFID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLXB1cmUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLXB1cmUuanMiKTsKdmFyIHN0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIik7CgoobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pOwp9KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7CiAgdmVyc2lvbjogJzMuMzAuMCcsCiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLAogIGNvcHlyaWdodDogJ8KpIDIwMTQtMjAyMyBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KScsCiAgbGljZW5zZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2Jsb2IvdjMuMzAuMC9MSUNFTlNFJywKICBzb3VyY2U6ICdodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcycKfSk7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIHVuY3VycnlUaGlzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzLmpzIik7CnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHkgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHkuanMiKTsKdmFyIHRvU3RyaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLXN0cmluZyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tc3RyaW5nLmpzIik7CnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIik7Cgp2YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTsKdmFyIGNoYXJDb2RlQXQgPSB1bmN1cnJ5VGhpcygnJy5jaGFyQ29kZUF0KTsKdmFyIHN0cmluZ1NsaWNlID0gdW5jdXJyeVRoaXMoJycuc2xpY2UpOwoKdmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykgewogIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykgewogICAgdmFyIFMgPSB0b1N0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7CiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXJPckluZmluaXR5KHBvcyk7CiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoOwogICAgdmFyIGZpcnN0LCBzZWNvbmQ7CiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkOwogICAgZmlyc3QgPSBjaGFyQ29kZUF0KFMsIHBvc2l0aW9uKTsKICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemUKICAgICAgfHwgKHNlY29uZCA9IGNoYXJDb2RlQXQoUywgcG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGCiAgICAgICAgPyBDT05WRVJUX1RPX1NUUklORwogICAgICAgICAgPyBjaGFyQXQoUywgcG9zaXRpb24pCiAgICAgICAgICA6IGZpcnN0CiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORwogICAgICAgICAgPyBzdHJpbmdTbGljZShTLCBwb3NpdGlvbiwgcG9zaXRpb24gKyAyKQogICAgICAgICAgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwOwogIH07Cn07Cgptb2R1bGUuZXhwb3J0cyA9IHsKICAvLyBgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdGAgbWV0aG9kCiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmNvZGVwb2ludGF0CiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLAogIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2QKICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9TdHJpbmcucHJvdG90eXBlLmF0CiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSkKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zdHJpbmctcHVueWNvZGUtdG8tYXNjaWkuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCi8vIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9iZXN0aWVqcy9wdW55Y29kZS5qcy9ibG9iL21hc3Rlci9wdW55Y29kZS5qcwp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiKTsKCnZhciBtYXhJbnQgPSAyMTQ3NDgzNjQ3OyAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xCnZhciBiYXNlID0gMzY7CnZhciB0TWluID0gMTsKdmFyIHRNYXggPSAyNjsKdmFyIHNrZXcgPSAzODsKdmFyIGRhbXAgPSA3MDA7CnZhciBpbml0aWFsQmlhcyA9IDcyOwp2YXIgaW5pdGlhbE4gPSAxMjg7IC8vIDB4ODAKdmFyIGRlbGltaXRlciA9ICctJzsgLy8gJ1x4MkQnCnZhciByZWdleE5vbkFTQ0lJID0gL1teXDAtXHUwMDdFXS87IC8vIG5vbi1BU0NJSSBjaGFycwp2YXIgcmVnZXhTZXBhcmF0b3JzID0gL1suXHUzMDAyXHVGRjBFXHVGRjYxXS9nOyAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzCnZhciBPVkVSRkxPV19FUlJPUiA9ICdPdmVyZmxvdzogaW5wdXQgbmVlZHMgd2lkZXIgaW50ZWdlcnMgdG8gcHJvY2Vzcyc7CnZhciBiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW47Cgp2YXIgJFJhbmdlRXJyb3IgPSBSYW5nZUVycm9yOwp2YXIgZXhlYyA9IHVuY3VycnlUaGlzKHJlZ2V4U2VwYXJhdG9ycy5leGVjKTsKdmFyIGZsb29yID0gTWF0aC5mbG9vcjsKdmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7CnZhciBjaGFyQ29kZUF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckNvZGVBdCk7CnZhciBqb2luID0gdW5jdXJyeVRoaXMoW10uam9pbik7CnZhciBwdXNoID0gdW5jdXJyeVRoaXMoW10ucHVzaCk7CnZhciByZXBsYWNlID0gdW5jdXJyeVRoaXMoJycucmVwbGFjZSk7CnZhciBzcGxpdCA9IHVuY3VycnlUaGlzKCcnLnNwbGl0KTsKdmFyIHRvTG93ZXJDYXNlID0gdW5jdXJyeVRoaXMoJycudG9Mb3dlckNhc2UpOwoKLyoqCiAqIENyZWF0ZXMgYW4gYXJyYXkgY29udGFpbmluZyB0aGUgbnVtZXJpYyBjb2RlIHBvaW50cyBvZiBlYWNoIFVuaWNvZGUKICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LAogKiB0aGlzIGZ1bmN0aW9uIHdpbGwgY29udmVydCBhIHBhaXIgb2Ygc3Vycm9nYXRlIGhhbHZlcyAoZWFjaCBvZiB3aGljaAogKiBVQ1MtMiBleHBvc2VzIGFzIHNlcGFyYXRlIGNoYXJhY3RlcnMpIGludG8gYSBzaW5nbGUgY29kZSBwb2ludCwKICogbWF0Y2hpbmcgVVRGLTE2LgogKi8KdmFyIHVjczJkZWNvZGUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7CiAgdmFyIG91dHB1dCA9IFtdOwogIHZhciBjb3VudGVyID0gMDsKICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDsKICB3aGlsZSAoY291bnRlciA8IGxlbmd0aCkgewogICAgdmFyIHZhbHVlID0gY2hhckNvZGVBdChzdHJpbmcsIGNvdW50ZXIrKyk7CiAgICBpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7CiAgICAgIC8vIEl0J3MgYSBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXIuCiAgICAgIHZhciBleHRyYSA9IGNoYXJDb2RlQXQoc3RyaW5nLCBjb3VudGVyKyspOwogICAgICBpZiAoKGV4dHJhICYgMHhGQzAwKSA9PSAweERDMDApIHsgLy8gTG93IHN1cnJvZ2F0ZS4KICAgICAgICBwdXNoKG91dHB1dCwgKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvLyBJdCdzIGFuIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZQogICAgICAgIC8vIG5leHQgY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyLgogICAgICAgIHB1c2gob3V0cHV0LCB2YWx1ZSk7CiAgICAgICAgY291bnRlci0tOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBwdXNoKG91dHB1dCwgdmFsdWUpOwogICAgfQogIH0KICByZXR1cm4gb3V0cHV0Owp9OwoKLyoqCiAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC4KICovCnZhciBkaWdpdFRvQmFzaWMgPSBmdW5jdGlvbiAoZGlnaXQpIHsKICAvLyAgMC4uMjUgbWFwIHRvIEFTQ0lJIGEuLnogb3IgQS4uWgogIC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOQogIHJldHVybiBkaWdpdCArIDIyICsgNzUgKiAoZGlnaXQgPCAyNik7Cn07CgovKioKICogQmlhcyBhZGFwdGF0aW9uIGZ1bmN0aW9uIGFzIHBlciBzZWN0aW9uIDMuNCBvZiBSRkMgMzQ5Mi4KICogaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzM0OTIjc2VjdGlvbi0zLjQKICovCnZhciBhZGFwdCA9IGZ1bmN0aW9uIChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHsKICB2YXIgayA9IDA7CiAgZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTsKICBkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7CiAgd2hpbGUgKGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMSkgewogICAgZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pOwogICAgayArPSBiYXNlOwogIH0KICByZXR1cm4gZmxvb3IoayArIChiYXNlTWludXNUTWluICsgMSkgKiBkZWx0YSAvIChkZWx0YSArIHNrZXcpKTsKfTsKCi8qKgogKiBDb252ZXJ0cyBhIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMgKGUuZy4gYSBkb21haW4gbmFtZSBsYWJlbCkgdG8gYQogKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLgogKi8KdmFyIGVuY29kZSA9IGZ1bmN0aW9uIChpbnB1dCkgewogIHZhciBvdXRwdXQgPSBbXTsKCiAgLy8gQ29udmVydCB0aGUgaW5wdXQgaW4gVUNTLTIgdG8gYW4gYXJyYXkgb2YgVW5pY29kZSBjb2RlIHBvaW50cy4KICBpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpOwoKICAvLyBDYWNoZSB0aGUgbGVuZ3RoLgogIHZhciBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDsKCiAgLy8gSW5pdGlhbGl6ZSB0aGUgc3RhdGUuCiAgdmFyIG4gPSBpbml0aWFsTjsKICB2YXIgZGVsdGEgPSAwOwogIHZhciBiaWFzID0gaW5pdGlhbEJpYXM7CiAgdmFyIGksIGN1cnJlbnRWYWx1ZTsKCiAgLy8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50cy4KICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHsKICAgIGN1cnJlbnRWYWx1ZSA9IGlucHV0W2ldOwogICAgaWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHsKICAgICAgcHVzaChvdXRwdXQsIGZyb21DaGFyQ29kZShjdXJyZW50VmFsdWUpKTsKICAgIH0KICB9CgogIHZhciBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7IC8vIG51bWJlciBvZiBiYXNpYyBjb2RlIHBvaW50cy4KICB2YXIgaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aDsgLy8gbnVtYmVyIG9mIGNvZGUgcG9pbnRzIHRoYXQgaGF2ZSBiZWVuIGhhbmRsZWQ7CgogIC8vIEZpbmlzaCB0aGUgYmFzaWMgc3RyaW5nIHdpdGggYSBkZWxpbWl0ZXIgdW5sZXNzIGl0J3MgZW1wdHkuCiAgaWYgKGJhc2ljTGVuZ3RoKSB7CiAgICBwdXNoKG91dHB1dCwgZGVsaW1pdGVyKTsKICB9CgogIC8vIE1haW4gZW5jb2RpbmcgbG9vcDoKICB3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkgewogICAgLy8gQWxsIG5vbi1iYXNpYyBjb2RlIHBvaW50cyA8IG4gaGF2ZSBiZWVuIGhhbmRsZWQgYWxyZWFkeS4gRmluZCB0aGUgbmV4dCBsYXJnZXIgb25lOgogICAgdmFyIG0gPSBtYXhJbnQ7CiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHsKICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07CiAgICAgIGlmIChjdXJyZW50VmFsdWUgPj0gbiAmJiBjdXJyZW50VmFsdWUgPCBtKSB7CiAgICAgICAgbSA9IGN1cnJlbnRWYWx1ZTsKICAgICAgfQogICAgfQoKICAgIC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPiwgYnV0IGd1YXJkIGFnYWluc3Qgb3ZlcmZsb3cuCiAgICB2YXIgaGFuZGxlZENQQ291bnRQbHVzT25lID0gaGFuZGxlZENQQ291bnQgKyAxOwogICAgaWYgKG0gLSBuID4gZmxvb3IoKG1heEludCAtIGRlbHRhKSAvIGhhbmRsZWRDUENvdW50UGx1c09uZSkpIHsKICAgICAgdGhyb3cgJFJhbmdlRXJyb3IoT1ZFUkZMT1dfRVJST1IpOwogICAgfQoKICAgIGRlbHRhICs9IChtIC0gbikgKiBoYW5kbGVkQ1BDb3VudFBsdXNPbmU7CiAgICBuID0gbTsKCiAgICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHsKICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07CiAgICAgIGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHsKICAgICAgICB0aHJvdyAkUmFuZ2VFcnJvcihPVkVSRkxPV19FUlJPUik7CiAgICAgIH0KICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7CiAgICAgICAgLy8gUmVwcmVzZW50IGRlbHRhIGFzIGEgZ2VuZXJhbGl6ZWQgdmFyaWFibGUtbGVuZ3RoIGludGVnZXIuCiAgICAgICAgdmFyIHEgPSBkZWx0YTsKICAgICAgICB2YXIgayA9IGJhc2U7CiAgICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICAgIHZhciB0ID0gayA8PSBiaWFzID8gdE1pbiA6IChrID49IGJpYXMgKyB0TWF4ID8gdE1heCA6IGsgLSBiaWFzKTsKICAgICAgICAgIGlmIChxIDwgdCkgYnJlYWs7CiAgICAgICAgICB2YXIgcU1pbnVzVCA9IHEgLSB0OwogICAgICAgICAgdmFyIGJhc2VNaW51c1QgPSBiYXNlIC0gdDsKICAgICAgICAgIHB1c2gob3V0cHV0LCBmcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCkpKTsKICAgICAgICAgIHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7CiAgICAgICAgICBrICs9IGJhc2U7CiAgICAgICAgfQoKICAgICAgICBwdXNoKG91dHB1dCwgZnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxKSkpOwogICAgICAgIGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7CiAgICAgICAgZGVsdGEgPSAwOwogICAgICAgIGhhbmRsZWRDUENvdW50Kys7CiAgICAgIH0KICAgIH0KCiAgICBkZWx0YSsrOwogICAgbisrOwogIH0KICByZXR1cm4gam9pbihvdXRwdXQsICcnKTsKfTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlucHV0KSB7CiAgdmFyIGVuY29kZWQgPSBbXTsKICB2YXIgbGFiZWxzID0gc3BsaXQocmVwbGFjZSh0b0xvd2VyQ2FzZShpbnB1dCksIHJlZ2V4U2VwYXJhdG9ycywgJ1x1MDAyRScpLCAnLicpOwogIHZhciBpLCBsYWJlbDsKICBmb3IgKGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7CiAgICBsYWJlbCA9IGxhYmVsc1tpXTsKICAgIHB1c2goZW5jb2RlZCwgZXhlYyhyZWdleE5vbkFTQ0lJLCBsYWJlbCkgPyAneG4tLScgKyBlbmNvZGUobGFiZWwpIDogbGFiZWwpOwogIH0KICByZXR1cm4gam9pbihlbmNvZGVkLCAnLicpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24uanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24uanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCi8qIGVzbGludC1kaXNhYmxlIGVzL25vLXN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqLwp2YXIgVjhfVkVSU0lPTiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbiAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZW5naW5lLXY4LXZlcnNpb24uanMiKTsKdmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2ZhaWxzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mYWlscy5qcyIpOwoKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1nZXRvd25wcm9wZXJ0eXN5bWJvbHMgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmcKbW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHsKICB2YXIgc3ltYm9sID0gU3ltYm9sKCk7CiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb24KICAvLyBgZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzYCBwb2x5ZmlsbCBzeW1ib2xzIGNvbnZlcnRlZCB0byBvYmplY3QgYXJlIG5vdCBTeW1ib2wgaW5zdGFuY2VzCiAgcmV0dXJuICFTdHJpbmcoc3ltYm9sKSB8fCAhKE9iamVjdChzeW1ib2wpIGluc3RhbmNlb2YgU3ltYm9sKSB8fAogICAgLy8gQ2hyb21lIDM4LTQwIHN5bWJvbHMgYXJlIG5vdCBpbmhlcml0ZWQgZnJvbSBET00gY29sbGVjdGlvbnMgcHJvdG90eXBlcyB0byBpbnN0YW5jZXMKICAgICFTeW1ib2wuc2hhbSAmJiBWOF9WRVJTSU9OICYmIFY4X1ZFUlNJT04gPCA0MTsKfSk7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHkgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHkuanMiKTsKCnZhciBtYXggPSBNYXRoLm1heDsKdmFyIG1pbiA9IE1hdGgubWluOwoKLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6Ci8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS4KLy8gSWYgaW50ZWdlciA8IDAsIGxldCByZXN1bHQgYmUgbWF4KChsZW5ndGggKyBpbnRlZ2VyKSwgMCk7IGVsc2UgbGV0IHJlc3VsdCBiZSBtaW4oaW50ZWdlciwgbGVuZ3RoKS4KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkgewogIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyT3JJbmZpbml0eShpbmRleCk7CiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzCnZhciBJbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIpOwp2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIpOwoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gSW5kZXhlZE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGl0KSk7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8taW50ZWdlci1vci1pbmZpbml0eS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIHRydW5jID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL21hdGgtdHJ1bmMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL21hdGgtdHJ1bmMuanMiKTsKCi8vIGBUb0ludGVnZXJPckluZmluaXR5YCBhYnN0cmFjdCBvcGVyYXRpb24KLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJvcmluZmluaXR5Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgdmFyIG51bWJlciA9ICthcmd1bWVudDsKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlIC0tIE5hTiBjaGVjawogIHJldHVybiBudW1iZXIgIT09IG51bWJlciB8fCBudW1iZXIgPT09IDAgPyAwIDogdHJ1bmMobnVtYmVyKTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1sZW5ndGguanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tbGVuZ3RoLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciB0b0ludGVnZXJPckluZmluaXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHkgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLWludGVnZXItb3ItaW5maW5pdHkuanMiKTsKCnZhciBtaW4gPSBNYXRoLm1pbjsKCi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9sZW5ndGgKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlck9ySW5maW5pdHkoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTEKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1vYmplY3QuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlLmpzIik7Cgp2YXIgJE9iamVjdCA9IE9iamVjdDsKCi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9vYmplY3QKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICByZXR1cm4gJE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIik7CnZhciBpc09iamVjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1vYmplY3QgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIpOwp2YXIgaXNTeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtc3ltYm9sICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1zeW1ib2wuanMiKTsKdmFyIGdldE1ldGhvZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nZXQtbWV0aG9kICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nZXQtbWV0aG9kLmpzIik7CnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29yZGluYXJ5LXRvLXByaW1pdGl2ZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb3JkaW5hcnktdG8tcHJpbWl0aXZlLmpzIik7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIik7Cgp2YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjsKdmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTsKCi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtdG9wcmltaXRpdmUKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5wdXQsIHByZWYpIHsKICBpZiAoIWlzT2JqZWN0KGlucHV0KSB8fCBpc1N5bWJvbChpbnB1dCkpIHJldHVybiBpbnB1dDsKICB2YXIgZXhvdGljVG9QcmltID0gZ2V0TWV0aG9kKGlucHV0LCBUT19QUklNSVRJVkUpOwogIHZhciByZXN1bHQ7CiAgaWYgKGV4b3RpY1RvUHJpbSkgewogICAgaWYgKHByZWYgPT09IHVuZGVmaW5lZCkgcHJlZiA9ICdkZWZhdWx0JzsKICAgIHJlc3VsdCA9IGNhbGwoZXhvdGljVG9QcmltLCBpbnB1dCwgcHJlZik7CiAgICBpZiAoIWlzT2JqZWN0KHJlc3VsdCkgfHwgaXNTeW1ib2wocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDsKICAgIHRocm93ICRUeXBlRXJyb3IoIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZSIpOwogIH0KICBpZiAocHJlZiA9PT0gdW5kZWZpbmVkKSBwcmVmID0gJ251bWJlcic7CiAgcmV0dXJuIG9yZGluYXJ5VG9QcmltaXRpdmUoaW5wdXQsIHByZWYpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLXByb3BlcnR5LWtleS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1wcm9wZXJ0eS1rZXkuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIHRvUHJpbWl0aXZlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlLmpzIik7CnZhciBpc1N5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pcy1zeW1ib2wgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2lzLXN5bWJvbC5qcyIpOwoKLy8gYFRvUHJvcGVydHlLZXlgIGFic3RyYWN0IG9wZXJhdGlvbgovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvcHJvcGVydHlrZXkKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHsKICB2YXIga2V5ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsICdzdHJpbmcnKTsKICByZXR1cm4gaXNTeW1ib2woa2V5KSA/IGtleSA6IGtleSArICcnOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiKTsKCnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpOwp2YXIgdGVzdCA9IHt9OwoKdGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JzsKCm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdG8tc3RyaW5nLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLXN0cmluZy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgY2xhc3NvZiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9jbGFzc29mICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9jbGFzc29mLmpzIik7Cgp2YXIgJFN0cmluZyA9IFN0cmluZzsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7CiAgaWYgKGNsYXNzb2YoYXJndW1lbnQpID09PSAnU3ltYm9sJykgdGhyb3cgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCBhIFN5bWJvbCB2YWx1ZSB0byBhIHN0cmluZycpOwogIHJldHVybiAkU3RyaW5nKGFyZ3VtZW50KTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90cnktdG8tc3RyaW5nLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90cnktdG8tc3RyaW5nLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKdmFyICRTdHJpbmcgPSBTdHJpbmc7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkgewogIHRyeSB7CiAgICByZXR1cm4gJFN0cmluZyhhcmd1bWVudCk7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJldHVybiAnT2JqZWN0JzsKICB9Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdWlkLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3VpZC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiKTsKCnZhciBpZCA9IDA7CnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTsKdmFyIHRvU3RyaW5nID0gdW5jdXJyeVRoaXMoMS4wLnRvU3RyaW5nKTsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkgewogIHJldHVybiAnU3ltYm9sKCcgKyAoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgdG9TdHJpbmcoKytpZCArIHBvc3RmaXgsIDM2KTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy91cmwtY29uc3RydWN0b3ItZGV0ZWN0aW9uLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy91cmwtY29uc3RydWN0b3ItZGV0ZWN0aW9uLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgZmFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZmFpbHMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2ZhaWxzLmpzIik7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIik7CnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kZXNjcmlwdG9ycyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiKTsKdmFyIElTX1BVUkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtcHVyZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtcHVyZS5qcyIpOwoKdmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpOwoKbW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkgewogIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSB1bmljb3JuL3JlbGF0aXZlLXVybC1zdHlsZSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZwogIHZhciB1cmwgPSBuZXcgVVJMKCdiP2E9MSZiPTImYz0zJywgJ2h0dHA6Ly9hJyk7CiAgdmFyIHNlYXJjaFBhcmFtcyA9IHVybC5zZWFyY2hQYXJhbXM7CiAgdmFyIHJlc3VsdCA9ICcnOwogIHVybC5wYXRobmFtZSA9ICdjJTIwZCc7CiAgc2VhcmNoUGFyYW1zLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHsKICAgIHNlYXJjaFBhcmFtc1snZGVsZXRlJ10oJ2InKTsKICAgIHJlc3VsdCArPSBrZXkgKyB2YWx1ZTsKICB9KTsKICByZXR1cm4gKElTX1BVUkUgJiYgIXVybC50b0pTT04pCiAgICB8fCAoIXNlYXJjaFBhcmFtcy5zaXplICYmIChJU19QVVJFIHx8ICFERVNDUklQVE9SUykpCiAgICB8fCAhc2VhcmNoUGFyYW1zLnNvcnQKICAgIHx8IHVybC5ocmVmICE9PSAnaHR0cDovL2EvYyUyMGQ/YT0xJmM9MycKICAgIHx8IHNlYXJjaFBhcmFtcy5nZXQoJ2MnKSAhPT0gJzMnCiAgICB8fCBTdHJpbmcobmV3IFVSTFNlYXJjaFBhcmFtcygnP2E9MScpKSAhPT0gJ2E9MScKICAgIHx8ICFzZWFyY2hQYXJhbXNbSVRFUkFUT1JdCiAgICAvLyB0aHJvd3MgaW4gRWRnZQogICAgfHwgbmV3IFVSTCgnaHR0cHM6Ly9hQGInKS51c2VybmFtZSAhPT0gJ2EnCiAgICB8fCBuZXcgVVJMU2VhcmNoUGFyYW1zKG5ldyBVUkxTZWFyY2hQYXJhbXMoJ2E9YicpKS5nZXQoJ2EnKSAhPT0gJ2InCiAgICAvLyBub3QgcHVueWNvZGVkIGluIEVkZ2UKICAgIHx8IG5ldyBVUkwoJ2h0dHA6Ly/RgtC10YHRgicpLmhvc3QgIT09ICd4bi0tZTFheWJjJwogICAgLy8gbm90IGVzY2FwZWQgaW4gQ2hyb21lIDYyLQogICAgfHwgbmV3IFVSTCgnaHR0cDovL2Ej0LEnKS5oYXNoICE9PSAnIyVEMCVCMScKICAgIC8vIGZhaWxzIGluIENocm9tZSA2Ni0KICAgIHx8IHJlc3VsdCAhPT0gJ2ExYzMnCiAgICAvLyB0aHJvd3MgaW4gU2FmYXJpCiAgICB8fCBuZXcgVVJMKCdodHRwOi8veCcsIHVuZGVmaW5lZCkuaG9zdCAhPT0gJ3gnOwp9KTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKLyogZXNsaW50LWRpc2FibGUgZXMvbm8tc3ltYm9sIC0tIHJlcXVpcmVkIGZvciB0ZXN0aW5nICovCnZhciBOQVRJVkVfU1lNQk9MID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24gKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24uanMiKTsKCm1vZHVsZS5leHBvcnRzID0gTkFUSVZFX1NZTUJPTAogICYmICFTeW1ib2wuc2hhbQogICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdjgtcHJvdG90eXBlLWRlZmluZS1idWcuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy92OC1wcm90b3R5cGUtZGVmaW5lLWJ1Zy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kZXNjcmlwdG9ycyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiKTsKdmFyIGZhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2ZhaWxzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mYWlscy5qcyIpOwoKLy8gVjggfiBDaHJvbWUgMzYtCi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMzMzQKbW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7CiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVzL25vLW9iamVjdC1kZWZpbmVwcm9wZXJ0eSAtLSByZXF1aXJlZCBmb3IgdGVzdGluZwogIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAncHJvdG90eXBlJywgewogICAgdmFsdWU6IDQyLAogICAgd3JpdGFibGU6IGZhbHNlCiAgfSkucHJvdG90eXBlICE9IDQyOwp9KTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy92YWxpZGF0ZS1hcmd1bWVudHMtbGVuZ3RoLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKdmFyICRUeXBlRXJyb3IgPSBUeXBlRXJyb3I7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChwYXNzZWQsIHJlcXVpcmVkKSB7CiAgaWYgKHBhc3NlZCA8IHJlcXVpcmVkKSB0aHJvdyAkVHlwZUVycm9yKCdOb3QgZW5vdWdoIGFyZ3VtZW50cycpOwogIHJldHVybiBwYXNzZWQ7Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvd2Vhay1tYXAtYmFzaWMtZGV0ZWN0aW9uLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3dlYWstbWFwLWJhc2ljLWRldGVjdGlvbi5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgZ2xvYmFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2dsb2JhbCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZ2xvYmFsLmpzIik7CnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIpOwoKdmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDsKCm1vZHVsZS5leHBvcnRzID0gaXNDYWxsYWJsZShXZWFrTWFwKSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoU3RyaW5nKFdlYWtNYXApKTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nbG9iYWwgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dsb2JhbC5qcyIpOwp2YXIgc2hhcmVkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NoYXJlZCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc2hhcmVkLmpzIik7CnZhciBoYXNPd24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaGFzLW93bi1wcm9wZXJ0eS5qcyIpOwp2YXIgdWlkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3VpZCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdWlkLmpzIik7CnZhciBOQVRJVkVfU1lNQk9MID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24gKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3N5bWJvbC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24uanMiKTsKdmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIpOwoKdmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7CnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpOwp2YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2xbJ2ZvciddIHx8IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgaWYgKCFoYXNPd24oV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkgewogICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gTkFUSVZFX1NZTUJPTCAmJiBoYXNPd24oU3ltYm9sLCBuYW1lKQogICAgICA/IFN5bWJvbFtuYW1lXQogICAgICA6IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTsKICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cgp2YXIgdG9JbmRleGVkT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIpOwp2YXIgYWRkVG9VbnNjb3BhYmxlcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIpOwp2YXIgSXRlcmF0b3JzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0b3JzLmpzIik7CnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIpOwp2YXIgZGVmaW5lUHJvcGVydHkgPSAoX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiKS5mKTsKdmFyIGRlZmluZUl0ZXJhdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lLmpzIik7CnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QuanMiKTsKdmFyIElTX1BVUkUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaXMtcHVyZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtcHVyZS5qcyIpOwp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIik7Cgp2YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InOwp2YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0Owp2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTsKCi8vIGBBcnJheS5wcm90b3R5cGUuZW50cmllc2AgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXMKLy8gYEFycmF5LnByb3RvdHlwZS5rZXlzYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5cwovLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlcwovLyBgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvcgovLyBgQ3JlYXRlQXJyYXlJdGVyYXRvcmAgaW50ZXJuYWwgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvcgptb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHsKICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHsKICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLAogICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXQKICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleAogICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kCiAgfSk7Ci8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJWFycmF5aXRlcmF0b3Jwcm90b3R5cGUlLm5leHQKfSwgZnVuY3Rpb24gKCkgewogIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7CiAgdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDsKICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7CiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKzsKICBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7CiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7CiAgICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdCh1bmRlZmluZWQsIHRydWUpOwogIH0KICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KGluZGV4LCBmYWxzZSk7CiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0KHRhcmdldFtpbmRleF0sIGZhbHNlKTsKICByZXR1cm4gY3JlYXRlSXRlclJlc3VsdE9iamVjdChbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBmYWxzZSk7Cn0sICd2YWx1ZXMnKTsKCi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJQovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0Ci8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0CnZhciB2YWx1ZXMgPSBJdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5OwoKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlcwphZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7CmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpOwphZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7CgovLyBWOCB+IENocm9tZSA0NS0gYnVnCmlmICghSVNfUFVSRSAmJiBERVNDUklQVE9SUyAmJiB2YWx1ZXMubmFtZSAhPT0gJ3ZhbHVlcycpIHRyeSB7CiAgZGVmaW5lUHJvcGVydHkodmFsdWVzLCAnbmFtZScsIHsgdmFsdWU6ICd2YWx1ZXMnIH0pOwp9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzLmdsb2JhbC10aGlzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5nbG9iYWwtdGhpcy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCnZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2V4cG9ydCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZXhwb3J0LmpzIik7CnZhciBnbG9iYWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZ2xvYmFsICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9nbG9iYWwuanMiKTsKCi8vIGBnbG9iYWxUaGlzYCBvYmplY3QKLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nbG9iYWx0aGlzCiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogZ2xvYmFsLmdsb2JhbFRoaXMgIT09IGdsb2JhbCB9LCB7CiAgZ2xvYmFsVGhpczogZ2xvYmFsCn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy9lcy5zdHJpbmcuaXRlcmF0b3IuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwoKdmFyIGNoYXJBdCA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIpLmNoYXJBdCk7CnZhciB0b1N0cmluZyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy90by1zdHJpbmcgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3RvLXN0cmluZy5qcyIpOwp2YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiKTsKdmFyIGRlZmluZUl0ZXJhdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWRlZmluZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXRlcmF0b3ItZGVmaW5lLmpzIik7CnZhciBjcmVhdGVJdGVyUmVzdWx0T2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NyZWF0ZS1pdGVyLXJlc3VsdC1vYmplY3QuanMiKTsKCnZhciBTVFJJTkdfSVRFUkFUT1IgPSAnU3RyaW5nIEl0ZXJhdG9yJzsKdmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDsKdmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpOwoKLy8gYFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZAovLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUtQEBpdGVyYXRvcgpkZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHsKICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHsKICAgIHR5cGU6IFNUUklOR19JVEVSQVRPUiwKICAgIHN0cmluZzogdG9TdHJpbmcoaXRlcmF0ZWQpLAogICAgaW5kZXg6IDAKICB9KTsKLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kCi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtJXN0cmluZ2l0ZXJhdG9ycHJvdG90eXBlJS5uZXh0Cn0sIGZ1bmN0aW9uIG5leHQoKSB7CiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTsKICB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nOwogIHZhciBpbmRleCA9IHN0YXRlLmluZGV4OwogIHZhciBwb2ludDsKICBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QodW5kZWZpbmVkLCB0cnVlKTsKICBwb2ludCA9IGNoYXJBdChzdHJpbmcsIGluZGV4KTsKICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7CiAgcmV0dXJuIGNyZWF0ZUl0ZXJSZXN1bHRPYmplY3QocG9pbnQsIGZhbHNlKTsKfSk7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzbmV4dC5nbG9iYWwtdGhpcy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL2VzbmV4dC5nbG9iYWwtdGhpcy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgovLyBUT0RPOiBSZW1vdmUgZnJvbSBgY29yZS1qc0A0YApfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9tb2R1bGVzL2VzLmdsb2JhbC10aGlzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuZ2xvYmFsLXRoaXMuanMiKTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLmNvbnN0cnVjdG9yLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLmNvbnN0cnVjdG9yLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7CgovLyBUT0RPOiBpbiBjb3JlLWpzQDQsIG1vdmUgL21vZHVsZXMvIGRlcGVuZGVuY2llcyB0byBwdWJsaWMgZW50cmllcyBmb3IgYmV0dGVyIG9wdGltaXphdGlvbiBieSB0b29scyBsaWtlIGBwcmVzZXQtZW52YApfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiKTsKdmFyICQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZXhwb3J0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9leHBvcnQuanMiKTsKdmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nbG9iYWwgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dsb2JhbC5qcyIpOwp2YXIgY2FsbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi1jYWxsICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1jYWxsLmpzIik7CnZhciB1bmN1cnJ5VGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLXVuY3VycnktdGhpcy5qcyIpOwp2YXIgREVTQ1JJUFRPUlMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Rlc2NyaXB0b3JzLmpzIik7CnZhciBVU0VfTkFUSVZFX1VSTCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy91cmwtY29uc3RydWN0b3ItZGV0ZWN0aW9uICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy91cmwtY29uc3RydWN0b3ItZGV0ZWN0aW9uLmpzIik7CnZhciBkZWZpbmVCdWlsdEluID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbiAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLmpzIik7CnZhciBkZWZpbmVCdWlsdEluQWNjZXNzb3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluLWFjY2Vzc29yICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3IuanMiKTsKdmFyIGRlZmluZUJ1aWx0SW5zID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbnMuanMiKTsKdmFyIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIpOwp2YXIgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pdGVyYXRvci1jcmVhdGUtY29uc3RydWN0b3IgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2l0ZXJhdG9yLWNyZWF0ZS1jb25zdHJ1Y3Rvci5qcyIpOwp2YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiKTsKdmFyIGFuSW5zdGFuY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FuLWluc3RhbmNlLmpzIik7CnZhciBpc0NhbGxhYmxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLWNhbGxhYmxlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9pcy1jYWxsYWJsZS5qcyIpOwp2YXIgaGFzT3duID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHkgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2hhcy1vd24tcHJvcGVydHkuanMiKTsKdmFyIGJpbmQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQuanMiKTsKdmFyIGNsYXNzb2YgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY2xhc3NvZiAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvY2xhc3NvZi5qcyIpOwp2YXIgYW5PYmplY3QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvYW4tb2JqZWN0ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hbi1vYmplY3QuanMiKTsKdmFyIGlzT2JqZWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2lzLW9iamVjdCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIik7CnZhciAkdG9TdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8tc3RyaW5nICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1zdHJpbmcuanMiKTsKdmFyIGNyZWF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIik7CnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIik7CnZhciBnZXRJdGVyYXRvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nZXQtaXRlcmF0b3IgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1pdGVyYXRvci5qcyIpOwp2YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIpOwp2YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aC5qcyIpOwp2YXIgd2VsbEtub3duU3ltYm9sID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIpOwp2YXIgYXJyYXlTb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2FycmF5LXNvcnQgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FycmF5LXNvcnQuanMiKTsKCnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTsKdmFyIFVSTF9TRUFSQ0hfUEFSQU1TID0gJ1VSTFNlYXJjaFBhcmFtcyc7CnZhciBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiA9IFVSTF9TRUFSQ0hfUEFSQU1TICsgJ0l0ZXJhdG9yJzsKdmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDsKdmFyIGdldEludGVybmFsUGFyYW1zU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNUyk7CnZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUik7Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcy9uby1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yIC0tIHNhZmUKdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CgovLyBBdm9pZCBOb2RlSlMgZXhwZXJpbWVudGFsIHdhcm5pbmcKdmFyIHNhZmVHZXRCdWlsdEluID0gZnVuY3Rpb24gKG5hbWUpIHsKICBpZiAoIURFU0NSSVBUT1JTKSByZXR1cm4gZ2xvYmFsW25hbWVdOwogIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgbmFtZSk7CiAgcmV0dXJuIGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTsKfTsKCnZhciBuYXRpdmVGZXRjaCA9IHNhZmVHZXRCdWlsdEluKCdmZXRjaCcpOwp2YXIgTmF0aXZlUmVxdWVzdCA9IHNhZmVHZXRCdWlsdEluKCdSZXF1ZXN0Jyk7CnZhciBIZWFkZXJzID0gc2FmZUdldEJ1aWx0SW4oJ0hlYWRlcnMnKTsKdmFyIFJlcXVlc3RQcm90b3R5cGUgPSBOYXRpdmVSZXF1ZXN0ICYmIE5hdGl2ZVJlcXVlc3QucHJvdG90eXBlOwp2YXIgSGVhZGVyc1Byb3RvdHlwZSA9IEhlYWRlcnMgJiYgSGVhZGVycy5wcm90b3R5cGU7CnZhciBSZWdFeHAgPSBnbG9iYWwuUmVnRXhwOwp2YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjsKdmFyIGRlY29kZVVSSUNvbXBvbmVudCA9IGdsb2JhbC5kZWNvZGVVUklDb21wb25lbnQ7CnZhciBlbmNvZGVVUklDb21wb25lbnQgPSBnbG9iYWwuZW5jb2RlVVJJQ29tcG9uZW50Owp2YXIgY2hhckF0ID0gdW5jdXJyeVRoaXMoJycuY2hhckF0KTsKdmFyIGpvaW4gPSB1bmN1cnJ5VGhpcyhbXS5qb2luKTsKdmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTsKdmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTsKdmFyIHNoaWZ0ID0gdW5jdXJyeVRoaXMoW10uc2hpZnQpOwp2YXIgc3BsaWNlID0gdW5jdXJyeVRoaXMoW10uc3BsaWNlKTsKdmFyIHNwbGl0ID0gdW5jdXJyeVRoaXMoJycuc3BsaXQpOwp2YXIgc3RyaW5nU2xpY2UgPSB1bmN1cnJ5VGhpcygnJy5zbGljZSk7Cgp2YXIgcGx1cyA9IC9cKy9nOwp2YXIgc2VxdWVuY2VzID0gQXJyYXkoNCk7Cgp2YXIgcGVyY2VudFNlcXVlbmNlID0gZnVuY3Rpb24gKGJ5dGVzKSB7CiAgcmV0dXJuIHNlcXVlbmNlc1tieXRlcyAtIDFdIHx8IChzZXF1ZW5jZXNbYnl0ZXMgLSAxXSA9IFJlZ0V4cCgnKCg/OiVbXFxkYS1mXXsyfSl7JyArIGJ5dGVzICsgJ30pJywgJ2dpJykpOwp9OwoKdmFyIHBlcmNlbnREZWNvZGUgPSBmdW5jdGlvbiAoc2VxdWVuY2UpIHsKICB0cnkgewogICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChzZXF1ZW5jZSk7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHJldHVybiBzZXF1ZW5jZTsKICB9Cn07Cgp2YXIgZGVzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHsKICB2YXIgcmVzdWx0ID0gcmVwbGFjZShpdCwgcGx1cywgJyAnKTsKICB2YXIgYnl0ZXMgPSA0OwogIHRyeSB7CiAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdCk7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIHdoaWxlIChieXRlcykgewogICAgICByZXN1bHQgPSByZXBsYWNlKHJlc3VsdCwgcGVyY2VudFNlcXVlbmNlKGJ5dGVzLS0pLCBwZXJjZW50RGVjb2RlKTsKICAgIH0KICAgIHJldHVybiByZXN1bHQ7CiAgfQp9OwoKdmFyIGZpbmQgPSAvWyEnKCl+XXwlMjAvZzsKCnZhciByZXBsYWNlbWVudHMgPSB7CiAgJyEnOiAnJTIxJywKICAiJyI6ICclMjcnLAogICcoJzogJyUyOCcsCiAgJyknOiAnJTI5JywKICAnfic6ICclN0UnLAogICclMjAnOiAnKycKfTsKCnZhciByZXBsYWNlciA9IGZ1bmN0aW9uIChtYXRjaCkgewogIHJldHVybiByZXBsYWNlbWVudHNbbWF0Y2hdOwp9OwoKdmFyIHNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkgewogIHJldHVybiByZXBsYWNlKGVuY29kZVVSSUNvbXBvbmVudChpdCksIGZpbmQsIHJlcGxhY2VyKTsKfTsKCnZhciBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gSXRlcmF0b3IocGFyYW1zLCBraW5kKSB7CiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7CiAgICB0eXBlOiBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiwKICAgIGl0ZXJhdG9yOiBnZXRJdGVyYXRvcihnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHBhcmFtcykuZW50cmllcyksCiAgICBraW5kOiBraW5kCiAgfSk7Cn0sICdJdGVyYXRvcicsIGZ1bmN0aW9uIG5leHQoKSB7CiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpOwogIHZhciBraW5kID0gc3RhdGUua2luZDsKICB2YXIgc3RlcCA9IHN0YXRlLml0ZXJhdG9yLm5leHQoKTsKICB2YXIgZW50cnkgPSBzdGVwLnZhbHVlOwogIGlmICghc3RlcC5kb25lKSB7CiAgICBzdGVwLnZhbHVlID0ga2luZCA9PT0gJ2tleXMnID8gZW50cnkua2V5IDoga2luZCA9PT0gJ3ZhbHVlcycgPyBlbnRyeS52YWx1ZSA6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXTsKICB9IHJldHVybiBzdGVwOwp9LCB0cnVlKTsKCnZhciBVUkxTZWFyY2hQYXJhbXNTdGF0ZSA9IGZ1bmN0aW9uIChpbml0KSB7CiAgdGhpcy5lbnRyaWVzID0gW107CiAgdGhpcy51cmwgPSBudWxsOwoKICBpZiAoaW5pdCAhPT0gdW5kZWZpbmVkKSB7CiAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHRoaXMucGFyc2VPYmplY3QoaW5pdCk7CiAgICBlbHNlIHRoaXMucGFyc2VRdWVyeSh0eXBlb2YgaW5pdCA9PSAnc3RyaW5nJyA/IGNoYXJBdChpbml0LCAwKSA9PT0gJz8nID8gc3RyaW5nU2xpY2UoaW5pdCwgMSkgOiBpbml0IDogJHRvU3RyaW5nKGluaXQpKTsKICB9Cn07CgpVUkxTZWFyY2hQYXJhbXNTdGF0ZS5wcm90b3R5cGUgPSB7CiAgdHlwZTogVVJMX1NFQVJDSF9QQVJBTVMsCiAgYmluZFVSTDogZnVuY3Rpb24gKHVybCkgewogICAgdGhpcy51cmwgPSB1cmw7CiAgICB0aGlzLnVwZGF0ZSgpOwogIH0sCiAgcGFyc2VPYmplY3Q6IGZ1bmN0aW9uIChvYmplY3QpIHsKICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKG9iamVjdCk7CiAgICB2YXIgaXRlcmF0b3IsIG5leHQsIHN0ZXAsIGVudHJ5SXRlcmF0b3IsIGVudHJ5TmV4dCwgZmlyc3QsIHNlY29uZDsKCiAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHsKICAgICAgaXRlcmF0b3IgPSBnZXRJdGVyYXRvcihvYmplY3QsIGl0ZXJhdG9yTWV0aG9kKTsKICAgICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7CiAgICAgIHdoaWxlICghKHN0ZXAgPSBjYWxsKG5leHQsIGl0ZXJhdG9yKSkuZG9uZSkgewogICAgICAgIGVudHJ5SXRlcmF0b3IgPSBnZXRJdGVyYXRvcihhbk9iamVjdChzdGVwLnZhbHVlKSk7CiAgICAgICAgZW50cnlOZXh0ID0gZW50cnlJdGVyYXRvci5uZXh0OwogICAgICAgIGlmICgKICAgICAgICAgIChmaXJzdCA9IGNhbGwoZW50cnlOZXh0LCBlbnRyeUl0ZXJhdG9yKSkuZG9uZSB8fAogICAgICAgICAgKHNlY29uZCA9IGNhbGwoZW50cnlOZXh0LCBlbnRyeUl0ZXJhdG9yKSkuZG9uZSB8fAogICAgICAgICAgIWNhbGwoZW50cnlOZXh0LCBlbnRyeUl0ZXJhdG9yKS5kb25lCiAgICAgICAgKSB0aHJvdyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHNlcXVlbmNlIHdpdGggbGVuZ3RoIDInKTsKICAgICAgICBwdXNoKHRoaXMuZW50cmllcywgeyBrZXk6ICR0b1N0cmluZyhmaXJzdC52YWx1ZSksIHZhbHVlOiAkdG9TdHJpbmcoc2Vjb25kLnZhbHVlKSB9KTsKICAgICAgfQogICAgfSBlbHNlIGZvciAodmFyIGtleSBpbiBvYmplY3QpIGlmIChoYXNPd24ob2JqZWN0LCBrZXkpKSB7CiAgICAgIHB1c2godGhpcy5lbnRyaWVzLCB7IGtleToga2V5LCB2YWx1ZTogJHRvU3RyaW5nKG9iamVjdFtrZXldKSB9KTsKICAgIH0KICB9LAogIHBhcnNlUXVlcnk6IGZ1bmN0aW9uIChxdWVyeSkgewogICAgaWYgKHF1ZXJ5KSB7CiAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3BsaXQocXVlcnksICcmJyk7CiAgICAgIHZhciBpbmRleCA9IDA7CiAgICAgIHZhciBhdHRyaWJ1dGUsIGVudHJ5OwogICAgICB3aGlsZSAoaW5kZXggPCBhdHRyaWJ1dGVzLmxlbmd0aCkgewogICAgICAgIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaW5kZXgrK107CiAgICAgICAgaWYgKGF0dHJpYnV0ZS5sZW5ndGgpIHsKICAgICAgICAgIGVudHJ5ID0gc3BsaXQoYXR0cmlidXRlLCAnPScpOwogICAgICAgICAgcHVzaCh0aGlzLmVudHJpZXMsIHsKICAgICAgICAgICAga2V5OiBkZXNlcmlhbGl6ZShzaGlmdChlbnRyeSkpLAogICAgICAgICAgICB2YWx1ZTogZGVzZXJpYWxpemUoam9pbihlbnRyeSwgJz0nKSkKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sCiAgc2VyaWFsaXplOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZW50cmllcyA9IHRoaXMuZW50cmllczsKICAgIHZhciByZXN1bHQgPSBbXTsKICAgIHZhciBpbmRleCA9IDA7CiAgICB2YXIgZW50cnk7CiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkgewogICAgICBlbnRyeSA9IGVudHJpZXNbaW5kZXgrK107CiAgICAgIHB1c2gocmVzdWx0LCBzZXJpYWxpemUoZW50cnkua2V5KSArICc9JyArIHNlcmlhbGl6ZShlbnRyeS52YWx1ZSkpOwogICAgfSByZXR1cm4gam9pbihyZXN1bHQsICcmJyk7CiAgfSwKICB1cGRhdGU6IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZW50cmllcy5sZW5ndGggPSAwOwogICAgdGhpcy5wYXJzZVF1ZXJ5KHRoaXMudXJsLnF1ZXJ5KTsKICB9LAogIHVwZGF0ZVVSTDogZnVuY3Rpb24gKCkgewogICAgaWYgKHRoaXMudXJsKSB0aGlzLnVybC51cGRhdGUoKTsKICB9Cn07CgovLyBgVVJMU2VhcmNoUGFyYW1zYCBjb25zdHJ1Y3RvcgovLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2ludGVyZmFjZS11cmxzZWFyY2hwYXJhbXMKdmFyIFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMU2VhcmNoUGFyYW1zKC8qIGluaXQgKi8pIHsKICBhbkluc3RhbmNlKHRoaXMsIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSk7CiAgdmFyIGluaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZDsKICB2YXIgc3RhdGUgPSBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIG5ldyBVUkxTZWFyY2hQYXJhbXNTdGF0ZShpbml0KSk7CiAgaWYgKCFERVNDUklQVE9SUykgdGhpcy5sZW5ndGggPSBzdGF0ZS5lbnRyaWVzLmxlbmd0aDsKfTsKCnZhciBVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUgPSBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3Rvci5wcm90b3R5cGU7CgpkZWZpbmVCdWlsdElucyhVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIHsKICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5hcHBlbmRgIG1ldGhvZAogIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1hcHBlbmQKICBhcHBlbmQ6IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkgewogICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMik7CiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpOwogICAgcHVzaChzdGF0ZS5lbnRyaWVzLCB7IGtleTogJHRvU3RyaW5nKG5hbWUpLCB2YWx1ZTogJHRvU3RyaW5nKHZhbHVlKSB9KTsKICAgIGlmICghREVTQ1JJUFRPUlMpIHRoaXMubGVuZ3RoKys7CiAgICBzdGF0ZS51cGRhdGVVUkwoKTsKICB9LAogIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmRlbGV0ZWAgbWV0aG9kCiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWRlbGV0ZQogICdkZWxldGUnOiBmdW5jdGlvbiAobmFtZSkgewogICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7CiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpOwogICAgdmFyIGVudHJpZXMgPSBzdGF0ZS5lbnRyaWVzOwogICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTsKICAgIHZhciBpbmRleCA9IDA7CiAgICB3aGlsZSAoaW5kZXggPCBlbnRyaWVzLmxlbmd0aCkgewogICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHNwbGljZShlbnRyaWVzLCBpbmRleCwgMSk7CiAgICAgIGVsc2UgaW5kZXgrKzsKICAgIH0KICAgIGlmICghREVTQ1JJUFRPUlMpIHRoaXMubGVuZ3RoID0gZW50cmllcy5sZW5ndGg7CiAgICBzdGF0ZS51cGRhdGVVUkwoKTsKICB9LAogIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmdldGAgbWV0aG9kCiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsc2VhcmNocGFyYW1zLWdldAogIGdldDogZnVuY3Rpb24gZ2V0KG5hbWUpIHsKICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpOwogICAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7CiAgICB2YXIga2V5ID0gJHRvU3RyaW5nKG5hbWUpOwogICAgdmFyIGluZGV4ID0gMDsKICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkgcmV0dXJuIGVudHJpZXNbaW5kZXhdLnZhbHVlOwogICAgfQogICAgcmV0dXJuIG51bGw7CiAgfSwKICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5nZXRBbGxgIG1ldGhvZAogIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybHNlYXJjaHBhcmFtcy1nZXRhbGwKICBnZXRBbGw6IGZ1bmN0aW9uIGdldEFsbChuYW1lKSB7CiAgICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTsKICAgIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzOwogICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTsKICAgIHZhciByZXN1bHQgPSBbXTsKICAgIHZhciBpbmRleCA9IDA7CiAgICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykgewogICAgICBpZiAoZW50cmllc1tpbmRleF0ua2V5ID09PSBrZXkpIHB1c2gocmVzdWx0LCBlbnRyaWVzW2luZGV4XS52YWx1ZSk7CiAgICB9CiAgICByZXR1cm4gcmVzdWx0OwogIH0sCiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaGFzYCBtZXRob2QKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtaGFzCiAgaGFzOiBmdW5jdGlvbiBoYXMobmFtZSkgewogICAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7CiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllczsKICAgIHZhciBrZXkgPSAkdG9TdHJpbmcobmFtZSk7CiAgICB2YXIgaW5kZXggPSAwOwogICAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHsKICAgICAgaWYgKGVudHJpZXNbaW5kZXgrK10ua2V5ID09PSBrZXkpIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwogIH0sCiAgLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc2V0YCBtZXRob2QKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtc2V0CiAgc2V0OiBmdW5jdGlvbiBzZXQobmFtZSwgdmFsdWUpIHsKICAgIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpOwogICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTsKICAgIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllczsKICAgIHZhciBmb3VuZCA9IGZhbHNlOwogICAgdmFyIGtleSA9ICR0b1N0cmluZyhuYW1lKTsKICAgIHZhciB2YWwgPSAkdG9TdHJpbmcodmFsdWUpOwogICAgdmFyIGluZGV4ID0gMDsKICAgIHZhciBlbnRyeTsKICAgIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleF07CiAgICAgIGlmIChlbnRyeS5rZXkgPT09IGtleSkgewogICAgICAgIGlmIChmb3VuZCkgc3BsaWNlKGVudHJpZXMsIGluZGV4LS0sIDEpOwogICAgICAgIGVsc2UgewogICAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgICAgZW50cnkudmFsdWUgPSB2YWw7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgICBpZiAoIWZvdW5kKSBwdXNoKGVudHJpZXMsIHsga2V5OiBrZXksIHZhbHVlOiB2YWwgfSk7CiAgICBpZiAoIURFU0NSSVBUT1JTKSB0aGlzLmxlbmd0aCA9IGVudHJpZXMubGVuZ3RoOwogICAgc3RhdGUudXBkYXRlVVJMKCk7CiAgfSwKICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5zb3J0YCBtZXRob2QKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmxzZWFyY2hwYXJhbXMtc29ydAogIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoKSB7CiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpOwogICAgYXJyYXlTb3J0KHN0YXRlLmVudHJpZXMsIGZ1bmN0aW9uIChhLCBiKSB7CiAgICAgIHJldHVybiBhLmtleSA+IGIua2V5ID8gMSA6IC0xOwogICAgfSk7CiAgICBzdGF0ZS51cGRhdGVVUkwoKTsKICB9LAogIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZAogIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2sgLyogLCB0aGlzQXJnICovKSB7CiAgICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllczsKICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFjaywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogICAgdmFyIGluZGV4ID0gMDsKICAgIHZhciBlbnRyeTsKICAgIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7CiAgICAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTsKICAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTsKICAgIH0KICB9LAogIC8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmtleXNgIG1ldGhvZAogIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7CiAgICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdrZXlzJyk7CiAgfSwKICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZAogIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKCkgewogICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAndmFsdWVzJyk7CiAgfSwKICAvLyBgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2QKICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkgewogICAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAnZW50cmllcycpOwogIH0KfSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pOwoKLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZApkZWZpbmVCdWlsdEluKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgSVRFUkFUT1IsIFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZS5lbnRyaWVzLCB7IG5hbWU6ICdlbnRyaWVzJyB9KTsKCi8vIGBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QKLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmxzZWFyY2hwYXJhbXMtc3RyaW5naWZpY2F0aW9uLWJlaGF2aW9yCmRlZmluZUJ1aWx0SW4oVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHsKICByZXR1cm4gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5zZXJpYWxpemUoKTsKfSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pOwoKLy8gYFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuc2l6ZWAgZ2V0dGVyCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvdXJsL3B1bGwvNzM0CmlmIChERVNDUklQVE9SUykgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFNlYXJjaFBhcmFtc1Byb3RvdHlwZSwgJ3NpemUnLCB7CiAgZ2V0OiBmdW5jdGlvbiBzaXplKCkgewogICAgcmV0dXJuIGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllcy5sZW5ndGg7CiAgfSwKICBjb25maWd1cmFibGU6IHRydWUsCiAgZW51bWVyYWJsZTogdHJ1ZQp9KTsKCnNldFRvU3RyaW5nVGFnKFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLCBVUkxfU0VBUkNIX1BBUkFNUyk7CgokKHsgZ2xvYmFsOiB0cnVlLCBjb25zdHJ1Y3RvcjogdHJ1ZSwgZm9yY2VkOiAhVVNFX05BVElWRV9VUkwgfSwgewogIFVSTFNlYXJjaFBhcmFtczogVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IKfSk7CgovLyBXcmFwIGBmZXRjaGAgYW5kIGBSZXF1ZXN0YCBmb3IgY29ycmVjdCB3b3JrIHdpdGggcG9seWZpbGxlZCBgVVJMU2VhcmNoUGFyYW1zYAppZiAoIVVTRV9OQVRJVkVfVVJMICYmIGlzQ2FsbGFibGUoSGVhZGVycykpIHsKICB2YXIgaGVhZGVyc0hhcyA9IHVuY3VycnlUaGlzKEhlYWRlcnNQcm90b3R5cGUuaGFzKTsKICB2YXIgaGVhZGVyc1NldCA9IHVuY3VycnlUaGlzKEhlYWRlcnNQcm90b3R5cGUuc2V0KTsKCiAgdmFyIHdyYXBSZXF1ZXN0T3B0aW9ucyA9IGZ1bmN0aW9uIChpbml0KSB7CiAgICBpZiAoaXNPYmplY3QoaW5pdCkpIHsKICAgICAgdmFyIGJvZHkgPSBpbml0LmJvZHk7CiAgICAgIHZhciBoZWFkZXJzOwogICAgICBpZiAoY2xhc3NvZihib2R5KSA9PT0gVVJMX1NFQVJDSF9QQVJBTVMpIHsKICAgICAgICBoZWFkZXJzID0gaW5pdC5oZWFkZXJzID8gbmV3IEhlYWRlcnMoaW5pdC5oZWFkZXJzKSA6IG5ldyBIZWFkZXJzKCk7CiAgICAgICAgaWYgKCFoZWFkZXJzSGFzKGhlYWRlcnMsICdjb250ZW50LXR5cGUnKSkgewogICAgICAgICAgaGVhZGVyc1NldChoZWFkZXJzLCAnY29udGVudC10eXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PVVURi04Jyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBjcmVhdGUoaW5pdCwgewogICAgICAgICAgYm9keTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsICR0b1N0cmluZyhib2R5KSksCiAgICAgICAgICBoZWFkZXJzOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgaGVhZGVycykKICAgICAgICB9KTsKICAgICAgfQogICAgfSByZXR1cm4gaW5pdDsKICB9OwoKICBpZiAoaXNDYWxsYWJsZShuYXRpdmVGZXRjaCkpIHsKICAgICQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGRvbnRDYWxsR2V0U2V0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwgewogICAgICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQgLyogLCBpbml0ICovKSB7CiAgICAgICAgcmV0dXJuIG5hdGl2ZUZldGNoKGlucHV0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHdyYXBSZXF1ZXN0T3B0aW9ucyhhcmd1bWVudHNbMV0pIDoge30pOwogICAgICB9CiAgICB9KTsKICB9CgogIGlmIChpc0NhbGxhYmxlKE5hdGl2ZVJlcXVlc3QpKSB7CiAgICB2YXIgUmVxdWVzdENvbnN0cnVjdG9yID0gZnVuY3Rpb24gUmVxdWVzdChpbnB1dCAvKiAsIGluaXQgKi8pIHsKICAgICAgYW5JbnN0YW5jZSh0aGlzLCBSZXF1ZXN0UHJvdG90eXBlKTsKICAgICAgcmV0dXJuIG5ldyBOYXRpdmVSZXF1ZXN0KGlucHV0LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHdyYXBSZXF1ZXN0T3B0aW9ucyhhcmd1bWVudHNbMV0pIDoge30pOwogICAgfTsKCiAgICBSZXF1ZXN0UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUmVxdWVzdENvbnN0cnVjdG9yOwogICAgUmVxdWVzdENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IFJlcXVlc3RQcm90b3R5cGU7CgogICAgJCh7IGdsb2JhbDogdHJ1ZSwgY29uc3RydWN0b3I6IHRydWUsIGRvbnRDYWxsR2V0U2V0OiB0cnVlLCBmb3JjZWQ6IHRydWUgfSwgewogICAgICBSZXF1ZXN0OiBSZXF1ZXN0Q29uc3RydWN0b3IKICAgIH0pOwogIH0KfQoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgVVJMU2VhcmNoUGFyYW1zOiBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciwKICBnZXRTdGF0ZTogZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZQp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKLy8gVE9ETzogUmVtb3ZlIHRoaXMgbW9kdWxlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyByZXBsYWNlZCB0byBtb2R1bGUgYmVsb3cKX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuY29uc3RydWN0b3IgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuY29uc3RydWN0b3IuanMiKTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLnNpemUuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5zaXplLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoKSA9PiB7CgovLyBlbXB0eQoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy93ZWIudXJsLmNhbi1wYXJzZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvd2ViLnVybC5jYW4tcGFyc2UuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgJCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9leHBvcnQgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2V4cG9ydC5qcyIpOwp2YXIgZ2V0QnVpbHRJbiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4gKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIpOwp2YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aC5qcyIpOwp2YXIgdG9TdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8tc3RyaW5nICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1zdHJpbmcuanMiKTsKCnZhciBVUkwgPSBnZXRCdWlsdEluKCdVUkwnKTsKCi8vIGBVUkwuY2FuUGFyc2VgIG1ldGhvZAovLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtY2FucGFyc2UKJCh7IHRhcmdldDogJ1VSTCcsIHN0YXQ6IHRydWUgfSwgewogIGNhblBhcnNlOiBmdW5jdGlvbiBjYW5QYXJzZSh1cmwpIHsKICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTsKICAgIHZhciB1cmxTdHJpbmcgPSB0b1N0cmluZyh1cmwpOwogICAgdmFyIGJhc2UgPSBsZW5ndGggPCAyIHx8IGFyZ3VtZW50c1sxXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogdG9TdHJpbmcoYXJndW1lbnRzWzFdKTsKICAgIHRyeSB7CiAgICAgIHJldHVybiAhIW5ldyBVUkwodXJsU3RyaW5nLCBiYXNlKTsKICAgIH0gY2F0Y2ggKGVycm9yKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9Cn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy93ZWIudXJsLmNvbnN0cnVjdG9yLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL3dlYi51cmwuY29uc3RydWN0b3IuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKCi8vIFRPRE86IGluIGNvcmUtanNANCwgbW92ZSAvbW9kdWxlcy8gZGVwZW5kZW5jaWVzIHRvIHB1YmxpYyBlbnRyaWVzIGZvciBiZXR0ZXIgb3B0aW1pemF0aW9uIGJ5IHRvb2xzIGxpa2UgYHByZXNldC1lbnZgCl9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIik7CnZhciAkID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2V4cG9ydCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZXhwb3J0LmpzIik7CnZhciBERVNDUklQVE9SUyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kZXNjcmlwdG9ycyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiKTsKdmFyIFVTRV9OQVRJVkVfVVJMID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3VybC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24gKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3VybC1jb25zdHJ1Y3Rvci1kZXRlY3Rpb24uanMiKTsKdmFyIGdsb2JhbCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9nbG9iYWwgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2dsb2JhbC5qcyIpOwp2YXIgYmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIpOwp2YXIgdW5jdXJyeVRoaXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZnVuY3Rpb24tdW5jdXJyeS10aGlzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9mdW5jdGlvbi11bmN1cnJ5LXRoaXMuanMiKTsKdmFyIGRlZmluZUJ1aWx0SW4gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvZGVmaW5lLWJ1aWx0LWluICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4uanMiKTsKdmFyIGRlZmluZUJ1aWx0SW5BY2Nlc3NvciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9kZWZpbmUtYnVpbHQtaW4tYWNjZXNzb3IgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2RlZmluZS1idWlsdC1pbi1hY2Nlc3Nvci5qcyIpOwp2YXIgYW5JbnN0YW5jZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9hbi1pbnN0YW5jZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiKTsKdmFyIGhhc093biA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5ICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9oYXMtb3duLXByb3BlcnR5LmpzIik7CnZhciBhc3NpZ24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbiAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvb2JqZWN0LWFzc2lnbi5qcyIpOwp2YXIgYXJyYXlGcm9tID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL2FycmF5LWZyb20gKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2FycmF5LWZyb20uanMiKTsKdmFyIGFycmF5U2xpY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvYXJyYXktc2xpY2Utc2ltcGxlICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9hcnJheS1zbGljZS1zaW1wbGUuanMiKTsKdmFyIGNvZGVBdCA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIpLmNvZGVBdCk7CnZhciB0b0FTQ0lJID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3N0cmluZy1wdW55Y29kZS10by1hc2NpaSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvc3RyaW5nLXB1bnljb2RlLXRvLWFzY2lpLmpzIik7CnZhciAkdG9TdHJpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdG8tc3RyaW5nICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy90by1zdHJpbmcuanMiKTsKdmFyIHNldFRvU3RyaW5nVGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZy5qcyIpOwp2YXIgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvdmFsaWRhdGUtYXJndW1lbnRzLWxlbmd0aC5qcyIpOwp2YXIgVVJMU2VhcmNoUGFyYW1zTW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuY29uc3RydWN0b3IgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuY29uc3RydWN0b3IuanMiKTsKdmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlLmpzIik7Cgp2YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0Owp2YXIgZ2V0SW50ZXJuYWxVUkxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKCdVUkwnKTsKdmFyIFVSTFNlYXJjaFBhcmFtcyA9IFVSTFNlYXJjaFBhcmFtc01vZHVsZS5VUkxTZWFyY2hQYXJhbXM7CnZhciBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLmdldFN0YXRlOwoKdmFyIE5hdGl2ZVVSTCA9IGdsb2JhbC5VUkw7CnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yOwp2YXIgcGFyc2VJbnQgPSBnbG9iYWwucGFyc2VJbnQ7CnZhciBmbG9vciA9IE1hdGguZmxvb3I7CnZhciBwb3cgPSBNYXRoLnBvdzsKdmFyIGNoYXJBdCA9IHVuY3VycnlUaGlzKCcnLmNoYXJBdCk7CnZhciBleGVjID0gdW5jdXJyeVRoaXMoLy4vLmV4ZWMpOwp2YXIgam9pbiA9IHVuY3VycnlUaGlzKFtdLmpvaW4pOwp2YXIgbnVtYmVyVG9TdHJpbmcgPSB1bmN1cnJ5VGhpcygxLjAudG9TdHJpbmcpOwp2YXIgcG9wID0gdW5jdXJyeVRoaXMoW10ucG9wKTsKdmFyIHB1c2ggPSB1bmN1cnJ5VGhpcyhbXS5wdXNoKTsKdmFyIHJlcGxhY2UgPSB1bmN1cnJ5VGhpcygnJy5yZXBsYWNlKTsKdmFyIHNoaWZ0ID0gdW5jdXJyeVRoaXMoW10uc2hpZnQpOwp2YXIgc3BsaXQgPSB1bmN1cnJ5VGhpcygnJy5zcGxpdCk7CnZhciBzdHJpbmdTbGljZSA9IHVuY3VycnlUaGlzKCcnLnNsaWNlKTsKdmFyIHRvTG93ZXJDYXNlID0gdW5jdXJyeVRoaXMoJycudG9Mb3dlckNhc2UpOwp2YXIgdW5zaGlmdCA9IHVuY3VycnlUaGlzKFtdLnVuc2hpZnQpOwoKdmFyIElOVkFMSURfQVVUSE9SSVRZID0gJ0ludmFsaWQgYXV0aG9yaXR5JzsKdmFyIElOVkFMSURfU0NIRU1FID0gJ0ludmFsaWQgc2NoZW1lJzsKdmFyIElOVkFMSURfSE9TVCA9ICdJbnZhbGlkIGhvc3QnOwp2YXIgSU5WQUxJRF9QT1JUID0gJ0ludmFsaWQgcG9ydCc7Cgp2YXIgQUxQSEEgPSAvW2Etel0vaTsKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1vYnNjdXJlLXJhbmdlIC0tIHNhZmUKdmFyIEFMUEhBTlVNRVJJQyA9IC9bXGQrLS5hLXpdL2k7CnZhciBESUdJVCA9IC9cZC87CnZhciBIRVhfU1RBUlQgPSAvXjB4L2k7CnZhciBPQ1QgPSAvXlswLTddKyQvOwp2YXIgREVDID0gL15cZCskLzsKdmFyIEhFWCA9IC9eW1xkYS1mXSskL2k7Ci8qIGVzbGludC1kaXNhYmxlIHJlZ2V4cC9uby1jb250cm9sLWNoYXJhY3RlciAtLSBzYWZlICovCnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UID0gL1tcMFx0XG5cciAjJS86PD4/QFtcXFxdXnxdLzsKdmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQgPSAvW1wwXHRcblxyICMvOjw+P0BbXFxcXV58XS87CnZhciBMRUFESU5HX0MwX0NPTlRST0xfT1JfU1BBQ0UgPSAvXltcdTAwMDAtXHUwMDIwXSsvOwp2YXIgVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSA9IC8oXnxbXlx1MDAwMC1cdTAwMjBdKVtcdTAwMDAtXHUwMDIwXSskLzsKdmFyIFRBQl9BTkRfTkVXX0xJTkUgPSAvW1x0XG5ccl0vZzsKLyogZXNsaW50LWVuYWJsZSByZWdleHAvbm8tY29udHJvbC1jaGFyYWN0ZXIgLS0gc2FmZSAqLwp2YXIgRU9GOwoKLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpcHY0LW51bWJlci1wYXJzZXIKdmFyIHBhcnNlSVB2NCA9IGZ1bmN0aW9uIChpbnB1dCkgewogIHZhciBwYXJ0cyA9IHNwbGl0KGlucHV0LCAnLicpOwogIHZhciBwYXJ0c0xlbmd0aCwgbnVtYmVycywgaW5kZXgsIHBhcnQsIHJhZGl4LCBudW1iZXIsIGlwdjQ7CiAgaWYgKHBhcnRzLmxlbmd0aCAmJiBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXSA9PSAnJykgewogICAgcGFydHMubGVuZ3RoLS07CiAgfQogIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoOwogIGlmIChwYXJ0c0xlbmd0aCA+IDQpIHJldHVybiBpbnB1dDsKICBudW1iZXJzID0gW107CiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFydHNMZW5ndGg7IGluZGV4KyspIHsKICAgIHBhcnQgPSBwYXJ0c1tpbmRleF07CiAgICBpZiAocGFydCA9PSAnJykgcmV0dXJuIGlucHV0OwogICAgcmFkaXggPSAxMDsKICAgIGlmIChwYXJ0Lmxlbmd0aCA+IDEgJiYgY2hhckF0KHBhcnQsIDApID09ICcwJykgewogICAgICByYWRpeCA9IGV4ZWMoSEVYX1NUQVJULCBwYXJ0KSA/IDE2IDogODsKICAgICAgcGFydCA9IHN0cmluZ1NsaWNlKHBhcnQsIHJhZGl4ID09IDggPyAxIDogMik7CiAgICB9CiAgICBpZiAocGFydCA9PT0gJycpIHsKICAgICAgbnVtYmVyID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGlmICghZXhlYyhyYWRpeCA9PSAxMCA/IERFQyA6IHJhZGl4ID09IDggPyBPQ1QgOiBIRVgsIHBhcnQpKSByZXR1cm4gaW5wdXQ7CiAgICAgIG51bWJlciA9IHBhcnNlSW50KHBhcnQsIHJhZGl4KTsKICAgIH0KICAgIHB1c2gobnVtYmVycywgbnVtYmVyKTsKICB9CiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcGFydHNMZW5ndGg7IGluZGV4KyspIHsKICAgIG51bWJlciA9IG51bWJlcnNbaW5kZXhdOwogICAgaWYgKGluZGV4ID09IHBhcnRzTGVuZ3RoIC0gMSkgewogICAgICBpZiAobnVtYmVyID49IHBvdygyNTYsIDUgLSBwYXJ0c0xlbmd0aCkpIHJldHVybiBudWxsOwogICAgfSBlbHNlIGlmIChudW1iZXIgPiAyNTUpIHJldHVybiBudWxsOwogIH0KICBpcHY0ID0gcG9wKG51bWJlcnMpOwogIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG51bWJlcnMubGVuZ3RoOyBpbmRleCsrKSB7CiAgICBpcHY0ICs9IG51bWJlcnNbaW5kZXhdICogcG93KDI1NiwgMyAtIGluZGV4KTsKICB9CiAgcmV0dXJuIGlwdjQ7Cn07CgovLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2NvbmNlcHQtaXB2Ni1wYXJzZXIKLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE8KdmFyIHBhcnNlSVB2NiA9IGZ1bmN0aW9uIChpbnB1dCkgewogIHZhciBhZGRyZXNzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdOwogIHZhciBwaWVjZUluZGV4ID0gMDsKICB2YXIgY29tcHJlc3MgPSBudWxsOwogIHZhciBwb2ludGVyID0gMDsKICB2YXIgdmFsdWUsIGxlbmd0aCwgbnVtYmVyc1NlZW4sIGlwdjRQaWVjZSwgbnVtYmVyLCBzd2Fwcywgc3dhcDsKCiAgdmFyIGNociA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiBjaGFyQXQoaW5wdXQsIHBvaW50ZXIpOwogIH07CgogIGlmIChjaHIoKSA9PSAnOicpIHsKICAgIGlmIChjaGFyQXQoaW5wdXQsIDEpICE9ICc6JykgcmV0dXJuOwogICAgcG9pbnRlciArPSAyOwogICAgcGllY2VJbmRleCsrOwogICAgY29tcHJlc3MgPSBwaWVjZUluZGV4OwogIH0KICB3aGlsZSAoY2hyKCkpIHsKICAgIGlmIChwaWVjZUluZGV4ID09IDgpIHJldHVybjsKICAgIGlmIChjaHIoKSA9PSAnOicpIHsKICAgICAgaWYgKGNvbXByZXNzICE9PSBudWxsKSByZXR1cm47CiAgICAgIHBvaW50ZXIrKzsKICAgICAgcGllY2VJbmRleCsrOwogICAgICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgdmFsdWUgPSBsZW5ndGggPSAwOwogICAgd2hpbGUgKGxlbmd0aCA8IDQgJiYgZXhlYyhIRVgsIGNocigpKSkgewogICAgICB2YWx1ZSA9IHZhbHVlICogMTYgKyBwYXJzZUludChjaHIoKSwgMTYpOwogICAgICBwb2ludGVyKys7CiAgICAgIGxlbmd0aCsrOwogICAgfQogICAgaWYgKGNocigpID09ICcuJykgewogICAgICBpZiAobGVuZ3RoID09IDApIHJldHVybjsKICAgICAgcG9pbnRlciAtPSBsZW5ndGg7CiAgICAgIGlmIChwaWVjZUluZGV4ID4gNikgcmV0dXJuOwogICAgICBudW1iZXJzU2VlbiA9IDA7CiAgICAgIHdoaWxlIChjaHIoKSkgewogICAgICAgIGlwdjRQaWVjZSA9IG51bGw7CiAgICAgICAgaWYgKG51bWJlcnNTZWVuID4gMCkgewogICAgICAgICAgaWYgKGNocigpID09ICcuJyAmJiBudW1iZXJzU2VlbiA8IDQpIHBvaW50ZXIrKzsKICAgICAgICAgIGVsc2UgcmV0dXJuOwogICAgICAgIH0KICAgICAgICBpZiAoIWV4ZWMoRElHSVQsIGNocigpKSkgcmV0dXJuOwogICAgICAgIHdoaWxlIChleGVjKERJR0lULCBjaHIoKSkpIHsKICAgICAgICAgIG51bWJlciA9IHBhcnNlSW50KGNocigpLCAxMCk7CiAgICAgICAgICBpZiAoaXB2NFBpZWNlID09PSBudWxsKSBpcHY0UGllY2UgPSBudW1iZXI7CiAgICAgICAgICBlbHNlIGlmIChpcHY0UGllY2UgPT0gMCkgcmV0dXJuOwogICAgICAgICAgZWxzZSBpcHY0UGllY2UgPSBpcHY0UGllY2UgKiAxMCArIG51bWJlcjsKICAgICAgICAgIGlmIChpcHY0UGllY2UgPiAyNTUpIHJldHVybjsKICAgICAgICAgIHBvaW50ZXIrKzsKICAgICAgICB9CiAgICAgICAgYWRkcmVzc1twaWVjZUluZGV4XSA9IGFkZHJlc3NbcGllY2VJbmRleF0gKiAyNTYgKyBpcHY0UGllY2U7CiAgICAgICAgbnVtYmVyc1NlZW4rKzsKICAgICAgICBpZiAobnVtYmVyc1NlZW4gPT0gMiB8fCBudW1iZXJzU2VlbiA9PSA0KSBwaWVjZUluZGV4Kys7CiAgICAgIH0KICAgICAgaWYgKG51bWJlcnNTZWVuICE9IDQpIHJldHVybjsKICAgICAgYnJlYWs7CiAgICB9IGVsc2UgaWYgKGNocigpID09ICc6JykgewogICAgICBwb2ludGVyKys7CiAgICAgIGlmICghY2hyKCkpIHJldHVybjsKICAgIH0gZWxzZSBpZiAoY2hyKCkpIHJldHVybjsKICAgIGFkZHJlc3NbcGllY2VJbmRleCsrXSA9IHZhbHVlOwogIH0KICBpZiAoY29tcHJlc3MgIT09IG51bGwpIHsKICAgIHN3YXBzID0gcGllY2VJbmRleCAtIGNvbXByZXNzOwogICAgcGllY2VJbmRleCA9IDc7CiAgICB3aGlsZSAocGllY2VJbmRleCAhPSAwICYmIHN3YXBzID4gMCkgewogICAgICBzd2FwID0gYWRkcmVzc1twaWVjZUluZGV4XTsKICAgICAgYWRkcmVzc1twaWVjZUluZGV4LS1dID0gYWRkcmVzc1tjb21wcmVzcyArIHN3YXBzIC0gMV07CiAgICAgIGFkZHJlc3NbY29tcHJlc3MgKyAtLXN3YXBzXSA9IHN3YXA7CiAgICB9CiAgfSBlbHNlIGlmIChwaWVjZUluZGV4ICE9IDgpIHJldHVybjsKICByZXR1cm4gYWRkcmVzczsKfTsKCnZhciBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZSA9IGZ1bmN0aW9uIChpcHY2KSB7CiAgdmFyIG1heEluZGV4ID0gbnVsbDsKICB2YXIgbWF4TGVuZ3RoID0gMTsKICB2YXIgY3VyclN0YXJ0ID0gbnVsbDsKICB2YXIgY3Vyckxlbmd0aCA9IDA7CiAgdmFyIGluZGV4ID0gMDsKICBmb3IgKDsgaW5kZXggPCA4OyBpbmRleCsrKSB7CiAgICBpZiAoaXB2NltpbmRleF0gIT09IDApIHsKICAgICAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHsKICAgICAgICBtYXhJbmRleCA9IGN1cnJTdGFydDsKICAgICAgICBtYXhMZW5ndGggPSBjdXJyTGVuZ3RoOwogICAgICB9CiAgICAgIGN1cnJTdGFydCA9IG51bGw7CiAgICAgIGN1cnJMZW5ndGggPSAwOwogICAgfSBlbHNlIHsKICAgICAgaWYgKGN1cnJTdGFydCA9PT0gbnVsbCkgY3VyclN0YXJ0ID0gaW5kZXg7CiAgICAgICsrY3Vyckxlbmd0aDsKICAgIH0KICB9CiAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHsKICAgIG1heEluZGV4ID0gY3VyclN0YXJ0OwogICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDsKICB9CiAgcmV0dXJuIG1heEluZGV4Owp9OwoKLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNob3N0LXNlcmlhbGl6aW5nCnZhciBzZXJpYWxpemVIb3N0ID0gZnVuY3Rpb24gKGhvc3QpIHsKICB2YXIgcmVzdWx0LCBpbmRleCwgY29tcHJlc3MsIGlnbm9yZTA7CiAgLy8gaXB2NAogIGlmICh0eXBlb2YgaG9zdCA9PSAnbnVtYmVyJykgewogICAgcmVzdWx0ID0gW107CiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA0OyBpbmRleCsrKSB7CiAgICAgIHVuc2hpZnQocmVzdWx0LCBob3N0ICUgMjU2KTsKICAgICAgaG9zdCA9IGZsb29yKGhvc3QgLyAyNTYpOwogICAgfSByZXR1cm4gam9pbihyZXN1bHQsICcuJyk7CiAgLy8gaXB2NgogIH0gZWxzZSBpZiAodHlwZW9mIGhvc3QgPT0gJ29iamVjdCcpIHsKICAgIHJlc3VsdCA9ICcnOwogICAgY29tcHJlc3MgPSBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShob3N0KTsKICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDg7IGluZGV4KyspIHsKICAgICAgaWYgKGlnbm9yZTAgJiYgaG9zdFtpbmRleF0gPT09IDApIGNvbnRpbnVlOwogICAgICBpZiAoaWdub3JlMCkgaWdub3JlMCA9IGZhbHNlOwogICAgICBpZiAoY29tcHJlc3MgPT09IGluZGV4KSB7CiAgICAgICAgcmVzdWx0ICs9IGluZGV4ID8gJzonIDogJzo6JzsKICAgICAgICBpZ25vcmUwID0gdHJ1ZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXN1bHQgKz0gbnVtYmVyVG9TdHJpbmcoaG9zdFtpbmRleF0sIDE2KTsKICAgICAgICBpZiAoaW5kZXggPCA3KSByZXN1bHQgKz0gJzonOwogICAgICB9CiAgICB9CiAgICByZXR1cm4gJ1snICsgcmVzdWx0ICsgJ10nOwogIH0gcmV0dXJuIGhvc3Q7Cn07Cgp2YXIgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCA9IHt9Owp2YXIgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0LCB7CiAgJyAnOiAxLCAnIic6IDEsICc8JzogMSwgJz4nOiAxLCAnYCc6IDEKfSk7CnZhciBwYXRoUGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0LCB7CiAgJyMnOiAxLCAnPyc6IDEsICd7JzogMSwgJ30nOiAxCn0pOwp2YXIgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBwYXRoUGVyY2VudEVuY29kZVNldCwgewogICcvJzogMSwgJzonOiAxLCAnOyc6IDEsICc9JzogMSwgJ0AnOiAxLCAnWyc6IDEsICdcXCc6IDEsICddJzogMSwgJ14nOiAxLCAnfCc6IDEKfSk7Cgp2YXIgcGVyY2VudEVuY29kZSA9IGZ1bmN0aW9uIChjaHIsIHNldCkgewogIHZhciBjb2RlID0gY29kZUF0KGNociwgMCk7CiAgcmV0dXJuIGNvZGUgPiAweDIwICYmIGNvZGUgPCAweDdGICYmICFoYXNPd24oc2V0LCBjaHIpID8gY2hyIDogZW5jb2RlVVJJQ29tcG9uZW50KGNocik7Cn07CgovLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3NwZWNpYWwtc2NoZW1lCnZhciBzcGVjaWFsU2NoZW1lcyA9IHsKICBmdHA6IDIxLAogIGZpbGU6IG51bGwsCiAgaHR0cDogODAsCiAgaHR0cHM6IDQ0MywKICB3czogODAsCiAgd3NzOiA0NDMKfTsKCi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jd2luZG93cy1kcml2ZS1sZXR0ZXIKdmFyIGlzV2luZG93c0RyaXZlTGV0dGVyID0gZnVuY3Rpb24gKHN0cmluZywgbm9ybWFsaXplZCkgewogIHZhciBzZWNvbmQ7CiAgcmV0dXJuIHN0cmluZy5sZW5ndGggPT0gMiAmJiBleGVjKEFMUEhBLCBjaGFyQXQoc3RyaW5nLCAwKSkKICAgICYmICgoc2Vjb25kID0gY2hhckF0KHN0cmluZywgMSkpID09ICc6JyB8fCAoIW5vcm1hbGl6ZWQgJiYgc2Vjb25kID09ICd8JykpOwp9OwoKLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzdGFydC13aXRoLWEtd2luZG93cy1kcml2ZS1sZXR0ZXIKdmFyIHN0YXJ0c1dpdGhXaW5kb3dzRHJpdmVMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nKSB7CiAgdmFyIHRoaXJkOwogIHJldHVybiBzdHJpbmcubGVuZ3RoID4gMSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihzdHJpbmdTbGljZShzdHJpbmcsIDAsIDIpKSAmJiAoCiAgICBzdHJpbmcubGVuZ3RoID09IDIgfHwKICAgICgodGhpcmQgPSBjaGFyQXQoc3RyaW5nLCAyKSkgPT09ICcvJyB8fCB0aGlyZCA9PT0gJ1xcJyB8fCB0aGlyZCA9PT0gJz8nIHx8IHRoaXJkID09PSAnIycpCiAgKTsKfTsKCi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jc2luZ2xlLWRvdC1wYXRoLXNlZ21lbnQKdmFyIGlzU2luZ2xlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHsKICByZXR1cm4gc2VnbWVudCA9PT0gJy4nIHx8IHRvTG93ZXJDYXNlKHNlZ21lbnQpID09PSAnJTJlJzsKfTsKCi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG91YmxlLWRvdC1wYXRoLXNlZ21lbnQKdmFyIGlzRG91YmxlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHsKICBzZWdtZW50ID0gdG9Mb3dlckNhc2Uoc2VnbWVudCk7CiAgcmV0dXJuIHNlZ21lbnQgPT09ICcuLicgfHwgc2VnbWVudCA9PT0gJyUyZS4nIHx8IHNlZ21lbnQgPT09ICcuJTJlJyB8fCBzZWdtZW50ID09PSAnJTJlJTJlJzsKfTsKCi8vIFN0YXRlczoKdmFyIFNDSEVNRV9TVEFSVCA9IHt9Owp2YXIgU0NIRU1FID0ge307CnZhciBOT19TQ0hFTUUgPSB7fTsKdmFyIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZID0ge307CnZhciBQQVRIX09SX0FVVEhPUklUWSA9IHt9Owp2YXIgUkVMQVRJVkUgPSB7fTsKdmFyIFJFTEFUSVZFX1NMQVNIID0ge307CnZhciBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTID0ge307CnZhciBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUyA9IHt9Owp2YXIgQVVUSE9SSVRZID0ge307CnZhciBIT1NUID0ge307CnZhciBIT1NUTkFNRSA9IHt9Owp2YXIgUE9SVCA9IHt9Owp2YXIgRklMRSA9IHt9Owp2YXIgRklMRV9TTEFTSCA9IHt9Owp2YXIgRklMRV9IT1NUID0ge307CnZhciBQQVRIX1NUQVJUID0ge307CnZhciBQQVRIID0ge307CnZhciBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIID0ge307CnZhciBRVUVSWSA9IHt9Owp2YXIgRlJBR01FTlQgPSB7fTsKCnZhciBVUkxTdGF0ZSA9IGZ1bmN0aW9uICh1cmwsIGlzQmFzZSwgYmFzZSkgewogIHZhciB1cmxTdHJpbmcgPSAkdG9TdHJpbmcodXJsKTsKICB2YXIgYmFzZVN0YXRlLCBmYWlsdXJlLCBzZWFyY2hQYXJhbXM7CiAgaWYgKGlzQmFzZSkgewogICAgZmFpbHVyZSA9IHRoaXMucGFyc2UodXJsU3RyaW5nKTsKICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7CiAgICB0aGlzLnNlYXJjaFBhcmFtcyA9IG51bGw7CiAgfSBlbHNlIHsKICAgIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIGJhc2VTdGF0ZSA9IG5ldyBVUkxTdGF0ZShiYXNlLCB0cnVlKTsKICAgIGZhaWx1cmUgPSB0aGlzLnBhcnNlKHVybFN0cmluZywgbnVsbCwgYmFzZVN0YXRlKTsKICAgIGlmIChmYWlsdXJlKSB0aHJvdyBUeXBlRXJyb3IoZmFpbHVyZSk7CiAgICBzZWFyY2hQYXJhbXMgPSBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKG5ldyBVUkxTZWFyY2hQYXJhbXMoKSk7CiAgICBzZWFyY2hQYXJhbXMuYmluZFVSTCh0aGlzKTsKICAgIHRoaXMuc2VhcmNoUGFyYW1zID0gc2VhcmNoUGFyYW1zOwogIH0KfTsKClVSTFN0YXRlLnByb3RvdHlwZSA9IHsKICB0eXBlOiAnVVJMJywKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybC1wYXJzaW5nCiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzIC0tIFRPRE8KICBwYXJzZTogZnVuY3Rpb24gKGlucHV0LCBzdGF0ZU92ZXJyaWRlLCBiYXNlKSB7CiAgICB2YXIgdXJsID0gdGhpczsKICAgIHZhciBzdGF0ZSA9IHN0YXRlT3ZlcnJpZGUgfHwgU0NIRU1FX1NUQVJUOwogICAgdmFyIHBvaW50ZXIgPSAwOwogICAgdmFyIGJ1ZmZlciA9ICcnOwogICAgdmFyIHNlZW5BdCA9IGZhbHNlOwogICAgdmFyIHNlZW5CcmFja2V0ID0gZmFsc2U7CiAgICB2YXIgc2VlblBhc3N3b3JkVG9rZW4gPSBmYWxzZTsKICAgIHZhciBjb2RlUG9pbnRzLCBjaHIsIGJ1ZmZlckNvZGVQb2ludHMsIGZhaWx1cmU7CgogICAgaW5wdXQgPSAkdG9TdHJpbmcoaW5wdXQpOwoKICAgIGlmICghc3RhdGVPdmVycmlkZSkgewogICAgICB1cmwuc2NoZW1lID0gJyc7CiAgICAgIHVybC51c2VybmFtZSA9ICcnOwogICAgICB1cmwucGFzc3dvcmQgPSAnJzsKICAgICAgdXJsLmhvc3QgPSBudWxsOwogICAgICB1cmwucG9ydCA9IG51bGw7CiAgICAgIHVybC5wYXRoID0gW107CiAgICAgIHVybC5xdWVyeSA9IG51bGw7CiAgICAgIHVybC5mcmFnbWVudCA9IG51bGw7CiAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gZmFsc2U7CiAgICAgIGlucHV0ID0gcmVwbGFjZShpbnB1dCwgTEVBRElOR19DMF9DT05UUk9MX09SX1NQQUNFLCAnJyk7CiAgICAgIGlucHV0ID0gcmVwbGFjZShpbnB1dCwgVFJBSUxJTkdfQzBfQ09OVFJPTF9PUl9TUEFDRSwgJyQxJyk7CiAgICB9CgogICAgaW5wdXQgPSByZXBsYWNlKGlucHV0LCBUQUJfQU5EX05FV19MSU5FLCAnJyk7CgogICAgY29kZVBvaW50cyA9IGFycmF5RnJvbShpbnB1dCk7CgogICAgd2hpbGUgKHBvaW50ZXIgPD0gY29kZVBvaW50cy5sZW5ndGgpIHsKICAgICAgY2hyID0gY29kZVBvaW50c1twb2ludGVyXTsKICAgICAgc3dpdGNoIChzdGF0ZSkgewogICAgICAgIGNhc2UgU0NIRU1FX1NUQVJUOgogICAgICAgICAgaWYgKGNociAmJiBleGVjKEFMUEhBLCBjaHIpKSB7CiAgICAgICAgICAgIGJ1ZmZlciArPSB0b0xvd2VyQ2FzZShjaHIpOwogICAgICAgICAgICBzdGF0ZSA9IFNDSEVNRTsKICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUpIHsKICAgICAgICAgICAgc3RhdGUgPSBOT19TQ0hFTUU7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1NDSEVNRTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIFNDSEVNRToKICAgICAgICAgIGlmIChjaHIgJiYgKGV4ZWMoQUxQSEFOVU1FUklDLCBjaHIpIHx8IGNociA9PSAnKycgfHwgY2hyID09ICctJyB8fCBjaHIgPT0gJy4nKSkgewogICAgICAgICAgICBidWZmZXIgKz0gdG9Mb3dlckNhc2UoY2hyKTsKICAgICAgICAgIH0gZWxzZSBpZiAoY2hyID09ICc6JykgewogICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSAmJiAoCiAgICAgICAgICAgICAgKHVybC5pc1NwZWNpYWwoKSAhPSBoYXNPd24oc3BlY2lhbFNjaGVtZXMsIGJ1ZmZlcikpIHx8CiAgICAgICAgICAgICAgKGJ1ZmZlciA9PSAnZmlsZScgJiYgKHVybC5pbmNsdWRlc0NyZWRlbnRpYWxzKCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKSB8fAogICAgICAgICAgICAgICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLmhvc3QpCiAgICAgICAgICAgICkpIHJldHVybjsKICAgICAgICAgICAgdXJsLnNjaGVtZSA9IGJ1ZmZlcjsKICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHsKICAgICAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpICYmIHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdID09IHVybC5wb3J0KSB1cmwucG9ydCA9IG51bGw7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJ1ZmZlciA9ICcnOwogICAgICAgICAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScpIHsKICAgICAgICAgICAgICBzdGF0ZSA9IEZJTEU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodXJsLmlzU3BlY2lhbCgpICYmIGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gdXJsLnNjaGVtZSkgewogICAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodXJsLmlzU3BlY2lhbCgpKSB7CiAgICAgICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTOwogICAgICAgICAgICB9IGVsc2UgaWYgKGNvZGVQb2ludHNbcG9pbnRlciArIDFdID09ICcvJykgewogICAgICAgICAgICAgIHN0YXRlID0gUEFUSF9PUl9BVVRIT1JJVFk7CiAgICAgICAgICAgICAgcG9pbnRlcisrOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTsKICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCAnJyk7CiAgICAgICAgICAgICAgc3RhdGUgPSBDQU5OT1RfQkVfQV9CQVNFX1VSTF9QQVRIOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7CiAgICAgICAgICAgIGJ1ZmZlciA9ICcnOwogICAgICAgICAgICBzdGF0ZSA9IE5PX1NDSEVNRTsKICAgICAgICAgICAgcG9pbnRlciA9IDA7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfSBlbHNlIHJldHVybiBJTlZBTElEX1NDSEVNRTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIE5PX1NDSEVNRToKICAgICAgICAgIGlmICghYmFzZSB8fCAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNociAhPSAnIycpKSByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7CiAgICAgICAgICBpZiAoYmFzZS5jYW5ub3RCZUFCYXNlVVJMICYmIGNociA9PSAnIycpIHsKICAgICAgICAgICAgdXJsLnNjaGVtZSA9IGJhc2Uuc2NoZW1lOwogICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTsKICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTsKICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7CiAgICAgICAgICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTsKICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBzdGF0ZSA9IGJhc2Uuc2NoZW1lID09ICdmaWxlJyA/IEZJTEUgOiBSRUxBVElWRTsKICAgICAgICAgIGNvbnRpbnVlOwoKICAgICAgICBjYXNlIFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZOgogICAgICAgICAgaWYgKGNociA9PSAnLycgJiYgY29kZVBvaW50c1twb2ludGVyICsgMV0gPT0gJy8nKSB7CiAgICAgICAgICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7CiAgICAgICAgICAgIHBvaW50ZXIrKzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkU7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfSBicmVhazsKCiAgICAgICAgY2FzZSBQQVRIX09SX0FVVEhPUklUWToKICAgICAgICAgIGlmIChjaHIgPT0gJy8nKSB7CiAgICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHN0YXRlID0gUEFUSDsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CgogICAgICAgIGNhc2UgUkVMQVRJVkU6CiAgICAgICAgICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7CiAgICAgICAgICBpZiAoY2hyID09IEVPRikgewogICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lOwogICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkOwogICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDsKICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7CiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpOwogICAgICAgICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5OwogICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJy8nIHx8IChjaHIgPT0gJ1xcJyAmJiB1cmwuaXNTcGVjaWFsKCkpKSB7CiAgICAgICAgICAgIHN0YXRlID0gUkVMQVRJVkVfU0xBU0g7CiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnPycpIHsKICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTsKICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDsKICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7CiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0OwogICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTsKICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7CiAgICAgICAgICAgIHN0YXRlID0gUVVFUlk7CiAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHsKICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTsKICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDsKICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7CiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0OwogICAgICAgICAgICB1cmwucGF0aCA9IGFycmF5U2xpY2UoYmFzZS5wYXRoKTsKICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTsKICAgICAgICAgICAgdXJsLmZyYWdtZW50ID0gJyc7CiAgICAgICAgICAgIHN0YXRlID0gRlJBR01FTlQ7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lOwogICAgICAgICAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkOwogICAgICAgICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDsKICAgICAgICAgICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7CiAgICAgICAgICAgIHVybC5wYXRoID0gYXJyYXlTbGljZShiYXNlLnBhdGgpOwogICAgICAgICAgICB1cmwucGF0aC5sZW5ndGgtLTsKICAgICAgICAgICAgc3RhdGUgPSBQQVRIOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0gYnJlYWs7CgogICAgICAgIGNhc2UgUkVMQVRJVkVfU0xBU0g6CiAgICAgICAgICBpZiAodXJsLmlzU3BlY2lhbCgpICYmIChjaHIgPT0gJy8nIHx8IGNociA9PSAnXFwnKSkgewogICAgICAgICAgICBzdGF0ZSA9IFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTOwogICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJy8nKSB7CiAgICAgICAgICAgIHN0YXRlID0gQVVUSE9SSVRZOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTsKICAgICAgICAgICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDsKICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7CiAgICAgICAgICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0OwogICAgICAgICAgICBzdGF0ZSA9IFBBVEg7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfSBicmVhazsKCiAgICAgICAgY2FzZSBTUEVDSUFMX0FVVEhPUklUWV9TTEFTSEVTOgogICAgICAgICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUzsKICAgICAgICAgIGlmIChjaHIgIT0gJy8nIHx8IGNoYXJBdChidWZmZXIsIHBvaW50ZXIgKyAxKSAhPSAnLycpIGNvbnRpbnVlOwogICAgICAgICAgcG9pbnRlcisrOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM6CiAgICAgICAgICBpZiAoY2hyICE9ICcvJyAmJiBjaHIgIT0gJ1xcJykgewogICAgICAgICAgICBzdGF0ZSA9IEFVVEhPUklUWTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9IGJyZWFrOwoKICAgICAgICBjYXNlIEFVVEhPUklUWToKICAgICAgICAgIGlmIChjaHIgPT0gJ0AnKSB7CiAgICAgICAgICAgIGlmIChzZWVuQXQpIGJ1ZmZlciA9ICclNDAnICsgYnVmZmVyOwogICAgICAgICAgICBzZWVuQXQgPSB0cnVlOwogICAgICAgICAgICBidWZmZXJDb2RlUG9pbnRzID0gYXJyYXlGcm9tKGJ1ZmZlcik7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnVmZmVyQ29kZVBvaW50cy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIHZhciBjb2RlUG9pbnQgPSBidWZmZXJDb2RlUG9pbnRzW2ldOwogICAgICAgICAgICAgIGlmIChjb2RlUG9pbnQgPT0gJzonICYmICFzZWVuUGFzc3dvcmRUb2tlbikgewogICAgICAgICAgICAgICAgc2VlblBhc3N3b3JkVG9rZW4gPSB0cnVlOwogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHZhciBlbmNvZGVkQ29kZVBvaW50cyA9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50LCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpOwogICAgICAgICAgICAgIGlmIChzZWVuUGFzc3dvcmRUb2tlbikgdXJsLnBhc3N3b3JkICs9IGVuY29kZWRDb2RlUG9pbnRzOwogICAgICAgICAgICAgIGVsc2UgdXJsLnVzZXJuYW1lICs9IGVuY29kZWRDb2RlUG9pbnRzOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJ1ZmZlciA9ICcnOwogICAgICAgICAgfSBlbHNlIGlmICgKICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJyB8fAogICAgICAgICAgICAoY2hyID09ICdcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKQogICAgICAgICAgKSB7CiAgICAgICAgICAgIGlmIChzZWVuQXQgJiYgYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9BVVRIT1JJVFk7CiAgICAgICAgICAgIHBvaW50ZXIgLT0gYXJyYXlGcm9tKGJ1ZmZlcikubGVuZ3RoICsgMTsKICAgICAgICAgICAgYnVmZmVyID0gJyc7CiAgICAgICAgICAgIHN0YXRlID0gSE9TVDsKICAgICAgICAgIH0gZWxzZSBidWZmZXIgKz0gY2hyOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgSE9TVDoKICAgICAgICBjYXNlIEhPU1ROQU1FOgogICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgdXJsLnNjaGVtZSA9PSAnZmlsZScpIHsKICAgICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJzonICYmICFzZWVuQnJhY2tldCkgewogICAgICAgICAgICBpZiAoYnVmZmVyID09ICcnKSByZXR1cm4gSU5WQUxJRF9IT1NUOwogICAgICAgICAgICBmYWlsdXJlID0gdXJsLnBhcnNlSG9zdChidWZmZXIpOwogICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7CiAgICAgICAgICAgIGJ1ZmZlciA9ICcnOwogICAgICAgICAgICBzdGF0ZSA9IFBPUlQ7CiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlID09IEhPU1ROQU1FKSByZXR1cm47CiAgICAgICAgICB9IGVsc2UgaWYgKAogICAgICAgICAgICBjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnIHx8CiAgICAgICAgICAgIChjaHIgPT0gJ1xcJyAmJiB1cmwuaXNTcGVjaWFsKCkpCiAgICAgICAgICApIHsKICAgICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSAmJiBidWZmZXIgPT0gJycpIHJldHVybiBJTlZBTElEX0hPU1Q7CiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIGJ1ZmZlciA9PSAnJyAmJiAodXJsLmluY2x1ZGVzQ3JlZGVudGlhbHMoKSB8fCB1cmwucG9ydCAhPT0gbnVsbCkpIHJldHVybjsKICAgICAgICAgICAgZmFpbHVyZSA9IHVybC5wYXJzZUhvc3QoYnVmZmVyKTsKICAgICAgICAgICAgaWYgKGZhaWx1cmUpIHJldHVybiBmYWlsdXJlOwogICAgICAgICAgICBidWZmZXIgPSAnJzsKICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUOwogICAgICAgICAgICBpZiAoc3RhdGVPdmVycmlkZSkgcmV0dXJuOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIChjaHIgPT0gJ1snKSBzZWVuQnJhY2tldCA9IHRydWU7CiAgICAgICAgICAgIGVsc2UgaWYgKGNociA9PSAnXScpIHNlZW5CcmFja2V0ID0gZmFsc2U7CiAgICAgICAgICAgIGJ1ZmZlciArPSBjaHI7CiAgICAgICAgICB9IGJyZWFrOwoKICAgICAgICBjYXNlIFBPUlQ6CiAgICAgICAgICBpZiAoZXhlYyhESUdJVCwgY2hyKSkgewogICAgICAgICAgICBidWZmZXIgKz0gY2hyOwogICAgICAgICAgfSBlbHNlIGlmICgKICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJyB8fAogICAgICAgICAgICAoY2hyID09ICdcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSB8fAogICAgICAgICAgICBzdGF0ZU92ZXJyaWRlCiAgICAgICAgICApIHsKICAgICAgICAgICAgaWYgKGJ1ZmZlciAhPSAnJykgewogICAgICAgICAgICAgIHZhciBwb3J0ID0gcGFyc2VJbnQoYnVmZmVyLCAxMCk7CiAgICAgICAgICAgICAgaWYgKHBvcnQgPiAweEZGRkYpIHJldHVybiBJTlZBTElEX1BPUlQ7CiAgICAgICAgICAgICAgdXJsLnBvcnQgPSAodXJsLmlzU3BlY2lhbCgpICYmIHBvcnQgPT09IHNwZWNpYWxTY2hlbWVzW3VybC5zY2hlbWVdKSA/IG51bGwgOiBwb3J0OwogICAgICAgICAgICAgIGJ1ZmZlciA9ICcnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47CiAgICAgICAgICAgIHN0YXRlID0gUEFUSF9TVEFSVDsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9IGVsc2UgcmV0dXJuIElOVkFMSURfUE9SVDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIEZJTEU6CiAgICAgICAgICB1cmwuc2NoZW1lID0gJ2ZpbGUnOwogICAgICAgICAgaWYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXCcpIHN0YXRlID0gRklMRV9TTEFTSDsKICAgICAgICAgIGVsc2UgaWYgKGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnKSB7CiAgICAgICAgICAgIGlmIChjaHIgPT0gRU9GKSB7CiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7CiAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7CiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTsKICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJz8nKSB7CiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7CiAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7CiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gJyc7CiAgICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTsKICAgICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7CiAgICAgICAgICAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7CiAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7CiAgICAgICAgICAgICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTsKICAgICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJzsKICAgICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGlmICghc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihqb2luKGFycmF5U2xpY2UoY29kZVBvaW50cywgcG9pbnRlciksICcnKSkpIHsKICAgICAgICAgICAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0OwogICAgICAgICAgICAgICAgdXJsLnBhdGggPSBhcnJheVNsaWNlKGJhc2UucGF0aCk7CiAgICAgICAgICAgICAgICB1cmwuc2hvcnRlblBhdGgoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzdGF0ZSA9IFBBVEg7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfSBicmVhazsKCiAgICAgICAgY2FzZSBGSUxFX1NMQVNIOgogICAgICAgICAgaWYgKGNociA9PSAnLycgfHwgY2hyID09ICdcXCcpIHsKICAgICAgICAgICAgc3RhdGUgPSBGSUxFX0hPU1Q7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgaWYgKGJhc2UgJiYgYmFzZS5zY2hlbWUgPT0gJ2ZpbGUnICYmICFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGpvaW4oYXJyYXlTbGljZShjb2RlUG9pbnRzLCBwb2ludGVyKSwgJycpKSkgewogICAgICAgICAgICBpZiAoaXNXaW5kb3dzRHJpdmVMZXR0ZXIoYmFzZS5wYXRoWzBdLCB0cnVlKSkgcHVzaCh1cmwucGF0aCwgYmFzZS5wYXRoWzBdKTsKICAgICAgICAgICAgZWxzZSB1cmwuaG9zdCA9IGJhc2UuaG9zdDsKICAgICAgICAgIH0KICAgICAgICAgIHN0YXRlID0gUEFUSDsKICAgICAgICAgIGNvbnRpbnVlOwoKICAgICAgICBjYXNlIEZJTEVfSE9TVDoKICAgICAgICAgIGlmIChjaHIgPT0gRU9GIHx8IGNociA9PSAnLycgfHwgY2hyID09ICdcXCcgfHwgY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnKSB7CiAgICAgICAgICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7CiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIOwogICAgICAgICAgICB9IGVsc2UgaWYgKGJ1ZmZlciA9PSAnJykgewogICAgICAgICAgICAgIHVybC5ob3N0ID0gJyc7CiAgICAgICAgICAgICAgaWYgKHN0YXRlT3ZlcnJpZGUpIHJldHVybjsKICAgICAgICAgICAgICBzdGF0ZSA9IFBBVEhfU1RBUlQ7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgZmFpbHVyZSA9IHVybC5wYXJzZUhvc3QoYnVmZmVyKTsKICAgICAgICAgICAgICBpZiAoZmFpbHVyZSkgcmV0dXJuIGZhaWx1cmU7CiAgICAgICAgICAgICAgaWYgKHVybC5ob3N0ID09ICdsb2NhbGhvc3QnKSB1cmwuaG9zdCA9ICcnOwogICAgICAgICAgICAgIGlmIChzdGF0ZU92ZXJyaWRlKSByZXR1cm47CiAgICAgICAgICAgICAgYnVmZmVyID0gJyc7CiAgICAgICAgICAgICAgc3RhdGUgPSBQQVRIX1NUQVJUOwogICAgICAgICAgICB9IGNvbnRpbnVlOwogICAgICAgICAgfSBlbHNlIGJ1ZmZlciArPSBjaHI7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBQQVRIX1NUQVJUOgogICAgICAgICAgaWYgKHVybC5pc1NwZWNpYWwoKSkgewogICAgICAgICAgICBzdGF0ZSA9IFBBVEg7CiAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmIGNociAhPSAnXFwnKSBjb250aW51ZTsKICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICc/JykgewogICAgICAgICAgICB1cmwucXVlcnkgPSAnJzsKICAgICAgICAgICAgc3RhdGUgPSBRVUVSWTsKICAgICAgICAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICcjJykgewogICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJzsKICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDsKICAgICAgICAgIH0gZWxzZSBpZiAoY2hyICE9IEVPRikgewogICAgICAgICAgICBzdGF0ZSA9IFBBVEg7CiAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nKSBjb250aW51ZTsKICAgICAgICAgIH0gYnJlYWs7CgogICAgICAgIGNhc2UgUEFUSDoKICAgICAgICAgIGlmICgKICAgICAgICAgICAgY2hyID09IEVPRiB8fCBjaHIgPT0gJy8nIHx8CiAgICAgICAgICAgIChjaHIgPT0gJ1xcJyAmJiB1cmwuaXNTcGVjaWFsKCkpIHx8CiAgICAgICAgICAgICghc3RhdGVPdmVycmlkZSAmJiAoY2hyID09ICc/JyB8fCBjaHIgPT0gJyMnKSkKICAgICAgICAgICkgewogICAgICAgICAgICBpZiAoaXNEb3VibGVEb3QoYnVmZmVyKSkgewogICAgICAgICAgICAgIHVybC5zaG9ydGVuUGF0aCgpOwogICAgICAgICAgICAgIGlmIChjaHIgIT0gJy8nICYmICEoY2hyID09ICdcXCcgJiYgdXJsLmlzU3BlY2lhbCgpKSkgewogICAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgJycpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmIChpc1NpbmdsZURvdChidWZmZXIpKSB7CiAgICAgICAgICAgICAgaWYgKGNociAhPSAnLycgJiYgIShjaHIgPT0gJ1xcJyAmJiB1cmwuaXNTcGVjaWFsKCkpKSB7CiAgICAgICAgICAgICAgICBwdXNoKHVybC5wYXRoLCAnJyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLnBhdGgubGVuZ3RoICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHsKICAgICAgICAgICAgICAgIGlmICh1cmwuaG9zdCkgdXJsLmhvc3QgPSAnJzsKICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGNoYXJBdChidWZmZXIsIDApICsgJzonOyAvLyBub3JtYWxpemUgd2luZG93cyBkcml2ZSBsZXR0ZXIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcHVzaCh1cmwucGF0aCwgYnVmZmVyKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBidWZmZXIgPSAnJzsKICAgICAgICAgICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnICYmIChjaHIgPT0gRU9GIHx8IGNociA9PSAnPycgfHwgY2hyID09ICcjJykpIHsKICAgICAgICAgICAgICB3aGlsZSAodXJsLnBhdGgubGVuZ3RoID4gMSAmJiB1cmwucGF0aFswXSA9PT0gJycpIHsKICAgICAgICAgICAgICAgIHNoaWZ0KHVybC5wYXRoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKGNociA9PSAnPycpIHsKICAgICAgICAgICAgICB1cmwucXVlcnkgPSAnJzsKICAgICAgICAgICAgICBzdGF0ZSA9IFFVRVJZOwogICAgICAgICAgICB9IGVsc2UgaWYgKGNociA9PSAnIycpIHsKICAgICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJzsKICAgICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBidWZmZXIgKz0gcGVyY2VudEVuY29kZShjaHIsIHBhdGhQZXJjZW50RW5jb2RlU2V0KTsKICAgICAgICAgIH0gYnJlYWs7CgogICAgICAgIGNhc2UgQ0FOTk9UX0JFX0FfQkFTRV9VUkxfUEFUSDoKICAgICAgICAgIGlmIChjaHIgPT0gJz8nKSB7CiAgICAgICAgICAgIHVybC5xdWVyeSA9ICcnOwogICAgICAgICAgICBzdGF0ZSA9IFFVRVJZOwogICAgICAgICAgfSBlbHNlIGlmIChjaHIgPT0gJyMnKSB7CiAgICAgICAgICAgIHVybC5mcmFnbWVudCA9ICcnOwogICAgICAgICAgICBzdGF0ZSA9IEZSQUdNRU5UOwogICAgICAgICAgfSBlbHNlIGlmIChjaHIgIT0gRU9GKSB7CiAgICAgICAgICAgIHVybC5wYXRoWzBdICs9IHBlcmNlbnRFbmNvZGUoY2hyLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTsKICAgICAgICAgIH0gYnJlYWs7CgogICAgICAgIGNhc2UgUVVFUlk6CiAgICAgICAgICBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hyID09ICcjJykgewogICAgICAgICAgICB1cmwuZnJhZ21lbnQgPSAnJzsKICAgICAgICAgICAgc3RhdGUgPSBGUkFHTUVOVDsKICAgICAgICAgIH0gZWxzZSBpZiAoY2hyICE9IEVPRikgewogICAgICAgICAgICBpZiAoY2hyID09ICInIiAmJiB1cmwuaXNTcGVjaWFsKCkpIHVybC5xdWVyeSArPSAnJTI3JzsKICAgICAgICAgICAgZWxzZSBpZiAoY2hyID09ICcjJykgdXJsLnF1ZXJ5ICs9ICclMjMnOwogICAgICAgICAgICBlbHNlIHVybC5xdWVyeSArPSBwZXJjZW50RW5jb2RlKGNociwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7CiAgICAgICAgICB9IGJyZWFrOwoKICAgICAgICBjYXNlIEZSQUdNRU5UOgogICAgICAgICAgaWYgKGNociAhPSBFT0YpIHVybC5mcmFnbWVudCArPSBwZXJjZW50RW5jb2RlKGNociwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0KTsKICAgICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBwb2ludGVyKys7CiAgICB9CiAgfSwKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2hvc3QtcGFyc2luZwogIHBhcnNlSG9zdDogZnVuY3Rpb24gKGlucHV0KSB7CiAgICB2YXIgcmVzdWx0LCBjb2RlUG9pbnRzLCBpbmRleDsKICAgIGlmIChjaGFyQXQoaW5wdXQsIDApID09ICdbJykgewogICAgICBpZiAoY2hhckF0KGlucHV0LCBpbnB1dC5sZW5ndGggLSAxKSAhPSAnXScpIHJldHVybiBJTlZBTElEX0hPU1Q7CiAgICAgIHJlc3VsdCA9IHBhcnNlSVB2NihzdHJpbmdTbGljZShpbnB1dCwgMSwgLTEpKTsKICAgICAgaWYgKCFyZXN1bHQpIHJldHVybiBJTlZBTElEX0hPU1Q7CiAgICAgIHRoaXMuaG9zdCA9IHJlc3VsdDsKICAgIC8vIG9wYXF1ZSBob3N0CiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU3BlY2lhbCgpKSB7CiAgICAgIGlmIChleGVjKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlRfRVhDTFVESU5HX1BFUkNFTlQsIGlucHV0KSkgcmV0dXJuIElOVkFMSURfSE9TVDsKICAgICAgcmVzdWx0ID0gJyc7CiAgICAgIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpOwogICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBjb2RlUG9pbnRzLmxlbmd0aDsgaW5kZXgrKykgewogICAgICAgIHJlc3VsdCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaW5kZXhdLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTsKICAgICAgfQogICAgICB0aGlzLmhvc3QgPSByZXN1bHQ7CiAgICB9IGVsc2UgewogICAgICBpbnB1dCA9IHRvQVNDSUkoaW5wdXQpOwogICAgICBpZiAoZXhlYyhGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5ULCBpbnB1dCkpIHJldHVybiBJTlZBTElEX0hPU1Q7CiAgICAgIHJlc3VsdCA9IHBhcnNlSVB2NChpbnB1dCk7CiAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIHJldHVybiBJTlZBTElEX0hPU1Q7CiAgICAgIHRoaXMuaG9zdCA9IHJlc3VsdDsKICAgIH0KICB9LAogIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY2Fubm90LWhhdmUtYS11c2VybmFtZS1wYXNzd29yZC1wb3J0CiAgY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0OiBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gIXRoaXMuaG9zdCB8fCB0aGlzLmNhbm5vdEJlQUJhc2VVUkwgfHwgdGhpcy5zY2hlbWUgPT0gJ2ZpbGUnOwogIH0sCiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNpbmNsdWRlLWNyZWRlbnRpYWxzCiAgaW5jbHVkZXNDcmVkZW50aWFsczogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMudXNlcm5hbWUgIT0gJycgfHwgdGhpcy5wYXNzd29yZCAhPSAnJzsKICB9LAogIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jaXMtc3BlY2lhbAogIGlzU3BlY2lhbDogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIGhhc093bihzcGVjaWFsU2NoZW1lcywgdGhpcy5zY2hlbWUpOwogIH0sCiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNzaG9ydGVuLWEtdXJscy1wYXRoCiAgc2hvcnRlblBhdGg6IGZ1bmN0aW9uICgpIHsKICAgIHZhciBwYXRoID0gdGhpcy5wYXRoOwogICAgdmFyIHBhdGhTaXplID0gcGF0aC5sZW5ndGg7CiAgICBpZiAocGF0aFNpemUgJiYgKHRoaXMuc2NoZW1lICE9ICdmaWxlJyB8fCBwYXRoU2l6ZSAhPSAxIHx8ICFpc1dpbmRvd3NEcml2ZUxldHRlcihwYXRoWzBdLCB0cnVlKSkpIHsKICAgICAgcGF0aC5sZW5ndGgtLTsKICAgIH0KICB9LAogIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jY29uY2VwdC11cmwtc2VyaWFsaXplcgogIHNlcmlhbGl6ZTogZnVuY3Rpb24gKCkgewogICAgdmFyIHVybCA9IHRoaXM7CiAgICB2YXIgc2NoZW1lID0gdXJsLnNjaGVtZTsKICAgIHZhciB1c2VybmFtZSA9IHVybC51c2VybmFtZTsKICAgIHZhciBwYXNzd29yZCA9IHVybC5wYXNzd29yZDsKICAgIHZhciBob3N0ID0gdXJsLmhvc3Q7CiAgICB2YXIgcG9ydCA9IHVybC5wb3J0OwogICAgdmFyIHBhdGggPSB1cmwucGF0aDsKICAgIHZhciBxdWVyeSA9IHVybC5xdWVyeTsKICAgIHZhciBmcmFnbWVudCA9IHVybC5mcmFnbWVudDsKICAgIHZhciBvdXRwdXQgPSBzY2hlbWUgKyAnOic7CiAgICBpZiAoaG9zdCAhPT0gbnVsbCkgewogICAgICBvdXRwdXQgKz0gJy8vJzsKICAgICAgaWYgKHVybC5pbmNsdWRlc0NyZWRlbnRpYWxzKCkpIHsKICAgICAgICBvdXRwdXQgKz0gdXNlcm5hbWUgKyAocGFzc3dvcmQgPyAnOicgKyBwYXNzd29yZCA6ICcnKSArICdAJzsKICAgICAgfQogICAgICBvdXRwdXQgKz0gc2VyaWFsaXplSG9zdChob3N0KTsKICAgICAgaWYgKHBvcnQgIT09IG51bGwpIG91dHB1dCArPSAnOicgKyBwb3J0OwogICAgfSBlbHNlIGlmIChzY2hlbWUgPT0gJ2ZpbGUnKSBvdXRwdXQgKz0gJy8vJzsKICAgIG91dHB1dCArPSB1cmwuY2Fubm90QmVBQmFzZVVSTCA/IHBhdGhbMF0gOiBwYXRoLmxlbmd0aCA/ICcvJyArIGpvaW4ocGF0aCwgJy8nKSA6ICcnOwogICAgaWYgKHF1ZXJ5ICE9PSBudWxsKSBvdXRwdXQgKz0gJz8nICsgcXVlcnk7CiAgICBpZiAoZnJhZ21lbnQgIT09IG51bGwpIG91dHB1dCArPSAnIycgKyBmcmFnbWVudDsKICAgIHJldHVybiBvdXRwdXQ7CiAgfSwKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaHJlZgogIHNldEhyZWY6IGZ1bmN0aW9uIChocmVmKSB7CiAgICB2YXIgZmFpbHVyZSA9IHRoaXMucGFyc2UoaHJlZik7CiAgICBpZiAoZmFpbHVyZSkgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpOwogICAgdGhpcy5zZWFyY2hQYXJhbXMudXBkYXRlKCk7CiAgfSwKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtb3JpZ2luCiAgZ2V0T3JpZ2luOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgc2NoZW1lID0gdGhpcy5zY2hlbWU7CiAgICB2YXIgcG9ydCA9IHRoaXMucG9ydDsKICAgIGlmIChzY2hlbWUgPT0gJ2Jsb2InKSB0cnkgewogICAgICByZXR1cm4gbmV3IFVSTENvbnN0cnVjdG9yKHNjaGVtZS5wYXRoWzBdKS5vcmlnaW47CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICByZXR1cm4gJ251bGwnOwogICAgfQogICAgaWYgKHNjaGVtZSA9PSAnZmlsZScgfHwgIXRoaXMuaXNTcGVjaWFsKCkpIHJldHVybiAnbnVsbCc7CiAgICByZXR1cm4gc2NoZW1lICsgJzovLycgKyBzZXJpYWxpemVIb3N0KHRoaXMuaG9zdCkgKyAocG9ydCAhPT0gbnVsbCA/ICc6JyArIHBvcnQgOiAnJyk7CiAgfSwKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcHJvdG9jb2wKICBnZXRQcm90b2NvbDogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXMuc2NoZW1lICsgJzonOwogIH0sCiAgc2V0UHJvdG9jb2w6IGZ1bmN0aW9uIChwcm90b2NvbCkgewogICAgdGhpcy5wYXJzZSgkdG9TdHJpbmcocHJvdG9jb2wpICsgJzonLCBTQ0hFTUVfU1RBUlQpOwogIH0sCiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXVzZXJuYW1lCiAgZ2V0VXNlcm5hbWU6IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLnVzZXJuYW1lOwogIH0sCiAgc2V0VXNlcm5hbWU6IGZ1bmN0aW9uICh1c2VybmFtZSkgewogICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oJHRvU3RyaW5nKHVzZXJuYW1lKSk7CiAgICBpZiAodGhpcy5jYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQoKSkgcmV0dXJuOwogICAgdGhpcy51c2VybmFtZSA9ICcnOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHRoaXMudXNlcm5hbWUgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpOwogICAgfQogIH0sCiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBhc3N3b3JkCiAgZ2V0UGFzc3dvcmQ6IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLnBhc3N3b3JkOwogIH0sCiAgc2V0UGFzc3dvcmQ6IGZ1bmN0aW9uIChwYXNzd29yZCkgewogICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oJHRvU3RyaW5nKHBhc3N3b3JkKSk7CiAgICBpZiAodGhpcy5jYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQoKSkgcmV0dXJuOwogICAgdGhpcy5wYXNzd29yZCA9ICcnOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHRoaXMucGFzc3dvcmQgKz0gcGVyY2VudEVuY29kZShjb2RlUG9pbnRzW2ldLCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpOwogICAgfQogIH0sCiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3QKICBnZXRIb3N0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgaG9zdCA9IHRoaXMuaG9zdDsKICAgIHZhciBwb3J0ID0gdGhpcy5wb3J0OwogICAgcmV0dXJuIGhvc3QgPT09IG51bGwgPyAnJwogICAgICA6IHBvcnQgPT09IG51bGwgPyBzZXJpYWxpemVIb3N0KGhvc3QpCiAgICAgIDogc2VyaWFsaXplSG9zdChob3N0KSArICc6JyArIHBvcnQ7CiAgfSwKICBzZXRIb3N0OiBmdW5jdGlvbiAoaG9zdCkgewogICAgaWYgKHRoaXMuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuOwogICAgdGhpcy5wYXJzZShob3N0LCBIT1NUKTsKICB9LAogIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1ob3N0bmFtZQogIGdldEhvc3RuYW1lOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgaG9zdCA9IHRoaXMuaG9zdDsKICAgIHJldHVybiBob3N0ID09PSBudWxsID8gJycgOiBzZXJpYWxpemVIb3N0KGhvc3QpOwogIH0sCiAgc2V0SG9zdG5hbWU6IGZ1bmN0aW9uIChob3N0bmFtZSkgewogICAgaWYgKHRoaXMuY2Fubm90QmVBQmFzZVVSTCkgcmV0dXJuOwogICAgdGhpcy5wYXJzZShob3N0bmFtZSwgSE9TVE5BTUUpOwogIH0sCiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXBvcnQKICBnZXRQb3J0OiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgcG9ydCA9IHRoaXMucG9ydDsKICAgIHJldHVybiBwb3J0ID09PSBudWxsID8gJycgOiAkdG9TdHJpbmcocG9ydCk7CiAgfSwKICBzZXRQb3J0OiBmdW5jdGlvbiAocG9ydCkgewogICAgaWYgKHRoaXMuY2Fubm90SGF2ZVVzZXJuYW1lUGFzc3dvcmRQb3J0KCkpIHJldHVybjsKICAgIHBvcnQgPSAkdG9TdHJpbmcocG9ydCk7CiAgICBpZiAocG9ydCA9PSAnJykgdGhpcy5wb3J0ID0gbnVsbDsKICAgIGVsc2UgdGhpcy5wYXJzZShwb3J0LCBQT1JUKTsKICB9LAogIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXRobmFtZQogIGdldFBhdGhuYW1lOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgcGF0aCA9IHRoaXMucGF0aDsKICAgIHJldHVybiB0aGlzLmNhbm5vdEJlQUJhc2VVUkwgPyBwYXRoWzBdIDogcGF0aC5sZW5ndGggPyAnLycgKyBqb2luKHBhdGgsICcvJykgOiAnJzsKICB9LAogIHNldFBhdGhuYW1lOiBmdW5jdGlvbiAocGF0aG5hbWUpIHsKICAgIGlmICh0aGlzLmNhbm5vdEJlQUJhc2VVUkwpIHJldHVybjsKICAgIHRoaXMucGF0aCA9IFtdOwogICAgdGhpcy5wYXJzZShwYXRobmFtZSwgUEFUSF9TVEFSVCk7CiAgfSwKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNoCiAgZ2V0U2VhcmNoOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgcXVlcnkgPSB0aGlzLnF1ZXJ5OwogICAgcmV0dXJuIHF1ZXJ5ID8gJz8nICsgcXVlcnkgOiAnJzsKICB9LAogIHNldFNlYXJjaDogZnVuY3Rpb24gKHNlYXJjaCkgewogICAgc2VhcmNoID0gJHRvU3RyaW5nKHNlYXJjaCk7CiAgICBpZiAoc2VhcmNoID09ICcnKSB7CiAgICAgIHRoaXMucXVlcnkgPSBudWxsOwogICAgfSBlbHNlIHsKICAgICAgaWYgKCc/JyA9PSBjaGFyQXQoc2VhcmNoLCAwKSkgc2VhcmNoID0gc3RyaW5nU2xpY2Uoc2VhcmNoLCAxKTsKICAgICAgdGhpcy5xdWVyeSA9ICcnOwogICAgICB0aGlzLnBhcnNlKHNlYXJjaCwgUVVFUlkpOwogICAgfQogICAgdGhpcy5zZWFyY2hQYXJhbXMudXBkYXRlKCk7CiAgfSwKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNocGFyYW1zCiAgZ2V0U2VhcmNoUGFyYW1zOiBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpcy5zZWFyY2hQYXJhbXMuZmFjYWRlOwogIH0sCiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhhc2gKICBnZXRIYXNoOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50OwogICAgcmV0dXJuIGZyYWdtZW50ID8gJyMnICsgZnJhZ21lbnQgOiAnJzsKICB9LAogIHNldEhhc2g6IGZ1bmN0aW9uIChoYXNoKSB7CiAgICBoYXNoID0gJHRvU3RyaW5nKGhhc2gpOwogICAgaWYgKGhhc2ggPT0gJycpIHsKICAgICAgdGhpcy5mcmFnbWVudCA9IG51bGw7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmICgnIycgPT0gY2hhckF0KGhhc2gsIDApKSBoYXNoID0gc3RyaW5nU2xpY2UoaGFzaCwgMSk7CiAgICB0aGlzLmZyYWdtZW50ID0gJyc7CiAgICB0aGlzLnBhcnNlKGhhc2gsIEZSQUdNRU5UKTsKICB9LAogIHVwZGF0ZTogZnVuY3Rpb24gKCkgewogICAgdGhpcy5xdWVyeSA9IHRoaXMuc2VhcmNoUGFyYW1zLnNlcmlhbGl6ZSgpIHx8IG51bGw7CiAgfQp9OwoKLy8gYFVSTGAgY29uc3RydWN0b3IKLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtY2xhc3MKdmFyIFVSTENvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMKHVybCAvKiAsIGJhc2UgKi8pIHsKICB2YXIgdGhhdCA9IGFuSW5zdGFuY2UodGhpcywgVVJMUHJvdG90eXBlKTsKICB2YXIgYmFzZSA9IHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDsKICB2YXIgc3RhdGUgPSBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIG5ldyBVUkxTdGF0ZSh1cmwsIGZhbHNlLCBiYXNlKSk7CiAgaWYgKCFERVNDUklQVE9SUykgewogICAgdGhhdC5ocmVmID0gc3RhdGUuc2VyaWFsaXplKCk7CiAgICB0aGF0Lm9yaWdpbiA9IHN0YXRlLmdldE9yaWdpbigpOwogICAgdGhhdC5wcm90b2NvbCA9IHN0YXRlLmdldFByb3RvY29sKCk7CiAgICB0aGF0LnVzZXJuYW1lID0gc3RhdGUuZ2V0VXNlcm5hbWUoKTsKICAgIHRoYXQucGFzc3dvcmQgPSBzdGF0ZS5nZXRQYXNzd29yZCgpOwogICAgdGhhdC5ob3N0ID0gc3RhdGUuZ2V0SG9zdCgpOwogICAgdGhhdC5ob3N0bmFtZSA9IHN0YXRlLmdldEhvc3RuYW1lKCk7CiAgICB0aGF0LnBvcnQgPSBzdGF0ZS5nZXRQb3J0KCk7CiAgICB0aGF0LnBhdGhuYW1lID0gc3RhdGUuZ2V0UGF0aG5hbWUoKTsKICAgIHRoYXQuc2VhcmNoID0gc3RhdGUuZ2V0U2VhcmNoKCk7CiAgICB0aGF0LnNlYXJjaFBhcmFtcyA9IHN0YXRlLmdldFNlYXJjaFBhcmFtcygpOwogICAgdGhhdC5oYXNoID0gc3RhdGUuZ2V0SGFzaCgpOwogIH0KfTsKCnZhciBVUkxQcm90b3R5cGUgPSBVUkxDb25zdHJ1Y3Rvci5wcm90b3R5cGU7Cgp2YXIgYWNjZXNzb3JEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGdldHRlciwgc2V0dGVyKSB7CiAgcmV0dXJuIHsKICAgIGdldDogZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKVtnZXR0ZXJdKCk7CiAgICB9LAogICAgc2V0OiBzZXR0ZXIgJiYgZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgIHJldHVybiBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpW3NldHRlcl0odmFsdWUpOwogICAgfSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIGVudW1lcmFibGU6IHRydWUKICB9Owp9OwoKaWYgKERFU0NSSVBUT1JTKSB7CiAgLy8gYFVSTC5wcm90b3R5cGUuaHJlZmAgYWNjZXNzb3JzIHBhaXIKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaHJlZgogIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdocmVmJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdzZXJpYWxpemUnLCAnc2V0SHJlZicpKTsKICAvLyBgVVJMLnByb3RvdHlwZS5vcmlnaW5gIGdldHRlcgogIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1vcmlnaW4KICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnb3JpZ2luJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRPcmlnaW4nKSk7CiAgLy8gYFVSTC5wcm90b3R5cGUucHJvdG9jb2xgIGFjY2Vzc29ycyBwYWlyCiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLXByb3RvY29sCiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3Byb3RvY29sJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRQcm90b2NvbCcsICdzZXRQcm90b2NvbCcpKTsKICAvLyBgVVJMLnByb3RvdHlwZS51c2VybmFtZWAgYWNjZXNzb3JzIHBhaXIKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtdXNlcm5hbWUKICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAndXNlcm5hbWUnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFVzZXJuYW1lJywgJ3NldFVzZXJuYW1lJykpOwogIC8vIGBVUkwucHJvdG90eXBlLnBhc3N3b3JkYCBhY2Nlc3NvcnMgcGFpcgogIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wYXNzd29yZAogIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdwYXNzd29yZCcsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0UGFzc3dvcmQnLCAnc2V0UGFzc3dvcmQnKSk7CiAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdGAgYWNjZXNzb3JzIHBhaXIKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaG9zdAogIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdob3N0JywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRIb3N0JywgJ3NldEhvc3QnKSk7CiAgLy8gYFVSTC5wcm90b3R5cGUuaG9zdG5hbWVgIGFjY2Vzc29ycyBwYWlyCiAgLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNkb20tdXJsLWhvc3RuYW1lCiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ2hvc3RuYW1lJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRIb3N0bmFtZScsICdzZXRIb3N0bmFtZScpKTsKICAvLyBgVVJMLnByb3RvdHlwZS5wb3J0YCBhY2Nlc3NvcnMgcGFpcgogIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1wb3J0CiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3BvcnQnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFBvcnQnLCAnc2V0UG9ydCcpKTsKICAvLyBgVVJMLnByb3RvdHlwZS5wYXRobmFtZWAgYWNjZXNzb3JzIHBhaXIKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtcGF0aG5hbWUKICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAncGF0aG5hbWUnLCBhY2Nlc3NvckRlc2NyaXB0b3IoJ2dldFBhdGhuYW1lJywgJ3NldFBhdGhuYW1lJykpOwogIC8vIGBVUkwucHJvdG90eXBlLnNlYXJjaGAgYWNjZXNzb3JzIHBhaXIKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtc2VhcmNoCiAgZGVmaW5lQnVpbHRJbkFjY2Vzc29yKFVSTFByb3RvdHlwZSwgJ3NlYXJjaCcsIGFjY2Vzc29yRGVzY3JpcHRvcignZ2V0U2VhcmNoJywgJ3NldFNlYXJjaCcpKTsKICAvLyBgVVJMLnByb3RvdHlwZS5zZWFyY2hQYXJhbXNgIGdldHRlcgogIC8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC1zZWFyY2hwYXJhbXMKICBkZWZpbmVCdWlsdEluQWNjZXNzb3IoVVJMUHJvdG90eXBlLCAnc2VhcmNoUGFyYW1zJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRTZWFyY2hQYXJhbXMnKSk7CiAgLy8gYFVSTC5wcm90b3R5cGUuaGFzaGAgYWNjZXNzb3JzIHBhaXIKICAvLyBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RvbS11cmwtaGFzaAogIGRlZmluZUJ1aWx0SW5BY2Nlc3NvcihVUkxQcm90b3R5cGUsICdoYXNoJywgYWNjZXNzb3JEZXNjcmlwdG9yKCdnZXRIYXNoJywgJ3NldEhhc2gnKSk7Cn0KCi8vIGBVUkwucHJvdG90eXBlLnRvSlNPTmAgbWV0aG9kCi8vIGh0dHBzOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jZG9tLXVybC10b2pzb24KZGVmaW5lQnVpbHRJbihVUkxQcm90b3R5cGUsICd0b0pTT04nLCBmdW5jdGlvbiB0b0pTT04oKSB7CiAgcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2VyaWFsaXplKCk7Cn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTsKCi8vIGBVUkwucHJvdG90eXBlLnRvU3RyaW5nYCBtZXRob2QKLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyNVUkwtc3RyaW5naWZpY2F0aW9uLWJlaGF2aW9yCmRlZmluZUJ1aWx0SW4oVVJMUHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHsKICByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5zZXJpYWxpemUoKTsKfSwgeyBlbnVtZXJhYmxlOiB0cnVlIH0pOwoKaWYgKE5hdGl2ZVVSTCkgewogIHZhciBuYXRpdmVDcmVhdGVPYmplY3RVUkwgPSBOYXRpdmVVUkwuY3JlYXRlT2JqZWN0VVJMOwogIHZhciBuYXRpdmVSZXZva2VPYmplY3RVUkwgPSBOYXRpdmVVUkwucmV2b2tlT2JqZWN0VVJMOwogIC8vIGBVUkwuY3JlYXRlT2JqZWN0VVJMYCBtZXRob2QKICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVVJML2NyZWF0ZU9iamVjdFVSTAogIGlmIChuYXRpdmVDcmVhdGVPYmplY3RVUkwpIGRlZmluZUJ1aWx0SW4oVVJMQ29uc3RydWN0b3IsICdjcmVhdGVPYmplY3RVUkwnLCBiaW5kKG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCwgTmF0aXZlVVJMKSk7CiAgLy8gYFVSTC5yZXZva2VPYmplY3RVUkxgIG1ldGhvZAogIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwvcmV2b2tlT2JqZWN0VVJMCiAgaWYgKG5hdGl2ZVJldm9rZU9iamVjdFVSTCkgZGVmaW5lQnVpbHRJbihVUkxDb25zdHJ1Y3RvciwgJ3Jldm9rZU9iamVjdFVSTCcsIGJpbmQobmF0aXZlUmV2b2tlT2JqZWN0VVJMLCBOYXRpdmVVUkwpKTsKfQoKc2V0VG9TdHJpbmdUYWcoVVJMQ29uc3RydWN0b3IsICdVUkwnKTsKCiQoeyBnbG9iYWw6IHRydWUsIGNvbnN0cnVjdG9yOiB0cnVlLCBmb3JjZWQ6ICFVU0VfTkFUSVZFX1VSTCwgc2hhbTogIURFU0NSSVBUT1JTIH0sIHsKICBVUkw6IFVSTENvbnN0cnVjdG9yCn0pOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy93ZWIudXJsLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL3dlYi51cmwuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCi8vIFRPRE86IFJlbW92ZSB0aGlzIG1vZHVsZSBmcm9tIGBjb3JlLWpzQDRgIHNpbmNlIGl0J3MgcmVwbGFjZWQgdG8gbW9kdWxlIGJlbG93Cl9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL21vZHVsZXMvd2ViLnVybC5jb25zdHJ1Y3RvciAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL3dlYi51cmwuY29uc3RydWN0b3IuanMiKTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvd2ViLnVybC50by1qc29uLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvd2ViLnVybC50by1qc29uLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKCkgPT4gewoKLy8gZW1wdHkKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3N0YWJsZS9nbG9iYWwtdGhpcy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvc3RhYmxlL2dsb2JhbC10aGlzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIHBhcmVudCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2VzL2dsb2JhbC10aGlzICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL2VzL2dsb2JhbC10aGlzLmpzIik7Cgptb2R1bGUuZXhwb3J0cyA9IHBhcmVudDsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3dlYi91cmwtc2VhcmNoLXBhcmFtcy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvd2ViL3VybC1zZWFyY2gtcGFyYW1zLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiKTsKX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuc2l6ZSAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5zaXplLmpzIik7CnZhciBwYXRoID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vaW50ZXJuYWxzL3BhdGggKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvaW50ZXJuYWxzL3BhdGguanMiKTsKCm1vZHVsZS5leHBvcnRzID0gcGF0aC5VUkxTZWFyY2hQYXJhbXM7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS93ZWIvdXJsLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvd2ViL3VybC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgpfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9tb2R1bGVzL3dlYi51cmwgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy93ZWIudXJsLmpzIik7Cl9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL21vZHVsZXMvd2ViLnVybC5jYW4tcGFyc2UgKi8gIi4uLy4uLy55YXJuL3VucGx1Z2dlZC9jb3JlLWpzLXB1cmUtbnBtLTMuMzAuMC0xNDgzN2ZjMjc2L25vZGVfbW9kdWxlcy9jb3JlLWpzLXB1cmUvbW9kdWxlcy93ZWIudXJsLmNhbi1wYXJzZS5qcyIpOwpfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9tb2R1bGVzL3dlYi51cmwudG8tanNvbiAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL3dlYi51cmwudG8tanNvbi5qcyIpOwpfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5qcyIpOwpfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9tb2R1bGVzL3dlYi51cmwtc2VhcmNoLXBhcmFtcy5zaXplICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL21vZHVsZXMvd2ViLnVybC1zZWFyY2gtcGFyYW1zLnNpemUuanMiKTsKdmFyIHBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9pbnRlcm5hbHMvcGF0aCAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9pbnRlcm5hbHMvcGF0aC5qcyIpOwoKbW9kdWxlLmV4cG9ydHMgPSBwYXRoLlVSTDsKCgovKioqLyB9KSwKCi8qKiovICJAbW1hL3V0aWxzMSI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogZXh0ZXJuYWwgIkBtbWEvdXRpbHMxIiAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUpID0+IHsKCiJ1c2Ugc3RyaWN0IjsKbW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX19tbWFfdXRpbHMxX187CgovKioqLyB9KSwKCi8qKiovICJAbW1hL3V0aWxzMiI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogZXh0ZXJuYWwgIkBtbWEvdXRpbHMyIiAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUpID0+IHsKCiJ1c2Ugc3RyaWN0IjsKbW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX19tbWFfdXRpbHMyX187CgovKioqLyB9KSwKCi8qKiovICJyZWFjdCI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogZXh0ZXJuYWwgInJlYWN0IiAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUpID0+IHsKCiJ1c2Ugc3RyaWN0IjsKbW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3JlYWN0X187CgovKioqLyB9KSwKCi8qKiovICJyZWFjdC1kb20iOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiBleHRlcm5hbCAicmVhY3QtZG9tIiAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7CgoidXNlIHN0cmljdCI7Cm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9kb21fXzsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vY2xpZW50L0Vycm9yT3ZlcmxheUVudHJ5LmpzP3NvY2tIb3N0PWxvY2FsaG9zdCZzb2NrUHJvdG9jb2w9aHR0cCI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL2NsaWVudC9FcnJvck92ZXJsYXlFbnRyeS5qcz9zb2NrSG9zdD1sb2NhbGhvc3Qmc29ja1Byb3RvY29sPWh0dHAgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgp2YXIgX19yZXNvdXJjZVF1ZXJ5ID0gIj9zb2NrSG9zdD1sb2NhbGhvc3Qmc29ja1Byb3RvY29sPWh0dHAiOwovKiBwcm92aWRlZCBkZXBlbmRlbmN5ICovIHZhciBfX3JlYWN0X3JlZnJlc2hfZXJyb3Jfb3ZlcmxheV9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2luZGV4LmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL292ZXJsYXkvaW5kZXguanMiKTsKLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgX19yZWFjdF9yZWZyZXNoX3NvY2tldF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9zb2NrZXRzL1dEU1NvY2tldC5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9zb2NrZXRzL1dEU1NvY2tldC5qcyIpOwovKiBnbG9iYWwgX19yZWFjdF9yZWZyZXNoX2Vycm9yX292ZXJsYXlfXywgX19yZWFjdF9yZWZyZXNoX3NvY2tldF9fLCBfX3Jlc291cmNlUXVlcnkgKi8KCmNvbnN0IGV2ZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvZXJyb3JFdmVudEhhbmRsZXJzLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL2NsaWVudC91dGlscy9lcnJvckV2ZW50SGFuZGxlcnMuanMiKTsKY29uc3QgZm9ybWF0V2VicGFja0Vycm9ycyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvZm9ybWF0V2VicGFja0Vycm9ycy5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9jbGllbnQvdXRpbHMvZm9ybWF0V2VicGFja0Vycm9ycy5qcyIpOwpjb25zdCBydW5XaXRoUGF0Y2hlZFVybCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvcGF0Y2hVcmwuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vY2xpZW50L3V0aWxzL3BhdGNoVXJsLmpzIik7CmNvbnN0IHJ1bldpdGhSZXRyeSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvcmV0cnkuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vY2xpZW50L3V0aWxzL3JldHJ5LmpzIik7CgovLyBTZXR1cCBlcnJvciBzdGF0ZXMKbGV0IGlzSG90UmVsb2FkID0gZmFsc2U7CmxldCBoYXNSdW50aW1lRXJyb3JzID0gZmFsc2U7CgovKioKICogVHJ5IGRpc21pc3NpbmcgdGhlIGNvbXBpbGUgZXJyb3Igb3ZlcmxheS4KICogVGhpcyB3aWxsIGFsc28gcmVzZXQgcnVudGltZSBlcnJvciByZWNvcmRzIChpZiBhbnkpLAogKiBiZWNhdXNlIHdlIGhhdmUgbmV3IHNvdXJjZSB0byBldmFsdWF0ZS4KICogQHJldHVybnMge3ZvaWR9CiAqLwpmdW5jdGlvbiB0cnlEaXNtaXNzRXJyb3JPdmVybGF5KCkgewogIF9fcmVhY3RfcmVmcmVzaF9lcnJvcl9vdmVybGF5X18uY2xlYXJDb21waWxlRXJyb3IoKTsKICBfX3JlYWN0X3JlZnJlc2hfZXJyb3Jfb3ZlcmxheV9fLmNsZWFyUnVudGltZUVycm9ycyghaGFzUnVudGltZUVycm9ycyk7CiAgaGFzUnVudGltZUVycm9ycyA9IGZhbHNlOwp9CgovKioKICogQSBmdW5jdGlvbiBjYWxsZWQgYWZ0ZXIgYSBjb21waWxlIHN1Y2Nlc3Mgc2lnbmFsIGlzIHJlY2VpdmVkIGZyb20gV2VicGFjay4KICogQHJldHVybnMge3ZvaWR9CiAqLwpmdW5jdGlvbiBoYW5kbGVDb21waWxlU3VjY2VzcygpIHsKICBpc0hvdFJlbG9hZCA9IHRydWU7CgogIGlmIChpc0hvdFJlbG9hZCkgewogICAgdHJ5RGlzbWlzc0Vycm9yT3ZlcmxheSgpOwogIH0KfQoKLyoqCiAqIEEgZnVuY3Rpb24gY2FsbGVkIGFmdGVyIGEgY29tcGlsZSBlcnJvcmVkIHNpZ25hbCBpcyByZWNlaXZlZCBmcm9tIFdlYnBhY2suCiAqIEBwYXJhbSB7c3RyaW5nW119IGVycm9ycwogKiBAcmV0dXJucyB7dm9pZH0KICovCmZ1bmN0aW9uIGhhbmRsZUNvbXBpbGVFcnJvcnMoZXJyb3JzKSB7CiAgaXNIb3RSZWxvYWQgPSB0cnVlOwoKICBjb25zdCBmb3JtYXR0ZWRFcnJvcnMgPSBmb3JtYXRXZWJwYWNrRXJyb3JzKGVycm9ycyk7CgogIC8vIE9ubHkgc2hvdyB0aGUgZmlyc3QgZXJyb3IKICBfX3JlYWN0X3JlZnJlc2hfZXJyb3Jfb3ZlcmxheV9fLnNob3dDb21waWxlRXJyb3IoZm9ybWF0dGVkRXJyb3JzWzBdKTsKfQoKLyoqCiAqIEhhbmRsZXMgY29tcGlsYXRpb24gbWVzc2FnZXMgZnJvbSBXZWJwYWNrLgogKiBJbnRlZ3JhdGVzIHdpdGggYSBjb21waWxlIGVycm9yIG92ZXJsYXkuCiAqIEBwYXJhbSB7Kn0gbWVzc2FnZSBBIFdlYnBhY2sgSE1SIG1lc3NhZ2Ugc2VudCB2aWEgV2ViU29ja2V0cy4KICogQHJldHVybnMge3ZvaWR9CiAqLwpmdW5jdGlvbiBjb21waWxlTWVzc2FnZUhhbmRsZXIobWVzc2FnZSkgewogIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7CiAgICBjYXNlICdvayc6CiAgICBjYXNlICdzdGlsbC1vayc6CiAgICBjYXNlICd3YXJuaW5ncyc6IHsKICAgICAgLy8gVE9ETzogSW1wbGVtZW50IGhhbmRsaW5nIGZvciB3YXJuaW5ncwogICAgICBoYW5kbGVDb21waWxlU3VjY2VzcygpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgJ2Vycm9ycyc6IHsKICAgICAgaGFuZGxlQ29tcGlsZUVycm9ycyhtZXNzYWdlLmRhdGEpOwogICAgICBicmVhazsKICAgIH0KICAgIGRlZmF1bHQ6IHsKICAgICAgLy8gRG8gbm90aGluZy4KICAgIH0KICB9Cn0KCmlmICh0cnVlKSB7CiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7CiAgICBydW5XaXRoUGF0Y2hlZFVybChmdW5jdGlvbiBzZXR1cE92ZXJsYXkoKSB7CiAgICAgIC8vIE9ubHkgcmVnaXN0ZXIgaWYgbm8gb3RoZXIgb3ZlcmxheSBoYXZlIGJlZW4gcmVnaXN0ZXJlZAogICAgICBpZiAoIXdpbmRvdy5fX3JlYWN0UmVmcmVzaE92ZXJsYXlJbmplY3RlZCAmJiBfX3JlYWN0X3JlZnJlc2hfc29ja2V0X18pIHsKICAgICAgICAvLyBSZWdpc3RlcnMgaGFuZGxlcnMgZm9yIGNvbXBpbGUgZXJyb3JzIHdpdGggcmV0cnkgLQogICAgICAgIC8vIFRoaXMgaXMgdG8gcHJldmVudCBtaXNtYXRjaGluZyBpbmplY3Rpb24gb3JkZXIgY2F1c2luZyBlcnJvcnMgdG8gYmUgdGhyb3duCiAgICAgICAgcnVuV2l0aFJldHJ5KGZ1bmN0aW9uIGluaXRTb2NrZXQoKSB7CiAgICAgICAgICBfX3JlYWN0X3JlZnJlc2hfc29ja2V0X18uaW5pdChjb21waWxlTWVzc2FnZUhhbmRsZXIsIF9fcmVzb3VyY2VRdWVyeSk7CiAgICAgICAgfSwgMyk7CiAgICAgICAgLy8gUmVnaXN0ZXJzIGhhbmRsZXJzIGZvciBydW50aW1lIGVycm9ycwogICAgICAgIGV2ZW50cy5oYW5kbGVFcnJvcihmdW5jdGlvbiBoYW5kbGVFcnJvcihlcnJvcikgewogICAgICAgICAgaGFzUnVudGltZUVycm9ycyA9IHRydWU7CiAgICAgICAgICBfX3JlYWN0X3JlZnJlc2hfZXJyb3Jfb3ZlcmxheV9fLmhhbmRsZVJ1bnRpbWVFcnJvcihlcnJvcik7CiAgICAgICAgfSk7CiAgICAgICAgZXZlbnRzLmhhbmRsZVVuaGFuZGxlZFJlamVjdGlvbihmdW5jdGlvbiBoYW5kbGVVbmhhbmRsZWRQcm9taXNlUmVqZWN0aW9uKGVycm9yKSB7CiAgICAgICAgICBoYXNSdW50aW1lRXJyb3JzID0gdHJ1ZTsKICAgICAgICAgIF9fcmVhY3RfcmVmcmVzaF9lcnJvcl9vdmVybGF5X18uaGFuZGxlUnVudGltZUVycm9yKGVycm9yKTsKICAgICAgICB9KTsKCiAgICAgICAgLy8gTWFyayBvdmVybGF5IGFzIGluamVjdGVkIHRvIHByZXZlbnQgZG91YmxlLWluamVjdGlvbgogICAgICAgIHdpbmRvdy5fX3JlYWN0UmVmcmVzaE92ZXJsYXlJbmplY3RlZCA9IHRydWU7CiAgICAgIH0KICAgIH0pOwogIH0KfQoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vY2xpZW50L1JlYWN0UmVmcmVzaEVudHJ5LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9jbGllbnQvUmVhY3RSZWZyZXNoRW50cnkuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCi8qIGdsb2JhbCBfX3JlYWN0X3JlZnJlc2hfbGlicmFyeV9fICovCgpjb25zdCBzYWZlVGhpcyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGNvcmUtanMtcHVyZS9mZWF0dXJlcy9nbG9iYWwtdGhpcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS9mZWF0dXJlcy9nbG9iYWwtdGhpcy5qcyIpOwpjb25zdCBSZWZyZXNoUnVudGltZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0LXJlZnJlc2gvcnVudGltZSAqLyAiLi4vLi4vLnlhcm4vY2FjaGUvcmVhY3QtcmVmcmVzaC1ucG0tMC4xNC4wLTc4ZWY1ZWViNzMtZGM2OWZhOGM5OS56aXAvbm9kZV9tb2R1bGVzL3JlYWN0LXJlZnJlc2gvcnVudGltZS5qcyIpOwoKaWYgKHRydWUpIHsKICBpZiAodHlwZW9mIHNhZmVUaGlzICE9PSAndW5kZWZpbmVkJykgewogICAgdmFyICRSZWZyZXNoSW5qZWN0ZWQkID0gJ19fcmVhY3RSZWZyZXNoSW5qZWN0ZWQnOwogICAgLy8gTmFtZXNwYWNlIHRoZSBpbmplY3RlZCBmbGFnIChpZiBuZWNlc3NhcnkpIGZvciBtb25vcmVwbyBjb21wYXRpYmlsaXR5CiAgICBpZiAodHJ1ZSkgewogICAgICAkUmVmcmVzaEluamVjdGVkJCArPSAnXycgKyAiYXBwMSI7CiAgICB9CgogICAgLy8gT25seSBpbmplY3QgdGhlIHJ1bnRpbWUgaWYgaXQgaGFzbid0IGJlZW4gaW5qZWN0ZWQKICAgIGlmICghc2FmZVRoaXNbJFJlZnJlc2hJbmplY3RlZCRdKSB7CiAgICAgIC8vIEluamVjdCByZWZyZXNoIHJ1bnRpbWUgaW50byBnbG9iYWwgc2NvcGUKICAgICAgUmVmcmVzaFJ1bnRpbWUuaW5qZWN0SW50b0dsb2JhbEhvb2soc2FmZVRoaXMpOwoKICAgICAgLy8gTWFyayB0aGUgcnVudGltZSBhcyBpbmplY3RlZCB0byBwcmV2ZW50IGRvdWJsZS1pbmplY3Rpb24KICAgICAgc2FmZVRoaXNbJFJlZnJlc2hJbmplY3RlZCRdID0gdHJ1ZTsKICAgIH0KICB9Cn0KCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL2NsaWVudC91dGlscy9lcnJvckV2ZW50SGFuZGxlcnMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9jbGllbnQvdXRpbHMvZXJyb3JFdmVudEhhbmRsZXJzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7CgovKioKICogQGNhbGxiYWNrIEV2ZW50Q2FsbGJhY2sKICogQHBhcmFtIHtzdHJpbmcgfCBFcnJvciB8IG51bGx9IGNvbnRleHQKICogQHJldHVybnMge3ZvaWR9CiAqLwovKioKICogQGNhbGxiYWNrIEV2ZW50SGFuZGxlcgogKiBAcGFyYW0ge0V2ZW50fSBldmVudAogKiBAcmV0dXJucyB7dm9pZH0KICovCgovKioKICogQSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYW4gZXZlbnQgaGFuZGxlciBmb3IgdGhlIGBlcnJvcmAgZXZlbnQuCiAqIEBwYXJhbSB7RXZlbnRDYWxsYmFja30gY2FsbGJhY2sgQSBmdW5jdGlvbiBjYWxsZWQgdG8gaGFuZGxlIHRoZSBlcnJvciBjb250ZXh0LgogKiBAcmV0dXJucyB7RXZlbnRIYW5kbGVyfSBBIGhhbmRsZXIgZm9yIHRoZSBgZXJyb3JgIGV2ZW50LgogKi8KZnVuY3Rpb24gY3JlYXRlRXJyb3JIYW5kbGVyKGNhbGxiYWNrKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIGVycm9ySGFuZGxlcihldmVudCkgewogICAgaWYgKCFldmVudCB8fCAhZXZlbnQuZXJyb3IpIHsKICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwpOwogICAgfQogICAgaWYgKGV2ZW50LmVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHsKICAgICAgcmV0dXJuIGNhbGxiYWNrKGV2ZW50LmVycm9yKTsKICAgIH0KICAgIC8vIEEgbm9uLWVycm9yIHdhcyB0aHJvd24sIHdlIGRvbid0IGhhdmUgYSB0cmFjZS4gOigKICAgIC8vIExvb2sgaW4geW91ciBicm93c2VyJ3MgZGV2dG9vbHMgZm9yIG1vcmUgaW5mb3JtYXRpb24KICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoZXZlbnQuZXJyb3IpKTsKICB9Owp9CgovKioKICogQSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYW4gZXZlbnQgaGFuZGxlciBmb3IgdGhlIGB1bmhhbmRsZWRyZWplY3Rpb25gIGV2ZW50LgogKiBAcGFyYW0ge0V2ZW50Q2FsbGJhY2t9IGNhbGxiYWNrIEEgZnVuY3Rpb24gY2FsbGVkIHRvIGhhbmRsZSB0aGUgZXJyb3IgY29udGV4dC4KICogQHJldHVybnMge0V2ZW50SGFuZGxlcn0gQSBoYW5kbGVyIGZvciB0aGUgYHVuaGFuZGxlZHJlamVjdGlvbmAgZXZlbnQuCiAqLwpmdW5jdGlvbiBjcmVhdGVSZWplY3Rpb25IYW5kbGVyKGNhbGxiYWNrKSB7CiAgcmV0dXJuIGZ1bmN0aW9uIHJlamVjdGlvbkhhbmRsZXIoZXZlbnQpIHsKICAgIGlmICghZXZlbnQgfHwgIWV2ZW50LnJlYXNvbikgewogICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKCdVbmtub3duJykpOwogICAgfQogICAgaWYgKGV2ZW50LnJlYXNvbiBpbnN0YW5jZW9mIEVycm9yKSB7CiAgICAgIHJldHVybiBjYWxsYmFjayhldmVudC5yZWFzb24pOwogICAgfQogICAgLy8gQSBub24tZXJyb3Igd2FzIHJlamVjdGVkLCB3ZSBkb24ndCBoYXZlIGEgdHJhY2UgOigKICAgIC8vIExvb2sgaW4geW91ciBicm93c2VyJ3MgZGV2dG9vbHMgZm9yIG1vcmUgaW5mb3JtYXRpb24KICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoZXZlbnQucmVhc29uKSk7CiAgfTsKfQoKLyoqCiAqIENyZWF0ZXMgYSBoYW5kbGVyIHRoYXQgcmVnaXN0ZXJzIGFuIEV2ZW50TGlzdGVuZXIgb24gd2luZG93IGZvciBhIHZhbGlkIHR5cGUKICogYW5kIGNhbGxzIGEgY2FsbGJhY2sgd2hlbiB0aGUgZXZlbnQgZmlyZXMuCiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudFR5cGUgQSB2YWxpZCBET00gZXZlbnQgdHlwZS4KICogQHBhcmFtIHtmdW5jdGlvbihFdmVudENhbGxiYWNrKTogRXZlbnRIYW5kbGVyfSBjcmVhdGVIYW5kbGVyIEEgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGFuIGV2ZW50IGhhbmRsZXIuCiAqIEByZXR1cm5zIHtyZWdpc3Rlcn0gQSBmdW5jdGlvbiB0aGF0IHJlZ2lzdGVycyB0aGUgRXZlbnRMaXN0ZW5lciBnaXZlbiBhIGNhbGxiYWNrLgogKi8KZnVuY3Rpb24gY3JlYXRlV2luZG93RXZlbnRIYW5kbGVyKGV2ZW50VHlwZSwgY3JlYXRlSGFuZGxlcikgewogIC8qKgogICAqIEB0eXBlIHtFdmVudEhhbmRsZXIgfCBudWxsfSBBIGNhY2hlZCBldmVudCBoYW5kbGVyIGZ1bmN0aW9uLgogICAqLwogIGxldCBldmVudEhhbmRsZXIgPSBudWxsOwoKICAvKioKICAgKiBVbnJlZ2lzdGVycyBhbiBFdmVudExpc3RlbmVyIGlmIGl0IGhhcyBiZWVuIHJlZ2lzdGVyZWQuCiAgICogQHJldHVybnMge3ZvaWR9CiAgICovCiAgZnVuY3Rpb24gdW5yZWdpc3RlcigpIHsKICAgIGlmIChldmVudEhhbmRsZXIgPT09IG51bGwpIHsKICAgICAgcmV0dXJuOwogICAgfQogICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudEhhbmRsZXIpOwogICAgZXZlbnRIYW5kbGVyID0gbnVsbDsKICB9CgogIC8qKgogICAqIFJlZ2lzdGVycyBhbiBFdmVudExpc3RlbmVyIGlmIGl0IGhhc24ndCBiZWVuIHJlZ2lzdGVyZWQuCiAgICogQHBhcmFtIHtFdmVudENhbGxiYWNrfSBjYWxsYmFjayBBIGZ1bmN0aW9uIGNhbGxlZCBhZnRlciB0aGUgZXZlbnQgaGFuZGxlciB0byBoYW5kbGUgaXRzIGNvbnRleHQuCiAgICogQHJldHVybnMge3VucmVnaXN0ZXIgfCB2b2lkfSBBIGZ1bmN0aW9uIHRvIHVucmVnaXN0ZXIgdGhlIHJlZ2lzdGVyZWQgRXZlbnRMaXN0ZW5lciBpZiByZWdpc3RyYXRpb24gaXMgcGVyZm9ybWVkLgogICAqLwogIGZ1bmN0aW9uIHJlZ2lzdGVyKGNhbGxiYWNrKSB7CiAgICBpZiAoZXZlbnRIYW5kbGVyICE9PSBudWxsKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGV2ZW50SGFuZGxlciA9IGNyZWF0ZUhhbmRsZXIoY2FsbGJhY2spOwogICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBldmVudEhhbmRsZXIpOwoKICAgIHJldHVybiB1bnJlZ2lzdGVyOwogIH0KCiAgcmV0dXJuIHJlZ2lzdGVyOwp9Cgpjb25zdCBoYW5kbGVFcnJvciA9IGNyZWF0ZVdpbmRvd0V2ZW50SGFuZGxlcignZXJyb3InLCBjcmVhdGVFcnJvckhhbmRsZXIpOwpjb25zdCBoYW5kbGVVbmhhbmRsZWRSZWplY3Rpb24gPSBjcmVhdGVXaW5kb3dFdmVudEhhbmRsZXIoCiAgJ3VuaGFuZGxlZHJlamVjdGlvbicsCiAgY3JlYXRlUmVqZWN0aW9uSGFuZGxlcgopOwoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgaGFuZGxlRXJyb3I6IGhhbmRsZUVycm9yLAogIGhhbmRsZVVuaGFuZGxlZFJlamVjdGlvbjogaGFuZGxlVW5oYW5kbGVkUmVqZWN0aW9uLAp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vY2xpZW50L3V0aWxzL2Zvcm1hdFdlYnBhY2tFcnJvcnMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vY2xpZW50L3V0aWxzL2Zvcm1hdFdlYnBhY2tFcnJvcnMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7CgovKioKICogQHR5cGVkZWYge09iamVjdH0gV2VicGFja0Vycm9yT2JqCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtb2R1bGVJZGVudGlmaWVyCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtb2R1bGVOYW1lCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtZXNzYWdlCiAqLwoKY29uc3QgZnJpZW5kbHlTeW50YXhFcnJvckxhYmVsID0gJ1N5bnRheCBlcnJvcjonOwoKLyoqCiAqIENoZWNrcyBpZiB0aGUgZXJyb3IgbWVzc2FnZSBpcyBmb3IgYSBzeW50YXggZXJyb3IuCiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSByYXcgV2VicGFjayBlcnJvciBtZXNzYWdlLgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgZXJyb3IgbWVzc2FnZSBpcyBmb3IgYSBzeW50YXggZXJyb3IuCiAqLwpmdW5jdGlvbiBpc0xpa2VseUFTeW50YXhFcnJvcihtZXNzYWdlKSB7CiAgcmV0dXJuIG1lc3NhZ2UuaW5kZXhPZihmcmllbmRseVN5bnRheEVycm9yTGFiZWwpICE9PSAtMTsKfQoKLyoqCiAqIENsZWFucyB1cCBXZWJwYWNrIGVycm9yIG1lc3NhZ2VzLgogKgogKiBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uIHRoZSBvbmUgZnJvbSBbY3JlYXRlLXJlYWN0LWFwcF0oaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2NyZWF0ZS1yZWFjdC1hcHAvYmxvYi9lZGM2NzFlZWVhNmI3ZDI2YWMzZjFlYjIwNTBlNTBmNzVjZjlhZDVkL3BhY2thZ2VzL3JlYWN0LWRldi11dGlscy9mb3JtYXRXZWJwYWNrTWVzc2FnZXMuanMpLgogKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgcmF3IFdlYnBhY2sgZXJyb3IgbWVzc2FnZS4KICogQHJldHVybnMge3N0cmluZ30gVGhlIGZvcm1hdHRlZCBXZWJwYWNrIGVycm9yIG1lc3NhZ2UuCiAqLwpmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG1lc3NhZ2UpIHsKICBsZXQgbGluZXMgPSBtZXNzYWdlLnNwbGl0KCdcbicpOwoKICAvLyBTdHJpcCBXZWJwYWNrLWFkZGVkIGhlYWRlcnMgb2ZmIGVycm9ycy93YXJuaW5ncwogIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2svYmxvYi9tYXN0ZXIvbGliL01vZHVsZUVycm9yLmpzCiAgbGluZXMgPSBsaW5lcy5maWx0ZXIoZnVuY3Rpb24gKGxpbmUpIHsKICAgIHJldHVybiAhL01vZHVsZSBbQS16IF0rXChmcm9tLy50ZXN0KGxpbmUpOwogIH0pOwoKICAvLyBSZW1vdmUgbGVhZGluZyBuZXdsaW5lCiAgaWYgKGxpbmVzLmxlbmd0aCA+IDIgJiYgbGluZXNbMV0udHJpbSgpID09PSAnJykgewogICAgbGluZXMuc3BsaWNlKDEsIDEpOwogIH0KCiAgLy8gUmVtb3ZlIGR1cGxpY2F0ZWQgbmV3bGluZXMKICBsaW5lcyA9IGxpbmVzLmZpbHRlcihmdW5jdGlvbiAobGluZSwgaW5kZXgsIGFycikgewogICAgcmV0dXJuIGluZGV4ID09PSAwIHx8IGxpbmUudHJpbSgpICE9PSAnJyB8fCBsaW5lLnRyaW0oKSAhPT0gYXJyW2luZGV4IC0gMV0udHJpbSgpOwogIH0pOwoKICAvLyBDbGVhbiB1cCB0aGUgZmlsZSBuYW1lCiAgbGluZXNbMF0gPSBsaW5lc1swXS5yZXBsYWNlKC9eKC4qKSBcZCs6XGQrLVxkKyQvLCAnJDEnKTsKCiAgLy8gQ2xlYW5zIHVwIHZlcmJvc2UgIm1vZHVsZSBub3QgZm91bmQiIG1lc3NhZ2VzIGZvciBmaWxlcyBhbmQgcGFja2FnZXMuCiAgaWYgKGxpbmVzWzFdICYmIGxpbmVzWzFdLmluZGV4T2YoJ01vZHVsZSBub3QgZm91bmQ6ICcpID09PSAwKSB7CiAgICBsaW5lcyA9IFsKICAgICAgbGluZXNbMF0sCiAgICAgIGxpbmVzWzFdCiAgICAgICAgLnJlcGxhY2UoJ0Vycm9yOiAnLCAnJykKICAgICAgICAucmVwbGFjZSgnTW9kdWxlIG5vdCBmb3VuZDogQ2Fubm90IGZpbmQgZmlsZTonLCAnQ2Fubm90IGZpbmQgZmlsZTonKSwKICAgIF07CiAgfQoKICBtZXNzYWdlID0gbGluZXMuam9pbignXG4nKTsKCiAgLy8gQ2xlYW4gdXAgc3ludGF4IGVycm9ycwogIG1lc3NhZ2UgPSBtZXNzYWdlLnJlcGxhY2UoJ1N5bnRheEVycm9yOicsIGZyaWVuZGx5U3ludGF4RXJyb3JMYWJlbCk7CgogIC8vIEludGVybmFsIHN0YWNrcyBhcmUgZ2VuZXJhbGx5IHVzZWxlc3MsIHNvIHdlIHN0cmlwIHRoZW0gLQogIC8vIGV4Y2VwdCB0aGUgc3RhY2tzIGNvbnRhaW5pbmcgYHdlYnBhY2s6YCwKICAvLyBiZWNhdXNlIHRoZXkncmUgbm9ybWFsbHkgZnJvbSB1c2VyIGNvZGUgZ2VuZXJhdGVkIGJ5IHdlYnBhY2suCiAgbWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZSgvXlxzKmF0XHMoKD8hd2VicGFjazopLikqOlxkKzpcZCtbXHMpXSooXG58JCkvZ20sICcnKTsgLy8gYXQgLi4uIC4uLjp4OnkKICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKC9eXHMqYXRccygoPyF3ZWJwYWNrOikuKSo8YW5vbnltb3VzPltccyldKihcbnwkKS9nbSwgJycpOyAvLyBhdCAuLi4gPGFub255bW91cz4KICBtZXNzYWdlID0gbWVzc2FnZS5yZXBsYWNlKC9eXHMqYXRcczxhbm9ueW1vdXM+KFxufCQpL2dtLCAnJyk7IC8vIGF0IDxhbm9ueW1vdXM+CgogIHJldHVybiBtZXNzYWdlLnRyaW0oKTsKfQoKLyoqCiAqIEZvcm1hdHMgV2VicGFjayBlcnJvciBtZXNzYWdlcyBpbnRvIGEgbW9yZSByZWFkYWJsZSBmb3JtYXQuCiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nIHwgV2VicGFja0Vycm9yT2JqPn0gZXJyb3JzIEFuIGFycmF5IG9mIFdlYnBhY2sgZXJyb3IgbWVzc2FnZXMuCiAqIEByZXR1cm5zIHtzdHJpbmdbXX0gVGhlIGZvcm1hdHRlZCBXZWJwYWNrIGVycm9yIG1lc3NhZ2VzLgogKi8KZnVuY3Rpb24gZm9ybWF0V2VicGFja0Vycm9ycyhlcnJvcnMpIHsKICBsZXQgZm9ybWF0dGVkRXJyb3JzID0gZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyb3JPYmpPck1lc3NhZ2UpIHsKICAgIC8vIFdlYnBhY2sgNSBjb21waWxhdGlvbiBlcnJvcnMgYXJlIGluIHRoZSBmb3JtIG9mIGRlc2NyaXB0b3Igb2JqZWN0cywKICAgIC8vIHNvIHdlIGhhdmUgdG8gam9pbiBwaWVjZXMgdG8gZ2V0IHRoZSBmb3JtYXQgd2Ugd2FudC4KICAgIGlmICh0eXBlb2YgZXJyb3JPYmpPck1lc3NhZ2UgPT09ICdvYmplY3QnKSB7CiAgICAgIHJldHVybiBmb3JtYXRNZXNzYWdlKFtlcnJvck9iak9yTWVzc2FnZS5tb2R1bGVOYW1lLCBlcnJvck9iak9yTWVzc2FnZS5tZXNzYWdlXS5qb2luKCdcbicpKTsKICAgIH0KICAgIC8vIFdlYnBhY2sgNCBjb21waWxhdGlvbiBlcnJvcnMgYXJlIHN0cmluZ3MKICAgIHJldHVybiBmb3JtYXRNZXNzYWdlKGVycm9yT2JqT3JNZXNzYWdlKTsKICB9KTsKCiAgaWYgKGZvcm1hdHRlZEVycm9ycy5zb21lKGlzTGlrZWx5QVN5bnRheEVycm9yKSkgewogICAgLy8gSWYgdGhlcmUgYXJlIGFueSBzeW50YXggZXJyb3JzLCBzaG93IGp1c3QgdGhlbS4KICAgIGZvcm1hdHRlZEVycm9ycyA9IGZvcm1hdHRlZEVycm9ycy5maWx0ZXIoaXNMaWtlbHlBU3ludGF4RXJyb3IpOwogIH0KICByZXR1cm4gZm9ybWF0dGVkRXJyb3JzOwp9Cgptb2R1bGUuZXhwb3J0cyA9IGZvcm1hdFdlYnBhY2tFcnJvcnM7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9jbGllbnQvdXRpbHMvcGF0Y2hVcmwuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL2NsaWVudC91dGlscy9wYXRjaFVybC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCi8qIGdsb2JhbCBfX3JlYWN0X3JlZnJlc2hfcG9seWZpbGxfdXJsX18gKi8KCi8qKgogKiBAdHlwZWRlZiB7T2JqZWN0fSBVcmxBUElzCiAqIEBwcm9wZXJ0eSB7dHlwZW9mIFVSTH0gVVJMCiAqIEBwcm9wZXJ0eSB7dHlwZW9mIFVSTFNlYXJjaFBhcmFtc30gVVJMU2VhcmNoUGFyYW1zCiAqLwoKLyoqCiAqIFJ1bnMgYSBjYWxsYmFjayB3aXRoIHBhdGNoZWQgdGhlIERPTSBVUkwgQVBJcy4KICogQHBhcmFtIHtmdW5jdGlvbihVcmxBUElzKTogdm9pZH0gY2FsbGJhY2sgVGhlIGNvZGUgdG8gcnVuIHdpdGggcGF0Y2hlZCBVUkwgZ2xvYmFscy4KICogQHJldHVybnMge3ZvaWR9CiAqLwpmdW5jdGlvbiBydW5XaXRoUGF0Y2hlZFVybChjYWxsYmFjaykgewogIHZhciBfX29yaWdpbmFsVVJMOwogIHZhciBfX29yaWdpbmFsVVJMU2VhcmNoUGFyYW1zOwoKICAvLyBQb2x5ZmlsbCB0aGUgRE9NIFVSTCBhbmQgVVJMU2VhcmNoUGFyYW1zIGNvbnN0cnVjdG9ycwogIGlmICggZmFsc2UgfHwgIXdpbmRvdy5VUkwpIHsKICAgIF9fb3JpZ2luYWxVUkwgPSB3aW5kb3cuVVJMOwogICAgd2luZG93LlVSTCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGNvcmUtanMtcHVyZS93ZWIvdXJsICovICIuLi8uLi8ueWFybi91bnBsdWdnZWQvY29yZS1qcy1wdXJlLW5wbS0zLjMwLjAtMTQ4MzdmYzI3Ni9ub2RlX21vZHVsZXMvY29yZS1qcy1wdXJlL3dlYi91cmwuanMiKTsKICB9CiAgaWYgKCBmYWxzZSB8fCAhd2luZG93LlVSTFNlYXJjaFBhcmFtcykgewogICAgX19vcmlnaW5hbFVSTFNlYXJjaFBhcmFtcyA9IHdpbmRvdy5VUkxTZWFyY2hQYXJhbXM7CiAgICB3aW5kb3cuVVJMU2VhcmNoUGFyYW1zID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgY29yZS1qcy1wdXJlL3dlYi91cmwtc2VhcmNoLXBhcmFtcyAqLyAiLi4vLi4vLnlhcm4vdW5wbHVnZ2VkL2NvcmUtanMtcHVyZS1ucG0tMy4zMC4wLTE0ODM3ZmMyNzYvbm9kZV9tb2R1bGVzL2NvcmUtanMtcHVyZS93ZWIvdXJsLXNlYXJjaC1wYXJhbXMuanMiKTsKICB9CgogIC8vIFBhc3MgaW4gVVJMIEFQSXMgaW4gY2FzZSB0aGV5IGFyZSBuZWVkZWQKICBjYWxsYmFjayh7IFVSTDogd2luZG93LlVSTCwgVVJMU2VhcmNoUGFyYW1zOiB3aW5kb3cuVVJMU2VhcmNoUGFyYW1zIH0pOwoKICAvLyBSZXN0b3JlIHBvbHlmaWxsLWVkIEFQSXMgdG8gdGhlaXIgb3JpZ2luYWwgc3RhdGUKICBpZiAoX19vcmlnaW5hbFVSTCkgewogICAgd2luZG93LlVSTCA9IF9fb3JpZ2luYWxVUkw7CiAgfQogIGlmIChfX29yaWdpbmFsVVJMU2VhcmNoUGFyYW1zKSB7CiAgICB3aW5kb3cuVVJMU2VhcmNoUGFyYW1zID0gX19vcmlnaW5hbFVSTFNlYXJjaFBhcmFtczsKICB9Cn0KCm1vZHVsZS5leHBvcnRzID0gcnVuV2l0aFBhdGNoZWRVcmw7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9jbGllbnQvdXRpbHMvcmV0cnkuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL2NsaWVudC91dGlscy9yZXRyeS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7CgpmdW5jdGlvbiBydW5XaXRoUmV0cnkoY2FsbGJhY2ssIG1heFJldHJpZXMpIHsKICBmdW5jdGlvbiBleGVjdXRlV2l0aFJldHJ5QW5kVGltZW91dChjdXJyZW50Q291bnQpIHsKICAgIHRyeSB7CiAgICAgIGlmIChjdXJyZW50Q291bnQgPiBtYXhSZXRyaWVzIC0gMSkgewogICAgICAgIGNvbnNvbGUud2FybignW1JlYWN0IFJlZnJlc2hdIEZhaWxlZCB0byBzZXQgdXAgdGhlIHNvY2tldCBjb25uZWN0aW9uLicpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgY2FsbGJhY2soKTsKICAgIH0gY2F0Y2ggKGVycikgewogICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICBleGVjdXRlV2l0aFJldHJ5QW5kVGltZW91dChjdXJyZW50Q291bnQgKyAxKTsKICAgICAgfSwgTWF0aC5wb3coMTAsIGN1cnJlbnRDb3VudCkpOwogICAgfQogIH0KCiAgZXhlY3V0ZVdpdGhSZXRyeUFuZFRpbWVvdXQoMCk7Cn0KCm1vZHVsZS5leHBvcnRzID0gcnVuV2l0aFJldHJ5OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS9jb21wb25lbnRzL0NvbXBpbGVFcnJvclRyYWNlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvQ29tcGlsZUVycm9yVHJhY2UuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgpjb25zdCBhbnNpSFRNTCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGFuc2ktaHRtbC1jb21tdW5pdHkgKi8gIi4uLy4uLy55YXJuL2NhY2hlL2Fuc2ktaHRtbC1jb21tdW5pdHktbnBtLTAuMC44LTVlYWVmNTVmMWItMDRjNTY4ZTgzNC56aXAvbm9kZV9tb2R1bGVzL2Fuc2ktaHRtbC1jb21tdW5pdHkvaW5kZXguanMiKTsKY29uc3QgZW50aXRpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBodG1sLWVudGl0aWVzICovICIuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9pbmRleC5qcyIpOwpjb25zdCB0aGVtZSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3RoZW1lLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL292ZXJsYXkvdGhlbWUuanMiKTsKY29uc3QgdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi91dGlscy5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L3V0aWxzLmpzIik7CgphbnNpSFRNTC5zZXRDb2xvcnModGhlbWUpOwoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IENvbXBpbGVFcnJvclRyYWNlUHJvcHMKICogQHByb3BlcnR5IHtzdHJpbmd9IGVycm9yTWVzc2FnZQogKi8KCi8qKgogKiBBIGZvcm1hdHRlciB0aGF0IHR1cm5zIFdlYnBhY2sgY29tcGlsZSBlcnJvciBtZXNzYWdlcyBpbnRvIGhpZ2hsaWdodGVkIEhUTUwgc291cmNlIHRyYWNlcy4KICogQHBhcmFtIHtEb2N1bWVudH0gZG9jdW1lbnQKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdAogKiBAcGFyYW0ge0NvbXBpbGVFcnJvclRyYWNlUHJvcHN9IHByb3BzCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KZnVuY3Rpb24gQ29tcGlsZUVycm9yVHJhY2UoZG9jdW1lbnQsIHJvb3QsIHByb3BzKSB7CiAgY29uc3QgZXJyb3JQYXJ0cyA9IHByb3BzLmVycm9yTWVzc2FnZS5zcGxpdCgnXG4nKTsKICBpZiAoZXJyb3JQYXJ0cy5sZW5ndGgpIHsKICAgIGlmIChlcnJvclBhcnRzWzBdKSB7CiAgICAgIGVycm9yUGFydHNbMF0gPSB1dGlscy5mb3JtYXRGaWxlbmFtZShlcnJvclBhcnRzWzBdKTsKICAgIH0KCiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvclBhcnRzLnNwbGljZSgxLCAxKVswXTsKICAgIGlmIChlcnJvck1lc3NhZ2UpIHsKICAgICAgLy8gU3RyaXAgZmlsZW5hbWUgZnJvbSB0aGUgZXJyb3IgbWVzc2FnZQogICAgICBlcnJvclBhcnRzLnVuc2hpZnQoZXJyb3JNZXNzYWdlLnJlcGxhY2UoL14oLio6KVxzLio6KFxzLiopJC8sICckMSQyJykpOwogICAgfQogIH0KCiAgY29uc3Qgc3RhY2tDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwcmUnKTsKICBzdGFja0NvbnRhaW5lci5pbm5lckhUTUwgPSBlbnRpdGllcy5kZWNvZGUoCiAgICBhbnNpSFRNTChlbnRpdGllcy5lbmNvZGUoZXJyb3JQYXJ0cy5qb2luKCdcbicpLCB7IGxldmVsOiAnaHRtbDUnLCBtb2RlOiAnbm9uQXNjaWknIH0pKSwKICAgIHsgbGV2ZWw6ICdodG1sNScgfQogICk7CiAgc3RhY2tDb250YWluZXIuc3R5bGUuZm9udEZhbWlseSA9IFsKICAgICciT3BlcmF0b3IgTW9ubyBTU20iJywKICAgICciT3BlcmF0b3IgTW9ubyInLAogICAgJyJGaXJhIENvZGUgUmV0aW5hIicsCiAgICAnIkZpcmEgQ29kZSInLAogICAgJyJGaXJhQ29kZS1SZXRpbmEiJywKICAgICciQW5kYWxlIE1vbm8iJywKICAgICciTHVjaWRhIENvbnNvbGUiJywKICAgICdNZW5sbycsCiAgICAnQ29uc29sYXMnLAogICAgJ01vbmFjbycsCiAgICAnbW9ub3NwYWNlJywKICBdLmpvaW4oJywgJyk7CiAgc3RhY2tDb250YWluZXIuc3R5bGUubWFyZ2luID0gJzAnOwogIHN0YWNrQ29udGFpbmVyLnN0eWxlLndoaXRlU3BhY2UgPSAncHJlLXdyYXAnOwoKICByb290LmFwcGVuZENoaWxkKHN0YWNrQ29udGFpbmVyKTsKfQoKbW9kdWxlLmV4cG9ydHMgPSBDb21waWxlRXJyb3JUcmFjZTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL292ZXJsYXkvY29tcG9uZW50cy9QYWdlSGVhZGVyLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL292ZXJsYXkvY29tcG9uZW50cy9QYWdlSGVhZGVyLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgpjb25zdCBTcGFjZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NwYWNlci5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvU3BhY2VyLmpzIik7CmNvbnN0IHRoZW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdGhlbWUuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS90aGVtZS5qcyIpOwoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IFBhZ2VIZWFkZXJQcm9wcwogKiBAcHJvcGVydHkge3N0cmluZ30gW21lc3NhZ2VdCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0aXRsZQogKiBAcHJvcGVydHkge3N0cmluZ30gW3RvcE9mZnNldF0KICovCgovKioKICogVGhlIGhlYWRlciBvZiB0aGUgb3ZlcmxheS4KICogQHBhcmFtIHtEb2N1bWVudH0gZG9jdW1lbnQKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdAogKiBAcGFyYW0ge1BhZ2VIZWFkZXJQcm9wc30gcHJvcHMKICogQHJldHVybnMge3ZvaWR9CiAqLwpmdW5jdGlvbiBQYWdlSGVhZGVyKGRvY3VtZW50LCByb290LCBwcm9wcykgewogIGNvbnN0IHBhZ2VIZWFkZXJDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICBwYWdlSGVhZGVyQ29udGFpbmVyLnN0eWxlLmJhY2tncm91bmQgPSAnIycgKyB0aGVtZS5kaW1ncmV5OwogIHBhZ2VIZWFkZXJDb250YWluZXIuc3R5bGUuYm94U2hhZG93ID0gJzAgMXB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMyknOwogIHBhZ2VIZWFkZXJDb250YWluZXIuc3R5bGUuY29sb3IgPSAnIycgKyB0aGVtZS53aGl0ZTsKICBwYWdlSGVhZGVyQ29udGFpbmVyLnN0eWxlLmxlZnQgPSAnMCc7CiAgcGFnZUhlYWRlckNvbnRhaW5lci5zdHlsZS5yaWdodCA9ICcwJzsKICBwYWdlSGVhZGVyQ29udGFpbmVyLnN0eWxlLnBhZGRpbmcgPSAnMXJlbSAxLjVyZW0nOwogIHBhZ2VIZWFkZXJDb250YWluZXIuc3R5bGUucGFkZGluZ0xlZnQgPSAnbWF4KDEuNXJlbSwgZW52KHNhZmUtYXJlYS1pbnNldC1sZWZ0KSknOwogIHBhZ2VIZWFkZXJDb250YWluZXIuc3R5bGUucGFkZGluZ1JpZ2h0ID0gJ21heCgxLjVyZW0sIGVudihzYWZlLWFyZWEtaW5zZXQtcmlnaHQpKSc7CiAgcGFnZUhlYWRlckNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7CiAgcGFnZUhlYWRlckNvbnRhaW5lci5zdHlsZS50b3AgPSBwcm9wcy50b3BPZmZzZXQgfHwgJzAnOwoKICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gzJyk7CiAgdGl0bGUuaW5uZXJUZXh0ID0gcHJvcHMudGl0bGU7CiAgdGl0bGUuc3R5bGUuY29sb3IgPSAnIycgKyB0aGVtZS5yZWQ7CiAgdGl0bGUuc3R5bGUuZm9udFNpemUgPSAnMS4xMjVyZW0nOwogIHRpdGxlLnN0eWxlLmxpbmVIZWlnaHQgPSAnMS4zJzsKICB0aXRsZS5zdHlsZS5tYXJnaW4gPSAnMCc7CiAgcGFnZUhlYWRlckNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aXRsZSk7CgogIGlmIChwcm9wcy5tZXNzYWdlKSB7CiAgICB0aXRsZS5zdHlsZS5tYXJnaW4gPSAnMCAwIDAuNXJlbSc7CgogICAgY29uc3QgbWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTsKICAgIG1lc3NhZ2UuaW5uZXJUZXh0ID0gcHJvcHMubWVzc2FnZTsKICAgIG1lc3NhZ2Uuc3R5bGUuY29sb3IgPSAnIycgKyB0aGVtZS53aGl0ZTsKICAgIG1lc3NhZ2Uuc3R5bGUud29yZEJyZWFrID0gJ2JyZWFrLXdvcmQnOwogICAgcGFnZUhlYWRlckNvbnRhaW5lci5hcHBlbmRDaGlsZChtZXNzYWdlKTsKICB9CgogIHJvb3QuYXBwZW5kQ2hpbGQocGFnZUhlYWRlckNvbnRhaW5lcik7CgogIC8vIFRoaXMgaGFzIHRvIHJ1biBhZnRlciBhcHBlbmRpbmcgZWxlbWVudHMgdG8gcm9vdAogIC8vIGJlY2F1c2Ugd2UgbmVlZCB0byBhY3R1YWwgbW91bnRlZCBoZWlnaHQuCiAgU3BhY2VyKGRvY3VtZW50LCByb290LCB7CiAgICBzcGFjZTogcGFnZUhlYWRlckNvbnRhaW5lci5vZmZzZXRIZWlnaHQudG9TdHJpbmcoMTApLAogIH0pOwp9Cgptb2R1bGUuZXhwb3J0cyA9IFBhZ2VIZWFkZXI7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvUnVudGltZUVycm9yRm9vdGVyLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS9jb21wb25lbnRzL1J1bnRpbWVFcnJvckZvb3Rlci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgpjb25zdCBTcGFjZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NwYWNlci5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvU3BhY2VyLmpzIik7CmNvbnN0IHRoZW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdGhlbWUuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS90aGVtZS5qcyIpOwoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IFJ1bnRpbWVFcnJvckZvb3RlclByb3BzCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbaW5pdGlhbEZvY3VzXQogKiBAcHJvcGVydHkge2Jvb2xlYW59IG11bHRpcGxlCiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oTW91c2VFdmVudCk6IHZvaWR9IG9uQ2xpY2tDbG9zZUJ1dHRvbgogKiBAcHJvcGVydHkge2Z1bmN0aW9uKE1vdXNlRXZlbnQpOiB2b2lkfSBvbkNsaWNrTmV4dEJ1dHRvbgogKiBAcHJvcGVydHkge2Z1bmN0aW9uKE1vdXNlRXZlbnQpOiB2b2lkfSBvbkNsaWNrUHJldkJ1dHRvbgogKi8KCi8qKgogKiBBIGZpeGVkIGZvb3RlciB0aGF0IGhhbmRsZXMgcGFnaW5hdGlvbiBvZiBydW50aW1lIGVycm9ycy4KICogQHBhcmFtIHtEb2N1bWVudH0gZG9jdW1lbnQKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdAogKiBAcGFyYW0ge1J1bnRpbWVFcnJvckZvb3RlclByb3BzfSBwcm9wcwogKiBAcmV0dXJucyB7dm9pZH0KICovCmZ1bmN0aW9uIFJ1bnRpbWVFcnJvckZvb3Rlcihkb2N1bWVudCwgcm9vdCwgcHJvcHMpIHsKICBjb25zdCBmb290ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICBmb290ZXIuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyMnICsgdGhlbWUuZGltZ3JleTsKICBmb290ZXIuc3R5bGUuYm90dG9tID0gJzAnOwogIGZvb3Rlci5zdHlsZS5ib3hTaGFkb3cgPSAnMCAtMXB4IDRweCByZ2JhKDAsIDAsIDAsIDAuMyknOwogIGZvb3Rlci5zdHlsZS5oZWlnaHQgPSAnMi41cmVtJzsKICBmb290ZXIuc3R5bGUubGVmdCA9ICcwJzsKICBmb290ZXIuc3R5bGUucmlnaHQgPSAnMCc7CiAgZm9vdGVyLnN0eWxlLmxpbmVIZWlnaHQgPSAnMi41cmVtJzsKICBmb290ZXIuc3R5bGUucGFkZGluZ0JvdHRvbSA9ICcwJzsKICBmb290ZXIuc3R5bGUucGFkZGluZ0JvdHRvbSA9ICdlbnYoc2FmZS1hcmVhLWluc2V0LWJvdHRvbSknOwogIGZvb3Rlci5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7CiAgZm9vdGVyLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInOwogIGZvb3Rlci5zdHlsZS56SW5kZXggPSAnMic7CgogIGNvbnN0IEJVVFRPTl9DT05GSUdTID0gewogICAgcHJldjogewogICAgICBpZDogJ3ByZXYnLAogICAgICBsYWJlbDogJ+KXgCZlbnNwO1ByZXYnLAogICAgICBvbkNsaWNrOiBwcm9wcy5vbkNsaWNrUHJldkJ1dHRvbiwKICAgIH0sCiAgICBjbG9zZTogewogICAgICBpZDogJ2Nsb3NlJywKICAgICAgbGFiZWw6ICfDlyZlbnNwO0Nsb3NlJywKICAgICAgb25DbGljazogcHJvcHMub25DbGlja0Nsb3NlQnV0dG9uLAogICAgfSwKICAgIG5leHQ6IHsKICAgICAgaWQ6ICduZXh0JywKICAgICAgbGFiZWw6ICdOZXh0JmVuc3A74pa2JywKICAgICAgb25DbGljazogcHJvcHMub25DbGlja05leHRCdXR0b24sCiAgICB9LAogIH07CgogIGxldCBidXR0b25zID0gW0JVVFRPTl9DT05GSUdTLmNsb3NlXTsKICBpZiAocHJvcHMubXVsdGlwbGUpIHsKICAgIGJ1dHRvbnMgPSBbQlVUVE9OX0NPTkZJR1MucHJldiwgQlVUVE9OX0NPTkZJR1MuY2xvc2UsIEJVVFRPTl9DT05GSUdTLm5leHRdOwogIH0KCiAgLyoqIEB0eXBlIHtIVE1MQnV0dG9uRWxlbWVudCB8IHVuZGVmaW5lZH0gKi8KICBsZXQgaW5pdGlhbEZvY3VzQnV0dG9uOwogIGZvciAobGV0IGkgPSAwOyBpIDwgYnV0dG9ucy5sZW5ndGg7IGkgKz0gMSkgewogICAgY29uc3QgYnV0dG9uQ29uZmlnID0gYnV0dG9uc1tpXTsKCiAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsKICAgIGJ1dHRvbi5pZCA9IGJ1dHRvbkNvbmZpZy5pZDsKICAgIGJ1dHRvbi5pbm5lckhUTUwgPSBidXR0b25Db25maWcubGFiZWw7CiAgICBidXR0b24udGFiSW5kZXggPSAxOwogICAgYnV0dG9uLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjJyArIHRoZW1lLmRpbWdyZXk7CiAgICBidXR0b24uc3R5bGUuYm9yZGVyID0gJ25vbmUnOwogICAgYnV0dG9uLnN0eWxlLmNvbG9yID0gJyMnICsgdGhlbWUud2hpdGU7CiAgICBidXR0b24uc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInOwogICAgYnV0dG9uLnN0eWxlLmZvbnRTaXplID0gJ2luaGVyaXQnOwogICAgYnV0dG9uLnN0eWxlLmhlaWdodCA9ICcxMDAlJzsKICAgIGJ1dHRvbi5zdHlsZS5wYWRkaW5nID0gJzAuNXJlbSAwLjc1cmVtJzsKICAgIGJ1dHRvbi5zdHlsZS53aWR0aCA9ICgxMDAgLyBidXR0b25zLmxlbmd0aCkudG9TdHJpbmcoMTApICsgJyUnOwogICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgYnV0dG9uQ29uZmlnLm9uQ2xpY2spOwoKICAgIGlmIChidXR0b25Db25maWcuaWQgPT09IHByb3BzLmluaXRpYWxGb2N1cykgewogICAgICBpbml0aWFsRm9jdXNCdXR0b24gPSBidXR0b247CiAgICB9CgogICAgZm9vdGVyLmFwcGVuZENoaWxkKGJ1dHRvbik7CiAgfQoKICByb290LmFwcGVuZENoaWxkKGZvb3Rlcik7CgogIFNwYWNlcihkb2N1bWVudCwgcm9vdCwgeyBzcGFjZTogJzIuNXJlbScgfSk7CgogIGlmIChpbml0aWFsRm9jdXNCdXR0b24pIHsKICAgIGluaXRpYWxGb2N1c0J1dHRvbi5mb2N1cygpOwogIH0KfQoKbW9kdWxlLmV4cG9ydHMgPSBSdW50aW1lRXJyb3JGb290ZXI7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvUnVudGltZUVycm9ySGVhZGVyLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS9jb21wb25lbnRzL1J1bnRpbWVFcnJvckhlYWRlci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgpjb25zdCBTcGFjZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL1NwYWNlci5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvU3BhY2VyLmpzIik7CmNvbnN0IHRoZW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdGhlbWUuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS90aGVtZS5qcyIpOwoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IFJ1bnRpbWVFcnJvckhlYWRlclByb3BzCiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBjdXJyZW50RXJyb3JJbmRleAogKiBAcHJvcGVydHkge251bWJlcn0gdG90YWxFcnJvcnMKICovCgovKioKICogQSBmaXhlZCBoZWFkZXIgdGhhdCBzaG93cyB0aGUgdG90YWwgcnVudGltZSBlcnJvciBjb3VudC4KICogQHBhcmFtIHtEb2N1bWVudH0gZG9jdW1lbnQKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdAogKiBAcGFyYW0ge1J1bnRpbWVFcnJvckhlYWRlclByb3BzfSBwcm9wcwogKiBAcmV0dXJucyB7dm9pZH0KICovCmZ1bmN0aW9uIFJ1bnRpbWVFcnJvckhlYWRlcihkb2N1bWVudCwgcm9vdCwgcHJvcHMpIHsKICBjb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICBoZWFkZXIuaW5uZXJUZXh0ID0gJ0Vycm9yICcgKyAocHJvcHMuY3VycmVudEVycm9ySW5kZXggKyAxKSArICcgb2YgJyArIHByb3BzLnRvdGFsRXJyb3JzOwogIGhlYWRlci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIycgKyB0aGVtZS5yZWQ7CiAgaGVhZGVyLnN0eWxlLmNvbG9yID0gJyMnICsgdGhlbWUud2hpdGU7CiAgaGVhZGVyLnN0eWxlLmZvbnRXZWlnaHQgPSAnNTAwJzsKICBoZWFkZXIuc3R5bGUuaGVpZ2h0ID0gJzIuNXJlbSc7CiAgaGVhZGVyLnN0eWxlLmxlZnQgPSAnMCc7CiAgaGVhZGVyLnN0eWxlLmxpbmVIZWlnaHQgPSAnMi41cmVtJzsKICBoZWFkZXIuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnOwogIGhlYWRlci5zdHlsZS50ZXh0QWxpZ24gPSAnY2VudGVyJzsKICBoZWFkZXIuc3R5bGUudG9wID0gJzAnOwogIGhlYWRlci5zdHlsZS53aWR0aCA9ICcxMDB2dyc7CiAgaGVhZGVyLnN0eWxlLnpJbmRleCA9ICcyJzsKCiAgcm9vdC5hcHBlbmRDaGlsZChoZWFkZXIpOwoKICBTcGFjZXIoZG9jdW1lbnQsIHJvb3QsIHsgc3BhY2U6ICcyLjVyZW0nIH0pOwp9Cgptb2R1bGUuZXhwb3J0cyA9IFJ1bnRpbWVFcnJvckhlYWRlcjsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL292ZXJsYXkvY29tcG9uZW50cy9SdW50aW1lRXJyb3JTdGFjay5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS9jb21wb25lbnRzL1J1bnRpbWVFcnJvclN0YWNrLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKY29uc3QgRXJyb3JTdGFja1BhcnNlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGVycm9yLXN0YWNrLXBhcnNlciAqLyAiLi4vLi4vLnlhcm4vY2FjaGUvZXJyb3Itc3RhY2stcGFyc2VyLW5wbS0yLjEuNC01YjlmN2ZjMGMyLTNiOTE2ZDJkMTQuemlwL25vZGVfbW9kdWxlcy9lcnJvci1zdGFjay1wYXJzZXIvZXJyb3Itc3RhY2stcGFyc2VyLmpzIik7CmNvbnN0IHRoZW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdGhlbWUuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS90aGVtZS5qcyIpOwpjb25zdCB1dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3V0aWxzLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL292ZXJsYXkvdXRpbHMuanMiKTsKCi8qKgogKiBAdHlwZWRlZiB7T2JqZWN0fSBSdW50aW1lRXJyb3JTdGFja1Byb3BzCiAqIEBwcm9wZXJ0eSB7RXJyb3J9IGVycm9yCiAqLwoKLyoqCiAqIEEgZm9ybWF0dGVyIHRoYXQgdHVybnMgcnVudGltZSBlcnJvciBzdGFja3MgaW50byBoaWdobGlnaHRlZCBIVE1MIHN0YWNrcy4KICogQHBhcmFtIHtEb2N1bWVudH0gZG9jdW1lbnQKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdAogKiBAcGFyYW0ge1J1bnRpbWVFcnJvclN0YWNrUHJvcHN9IHByb3BzCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KZnVuY3Rpb24gUnVudGltZUVycm9yU3RhY2soZG9jdW1lbnQsIHJvb3QsIHByb3BzKSB7CiAgY29uc3Qgc3RhY2tUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2g0Jyk7CiAgc3RhY2tUaXRsZS5pbm5lclRleHQgPSAnQ2FsbCBTdGFjayc7CiAgc3RhY2tUaXRsZS5zdHlsZS5jb2xvciA9ICcjJyArIHRoZW1lLndoaXRlOwogIHN0YWNrVGl0bGUuc3R5bGUuZm9udFNpemUgPSAnMS4wNjI1cmVtJzsKICBzdGFja1RpdGxlLnN0eWxlLmZvbnRXZWlnaHQgPSAnNTAwJzsKICBzdGFja1RpdGxlLnN0eWxlLmxpbmVIZWlnaHQgPSAnMS4zJzsKICBzdGFja1RpdGxlLnN0eWxlLm1hcmdpbiA9ICcwIDAgMC41cmVtJzsKCiAgY29uc3Qgc3RhY2tDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICBzdGFja0NvbnRhaW5lci5zdHlsZS5mb250U2l6ZSA9ICcwLjgxMjVyZW0nOwogIHN0YWNrQ29udGFpbmVyLnN0eWxlLmxpbmVIZWlnaHQgPSAnMS4zJzsKICBzdGFja0NvbnRhaW5lci5zdHlsZS53aGl0ZVNwYWNlID0gJ3ByZS13cmFwJzsKCiAgbGV0IGVycm9yU3RhY2tzOwogIHRyeSB7CiAgICBlcnJvclN0YWNrcyA9IEVycm9yU3RhY2tQYXJzZXIucGFyc2UocHJvcHMuZXJyb3IpOwogIH0gY2F0Y2ggKGUpIHsKICAgIGVycm9yU3RhY2tzID0gW107CiAgICBzdGFja0NvbnRhaW5lci5pbm5lckhUTUwgPSAnTm8gc3RhY2sgdHJhY2UgaXMgYXZhaWxhYmxlIGZvciB0aGlzIGVycm9yISc7CiAgfQoKICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWluKGVycm9yU3RhY2tzLmxlbmd0aCwgMTApOyBpICs9IDEpIHsKICAgIGNvbnN0IGN1cnJlbnRTdGFjayA9IGVycm9yU3RhY2tzW2ldOwoKICAgIGNvbnN0IGZ1bmN0aW9uTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NvZGUnKTsKICAgIGZ1bmN0aW9uTmFtZS5pbm5lckhUTUwgPSAnJmVtc3A7JyArIGN1cnJlbnRTdGFjay5mdW5jdGlvbk5hbWUgfHwgMDsKICAgIGZ1bmN0aW9uTmFtZS5zdHlsZS5jb2xvciA9ICcjJyArIHRoZW1lLnllbGxvdzsKICAgIGZ1bmN0aW9uTmFtZS5zdHlsZS5mb250RmFtaWx5ID0gWwogICAgICAnIk9wZXJhdG9yIE1vbm8gU1NtIicsCiAgICAgICciT3BlcmF0b3IgTW9ubyInLAogICAgICAnIkZpcmEgQ29kZSBSZXRpbmEiJywKICAgICAgJyJGaXJhIENvZGUiJywKICAgICAgJyJGaXJhQ29kZS1SZXRpbmEiJywKICAgICAgJyJBbmRhbGUgTW9ubyInLAogICAgICAnIkx1Y2lkYSBDb25zb2xlIicsCiAgICAgICdNZW5sbycsCiAgICAgICdDb25zb2xhcycsCiAgICAgICdNb25hY28nLAogICAgICAnbW9ub3NwYWNlJywKICAgIF0uam9pbignLCAnKTsKCiAgICBjb25zdCBmaWxlTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgZmlsZU5hbWUuaW5uZXJIVE1MID0KICAgICAgJyZlbXNwOyZlbXNwOycgKwogICAgICB1dGlscy5mb3JtYXRGaWxlbmFtZShjdXJyZW50U3RhY2suZmlsZU5hbWUpICsKICAgICAgJzonICsKICAgICAgY3VycmVudFN0YWNrLmxpbmVOdW1iZXIgKwogICAgICAnOicgKwogICAgICBjdXJyZW50U3RhY2suY29sdW1uTnVtYmVyOwogICAgZmlsZU5hbWUuc3R5bGUuY29sb3IgPSAnIycgKyB0aGVtZS53aGl0ZTsKICAgIGZpbGVOYW1lLnN0eWxlLmZvbnRTaXplID0gJzAuNjg3NXJlbSc7CiAgICBmaWxlTmFtZS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnMC4yNXJlbSc7CgogICAgc3RhY2tDb250YWluZXIuYXBwZW5kQ2hpbGQoZnVuY3Rpb25OYW1lKTsKICAgIHN0YWNrQ29udGFpbmVyLmFwcGVuZENoaWxkKGZpbGVOYW1lKTsKICB9CgogIHJvb3QuYXBwZW5kQ2hpbGQoc3RhY2tUaXRsZSk7CiAgcm9vdC5hcHBlbmRDaGlsZChzdGFja0NvbnRhaW5lcik7Cn0KCm1vZHVsZS5leHBvcnRzID0gUnVudGltZUVycm9yU3RhY2s7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvU3BhY2VyLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS9jb21wb25lbnRzL1NwYWNlci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IFNwYWNlclByb3BzCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzcGFjZQogKi8KCi8qKgogKiBBbiBlbXB0eSBlbGVtZW50IHRvIGFkZCBzcGFjaW5nIG1hbnVhbGx5LgogKiBAcGFyYW0ge0RvY3VtZW50fSBkb2N1bWVudAogKiBAcGFyYW0ge0hUTUxFbGVtZW50fSByb290CiAqIEBwYXJhbSB7U3BhY2VyUHJvcHN9IHByb3BzCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KZnVuY3Rpb24gU3BhY2VyKGRvY3VtZW50LCByb290LCBwcm9wcykgewogIGNvbnN0IHNwYWNlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogIHNwYWNlci5zdHlsZS5wYWRkaW5nQm90dG9tID0gcHJvcHMuc3BhY2U7CiAgcm9vdC5hcHBlbmRDaGlsZChzcGFjZXIpOwp9Cgptb2R1bGUuZXhwb3J0cyA9IFNwYWNlcjsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL292ZXJsYXkvY29udGFpbmVycy9Db21waWxlRXJyb3JDb250YWluZXIuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbnRhaW5lcnMvQ29tcGlsZUVycm9yQ29udGFpbmVyLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCmNvbnN0IENvbXBpbGVFcnJvclRyYWNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vY29tcG9uZW50cy9Db21waWxlRXJyb3JUcmFjZS5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvQ29tcGlsZUVycm9yVHJhY2UuanMiKTsKY29uc3QgUGFnZUhlYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2NvbXBvbmVudHMvUGFnZUhlYWRlci5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvUGFnZUhlYWRlci5qcyIpOwpjb25zdCBTcGFjZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi9jb21wb25lbnRzL1NwYWNlci5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvU3BhY2VyLmpzIik7CgovKioKICogQHR5cGVkZWYge09iamVjdH0gQ29tcGlsZUVycm9yQ29udGFpbmVyUHJvcHMKICogQHByb3BlcnR5IHtzdHJpbmd9IGVycm9yTWVzc2FnZQogKi8KCi8qKgogKiBBIGNvbnRhaW5lciB0byByZW5kZXIgV2VicGFjayBjb21waWxhdGlvbiBlcnJvciBtZXNzYWdlcyB3aXRoIHNvdXJjZSB0cmFjZS4KICogQHBhcmFtIHtEb2N1bWVudH0gZG9jdW1lbnQKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdAogKiBAcGFyYW0ge0NvbXBpbGVFcnJvckNvbnRhaW5lclByb3BzfSBwcm9wcwogKiBAcmV0dXJucyB7dm9pZH0KICovCmZ1bmN0aW9uIENvbXBpbGVFcnJvckNvbnRhaW5lcihkb2N1bWVudCwgcm9vdCwgcHJvcHMpIHsKICBQYWdlSGVhZGVyKGRvY3VtZW50LCByb290LCB7CiAgICB0aXRsZTogJ0ZhaWxlZCB0byBjb21waWxlLicsCiAgfSk7CiAgQ29tcGlsZUVycm9yVHJhY2UoZG9jdW1lbnQsIHJvb3QsIHsgZXJyb3JNZXNzYWdlOiBwcm9wcy5lcnJvck1lc3NhZ2UgfSk7CiAgU3BhY2VyKGRvY3VtZW50LCByb290LCB7IHNwYWNlOiAnMXJlbScgfSk7Cn0KCm1vZHVsZS5leHBvcnRzID0gQ29tcGlsZUVycm9yQ29udGFpbmVyOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS9jb250YWluZXJzL1J1bnRpbWVFcnJvckNvbnRhaW5lci5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL292ZXJsYXkvY29udGFpbmVycy9SdW50aW1lRXJyb3JDb250YWluZXIuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKY29uc3QgUGFnZUhlYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2NvbXBvbmVudHMvUGFnZUhlYWRlci5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvUGFnZUhlYWRlci5qcyIpOwpjb25zdCBSdW50aW1lRXJyb3JTdGFjayA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2NvbXBvbmVudHMvUnVudGltZUVycm9yU3RhY2suanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS9jb21wb25lbnRzL1J1bnRpbWVFcnJvclN0YWNrLmpzIik7CmNvbnN0IFNwYWNlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL2NvbXBvbmVudHMvU3BhY2VyLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL292ZXJsYXkvY29tcG9uZW50cy9TcGFjZXIuanMiKTsKCi8qKgogKiBAdHlwZWRlZiB7T2JqZWN0fSBSdW50aW1lRXJyb3JDb250YWluZXJQcm9wcwogKiBAcHJvcGVydHkge0Vycm9yfSBjdXJyZW50RXJyb3IKICovCgovKioKICogQSBjb250YWluZXIgdG8gcmVuZGVyIHJ1bnRpbWUgZXJyb3IgbWVzc2FnZXMgd2l0aCBzdGFjayB0cmFjZS4KICogQHBhcmFtIHtEb2N1bWVudH0gZG9jdW1lbnQKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdAogKiBAcGFyYW0ge1J1bnRpbWVFcnJvckNvbnRhaW5lclByb3BzfSBwcm9wcwogKiBAcmV0dXJucyB7dm9pZH0KICovCmZ1bmN0aW9uIFJ1bnRpbWVFcnJvckNvbnRhaW5lcihkb2N1bWVudCwgcm9vdCwgcHJvcHMpIHsKICBQYWdlSGVhZGVyKGRvY3VtZW50LCByb290LCB7CiAgICBtZXNzYWdlOiBwcm9wcy5jdXJyZW50RXJyb3IubWVzc2FnZSwKICAgIHRpdGxlOiBwcm9wcy5jdXJyZW50RXJyb3IubmFtZSwKICAgIHRvcE9mZnNldDogJzIuNXJlbScsCiAgfSk7CiAgUnVudGltZUVycm9yU3RhY2soZG9jdW1lbnQsIHJvb3QsIHsKICAgIGVycm9yOiBwcm9wcy5jdXJyZW50RXJyb3IsCiAgfSk7CiAgU3BhY2VyKGRvY3VtZW50LCByb290LCB7IHNwYWNlOiAnMXJlbScgfSk7Cn0KCm1vZHVsZS5leHBvcnRzID0gUnVudGltZUVycm9yQ29udGFpbmVyOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS9pbmRleC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL292ZXJsYXkvaW5kZXguanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKY29uc3QgUnVudGltZUVycm9yRm9vdGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jb21wb25lbnRzL1J1bnRpbWVFcnJvckZvb3Rlci5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbXBvbmVudHMvUnVudGltZUVycm9yRm9vdGVyLmpzIik7CmNvbnN0IFJ1bnRpbWVFcnJvckhlYWRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vY29tcG9uZW50cy9SdW50aW1lRXJyb3JIZWFkZXIuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS9jb21wb25lbnRzL1J1bnRpbWVFcnJvckhlYWRlci5qcyIpOwpjb25zdCBDb21waWxlRXJyb3JDb250YWluZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2NvbnRhaW5lcnMvQ29tcGlsZUVycm9yQ29udGFpbmVyLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL292ZXJsYXkvY29udGFpbmVycy9Db21waWxlRXJyb3JDb250YWluZXIuanMiKTsKY29uc3QgUnVudGltZUVycm9yQ29udGFpbmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jb250YWluZXJzL1J1bnRpbWVFcnJvckNvbnRhaW5lci5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L2NvbnRhaW5lcnMvUnVudGltZUVycm9yQ29udGFpbmVyLmpzIik7CmNvbnN0IHRoZW1lID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi90aGVtZS5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L3RoZW1lLmpzIik7CmNvbnN0IHV0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlscy5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L3V0aWxzLmpzIik7CgovKioKICogQGNhbGxiYWNrIFJlbmRlckZuCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KCi8qID09PT09IENhY2hlZCBlbGVtZW50cyBmb3IgRE9NIG1hbmlwdWxhdGlvbnMgPT09PT0gKi8KLyoqCiAqIFRoZSBpZnJhbWUgdGhhdCBjb250YWlucyB0aGUgb3ZlcmxheS4KICogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fQogKi8KbGV0IGlmcmFtZVJvb3QgPSBudWxsOwovKioKICogVGhlIGRvY3VtZW50IG9iamVjdCBmcm9tIHRoZSBpZnJhbWUgcm9vdCwgdXNlZCB0byBjcmVhdGUgYW5kIHJlbmRlciBlbGVtZW50cy4KICogQHR5cGUge0RvY3VtZW50fQogKi8KbGV0IHJvb3REb2N1bWVudCA9IG51bGw7Ci8qKgogKiBUaGUgcm9vdCBkaXYgZWxlbWVudHMgd2lsbCBhdHRhY2ggdG8uCiAqIEB0eXBlIHtIVE1MRGl2RWxlbWVudH0KICovCmxldCByb290ID0gbnVsbDsKLyoqCiAqIEEgQ2FjaGVkIGZ1bmN0aW9uIHRvIGFsbG93IGRlZmVycmVkIHJlbmRlci4KICogQHR5cGUge1JlbmRlckZuIHwgbnVsbH0KICovCmxldCBzY2hlZHVsZWRSZW5kZXJGbiA9IG51bGw7CgovKiA9PT09PSBPdmVybGF5IFN0YXRlID09PT09ICovCi8qKgogKiBUaGUgbGF0ZXN0IGVycm9yIG1lc3NhZ2UgZnJvbSBXZWJwYWNrIGNvbXBpbGF0aW9uLgogKiBAdHlwZSB7c3RyaW5nfQogKi8KbGV0IGN1cnJlbnRDb21waWxlRXJyb3JNZXNzYWdlID0gJyc7Ci8qKgogKiBJbmRleCBvZiB0aGUgZXJyb3IgY3VycmVudGx5IHNob3duIGJ5IHRoZSBvdmVybGF5LgogKiBAdHlwZSB7bnVtYmVyfQogKi8KbGV0IGN1cnJlbnRSdW50aW1lRXJyb3JJbmRleCA9IDA7Ci8qKgogKiBUaGUgbGF0ZXN0IHJ1bnRpbWUgZXJyb3Igb2JqZWN0cy4KICogQHR5cGUge0Vycm9yW119CiAqLwpsZXQgY3VycmVudFJ1bnRpbWVFcnJvcnMgPSBbXTsKLyoqCiAqIFRoZSByZW5kZXIgbW9kZSB0aGUgb3ZlcmxheSBpcyBjdXJyZW50bHkgaW4uCiAqIEB0eXBlIHsnY29tcGlsZUVycm9yJyB8ICdydW50aW1lRXJyb3InIHwgbnVsbH0KICovCmxldCBjdXJyZW50TW9kZSA9IG51bGw7CgovKioKICogQHR5cGVkZWYge09iamVjdH0gSWZyYW1lUHJvcHMKICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiB2b2lkfSBvbklmcmFtZUxvYWQKICovCgovKioKICogQ3JlYXRlcyB0aGUgbWFpbiBgaWZyYW1lYCB0aGUgb3ZlcmxheSB3aWxsIGF0dGFjaCB0by4KICogQWNjZXB0cyBhIGNhbGxiYWNrIHRvIGJlIHJhbiBhZnRlciBpZnJhbWUgaXMgaW5pdGlhbGl6ZWQuCiAqIEBwYXJhbSB7RG9jdW1lbnR9IGRvY3VtZW50CiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHJvb3QKICogQHBhcmFtIHtJZnJhbWVQcm9wc30gcHJvcHMKICogQHJldHVybnMge0hUTUxJRnJhbWVFbGVtZW50fQogKi8KZnVuY3Rpb24gSWZyYW1lUm9vdChkb2N1bWVudCwgcm9vdCwgcHJvcHMpIHsKICBjb25zdCBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTsKICBpZnJhbWUuaWQgPSAncmVhY3QtcmVmcmVzaC1vdmVybGF5JzsKICBpZnJhbWUuc3JjID0gJ2Fib3V0OmJsYW5rJzsKCiAgaWZyYW1lLnN0eWxlLmJvcmRlciA9ICdub25lJzsKICBpZnJhbWUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnOwogIGlmcmFtZS5zdHlsZS5sZWZ0ID0gJzAnOwogIGlmcmFtZS5zdHlsZS5taW5IZWlnaHQgPSAnMTAwdmgnOwogIGlmcmFtZS5zdHlsZS5taW5IZWlnaHQgPSAnLXdlYmtpdC1maWxsLWF2YWlsYWJsZSc7CiAgaWZyYW1lLnN0eWxlLnBvc2l0aW9uID0gJ2ZpeGVkJzsKICBpZnJhbWUuc3R5bGUudG9wID0gJzAnOwogIGlmcmFtZS5zdHlsZS53aWR0aCA9ICcxMDB2dyc7CiAgaWZyYW1lLnN0eWxlLnpJbmRleCA9ICcyMTQ3NDgzNjQ3JzsKICBpZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uIG9uTG9hZCgpIHsKICAgIC8vIFJlc2V0IG1hcmdpbiBvZiBpZnJhbWUgYm9keQogICAgaWZyYW1lLmNvbnRlbnREb2N1bWVudC5ib2R5LnN0eWxlLm1hcmdpbiA9ICcwJzsKICAgIHByb3BzLm9uSWZyYW1lTG9hZCgpOwogIH0pOwoKICAvLyBXZSBza2lwIG1vdW50aW5nIGFuZCByZXR1cm5zIGFzIHdlIG5lZWQgdG8gZW5zdXJlCiAgLy8gdGhlIGxvYWQgZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgd2Ugc2V0dXAgdGhlIGdsb2JhbCB2YXJpYWJsZQogIHJldHVybiBpZnJhbWU7Cn0KCi8qKgogKiBDcmVhdGVzIHRoZSBtYWluIGBkaXZgIGVsZW1lbnQgZm9yIHRoZSBvdmVybGF5IHRvIHJlbmRlci4KICogQHBhcmFtIHtEb2N1bWVudH0gZG9jdW1lbnQKICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcm9vdAogKiBAcmV0dXJucyB7SFRNTERpdkVsZW1lbnR9CiAqLwpmdW5jdGlvbiBPdmVybGF5Um9vdChkb2N1bWVudCwgcm9vdCkgewogIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogIGRpdi5pZCA9ICdyZWFjdC1yZWZyZXNoLW92ZXJsYXktZXJyb3InOwoKICAvLyBTdHlsZSB0aGUgY29udGVudHMgY29udGFpbmVyCiAgZGl2LnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcjJyArIHRoZW1lLmdyZXk7CiAgZGl2LnN0eWxlLmJveFNpemluZyA9ICdib3JkZXItYm94JzsKICBkaXYuc3R5bGUuY29sb3IgPSAnIycgKyB0aGVtZS53aGl0ZTsKICBkaXYuc3R5bGUuZm9udEZhbWlseSA9IFsKICAgICctYXBwbGUtc3lzdGVtJywKICAgICdCbGlua01hY1N5c3RlbUZvbnQnLAogICAgJyJTZWdvZSBVSSInLAogICAgJyJIZWx2ZXRpY2EgTmV1ZSInLAogICAgJ0hlbHZldGljYScsCiAgICAnQXJpYWwnLAogICAgJ3NhbnMtc2VyaWYnLAogICAgJyJBcHBsZSBDb2xvciBFbW9qaSInLAogICAgJyJTZWdvZSBVSSBFbW9qaSInLAogICAgJ1NlZ29lIFVJIFN5bWJvbCcsCiAgXS5qb2luKCcsICcpOwogIGRpdi5zdHlsZS5mb250U2l6ZSA9ICcwLjg3NXJlbSc7CiAgZGl2LnN0eWxlLmhlaWdodCA9ICcxMDAlJzsKICBkaXYuc3R5bGUubGluZUhlaWdodCA9ICcxLjMnOwogIGRpdi5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJzsKICBkaXYuc3R5bGUucGFkZGluZyA9ICcxcmVtIDEuNXJlbSAwJzsKICBkaXYuc3R5bGUucGFkZGluZ1RvcCA9ICdtYXgoMXJlbSwgZW52KHNhZmUtYXJlYS1pbnNldC10b3ApKSc7CiAgZGl2LnN0eWxlLnBhZGRpbmdSaWdodCA9ICdtYXgoMS41cmVtLCBlbnYoc2FmZS1hcmVhLWluc2V0LXJpZ2h0KSknOwogIGRpdi5zdHlsZS5wYWRkaW5nQm90dG9tID0gJ2VudihzYWZlLWFyZWEtaW5zZXQtYm90dG9tKSc7CiAgZGl2LnN0eWxlLnBhZGRpbmdMZWZ0ID0gJ21heCgxLjVyZW0sIGVudihzYWZlLWFyZWEtaW5zZXQtbGVmdCkpJzsKICBkaXYuc3R5bGUud2lkdGggPSAnMTAwdncnOwoKICByb290LmFwcGVuZENoaWxkKGRpdik7CiAgcmV0dXJuIGRpdjsKfQoKLyoqCiAqIEVuc3VyZXMgdGhlIGlmcmFtZSByb290IGFuZCB0aGUgb3ZlcmxheSByb290IGFyZSBib3RoIGluaXRpYWxpemVkIGJlZm9yZSByZW5kZXIuCiAqIElmIGNoZWNrIGZhaWxzLCByZW5kZXIgd2lsbCBiZSBkZWZlcnJlZCB1bnRpbCBib3RoIHJvb3RzIGFyZSBpbml0aWFsaXplZC4KICogQHBhcmFtIHtSZW5kZXJGbn0gcmVuZGVyRm4gQSBmdW5jdGlvbiB0aGF0IHRyaWdnZXJzIGEgRE9NIHJlbmRlci4KICogQHJldHVybnMge3ZvaWR9CiAqLwpmdW5jdGlvbiBlbnN1cmVSb290RXhpc3RzKHJlbmRlckZuKSB7CiAgaWYgKHJvb3QpIHsKICAgIC8vIE92ZXJsYXkgcm9vdCBpcyByZWFkeSwgd2UgY2FuIHJlbmRlciByaWdodCBhd2F5LgogICAgcmVuZGVyRm4oKTsKICAgIHJldHVybjsKICB9CgogIC8vIENyZWF0aW5nIGFuIGlmcmFtZSBtYXkgYmUgYXN5bmNocm9ub3VzIHNvIHdlJ2xsIGRlZmVyIHJlbmRlci4KICAvLyBJbiBjYXNlIG9mIG11bHRpcGxlIGNhbGxzLCBmdW5jdGlvbiBmcm9tIHRoZSBsYXN0IGNhbGwgd2lsbCBiZSB1c2VkLgogIHNjaGVkdWxlZFJlbmRlckZuID0gcmVuZGVyRm47CgogIGlmIChpZnJhbWVSb290KSB7CiAgICAvLyBJZnJhbWUgaXMgYWxyZWFkeSByZWFkeSwgaXQgd2lsbCBmaXJlIHRoZSBsb2FkIGV2ZW50LgogICAgcmV0dXJuOwogIH0KCiAgLy8gQ3JlYXRlIHRoZSBpZnJhbWUgcm9vdCwgYW5kLCB0aGUgb3ZlcmxheSByb290IGluc2lkZSBpdCB3aGVuIGl0IGlzIHJlYWR5LgogIGlmcmFtZVJvb3QgPSBJZnJhbWVSb290KGRvY3VtZW50LCBkb2N1bWVudC5ib2R5LCB7CiAgICBvbklmcmFtZUxvYWQ6IGZ1bmN0aW9uIG9uSWZyYW1lTG9hZCgpIHsKICAgICAgcm9vdERvY3VtZW50ID0gaWZyYW1lUm9vdC5jb250ZW50RG9jdW1lbnQ7CiAgICAgIHJvb3QgPSBPdmVybGF5Um9vdChyb290RG9jdW1lbnQsIHJvb3REb2N1bWVudC5ib2R5KTsKICAgICAgc2NoZWR1bGVkUmVuZGVyRm4oKTsKICAgIH0sCiAgfSk7CgogIC8vIFdlIGhhdmUgdG8gbW91bnQgaGVyZSB0byBlbnN1cmUgYGlmcmFtZVJvb3RgIGlzIHNldCB3aGVuIGBvbklmcmFtZUxvYWRgIGZpcmVzLgogIC8vIFRoaXMgaXMgYmVjYXVzZSBvbklmcmFtZUxvYWQoKSB3aWxsIGJlIGNhbGxlZCBzeW5jaHJvbm91c2x5CiAgLy8gb3IgYXN5bmNocm9ub3VzbHkgZGVwZW5kaW5nIG9uIHRoZSBicm93c2VyLgogIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lUm9vdCk7Cn0KCi8qKgogKiBDcmVhdGVzIHRoZSBtYWluIGBkaXZgIGVsZW1lbnQgZm9yIHRoZSBvdmVybGF5IHRvIHJlbmRlci4KICogQHJldHVybnMge3ZvaWR9CiAqLwpmdW5jdGlvbiByZW5kZXIoKSB7CiAgZW5zdXJlUm9vdEV4aXN0cyhmdW5jdGlvbiAoKSB7CiAgICBjb25zdCBjdXJyZW50Rm9jdXMgPSByb290RG9jdW1lbnQuYWN0aXZlRWxlbWVudDsKICAgIGxldCBjdXJyZW50Rm9jdXNJZDsKICAgIGlmIChjdXJyZW50Rm9jdXMubG9jYWxOYW1lID09PSAnYnV0dG9uJyAmJiBjdXJyZW50Rm9jdXMuaWQpIHsKICAgICAgY3VycmVudEZvY3VzSWQgPSBjdXJyZW50Rm9jdXMuaWQ7CiAgICB9CgogICAgdXRpbHMucmVtb3ZlQWxsQ2hpbGRyZW4ocm9vdCk7CgogICAgaWYgKGN1cnJlbnRDb21waWxlRXJyb3JNZXNzYWdlKSB7CiAgICAgIGN1cnJlbnRNb2RlID0gJ2NvbXBpbGVFcnJvcic7CgogICAgICBDb21waWxlRXJyb3JDb250YWluZXIocm9vdERvY3VtZW50LCByb290LCB7CiAgICAgICAgZXJyb3JNZXNzYWdlOiBjdXJyZW50Q29tcGlsZUVycm9yTWVzc2FnZSwKICAgICAgfSk7CiAgICB9IGVsc2UgaWYgKGN1cnJlbnRSdW50aW1lRXJyb3JzLmxlbmd0aCkgewogICAgICBjdXJyZW50TW9kZSA9ICdydW50aW1lRXJyb3InOwoKICAgICAgUnVudGltZUVycm9ySGVhZGVyKHJvb3REb2N1bWVudCwgcm9vdCwgewogICAgICAgIGN1cnJlbnRFcnJvckluZGV4OiBjdXJyZW50UnVudGltZUVycm9ySW5kZXgsCiAgICAgICAgdG90YWxFcnJvcnM6IGN1cnJlbnRSdW50aW1lRXJyb3JzLmxlbmd0aCwKICAgICAgfSk7CiAgICAgIFJ1bnRpbWVFcnJvckNvbnRhaW5lcihyb290RG9jdW1lbnQsIHJvb3QsIHsKICAgICAgICBjdXJyZW50RXJyb3I6IGN1cnJlbnRSdW50aW1lRXJyb3JzW2N1cnJlbnRSdW50aW1lRXJyb3JJbmRleF0sCiAgICAgIH0pOwogICAgICBSdW50aW1lRXJyb3JGb290ZXIocm9vdERvY3VtZW50LCByb290LCB7CiAgICAgICAgaW5pdGlhbEZvY3VzOiBjdXJyZW50Rm9jdXNJZCwKICAgICAgICBtdWx0aXBsZTogY3VycmVudFJ1bnRpbWVFcnJvcnMubGVuZ3RoID4gMSwKICAgICAgICBvbkNsaWNrQ2xvc2VCdXR0b246IGZ1bmN0aW9uIG9uQ2xvc2UoKSB7CiAgICAgICAgICBjbGVhclJ1bnRpbWVFcnJvcnMoKTsKICAgICAgICB9LAogICAgICAgIG9uQ2xpY2tOZXh0QnV0dG9uOiBmdW5jdGlvbiBvbk5leHQoKSB7CiAgICAgICAgICBpZiAoY3VycmVudFJ1bnRpbWVFcnJvckluZGV4ID09PSBjdXJyZW50UnVudGltZUVycm9ycy5sZW5ndGggLSAxKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KICAgICAgICAgIGN1cnJlbnRSdW50aW1lRXJyb3JJbmRleCArPSAxOwogICAgICAgICAgZW5zdXJlUm9vdEV4aXN0cyhyZW5kZXIpOwogICAgICAgIH0sCiAgICAgICAgb25DbGlja1ByZXZCdXR0b246IGZ1bmN0aW9uIG9uUHJldigpIHsKICAgICAgICAgIGlmIChjdXJyZW50UnVudGltZUVycm9ySW5kZXggPT09IDApIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQogICAgICAgICAgY3VycmVudFJ1bnRpbWVFcnJvckluZGV4IC09IDE7CiAgICAgICAgICBlbnN1cmVSb290RXhpc3RzKHJlbmRlcik7CiAgICAgICAgfSwKICAgICAgfSk7CiAgICB9CiAgfSk7Cn0KCi8qKgogKiBEZXN0cm95cyB0aGUgc3RhdGUgb2YgdGhlIG92ZXJsYXkuCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KZnVuY3Rpb24gY2xlYW51cCgpIHsKICAvLyBDbGVhbiB1cCBhbmQgcmVzZXQgYWxsIGludGVybmFsIHN0YXRlLgogIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoaWZyYW1lUm9vdCk7CiAgc2NoZWR1bGVkUmVuZGVyRm4gPSBudWxsOwogIHJvb3QgPSBudWxsOwogIGlmcmFtZVJvb3QgPSBudWxsOwp9CgovKioKICogQ2xlYXJzIFdlYnBhY2sgY29tcGlsYXRpb24gZXJyb3JzIGFuZCBkaXNtaXNzZXMgdGhlIGNvbXBpbGUgZXJyb3Igb3ZlcmxheS4KICogQHJldHVybnMge3ZvaWR9CiAqLwpmdW5jdGlvbiBjbGVhckNvbXBpbGVFcnJvcigpIHsKICBpZiAoIXJvb3QgfHwgY3VycmVudE1vZGUgIT09ICdjb21waWxlRXJyb3InKSB7CiAgICByZXR1cm47CiAgfQoKICBjdXJyZW50Q29tcGlsZUVycm9yTWVzc2FnZSA9ICcnOwogIGN1cnJlbnRNb2RlID0gbnVsbDsKICBjbGVhbnVwKCk7Cn0KCi8qKgogKiBDbGVhcnMgcnVudGltZSBlcnJvciByZWNvcmRzIGFuZCBkaXNtaXNzZXMgdGhlIHJ1bnRpbWUgZXJyb3Igb3ZlcmxheS4KICogQHBhcmFtIHtib29sZWFufSBbZGlzbWlzc092ZXJsYXldIFdoZXRoZXIgdG8gZGlzbWlzcyB0aGUgb3ZlcmxheSBvciBub3QuCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KZnVuY3Rpb24gY2xlYXJSdW50aW1lRXJyb3JzKGRpc21pc3NPdmVybGF5KSB7CiAgaWYgKCFyb290IHx8IGN1cnJlbnRNb2RlICE9PSAncnVudGltZUVycm9yJykgewogICAgcmV0dXJuOwogIH0KCiAgY3VycmVudFJ1bnRpbWVFcnJvckluZGV4ID0gMDsKICBjdXJyZW50UnVudGltZUVycm9ycyA9IFtdOwoKICBpZiAodHlwZW9mIGRpc21pc3NPdmVybGF5ID09PSAndW5kZWZpbmVkJyB8fCBkaXNtaXNzT3ZlcmxheSkgewogICAgY3VycmVudE1vZGUgPSBudWxsOwogICAgY2xlYW51cCgpOwogIH0KfQoKLyoqCiAqIFNob3dzIHRoZSBjb21waWxlIGVycm9yIG92ZXJsYXkgd2l0aCB0aGUgc3BlY2lmaWMgV2VicGFjayBlcnJvciBtZXNzYWdlLgogKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZQogKiBAcmV0dXJucyB7dm9pZH0KICovCmZ1bmN0aW9uIHNob3dDb21waWxlRXJyb3IobWVzc2FnZSkgewogIGlmICghbWVzc2FnZSkgewogICAgcmV0dXJuOwogIH0KCiAgY3VycmVudENvbXBpbGVFcnJvck1lc3NhZ2UgPSBtZXNzYWdlOwoKICByZW5kZXIoKTsKfQoKLyoqCiAqIFNob3dzIHRoZSBydW50aW1lIGVycm9yIG92ZXJsYXkgd2l0aCB0aGUgc3BlY2lmaWMgZXJyb3IgcmVjb3Jkcy4KICogQHBhcmFtIHtFcnJvcltdfSBlcnJvcnMKICogQHJldHVybnMge3ZvaWR9CiAqLwpmdW5jdGlvbiBzaG93UnVudGltZUVycm9ycyhlcnJvcnMpIHsKICBpZiAoIWVycm9ycyB8fCAhZXJyb3JzLmxlbmd0aCkgewogICAgcmV0dXJuOwogIH0KCiAgY3VycmVudFJ1bnRpbWVFcnJvcnMgPSBlcnJvcnM7CgogIHJlbmRlcigpOwp9CgovKioKICogVGhlIGRlYm91bmNlZCB2ZXJzaW9uIG9mIGBzaG93UnVudGltZUVycm9yc2AgdG8gcHJldmVudCBmcmVxdWVudCByZW5kZXJzCiAqIGR1ZSB0byByYXBpZCBmaXJpbmcgbGlzdGVuZXJzLgogKiBAcGFyYW0ge0Vycm9yW119IGVycm9ycwogKiBAcmV0dXJucyB7dm9pZH0KICovCmNvbnN0IGRlYm91bmNlZFNob3dSdW50aW1lRXJyb3JzID0gdXRpbHMuZGVib3VuY2Uoc2hvd1J1bnRpbWVFcnJvcnMsIDMwKTsKCi8qKgogKiBEZXRlY3RzIGlmIGFuIGVycm9yIGlzIGEgV2VicGFjayBjb21waWxhdGlvbiBlcnJvci4KICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIG9mIGludGVyZXN0LgogKiBAcmV0dXJucyB7Ym9vbGVhbn0gSWYgdGhlIGVycm9yIGlzIGEgV2VicGFjayBjb21waWxhdGlvbiBlcnJvci4KICovCmZ1bmN0aW9uIGlzV2VicGFja0NvbXBpbGVFcnJvcihlcnJvcikgewogIHJldHVybiAvTW9kdWxlIFtBLXogXStcKGZyb20vLnRlc3QoZXJyb3IubWVzc2FnZSkgfHwgL0Nhbm5vdCBmaW5kIG1vZHVsZS8udGVzdChlcnJvci5tZXNzYWdlKTsKfQoKLyoqCiAqIEhhbmRsZXMgcnVudGltZSBlcnJvciBjb250ZXh0cyBjYXB0dXJlZCB3aXRoIEV2ZW50TGlzdGVuZXJzLgogKiBJbnRlZ3JhdGVzIHdpdGggYSBydW50aW1lIGVycm9yIG92ZXJsYXkuCiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIEEgdmFsaWQgZXJyb3Igb2JqZWN0LgogKiBAcmV0dXJucyB7dm9pZH0KICovCmZ1bmN0aW9uIGhhbmRsZVJ1bnRpbWVFcnJvcihlcnJvcikgewogIGlmIChlcnJvciAmJiAhaXNXZWJwYWNrQ29tcGlsZUVycm9yKGVycm9yKSAmJiBjdXJyZW50UnVudGltZUVycm9ycy5pbmRleE9mKGVycm9yKSA9PT0gLTEpIHsKICAgIGN1cnJlbnRSdW50aW1lRXJyb3JzID0gY3VycmVudFJ1bnRpbWVFcnJvcnMuY29uY2F0KGVycm9yKTsKICB9CiAgZGVib3VuY2VkU2hvd1J1bnRpbWVFcnJvcnMoY3VycmVudFJ1bnRpbWVFcnJvcnMpOwp9Cgptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5mcmVlemUoewogIGNsZWFyQ29tcGlsZUVycm9yOiBjbGVhckNvbXBpbGVFcnJvciwKICBjbGVhclJ1bnRpbWVFcnJvcnM6IGNsZWFyUnVudGltZUVycm9ycywKICBoYW5kbGVSdW50aW1lRXJyb3I6IGhhbmRsZVJ1bnRpbWVFcnJvciwKICBzaG93Q29tcGlsZUVycm9yOiBzaG93Q29tcGlsZUVycm9yLAogIHNob3dSdW50aW1lRXJyb3JzOiBzaG93UnVudGltZUVycm9ycywKfSk7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L3RoZW1lLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS90aGVtZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IFRoZW1lCiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IHJlc2V0CiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBibGFjawogKiBAcHJvcGVydHkge3N0cmluZ30gcmVkCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBncmVlbgogKiBAcHJvcGVydHkge3N0cmluZ30geWVsbG93CiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBibHVlCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBtYWdlbnRhCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjeWFuCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB3aGl0ZQogKiBAcHJvcGVydHkge3N0cmluZ30gbGlnaHRncmV5CiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBkYXJrZ3JleQogKiBAcHJvcGVydHkge3N0cmluZ30gZ3JleQogKiBAcHJvcGVydHkge3N0cmluZ30gZGltZ3JleQogKi8KCi8qKgogKiBAdHlwZSB7VGhlbWV9IHRoZW1lCiAqIEEgY29sbGVjdGlvbiBvZiBjb2xvcnMgdG8gYmUgdXNlZCBieSB0aGUgb3ZlcmxheS4KICogUGFydGlhbGx5IGFkb3B0ZWQgZnJvbSBUb21vcnJvdyBOaWdodCBCcmlnaHQuCiAqLwpjb25zdCB0aGVtZSA9IHsKICByZXNldDogWyd0cmFuc3BhcmVudCcsICd0cmFuc3BhcmVudCddLAogIGJsYWNrOiAnMDAwMDAwJywKICByZWQ6ICdEMzRGNTYnLAogIGdyZWVuOiAnQjlDOTU0JywKICB5ZWxsb3c6ICdFNkM0NTInLAogIGJsdWU6ICc3Q0E3RDgnLAogIG1hZ2VudGE6ICdDMjk5RDYnLAogIGN5YW46ICc3M0JGQjEnLAogIHdoaXRlOiAnRkZGRkZGJywKICBsaWdodGdyZXk6ICdDN0M3QzcnLAogIGRhcmtncmV5OiAnQTlBOUE5JywKICBncmV5OiAnNDc0NzQ3JywKICBkaW1ncmV5OiAnMzQzNDM0JywKfTsKCm1vZHVsZS5leHBvcnRzID0gdGhlbWU7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9vdmVybGF5L3V0aWxzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vb3ZlcmxheS91dGlscy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKLyoqCiAqIERlYm91bmNlIGEgZnVuY3Rpb24gdG8gZGVsYXkgaW52b2tpbmcgdW50aWwgd2FpdCAobXMpIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCBpbnZvY2F0aW9uLgogKiBAcGFyYW0ge2Z1bmN0aW9uKC4uLiopOiAqfSBmbiBUaGUgZnVuY3Rpb24gdG8gYmUgZGVib3VuY2VkLgogKiBAcGFyYW0ge251bWJlcn0gd2FpdCBNaWxsaXNlY29uZHMgdG8gd2FpdCBiZWZvcmUgaW52b2tpbmcgYWdhaW4uCiAqIEByZXR1cm4ge2Z1bmN0aW9uKC4uLiopOiB2b2lkfSBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uLgogKi8KZnVuY3Rpb24gZGVib3VuY2UoZm4sIHdhaXQpIHsKICAvKioKICAgKiBBIGNhY2hlZCBzZXRUaW1lb3V0IGhhbmRsZXIuCiAgICogQHR5cGUge251bWJlciB8IHVuZGVmaW5lZH0KICAgKi8KICBsZXQgdGltZXI7CgogIC8qKgogICAqIEByZXR1cm5zIHt2b2lkfQogICAqLwogIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHsKICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzOwogICAgY29uc3QgYXJncyA9IGFyZ3VtZW50czsKCiAgICBjbGVhclRpbWVvdXQodGltZXIpOwogICAgdGltZXIgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3MpOwogICAgfSwgd2FpdCk7CiAgfQoKICByZXR1cm4gZGVib3VuY2VkOwp9CgovKioKICogUHJldHRpZnkgYSBmaWxlbmFtZSBmcm9tIGVycm9yIHN0YWNrcyBpbnRvIHRoZSBkZXNpcmVkIGZvcm1hdC4KICogQHBhcmFtIHtzdHJpbmd9IGZpbGVuYW1lIFRoZSBmaWxlbmFtZSB0byBiZSBmb3JtYXR0ZWQuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgZmlsZW5hbWUuCiAqLwpmdW5jdGlvbiBmb3JtYXRGaWxlbmFtZShmaWxlbmFtZSkgewogIC8vIFN0cmlwIGF3YXkgcHJvdG9jb2wgYW5kIGRvbWFpbiBmb3IgY29tcGlsZWQgZmlsZXMKICBjb25zdCBodG1sTWF0Y2ggPSAvXmh0dHBzPzpcL1wvKC4qKVwvKC4qKS8uZXhlYyhmaWxlbmFtZSk7CiAgaWYgKGh0bWxNYXRjaCAmJiBodG1sTWF0Y2hbMV0gJiYgaHRtbE1hdGNoWzJdKSB7CiAgICByZXR1cm4gaHRtbE1hdGNoWzJdOwogIH0KCiAgLy8gU3RyaXAgZXZlcnl0aGluZyBiZWZvcmUgdGhlIGZpcnN0IGRpcmVjdG9yeSBmb3Igc291cmNlIGZpbGVzCiAgY29uc3Qgc291cmNlTWF0Y2ggPSAvXC8uKj8oW14uL10rWy98XFxdLiopJC8uZXhlYyhmaWxlbmFtZSk7CiAgaWYgKHNvdXJjZU1hdGNoICYmIHNvdXJjZU1hdGNoWzFdKSB7CiAgICByZXR1cm4gc291cmNlTWF0Y2hbMV0ucmVwbGFjZSgvXD8kLywgJycpOwogIH0KCiAgLy8gVW5rbm93biBmaWxlbmFtZSB0eXBlLCB1c2UgaXQgYXMgaXMKICByZXR1cm4gZmlsZW5hbWU7Cn0KCi8qKgogKiBSZW1vdmUgYWxsIGNoaWxkcmVuIG9mIGFuIGVsZW1lbnQuCiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQgQSB2YWxpZCBIVE1MIGVsZW1lbnQuCiAqIEBwYXJhbSB7bnVtYmVyfSBbc2tpcF0gTnVtYmVyIG9mIGVsZW1lbnRzIHRvIHNraXAgcmVtb3ZpbmcuCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KZnVuY3Rpb24gcmVtb3ZlQWxsQ2hpbGRyZW4oZWxlbWVudCwgc2tpcCkgewogIC8qKiBAdHlwZSB7Tm9kZVtdfSAqLwogIGNvbnN0IGNoaWxkTGlzdCA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKAogICAgZWxlbWVudC5jaGlsZE5vZGVzLAogICAgdHlwZW9mIHNraXAgIT09ICd1bmRlZmluZWQnID8gc2tpcCA6IDAKICApOwoKICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkTGlzdC5sZW5ndGg7IGkgKz0gMSkgewogICAgZWxlbWVudC5yZW1vdmVDaGlsZChjaGlsZExpc3RbaV0pOwogIH0KfQoKbW9kdWxlLmV4cG9ydHMgPSB7CiAgZGVib3VuY2U6IGRlYm91bmNlLAogIGZvcm1hdEZpbGVuYW1lOiBmb3JtYXRGaWxlbmFtZSwKICByZW1vdmVBbGxDaGlsZHJlbjogcmVtb3ZlQWxsQ2hpbGRyZW4sCn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9zb2NrZXRzL1dEU1NvY2tldC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9zb2NrZXRzL1dEU1NvY2tldC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9jbGllbnRzL1dlYlNvY2tldENsaWVudC5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtNDM3YjhiM2QyOS8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMiKTsKLyogZ2xvYmFsIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICovCgpjb25zdCBnZXRTb2NrZXRVcmxQYXJ0cyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvZ2V0U29ja2V0VXJsUGFydHMuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vc29ja2V0cy91dGlscy9nZXRTb2NrZXRVcmxQYXJ0cy5qcyIpOwpjb25zdCBnZXRVcmxGcm9tUGFydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL3V0aWxzL2dldFVybEZyb21QYXJ0cyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9zb2NrZXRzL3V0aWxzL2dldFVybEZyb21QYXJ0cy5qcyIpOwpjb25zdCBnZXRXRFNNZXRhZGF0YSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvZ2V0V0RTTWV0YWRhdGEgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vc29ja2V0cy91dGlscy9nZXRXRFNNZXRhZGF0YS5qcyIpOwoKLyoqCiAqIEluaXRpYWxpemVzIGEgc29ja2V0IHNlcnZlciBmb3IgSE1SIGZvciB3ZWJwYWNrLWRldi1zZXJ2ZXIuCiAqIEBwYXJhbSB7ZnVuY3Rpb24oKik6IHZvaWR9IG1lc3NhZ2VIYW5kbGVyIEEgaGFuZGxlciB0byBjb25zdW1lIFdlYnBhY2sgY29tcGlsYXRpb24gbWVzc2FnZXMuCiAqIEBwYXJhbSB7c3RyaW5nfSBbcmVzb3VyY2VRdWVyeV0gV2VicGFjaydzIGBfX3Jlc291cmNlUXVlcnlgIHN0cmluZy4KICogQHJldHVybnMge3ZvaWR9CiAqLwpmdW5jdGlvbiBpbml0V0RTU29ja2V0KG1lc3NhZ2VIYW5kbGVyLCByZXNvdXJjZVF1ZXJ5KSB7CiAgaWYgKHR5cGVvZiBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgIGxldCBTb2NrZXRDbGllbnQgPSBfX3dlYnBhY2tfZGV2X3NlcnZlcl9jbGllbnRfXzsKICAgIGlmICh0eXBlb2YgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18uZGVmYXVsdCAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgU29ja2V0Q2xpZW50ID0gX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18uZGVmYXVsdDsKICAgIH0KCiAgICBjb25zdCB3ZHNNZXRhID0gZ2V0V0RTTWV0YWRhdGEoU29ja2V0Q2xpZW50KTsKICAgIGNvbnN0IHVybFBhcnRzID0gZ2V0U29ja2V0VXJsUGFydHMocmVzb3VyY2VRdWVyeSwgd2RzTWV0YSk7CgogICAgY29uc3QgY29ubmVjdGlvbiA9IG5ldyBTb2NrZXRDbGllbnQoZ2V0VXJsRnJvbVBhcnRzKHVybFBhcnRzLCB3ZHNNZXRhKSk7CgogICAgY29ubmVjdGlvbi5vbk1lc3NhZ2UoZnVuY3Rpb24gb25Tb2NrZXRNZXNzYWdlKGRhdGEpIHsKICAgICAgY29uc3QgbWVzc2FnZSA9IEpTT04ucGFyc2UoZGF0YSk7CiAgICAgIG1lc3NhZ2VIYW5kbGVyKG1lc3NhZ2UpOwogICAgfSk7CiAgfQp9Cgptb2R1bGUuZXhwb3J0cyA9IHsgaW5pdDogaW5pdFdEU1NvY2tldCB9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vc29ja2V0cy91dGlscy9nZXRDdXJyZW50U2NyaXB0U291cmNlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9zb2NrZXRzL3V0aWxzL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKLyoqCiAqIEdldHMgdGhlIHNvdXJjZSAoaS5lLiBob3N0KSBvZiB0aGUgc2NyaXB0IGN1cnJlbnRseSBydW5uaW5nLgogKiBAcmV0dXJucyB7c3RyaW5nfQogKi8KZnVuY3Rpb24gZ2V0Q3VycmVudFNjcmlwdFNvdXJjZSgpIHsKICAvLyBgZG9jdW1lbnQuY3VycmVudFNjcmlwdGAgaXMgdGhlIG1vc3QgYWNjdXJhdGUgd2F5IHRvIGdldCB0aGUgY3VycmVudCBydW5uaW5nIHNjcmlwdCwKICAvLyBidXQgaXMgbm90IHN1cHBvcnRlZCBpbiBhbGwgYnJvd3NlcnMgKG1vc3Qgbm90YWJseSwgSUUpLgogIGlmICgnY3VycmVudFNjcmlwdCcgaW4gZG9jdW1lbnQpIHsKICAgIC8vIEluIHNvbWUgY2FzZXMsIGBkb2N1bWVudC5jdXJyZW50U2NyaXB0YCB3b3VsZCBiZSBgbnVsbGAgZXZlbiBpZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBpdDoKICAgIC8vIGUuZy4gYXN5bmNocm9ub3VzIGNodW5rcyBvbiBGaXJlZm94LgogICAgLy8gV2Ugc2hvdWxkIG5vdCBmYWxsYmFjayB0byB0aGUgbGlzdC1hcHByb2FjaCBhcyBpdCB3b3VsZCBub3QgYmUgc2FmZS4KICAgIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0ID09IG51bGwpIHJldHVybjsKICAgIHJldHVybiBkb2N1bWVudC5jdXJyZW50U2NyaXB0LmdldEF0dHJpYnV0ZSgnc3JjJyk7CiAgfQogIC8vIEZhbGxiYWNrIHRvIGdldHRpbmcgYWxsIHNjcmlwdHMgcnVubmluZyBpbiB0aGUgZG9jdW1lbnQsCiAgLy8gYW5kIGZpbmRpbmcgdGhlIGxhc3Qgb25lIGluamVjdGVkLgogIGVsc2UgewogICAgY29uc3Qgc2NyaXB0RWxlbWVudHNXaXRoU3JjID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKAogICAgICBkb2N1bWVudC5zY3JpcHRzIHx8IFtdLAogICAgICBmdW5jdGlvbiAoZWxlbSkgewogICAgICAgIHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSgnc3JjJyk7CiAgICAgIH0KICAgICk7CiAgICBpZiAoIXNjcmlwdEVsZW1lbnRzV2l0aFNyYy5sZW5ndGgpIHJldHVybjsKICAgIGNvbnN0IGN1cnJlbnRTY3JpcHQgPSBzY3JpcHRFbGVtZW50c1dpdGhTcmNbc2NyaXB0RWxlbWVudHNXaXRoU3JjLmxlbmd0aCAtIDFdOwogICAgcmV0dXJuIGN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKCdzcmMnKTsKICB9Cn0KCm1vZHVsZS5leHBvcnRzID0gZ2V0Q3VycmVudFNjcmlwdFNvdXJjZTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL3NvY2tldHMvdXRpbHMvZ2V0U29ja2V0VXJsUGFydHMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLXZpcnR1YWwtZTUxNWFkNjdhMC8wL2NhY2hlL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi1ucG0tMC41LjEwLTA5MjhkMTc5OGEtYzQ1YmVkZWQ5Yy56aXAvbm9kZV9tb2R1bGVzL0BwbW1td2gvcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi9zb2NrZXRzL3V0aWxzL2dldFNvY2tldFVybFBhcnRzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCmNvbnN0IGdldEN1cnJlbnRTY3JpcHRTb3VyY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vc29ja2V0cy91dGlscy9nZXRDdXJyZW50U2NyaXB0U291cmNlLmpzIik7CgovKioKICogQHR5cGVkZWYge09iamVjdH0gU29ja2V0VXJsUGFydHMKICogQHByb3BlcnR5IHtzdHJpbmd9IFthdXRoXQogKiBAcHJvcGVydHkge3N0cmluZ30gaG9zdG5hbWUKICogQHByb3BlcnR5IHtzdHJpbmd9IFtwcm90b2NvbF0KICogQHByb3BlcnR5IHtzdHJpbmd9IHBhdGhuYW1lCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcG9ydF0KICovCgovKioKICogUGFyc2UgY3VycmVudCBsb2NhdGlvbiBhbmQgV2VicGFjaydzIGBfX3Jlc291cmNlUXVlcnlgIGludG8gcGFydHMgdGhhdCBjYW4gY3JlYXRlIGEgdmFsaWQgc29ja2V0IFVSTC4KICogQHBhcmFtIHtzdHJpbmd9IFtyZXNvdXJjZVF1ZXJ5XSBUaGUgV2VicGFjayBgX19yZXNvdXJjZVF1ZXJ5YCBzdHJpbmcuCiAqIEBwYXJhbSB7aW1wb3J0KCcuL2dldFdEU01ldGFkYXRhJykuV0RTTWV0YU9ian0gW21ldGFkYXRhXSBUaGUgcGFyc2VkIFdEUyBtZXRhZGF0YSBvYmplY3QuCiAqIEByZXR1cm5zIHtTb2NrZXRVcmxQYXJ0c30gVGhlIHBhcnNlZCBVUkwgcGFydHMuCiAqIEBzZWUgaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9hcGkvbW9kdWxlLXZhcmlhYmxlcy8jX19yZXNvdXJjZXF1ZXJ5LXdlYnBhY2stc3BlY2lmaWMKICovCmZ1bmN0aW9uIGdldFNvY2tldFVybFBhcnRzKHJlc291cmNlUXVlcnksIG1ldGFkYXRhKSB7CiAgaWYgKHR5cGVvZiBtZXRhZGF0YSA9PT0gJ3VuZGVmaW5lZCcpIHsKICAgIG1ldGFkYXRhID0ge307CiAgfQoKICAvKiogQHR5cGUge1NvY2tldFVybFBhcnRzfSAqLwogIGxldCB1cmxQYXJ0cyA9IHt9OwoKICAvLyBJZiB0aGUgcmVzb3VyY2UgcXVlcnkgaXMgYXZhaWxhYmxlLAogIC8vIHBhcnNlIGl0IGFuZCBpZ25vcmUgZXZlcnl0aGluZyB3ZSByZWNlaXZlZCBmcm9tIHRoZSBzY3JpcHQgaG9zdC4KICBpZiAocmVzb3VyY2VRdWVyeSkgewogICAgY29uc3QgcGFyc2VkUXVlcnkgPSB7fTsKICAgIGNvbnN0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocmVzb3VyY2VRdWVyeS5zbGljZSgxKSk7CiAgICBzZWFyY2hQYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkgewogICAgICBwYXJzZWRRdWVyeVtrZXldID0gdmFsdWU7CiAgICB9KTsKCiAgICB1cmxQYXJ0cy5ob3N0bmFtZSA9IHBhcnNlZFF1ZXJ5LnNvY2tIb3N0OwogICAgdXJsUGFydHMucGF0aG5hbWUgPSBwYXJzZWRRdWVyeS5zb2NrUGF0aDsKICAgIHVybFBhcnRzLnBvcnQgPSBwYXJzZWRRdWVyeS5zb2NrUG9ydDsKCiAgICAvLyBNYWtlIHN1cmUgdGhlIHByb3RvY29sIGZyb20gcmVzb3VyY2UgcXVlcnkgaGFzIGEgdHJhaWxpbmcgY29sb24KICAgIGlmIChwYXJzZWRRdWVyeS5zb2NrUHJvdG9jb2wpIHsKICAgICAgdXJsUGFydHMucHJvdG9jb2wgPSBwYXJzZWRRdWVyeS5zb2NrUHJvdG9jb2wgKyAnOic7CiAgICB9CiAgfSBlbHNlIHsKICAgIGNvbnN0IHNjcmlwdFNvdXJjZSA9IGdldEN1cnJlbnRTY3JpcHRTb3VyY2UoKTsKCiAgICBsZXQgdXJsID0ge307CiAgICB0cnkgewogICAgICAvLyBUaGUgcGxhY2Vob2xkZXIgYGJhc2VVUkxgIHdpdGggYHdpbmRvdy5sb2NhdGlvbi5ocmVmYCwKICAgICAgLy8gaXMgdG8gYWxsb3cgcGFyc2luZyBvZiBwYXRoLXJlbGF0aXZlIG9yIHByb3RvY29sLXJlbGF0aXZlIFVSTHMsCiAgICAgIC8vIGFuZCB3aWxsIGhhdmUgbm8gZWZmZWN0IGlmIGBzY3JpcHRTb3VyY2VgIGlzIGEgZnVsbHkgdmFsaWQgVVJMLgogICAgICB1cmwgPSBuZXcgVVJMKHNjcmlwdFNvdXJjZSwgd2luZG93LmxvY2F0aW9uLmhyZWYpOwogICAgfSBjYXRjaCAoZSkgewogICAgICAvLyBVUkwgcGFyc2luZyBmYWlsZWQsIGRvIG5vdGhpbmcuCiAgICAgIC8vIFdlIHdpbGwgc3RpbGwgcHJvY2VlZCB0byBzZWUgaWYgd2UgY2FuIHJlY292ZXIgdXNpbmcgYHJlc291cmNlUXVlcnlgCiAgICB9CgogICAgLy8gUGFyc2UgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgaW4gY2FzZSB3ZSBuZWVkIHRoZW0KICAgIGlmICh1cmwudXNlcm5hbWUpIHsKICAgICAgLy8gU2luY2UgSFRUUCBiYXNpYyBhdXRoZW50aWNhdGlvbiBkb2VzIG5vdCBhbGxvdyBlbXB0eSB1c2VybmFtZSwKICAgICAgLy8gd2Ugb25seSBpbmNsdWRlIHBhc3N3b3JkIGlmIHRoZSB1c2VybmFtZSBpcyBub3QgZW1wdHkuCiAgICAgIC8vIFJlc3VsdDogPHVzZXJuYW1lPiBvciA8dXNlcm5hbWU+OjxwYXNzd29yZD4KICAgICAgdXJsUGFydHMuYXV0aCA9IHVybC51c2VybmFtZTsKICAgICAgaWYgKHVybC5wYXNzd29yZCkgewogICAgICAgIHVybFBhcnRzLmF1dGggKz0gJzonICsgdXJsLnBhc3N3b3JkOwogICAgICB9CiAgICB9CgogICAgLy8gYGZpbGU6Ly9gIFVSTHMgaGFzIGAnbnVsbCdgIG9yaWdpbgogICAgaWYgKHVybC5vcmlnaW4gIT09ICdudWxsJykgewogICAgICB1cmxQYXJ0cy5ob3N0bmFtZSA9IHVybC5ob3N0bmFtZTsKICAgIH0KCiAgICB1cmxQYXJ0cy5wcm90b2NvbCA9IHVybC5wcm90b2NvbDsKICAgIHVybFBhcnRzLnBvcnQgPSB1cmwucG9ydDsKICB9CgogIGlmICghdXJsUGFydHMucGF0aG5hbWUpIHsKICAgIGlmIChtZXRhZGF0YS52ZXJzaW9uID09PSA0KSB7CiAgICAgIC8vIFRoaXMgaXMgaGFyZC1jb2RlZCBpbiBXRFMgdjQKICAgICAgdXJsUGFydHMucGF0aG5hbWUgPSAnL3dzJzsKICAgIH0gZWxzZSB7CiAgICAgIC8vIFRoaXMgaXMgaGFyZC1jb2RlZCBpbiBXRFMgdjMKICAgICAgdXJsUGFydHMucGF0aG5hbWUgPSAnL3NvY2tqcy1ub2RlJzsKICAgIH0KICB9CgogIC8vIENoZWNrIGZvciBJUHY0IGFuZCBJUHY2IGhvc3QgYWRkcmVzc2VzIHRoYXQgY29ycmVzcG9uZCB0byBhbnkvZW1wdHkuCiAgLy8gVGhpcyBpcyBpbXBvcnRhbnQgYmVjYXVzZSBgaG9zdG5hbWVgIGNhbiBiZSBlbXB0eSBmb3Igc29tZSBob3N0cywKICAvLyBzdWNoIGFzICdhYm91dDpibGFuaycgb3IgJ2ZpbGU6Ly8nIFVSTHMuCiAgY29uc3QgaXNFbXB0eUhvc3RuYW1lID0KICAgIHVybFBhcnRzLmhvc3RuYW1lID09PSAnMC4wLjAuMCcgfHwgdXJsUGFydHMuaG9zdG5hbWUgPT09ICdbOjpdJyB8fCAhdXJsUGFydHMuaG9zdG5hbWU7CiAgLy8gV2Ugb25seSByZS1hc3NpZ24gdGhlIGhvc3RuYW1lIGlmIGl0IGlzIGVtcHR5LAogIC8vIGFuZCBpZiB3ZSBhcmUgdXNpbmcgSFRUUC9IVFRQUyBwcm90b2NvbHMuCiAgaWYgKAogICAgaXNFbXB0eUhvc3RuYW1lICYmCiAgICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgJiYKICAgIHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbC5pbmRleE9mKCdodHRwJykgPT09IDAKICApIHsKICAgIHVybFBhcnRzLmhvc3RuYW1lID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lOwogIH0KCiAgLy8gV2Ugb25seSByZS1hc3NpZ24gYHByb3RvY29sYCB3aGVuIGBwcm90b2NvbGAgaXMgdW5hdmFpbGFibGUsCiAgLy8gb3IgaWYgYGhvc3RuYW1lYCBpcyBhdmFpbGFibGUgYW5kIGlzIGVtcHR5LAogIC8vIHNpbmNlIG90aGVyd2lzZSB3ZSByaXNrIGNyZWF0aW5nIGFuIGludmFsaWQgVVJMLgogIC8vIFdlIGFsc28gZG8gdGhpcyB3aGVuICdodHRwcycgaXMgdXNlZCBhcyBpdCBtYW5kYXRlcyB0aGUgdXNlIG9mIHNlY3VyZSBzb2NrZXRzLgogIGlmICgKICAgICF1cmxQYXJ0cy5wcm90b2NvbCB8fAogICAgKHVybFBhcnRzLmhvc3RuYW1lICYmIChpc0VtcHR5SG9zdG5hbWUgfHwgd2luZG93LmxvY2F0aW9uLnByb3RvY29sID09PSAnaHR0cHM6JykpCiAgKSB7CiAgICB1cmxQYXJ0cy5wcm90b2NvbCA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbDsKICB9CgogIC8vIFdlIG9ubHkgcmUtYXNzaWduIHBvcnQgd2hlbiBpdCBpcyBub3QgYXZhaWxhYmxlCiAgaWYgKCF1cmxQYXJ0cy5wb3J0KSB7CiAgICB1cmxQYXJ0cy5wb3J0ID0gd2luZG93LmxvY2F0aW9uLnBvcnQ7CiAgfQoKICBpZiAoIXVybFBhcnRzLmhvc3RuYW1lIHx8ICF1cmxQYXJ0cy5wYXRobmFtZSkgewogICAgdGhyb3cgbmV3IEVycm9yKAogICAgICBbCiAgICAgICAgJ1tSZWFjdCBSZWZyZXNoXSBGYWlsZWQgdG8gZ2V0IGFuIFVSTCBmb3IgdGhlIHNvY2tldCBjb25uZWN0aW9uLicsCiAgICAgICAgIlRoaXMgdXN1YWxseSBtZWFucyB0aGF0IHRoZSBjdXJyZW50IGV4ZWN1dGVkIHNjcmlwdCBkb2Vzbid0IGhhdmUgYSBgc3JjYCBhdHRyaWJ1dGUgc2V0LiIsCiAgICAgICAgJ1lvdSBzaG91bGQgZWl0aGVyIHNwZWNpZnkgdGhlIHNvY2tldCBwYXRoIHBhcmFtZXRlcnMgdW5kZXIgdGhlIGBkZXZTZXJ2ZXJgIGtleSBpbiB5b3VyIFdlYnBhY2sgY29uZmlnLCBvciB1c2UgdGhlIGBvdmVybGF5YCBvcHRpb24uJywKICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3BtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL2Jsb2IvbWFpbi9kb2NzL0FQSS5tZCNvdmVybGF5JywKICAgICAgXS5qb2luKCdcbicpCiAgICApOwogIH0KCiAgcmV0dXJuIHsKICAgIGF1dGg6IHVybFBhcnRzLmF1dGgsCiAgICBob3N0bmFtZTogdXJsUGFydHMuaG9zdG5hbWUsCiAgICBwYXRobmFtZTogdXJsUGFydHMucGF0aG5hbWUsCiAgICBwcm90b2NvbDogdXJsUGFydHMucHJvdG9jb2wsCiAgICBwb3J0OiB1cmxQYXJ0cy5wb3J0IHx8IHVuZGVmaW5lZCwKICB9Owp9Cgptb2R1bGUuZXhwb3J0cyA9IGdldFNvY2tldFVybFBhcnRzOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vc29ja2V0cy91dGlscy9nZXRVcmxGcm9tUGFydHMuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vc29ja2V0cy91dGlscy9nZXRVcmxGcm9tUGFydHMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7CgovKioKICogQ3JlYXRlIGEgdmFsaWQgVVJMIGZyb20gcGFyc2VkIFVSTCBwYXJ0cy4KICogQHBhcmFtIHtpbXBvcnQoJy4vZ2V0U29ja2V0VXJsUGFydHMnKS5Tb2NrZXRVcmxQYXJ0c30gdXJsUGFydHMgVGhlIHBhcnNlZCBVUkwgcGFydHMuCiAqIEBwYXJhbSB7aW1wb3J0KCcuL2dldFdEU01ldGFkYXRhJykuV0RTTWV0YU9ian0gW21ldGFkYXRhXSBUaGUgcGFyc2VkIFdEUyBtZXRhZGF0YSBvYmplY3QuCiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBnZW5lcmF0ZWQgVVJMLgogKi8KZnVuY3Rpb24gdXJsRnJvbVBhcnRzKHVybFBhcnRzLCBtZXRhZGF0YSkgewogIGlmICh0eXBlb2YgbWV0YWRhdGEgPT09ICd1bmRlZmluZWQnKSB7CiAgICBtZXRhZGF0YSA9IHt9OwogIH0KCiAgbGV0IGZ1bGxQcm90b2NvbCA9ICdodHRwOic7CiAgaWYgKHVybFBhcnRzLnByb3RvY29sKSB7CiAgICBmdWxsUHJvdG9jb2wgPSB1cmxQYXJ0cy5wcm90b2NvbDsKICB9CiAgaWYgKG1ldGFkYXRhLmVuZm9yY2VXcykgewogICAgZnVsbFByb3RvY29sID0gZnVsbFByb3RvY29sLnJlcGxhY2UoL14oPzpodHRwfC4rLWV4dGVuc2lvbnxmaWxlKS9pLCAnd3MnKTsKICB9CgogIGZ1bGxQcm90b2NvbCA9IGZ1bGxQcm90b2NvbCArICcvLyc7CgogIGxldCBmdWxsSG9zdCA9IHVybFBhcnRzLmhvc3RuYW1lOwogIGlmICh1cmxQYXJ0cy5hdXRoKSB7CiAgICBjb25zdCBmdWxsQXV0aCA9IHVybFBhcnRzLmF1dGguc3BsaXQoJzonKS5tYXAoZW5jb2RlVVJJQ29tcG9uZW50KS5qb2luKCc6JykgKyAnQCc7CiAgICBmdWxsSG9zdCA9IGZ1bGxBdXRoICsgZnVsbEhvc3Q7CiAgfQogIGlmICh1cmxQYXJ0cy5wb3J0KSB7CiAgICBmdWxsSG9zdCA9IGZ1bGxIb3N0ICsgJzonICsgdXJsUGFydHMucG9ydDsKICB9CgogIGNvbnN0IHVybCA9IG5ldyBVUkwodXJsUGFydHMucGF0aG5hbWUsIGZ1bGxQcm90b2NvbCArIGZ1bGxIb3N0KTsKICByZXR1cm4gdXJsLmhyZWY7Cn0KCm1vZHVsZS5leHBvcnRzID0gdXJsRnJvbVBhcnRzOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vc29ja2V0cy91dGlscy9nZXRXRFNNZXRhZGF0YS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tdmlydHVhbC1lNTE1YWQ2N2EwLzAvY2FjaGUvQHBtbW13aC1yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luLW5wbS0wLjUuMTAtMDkyOGQxNzk4YS1jNDViZWRlZDljLnppcC9ub2RlX21vZHVsZXMvQHBtbW13aC9yZWFjdC1yZWZyZXNoLXdlYnBhY2stcGx1Z2luL3NvY2tldHMvdXRpbHMvZ2V0V0RTTWV0YWRhdGEuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUpID0+IHsKCi8qKgogKiBAdHlwZWRlZiB7T2JqZWN0fSBXRFNNZXRhT2JqCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gZW5mb3JjZVdzCiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB2ZXJzaW9uCiAqLwoKLyoqCiAqIERlcml2ZXMgV0RTIG1ldGFkYXRhIGZyb20gYSBjb21wYXRpYmxlIHNvY2tldCBjbGllbnQuCiAqIEBwYXJhbSB7RnVuY3Rpb259IFNvY2tldENsaWVudCBBIFdEUyBzb2NrZXQgY2xpZW50IChTb2NrSlMvV2ViU29ja2V0KS4KICogQHJldHVybnMge1dEU01ldGFPYmp9IFRoZSBwYXJzZWQgV0RTIG1ldGFkYXRhIG9iamVjdC4KICovCmZ1bmN0aW9uIGdldFdEU01ldGFkYXRhKFNvY2tldENsaWVudCkgewogIGxldCBlbmZvcmNlV3MgPSBmYWxzZTsKICBpZiAoCiAgICB0eXBlb2YgU29ja2V0Q2xpZW50Lm5hbWUgIT09ICd1bmRlZmluZWQnICYmCiAgICBTb2NrZXRDbGllbnQubmFtZSAhPT0gbnVsbCAmJgogICAgU29ja2V0Q2xpZW50Lm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnd2Vic29ja2V0JykKICApIHsKICAgIGVuZm9yY2VXcyA9IHRydWU7CiAgfQoKICBsZXQgdmVyc2lvbjsKICAvLyBXRFMgdmVyc2lvbnMgPD0zLjUuMAogIGlmICghKCdvbk1lc3NhZ2UnIGluIFNvY2tldENsaWVudC5wcm90b3R5cGUpKSB7CiAgICB2ZXJzaW9uID0gMzsKICB9IGVsc2UgewogICAgLy8gV0RTIHZlcnNpb25zID49My41LjAgPDQKICAgIGlmICgKICAgICAgJ2dldENsaWVudFBhdGgnIGluIFNvY2tldENsaWVudCB8fAogICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU29ja2V0Q2xpZW50KS5uYW1lID09PSAnQmFzZUNsaWVudCcKICAgICkgewogICAgICB2ZXJzaW9uID0gMzsKICAgIH0gZWxzZSB7CiAgICAgIHZlcnNpb24gPSA0OwogICAgfQogIH0KCiAgcmV0dXJuIHsKICAgIGVuZm9yY2VXczogZW5mb3JjZVdzLAogICAgdmVyc2lvbjogdmVyc2lvbiwKICB9Owp9Cgptb2R1bGUuZXhwb3J0cyA9IGdldFdEU01ldGFkYXRhOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3NpbmdsZS1zcGEtcmVhY3QtdmlydHVhbC04NDgwYTJhZTM3LzAvY2FjaGUvc2luZ2xlLXNwYS1yZWFjdC1ucG0tNC42LjEtOGVhNGRiMjM1MC0xMjM4M2QzYjFkLnppcC9ub2RlX21vZHVsZXMvc2luZ2xlLXNwYS1yZWFjdC9saWIvZXNtL3NpbmdsZS1zcGEtcmVhY3QuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3NpbmdsZS1zcGEtcmVhY3QtdmlydHVhbC04NDgwYTJhZTM3LzAvY2FjaGUvc2luZ2xlLXNwYS1yZWFjdC1ucG0tNC42LjEtOGVhNGRiMjM1MC0xMjM4M2QzYjFkLnppcC9ub2RlX21vZHVsZXMvc2luZ2xlLXNwYS1yZWFjdC9saWIvZXNtL3NpbmdsZS1zcGEtcmVhY3QuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19fX3dlYnBhY2tfbW9kdWxlX18sIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewovKiBoYXJtb255IGV4cG9ydCAqLyAgICJTaW5nbGVTcGFDb250ZXh0IjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gaSksCi8qIGhhcm1vbnkgZXhwb3J0ICovICAgImRlZmF1bHQiOiAoKSA9PiAoLyogYmluZGluZyAqLyB1KQovKiBoYXJtb255IGV4cG9ydCAqLyB9KTsKZnVuY3Rpb24gZShlLHQpe3ZhciBuPU9iamVjdC5rZXlzKGUpO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBvPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7dCYmKG89by5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsdCkuZW51bWVyYWJsZX0pKSksbi5wdXNoLmFwcGx5KG4sbyl9cmV0dXJuIG59ZnVuY3Rpb24gdCh0KXtmb3IodmFyIG49MTtuPGFyZ3VtZW50cy5sZW5ndGg7bisrKXt2YXIgcj1udWxsIT1hcmd1bWVudHNbbl0/YXJndW1lbnRzW25dOnt9O24lMj9lKE9iamVjdChyKSwhMCkuZm9yRWFjaCgoZnVuY3Rpb24oZSl7byh0LGUscltlXSl9KSk6T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnM/T2JqZWN0LmRlZmluZVByb3BlcnRpZXModCxPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhyKSk6ZShPYmplY3QocikpLmZvckVhY2goKGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLGUpKX0pKX1yZXR1cm4gdH1mdW5jdGlvbiBuKGUpe3JldHVybihuPSJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJiJzeW1ib2wiPT10eXBlb2YgU3ltYm9sLml0ZXJhdG9yP2Z1bmN0aW9uKGUpe3JldHVybiB0eXBlb2YgZX06ZnVuY3Rpb24oZSl7cmV0dXJuIGUmJiJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJmUuY29uc3RydWN0b3I9PT1TeW1ib2wmJmUhPT1TeW1ib2wucHJvdG90eXBlPyJzeW1ib2wiOnR5cGVvZiBlfSkoZSl9ZnVuY3Rpb24gbyhlLHQsbil7cmV0dXJuIHQgaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpuLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1uLGV9ZnVuY3Rpb24gcihlKXtyZXR1cm4ocj0iZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiYic3ltYm9sIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj9mdW5jdGlvbihlKXtyZXR1cm4gdHlwZW9mIGV9OmZ1bmN0aW9uKGUpe3JldHVybiBlJiYiZnVuY3Rpb24iPT10eXBlb2YgU3ltYm9sJiZlLmNvbnN0cnVjdG9yPT09U3ltYm9sJiZlIT09U3ltYm9sLnByb3RvdHlwZT8ic3ltYm9sIjp0eXBlb2YgZX0pKGUpfWZ1bmN0aW9uIGEoZSx0KXt2YXIgbjtpZigiZnVuY3Rpb24iIT10eXBlb2Yobj10LmRvbUVsZW1lbnQ/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kb21FbGVtZW50fTp0LmRvbUVsZW1lbnRHZXR0ZXI/dC5kb21FbGVtZW50R2V0dGVyOmUuZG9tRWxlbWVudEdldHRlcj9lLmRvbUVsZW1lbnRHZXR0ZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5hcHBOYW1lfHxlLm5hbWU7aWYoIXQpdGhyb3cgRXJyb3IoInNpbmdsZS1zcGEncyBkb20tZWxlbWVudC1nZXR0ZXItaGVscGVycyB3YXMgbm90IGdpdmVuIGFuIGFwcGxpY2F0aW9uIG5hbWUgYXMgYSBwcm9wLCBzbyBpdCBjYW4ndCBtYWtlIGEgdW5pcXVlIGRvbSBlbGVtZW50IGNvbnRhaW5lciBmb3IgdGhlIHJlYWN0IGFwcGxpY2F0aW9uIik7dmFyIG49InNpbmdsZS1zcGEtYXBwbGljYXRpb246Ii5jb25jYXQodCk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobik7cmV0dXJuIGV8fCgoZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSkuaWQ9bixkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpKSxlfX0odCkpKXRocm93IEVycm9yKCJzaW5nbGUtc3BhJ3MgZG9tLWVsZW1lbnQtZ2V0dGVyLWhlbHBlcnMgd2FzIGdpdmVuIGFuIGludmFsaWQgZG9tRWxlbWVudEdldHRlciBmb3IgYXBwbGljYXRpb24gb3IgcGFyY2VsICciLmNvbmNhdCh0Lm5hbWUsIicuIEV4cGVjdGVkIGEgZnVuY3Rpb24sIHJlY2VpdmVkICIpLmNvbmNhdChyKG4pKSk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9bih0KTtpZighKGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpdGhyb3cgRXJyb3IoInNpbmdsZS1zcGEncyBkb20tZWxlbWVudC1nZXR0ZXItaGVscGVyczogZG9tRWxlbWVudEdldHRlciByZXR1cm5lZCBhbiBpbnZhbGlkIGRvbSBlbGVtZW50IGZvciBhcHBsaWNhdGlvbiBvciBwYXJjZWwgJyIuY29uY2F0KHQubmFtZSwiJy4gRXhwZWN0ZWQgSFRNTEVsZW1lbnQsIHJlY2VpdmVkICIpLmNvbmNhdChyKGUpKSk7cmV0dXJuIGV9fXZhciBpPW51bGw7dHJ5e2k9cmVxdWlyZSgicmVhY3QiKS5jcmVhdGVDb250ZXh0KCl9Y2F0Y2goZSl7fXZhciBjPXtSZWFjdDpudWxsLFJlYWN0RE9NOm51bGwscm9vdENvbXBvbmVudDpudWxsLGxvYWRSb290Q29tcG9uZW50Om51bGwscmVuZGVyVHlwZTpudWxsLGVycm9yQm91bmRhcnk6bnVsbCxlcnJvckJvdW5kYXJ5Q2xhc3M6bnVsbCxkb21FbGVtZW50R2V0dGVyOm51bGwscGFyY2VsQ2FuVXBkYXRlOiEwLHN1cHByZXNzQ29tcG9uZW50RGlkQ2F0Y2hXYXJuaW5nOiExLGRvbUVsZW1lbnRzOnt9LHJlbmRlclJlc3VsdHM6e30sdXBkYXRlUmVzb2x2ZXM6e319O2Z1bmN0aW9uIHUoZSl7aWYoIm9iamVjdCIhPT1uKGUpKXRocm93IG5ldyBFcnJvcigic2luZ2xlLXNwYS1yZWFjdCByZXF1aXJlcyBhIGNvbmZpZ3VyYXRpb24gb2JqZWN0Iik7dmFyIG89dCh0KHt9LGMpLGUpO2lmKCFvLlJlYWN0KXRocm93IG5ldyBFcnJvcigic2luZ2xlLXNwYS1yZWFjdCBtdXN0IGJlIHBhc3NlZCBvcHRzLlJlYWN0Iik7aWYoIW8uUmVhY3RET00pdGhyb3cgbmV3IEVycm9yKCJzaW5nbGUtc3BhLXJlYWN0IG11c3QgYmUgcGFzc2VkIG9wdHMuUmVhY3RET00iKTtpZighby5yb290Q29tcG9uZW50JiYhby5sb2FkUm9vdENvbXBvbmVudCl0aHJvdyBuZXcgRXJyb3IoInNpbmdsZS1zcGEtcmVhY3QgbXVzdCBiZSBwYXNzZWQgb3B0cy5yb290Q29tcG9uZW50IG9yIG9wdHMubG9hZFJvb3RDb21wb25lbnQiKTtpZihvLmVycm9yQm91bmRhcnkmJiJmdW5jdGlvbiIhPXR5cGVvZiBvLmVycm9yQm91bmRhcnkpdGhyb3cgRXJyb3IoIlRoZSBlcnJvckJvdW5kYXJ5IG9wdCBmb3Igc2luZ2xlLXNwYS1yZWFjdCBtdXN0IGVpdGhlciBiZSBvbWl0dGVkIG9yIGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIFJlYWN0IGVsZW1lbnRzIik7IWkmJm8uUmVhY3QuY3JlYXRlQ29udGV4dCYmKGk9by5SZWFjdC5jcmVhdGVDb250ZXh0KCkpLG8uU2luZ2xlU3BhUm9vdD1mdW5jdGlvbihlKXtmdW5jdGlvbiB0KGUpe3QuZGlzcGxheU5hbWU9IlNpbmdsZVNwYVJvb3QoIi5jb25jYXQoZS5uYW1lLCIpIil9cmV0dXJuIHQucHJvdG90eXBlPU9iamVjdC5jcmVhdGUoZS5SZWFjdC5Db21wb25lbnQucHJvdG90eXBlKSx0LnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudD1mdW5jdGlvbigpe3NldFRpbWVvdXQodGhpcy5wcm9wcy5tb3VudEZpbmlzaGVkKX0sdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQ9ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KHRoaXMucHJvcHMudW5tb3VudEZpbmlzaGVkKX0sdC5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7cmV0dXJuIHNldFRpbWVvdXQodGhpcy5wcm9wcy51cGRhdGVGaW5pc2hlZCksdGhpcy5wcm9wcy5jaGlsZHJlbn0sdH0obyk7dmFyIHI9e2Jvb3RzdHJhcDpwLmJpbmQobnVsbCxvKSxtb3VudDpzLmJpbmQobnVsbCxvKSx1bm1vdW50OmwuYmluZChudWxsLG8pfTtyZXR1cm4gby5wYXJjZWxDYW5VcGRhdGUmJihyLnVwZGF0ZT1tLmJpbmQobnVsbCxvKSkscn1mdW5jdGlvbiBwKGUsdCl7cmV0dXJuIGUucm9vdENvbXBvbmVudD9Qcm9taXNlLnJlc29sdmUoKTplLmxvYWRSb290Q29tcG9uZW50KHQpLnRoZW4oKGZ1bmN0aW9uKHQpe2Uucm9vdENvbXBvbmVudD10fSkpfWZ1bmN0aW9uIHMoZSx0KXtyZXR1cm4gbmV3IFByb21pc2UoKGZ1bmN0aW9uKG4sbyl7ZS5zdXBwcmVzc0NvbXBvbmVudERpZENhdGNoV2FybmluZ3x8IWZ1bmN0aW9uKGUpe2lmKCEoZSYmInN0cmluZyI9PXR5cGVvZiBlLnZlcnNpb24mJmUudmVyc2lvbi5pbmRleE9mKCIuIik+PTApKXJldHVybiExO3ZhciB0PWUudmVyc2lvbi5zbGljZSgwLGUudmVyc2lvbi5pbmRleE9mKCIuIikpO3RyeXtyZXR1cm4gTnVtYmVyKHQpPj0xNn1jYXRjaChlKXtyZXR1cm4hMX19KGUuUmVhY3QpfHxlLmVycm9yQm91bmRhcnl8fChlLnJvb3RDb21wb25lbnQucHJvdG90eXBlP2Uucm9vdENvbXBvbmVudC5wcm90b3R5cGUuY29tcG9uZW50RGlkQ2F0Y2h8fGNvbnNvbGUud2Fybigic2luZ2xlLXNwYS1yZWFjdDogIi5jb25jYXQodC5uYW1lfHx0LmFwcE5hbWV8fHQuY2hpbGRBcHBOYW1lLCIncyByb290Q29tcG9uZW50IHNob3VsZCBpbXBsZW1lbnQgY29tcG9uZW50RGlkQ2F0Y2ggdG8gYXZvaWQgYWNjaWRlbnRhbGx5IHVubW91bnRpbmcgdGhlIGVudGlyZSBzaW5nbGUtc3BhIGFwcGxpY2F0aW9uLiIpKTpjb25zb2xlLndhcm4oInNpbmdsZS1zcGEtcmVhY3Q6ICIuY29uY2F0KHQubmFtZXx8dC5hcHBOYW1lfHx0LmNoaWxkQXBwTmFtZSwiJ3Mgcm9vdENvbXBvbmVudCBkb2VzIG5vdCBpbXBsZW1lbnQgYW4gZXJyb3IgYm91bmRhcnkuICBJZiB1c2luZyBhIGZ1bmN0aW9uYWwgY29tcG9uZW50LCBjb25zaWRlciBwcm92aWRpbmcgYW4gb3B0cy5lcnJvckJvdW5kYXJ5IHRvIHNpbmdsZVNwYVJlYWN0KG9wdHMpLiIpKSk7dmFyIHI9ZChlLHQsKGZ1bmN0aW9uKCl7bih0aGlzKX0pKSxpPWEoZSx0KSgpLGM9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5vcHRzLG49ZS5lbGVtZW50VG9SZW5kZXIsbz1lLmRvbUVsZW1lbnQscj0iZnVuY3Rpb24iPT10eXBlb2YgdC5yZW5kZXJUeXBlP3QucmVuZGVyVHlwZSgpOnQucmVuZGVyVHlwZTtpZihbImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9jcmVhdGVSb290IiwiY3JlYXRlQmxvY2tpbmdSb290IiwidW5zdGFibGVfY3JlYXRlQmxvY2tpbmdSb290Il0uaW5kZXhPZihyKT49MCl7dmFyIGE9dC5SZWFjdERPTVtyXShvKTtyZXR1cm4gYS5yZW5kZXIobiksYX0iaHlkcmF0ZSI9PT1yP3QuUmVhY3RET00uaHlkcmF0ZShuLG8pOnQuUmVhY3RET00ucmVuZGVyKG4sbyk7cmV0dXJuIG51bGx9KHtlbGVtZW50VG9SZW5kZXI6cixkb21FbGVtZW50Omksb3B0czplfSk7ZS5kb21FbGVtZW50c1t0Lm5hbWVdPWksZS5yZW5kZXJSZXN1bHRzW3QubmFtZV09Y30pKX1mdW5jdGlvbiBsKGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuKXtlLnVubW91bnRGaW5pc2hlZD1uO3ZhciBvPWUucmVuZGVyUmVzdWx0c1t0Lm5hbWVdO28mJm8udW5tb3VudD9vLnVubW91bnQoKTplLlJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoZS5kb21FbGVtZW50c1t0Lm5hbWVdKSxkZWxldGUgZS5kb21FbGVtZW50c1t0Lm5hbWVdLGRlbGV0ZSBlLnJlbmRlclJlc3VsdHNbdC5uYW1lXX0pKX1mdW5jdGlvbiBtKGUsdCl7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbihuKXtlLnVwZGF0ZVJlc29sdmVzW3QubmFtZV18fChlLnVwZGF0ZVJlc29sdmVzW3QubmFtZV09W10pLGUudXBkYXRlUmVzb2x2ZXNbdC5uYW1lXS5wdXNoKG4pO3ZhciBvPWQoZSx0LG51bGwpLHI9ZS5yZW5kZXJSZXN1bHRzW3QubmFtZV07aWYociYmci5yZW5kZXIpci5yZW5kZXIobyk7ZWxzZXt2YXIgaT1hKGUsdCkoKTtlLlJlYWN0RE9NLnJlbmRlcihvLGkpfX0pKX1mdW5jdGlvbiBkKGUsbixvKXt2YXIgcj1lLlJlYWN0LmNyZWF0ZUVsZW1lbnQoZS5yb290Q29tcG9uZW50LG4pLGE9aT9lLlJlYWN0LmNyZWF0ZUVsZW1lbnQoaS5Qcm92aWRlcix7dmFsdWU6bn0scik6cjtyZXR1cm4oZS5lcnJvckJvdW5kYXJ5fHxuLmVycm9yQm91bmRhcnl8fGUuZXJyb3JCb3VuZGFyeUNsYXNzfHxuLmVycm9yQm91bmRhcnlDbGFzcykmJihlLmVycm9yQm91bmRhcnlDbGFzcz1lLmVycm9yQm91bmRhcnlDbGFzc3x8bi5lcnJvckJvdW5kYXJ5Q2xhc3N8fGZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbih0KXtlLlJlYWN0LkNvbXBvbmVudC5hcHBseSh0aGlzLGFyZ3VtZW50cyksdGhpcy5zdGF0ZT17Y2F1Z2h0RXJyb3I6bnVsbCxjYXVnaHRFcnJvckluZm86bnVsbH0sbi5kaXNwbGF5TmFtZT0iU2luZ2xlU3BhUmVhY3RFcnJvckJvdW5kYXJ5KCIuY29uY2F0KHQubmFtZSwiKSIpfXJldHVybiBuLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGUuUmVhY3QuQ29tcG9uZW50LnByb3RvdHlwZSksbi5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhdGUuY2F1Z2h0RXJyb3I/KGUuZXJyb3JCb3VuZGFyeXx8dC5lcnJvckJvdW5kYXJ5KSh0aGlzLnN0YXRlLmNhdWdodEVycm9yLHRoaXMuc3RhdGUuY2F1Z2h0RXJyb3JJbmZvLHRoaXMucHJvcHMpOnRoaXMucHJvcHMuY2hpbGRyZW59LG4ucHJvdG90eXBlLmNvbXBvbmVudERpZENhdGNoPWZ1bmN0aW9uKGUsdCl7dGhpcy5zZXRTdGF0ZSh7Y2F1Z2h0RXJyb3I6ZSxjYXVnaHRFcnJvckluZm86dH0pfSxufShlLG4pLGE9ZS5SZWFjdC5jcmVhdGVFbGVtZW50KGUuZXJyb3JCb3VuZGFyeUNsYXNzLG4sYSkpLGE9ZS5SZWFjdC5jcmVhdGVFbGVtZW50KGUuU2luZ2xlU3BhUm9vdCx0KHQoe30sbikse30se21vdW50RmluaXNoZWQ6byx1cGRhdGVGaW5pc2hlZDpmdW5jdGlvbigpe2UudXBkYXRlUmVzb2x2ZXNbbi5uYW1lXSYmKGUudXBkYXRlUmVzb2x2ZXNbbi5uYW1lXS5mb3JFYWNoKChmdW5jdGlvbihlKXtyZXR1cm4gZSgpfSkpLGRlbGV0ZSBlLnVwZGF0ZVJlc29sdmVzW24ubmFtZV0pfSx1bm1vdW50RmluaXNoZWQ6ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KGUudW5tb3VudEZpbmlzaGVkKX19KSxhKX0KLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2luZ2xlLXNwYS1yZWFjdC5qcy5tYXAKCgovKioqLyB9KQoKLyoqKioqKi8gCX0pOwovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9OwovKioqKioqLyAJCi8qKioqKiovIAkvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyAJZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkgewovKioqKioqLyAJCS8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZQovKioqKioqLyAJCXZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdOwovKioqKioqLyAJCWlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkgewovKioqKioqLyAJCQlpZiAoY2FjaGVkTW9kdWxlLmVycm9yICE9PSB1bmRlZmluZWQpIHRocm93IGNhY2hlZE1vZHVsZS5lcnJvcjsKLyoqKioqKi8gCQkJcmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQovKioqKioqLyAJCXZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0gewovKioqKioqLyAJCQkvLyBubyBtb2R1bGUuaWQgbmVlZGVkCi8qKioqKiovIAkJCS8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkCi8qKioqKiovIAkJCWV4cG9ydHM6IHt9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCQovKioqKioqLyAJCS8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvbgovKioqKioqLyAJCXRyeSB7Ci8qKioqKiovIAkJCXZhciBleGVjT3B0aW9ucyA9IHsgaWQ6IG1vZHVsZUlkLCBtb2R1bGU6IG1vZHVsZSwgZmFjdG9yeTogX193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0sIHJlcXVpcmU6IF9fd2VicGFja19yZXF1aXJlX18gfTsKLyoqKioqKi8gCQkJX193ZWJwYWNrX3JlcXVpcmVfXy5pLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlcikgeyBoYW5kbGVyKGV4ZWNPcHRpb25zKTsgfSk7Ci8qKioqKiovIAkJCW1vZHVsZSA9IGV4ZWNPcHRpb25zLm1vZHVsZTsKLyoqKioqKi8gCQkJZXhlY09wdGlvbnMuZmFjdG9yeS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBleGVjT3B0aW9ucy5yZXF1aXJlKTsKLyoqKioqKi8gCQl9IGNhdGNoKGUpIHsKLyoqKioqKi8gCQkJbW9kdWxlLmVycm9yID0gZTsKLyoqKioqKi8gCQkJdGhyb3cgZTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkKLyoqKioqKi8gCQkvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZQovKioqKioqLyAJCXJldHVybiBtb2R1bGUuZXhwb3J0czsKLyoqKioqKi8gCX0KLyoqKioqKi8gCQovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXykKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187Ci8qKioqKiovIAkKLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX187Ci8qKioqKiovIAkKLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlIGV4ZWN1dGlvbiBpbnRlcmNlcHRvcgovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5pID0gW107Ci8qKioqKiovIAkKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9fX3N5c3RlbV9jb250ZXh0X18gKi8KLyoqKioqKi8gCSgoKSA9PiB7Ci8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy55ID0gX19zeXN0ZW1fY29udGV4dF9fOwovKioqKioqLyAJfSkoKTsKLyoqKioqKi8gCQovKioqKioqLyAJLyogd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQgKi8KLyoqKioqKi8gCSgoKSA9PiB7Ci8qKioqKiovIAkJLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXMKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7Ci8qKioqKiovIAkJCXZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgPwovKioqKioqLyAJCQkJKCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6Ci8qKioqKiovIAkJCQkoKSA9PiAobW9kdWxlKTsKLyoqKioqKi8gCQkJX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7Ci8qKioqKiovIAkJCXJldHVybiBnZXR0ZXI7Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCX0pKCk7Ci8qKioqKiovIAkKLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyAqLwovKioqKioqLyAJKCgpID0+IHsKLyoqKioqKi8gCQkvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzCi8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHsKLyoqKioqKi8gCQkJZm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgewovKioqKioqLyAJCQkJaWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7Ci8qKioqKiovIAkJCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTsKLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfQovKioqKioqLyAJCX07Ci8qKioqKiovIAl9KSgpOwovKioqKioqLyAJCi8qKioqKiovIAkvKiB3ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgdXBkYXRlIGNodW5rIGZpbGVuYW1lICovCi8qKioqKiovIAkoKCkgPT4gewovKioqKioqLyAJCS8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3MKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHsKLyoqKioqKi8gCQkJLy8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlCi8qKioqKiovIAkJCXJldHVybiAiIiArIGNodW5rSWQgKyAiLiIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArICIuaG90LXVwZGF0ZS5qcyI7Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCX0pKCk7Ci8qKioqKiovIAkKLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9nZXQgdXBkYXRlIG1hbmlmZXN0IGZpbGVuYW1lICovCi8qKioqKiovIAkoKCkgPT4gewovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uaG1yRiA9ICgpID0+ICgibWFpbi4iICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyAiLmhvdC11cGRhdGUuanNvbiIpOwovKioqKioqLyAJfSkoKTsKLyoqKioqKi8gCQovKioqKioqLyAJLyogd2VicGFjay9ydW50aW1lL2dldEZ1bGxIYXNoICovCi8qKioqKiovIAkoKCkgPT4gewovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uaCA9ICgpID0+ICgiZmJkZDBmNGI3Njc1MjA4MDUzYmUiKQovKioqKioqLyAJfSkoKTsKLyoqKioqKi8gCQovKioqKioqLyAJLyogd2VicGFjay9ydW50aW1lL2dsb2JhbCAqLwovKioqKioqLyAJKCgpID0+IHsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7Ci8qKioqKiovIAkJCWlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzOwovKioqKioqLyAJCQl0cnkgewovKioqKioqLyAJCQkJcmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7Ci8qKioqKiovIAkJCX0gY2F0Y2ggKGUpIHsKLyoqKioqKi8gCQkJCWlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdzsKLyoqKioqKi8gCQkJfQovKioqKioqLyAJCX0pKCk7Ci8qKioqKiovIAl9KSgpOwovKioqKioqLyAJCi8qKioqKiovIAkvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovCi8qKioqKiovIAkoKCkgPT4gewovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkKLyoqKioqKi8gCX0pKCk7Ci8qKioqKiovIAkKLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCAqLwovKioqKioqLyAJKCgpID0+IHsKLyoqKioqKi8gCQl2YXIgaW5Qcm9ncmVzcyA9IHt9OwovKioqKioqLyAJCXZhciBkYXRhV2VicGFja1ByZWZpeCA9ICJhcHAxOiI7Ci8qKioqKiovIAkJLy8gbG9hZFNjcmlwdCBmdW5jdGlvbiB0byBsb2FkIGEgc2NyaXB0IHZpYSBzY3JpcHQgdGFnCi8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7Ci8qKioqKiovIAkJCWlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9Ci8qKioqKiovIAkJCXZhciBzY3JpcHQsIG5lZWRBdHRhY2g7Ci8qKioqKiovIAkJCWlmKGtleSAhPT0gdW5kZWZpbmVkKSB7Ci8qKioqKiovIAkJCQl2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJzY3JpcHQiKTsKLyoqKioqKi8gCQkJCWZvcih2YXIgaSA9IDA7IGkgPCBzY3JpcHRzLmxlbmd0aDsgaSsrKSB7Ci8qKioqKiovIAkJCQkJdmFyIHMgPSBzY3JpcHRzW2ldOwovKioqKioqLyAJCQkJCWlmKHMuZ2V0QXR0cmlidXRlKCJzcmMiKSA9PSB1cmwgfHwgcy5nZXRBdHRyaWJ1dGUoImRhdGEtd2VicGFjayIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9Ci8qKioqKiovIAkJCQl9Ci8qKioqKiovIAkJCX0KLyoqKioqKi8gCQkJaWYoIXNjcmlwdCkgewovKioqKioqLyAJCQkJbmVlZEF0dGFjaCA9IHRydWU7Ci8qKioqKiovIAkJCQlzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCXNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04JzsKLyoqKioqKi8gCQkJCXNjcmlwdC50aW1lb3V0ID0gMTIwOwovKioqKioqLyAJCQkJaWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHsKLyoqKioqKi8gCQkJCQlzY3JpcHQuc2V0QXR0cmlidXRlKCJub25jZSIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpOwovKioqKioqLyAJCQkJfQovKioqKioqLyAJCQkJc2NyaXB0LnNldEF0dHJpYnV0ZSgiZGF0YS13ZWJwYWNrIiwgZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpOwovKioqKioqLyAJCQkJc2NyaXB0LnNyYyA9IHVybDsKLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQlpblByb2dyZXNzW3VybF0gPSBbZG9uZV07Ci8qKioqKiovIAkJCXZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7Ci8qKioqKiovIAkJCQkvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuCi8qKioqKiovIAkJCQlzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsOwovKioqKioqLyAJCQkJY2xlYXJUaW1lb3V0KHRpbWVvdXQpOwovKioqKioqLyAJCQkJdmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07Ci8qKioqKiovIAkJCQlkZWxldGUgaW5Qcm9ncmVzc1t1cmxdOwovKioqKioqLyAJCQkJc2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTsKLyoqKioqKi8gCQkJCWRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpOwovKioqKioqLyAJCQkJaWYocHJldikgcmV0dXJuIHByZXYoZXZlbnQpOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJCXZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7Ci8qKioqKiovIAkJCXNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTsKLyoqKioqKi8gCQkJc2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTsKLyoqKioqKi8gCQkJbmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCX0pKCk7Ci8qKioqKiovIAkKLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi8KLyoqKioqKi8gCSgoKSA9PiB7Ci8qKioqKiovIAkJLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0cwovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7Ci8qKioqKiovIAkJCWlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykgewovKioqKioqLyAJCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7Ci8qKioqKiovIAkJCX0KLyoqKioqKi8gCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTsKLyoqKioqKi8gCQl9OwovKioqKioqLyAJfSkoKTsKLyoqKioqKi8gCQovKioqKioqLyAJLyogd2VicGFjay9ydW50aW1lL2hvdCBtb2R1bGUgcmVwbGFjZW1lbnQgKi8KLyoqKioqKi8gCSgoKSA9PiB7Ci8qKioqKiovIAkJdmFyIGN1cnJlbnRNb2R1bGVEYXRhID0ge307Ci8qKioqKiovIAkJdmFyIGluc3RhbGxlZE1vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmM7Ci8qKioqKiovIAkJCi8qKioqKiovIAkJLy8gbW9kdWxlIGFuZCByZXF1aXJlIGNyZWF0aW9uCi8qKioqKiovIAkJdmFyIGN1cnJlbnRDaGlsZE1vZHVsZTsKLyoqKioqKi8gCQl2YXIgY3VycmVudFBhcmVudHMgPSBbXTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkvLyBzdGF0dXMKLyoqKioqKi8gCQl2YXIgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzID0gW107Ci8qKioqKiovIAkJdmFyIGN1cnJlbnRTdGF0dXMgPSAiaWRsZSI7Ci8qKioqKiovIAkJCi8qKioqKiovIAkJLy8gd2hpbGUgZG93bmxvYWRpbmcKLyoqKioqKi8gCQl2YXIgYmxvY2tpbmdQcm9taXNlcyA9IDA7Ci8qKioqKiovIAkJdmFyIGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nID0gW107Ci8qKioqKiovIAkJCi8qKioqKiovIAkJLy8gVGhlIHVwZGF0ZSBpbmZvCi8qKioqKiovIAkJdmFyIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzOwovKioqKioqLyAJCXZhciBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXM7Ci8qKioqKiovIAkJCi8qKioqKiovIAkJLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzCi8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5obXJEID0gY3VycmVudE1vZHVsZURhdGE7Ci8qKioqKiovIAkJCi8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5pLnB1c2goZnVuY3Rpb24gKG9wdGlvbnMpIHsKLyoqKioqKi8gCQkJdmFyIG1vZHVsZSA9IG9wdGlvbnMubW9kdWxlOwovKioqKioqLyAJCQl2YXIgcmVxdWlyZSA9IGNyZWF0ZVJlcXVpcmUob3B0aW9ucy5yZXF1aXJlLCBvcHRpb25zLmlkKTsKLyoqKioqKi8gCQkJbW9kdWxlLmhvdCA9IGNyZWF0ZU1vZHVsZUhvdE9iamVjdChvcHRpb25zLmlkLCBtb2R1bGUpOwovKioqKioqLyAJCQltb2R1bGUucGFyZW50cyA9IGN1cnJlbnRQYXJlbnRzOwovKioqKioqLyAJCQltb2R1bGUuY2hpbGRyZW4gPSBbXTsKLyoqKioqKi8gCQkJY3VycmVudFBhcmVudHMgPSBbXTsKLyoqKioqKi8gCQkJb3B0aW9ucy5yZXF1aXJlID0gcmVxdWlyZTsKLyoqKioqKi8gCQl9KTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMgPSB7fTsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkgPSB7fTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQlmdW5jdGlvbiBjcmVhdGVSZXF1aXJlKHJlcXVpcmUsIG1vZHVsZUlkKSB7Ci8qKioqKiovIAkJCXZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdOwovKioqKioqLyAJCQlpZiAoIW1lKSByZXR1cm4gcmVxdWlyZTsKLyoqKioqKi8gCQkJdmFyIGZuID0gZnVuY3Rpb24gKHJlcXVlc3QpIHsKLyoqKioqKi8gCQkJCWlmIChtZS5ob3QuYWN0aXZlKSB7Ci8qKioqKiovIAkJCQkJaWYgKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHsKLyoqKioqKi8gCQkJCQkJdmFyIHBhcmVudHMgPSBpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHM7Ci8qKioqKiovIAkJCQkJCWlmIChwYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkgewovKioqKioqLyAJCQkJCQkJcGFyZW50cy5wdXNoKG1vZHVsZUlkKTsKLyoqKioqKi8gCQkJCQkJfQovKioqKioqLyAJCQkJCX0gZWxzZSB7Ci8qKioqKiovIAkJCQkJCWN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTsKLyoqKioqKi8gCQkJCQkJY3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDsKLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQkJaWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7Ci8qKioqKiovIAkJCQkJCW1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJfSBlbHNlIHsKLyoqKioqKi8gCQkJCQljb25zb2xlLndhcm4oCi8qKioqKiovIAkJCQkJCSJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoIiArCi8qKioqKiovIAkJCQkJCQlyZXF1ZXN0ICsKLyoqKioqKi8gCQkJCQkJCSIpIGZyb20gZGlzcG9zZWQgbW9kdWxlICIgKwovKioqKioqLyAJCQkJCQkJbW9kdWxlSWQKLyoqKioqKi8gCQkJCQkpOwovKioqKioqLyAJCQkJCWN1cnJlbnRQYXJlbnRzID0gW107Ci8qKioqKiovIAkJCQl9Ci8qKioqKiovIAkJCQlyZXR1cm4gcmVxdWlyZShyZXF1ZXN0KTsKLyoqKioqKi8gCQkJfTsKLyoqKioqKi8gCQkJdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChuYW1lKSB7Ci8qKioqKiovIAkJCQlyZXR1cm4gewovKioqKioqLyAJCQkJCWNvbmZpZ3VyYWJsZTogdHJ1ZSwKLyoqKioqKi8gCQkJCQllbnVtZXJhYmxlOiB0cnVlLAovKioqKioqLyAJCQkJCWdldDogZnVuY3Rpb24gKCkgewovKioqKioqLyAJCQkJCQlyZXR1cm4gcmVxdWlyZVtuYW1lXTsKLyoqKioqKi8gCQkJCQl9LAovKioqKioqLyAJCQkJCXNldDogZnVuY3Rpb24gKHZhbHVlKSB7Ci8qKioqKiovIAkJCQkJCXJlcXVpcmVbbmFtZV0gPSB2YWx1ZTsKLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQl9OwovKioqKioqLyAJCQl9OwovKioqKioqLyAJCQlmb3IgKHZhciBuYW1lIGluIHJlcXVpcmUpIHsKLyoqKioqKi8gCQkJCWlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVxdWlyZSwgbmFtZSkgJiYgbmFtZSAhPT0gImUiKSB7Ci8qKioqKiovIAkJCQkJT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IobmFtZSkpOwovKioqKioqLyAJCQkJfQovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJCWZuLmUgPSBmdW5jdGlvbiAoY2h1bmtJZCkgewovKioqKioqLyAJCQkJcmV0dXJuIHRyYWNrQmxvY2tpbmdQcm9taXNlKHJlcXVpcmUuZShjaHVua0lkKSk7Ci8qKioqKiovIAkJCX07Ci8qKioqKiovIAkJCXJldHVybiBmbjsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJZnVuY3Rpb24gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG1vZHVsZUlkLCBtZSkgewovKioqKioqLyAJCQl2YXIgX21haW4gPSBjdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkOwovKioqKioqLyAJCQl2YXIgaG90ID0gewovKioqKioqLyAJCQkJLy8gcHJpdmF0ZSBzdHVmZgovKioqKioqLyAJCQkJX2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSwKLyoqKioqKi8gCQkJCV9hY2NlcHRlZEVycm9ySGFuZGxlcnM6IHt9LAovKioqKioqLyAJCQkJX2RlY2xpbmVkRGVwZW5kZW5jaWVzOiB7fSwKLyoqKioqKi8gCQkJCV9zZWxmQWNjZXB0ZWQ6IGZhbHNlLAovKioqKioqLyAJCQkJX3NlbGZEZWNsaW5lZDogZmFsc2UsCi8qKioqKiovIAkJCQlfc2VsZkludmFsaWRhdGVkOiBmYWxzZSwKLyoqKioqKi8gCQkJCV9kaXNwb3NlSGFuZGxlcnM6IFtdLAovKioqKioqLyAJCQkJX21haW46IF9tYWluLAovKioqKioqLyAJCQkJX3JlcXVpcmVTZWxmOiBmdW5jdGlvbiAoKSB7Ci8qKioqKiovIAkJCQkJY3VycmVudFBhcmVudHMgPSBtZS5wYXJlbnRzLnNsaWNlKCk7Ci8qKioqKiovIAkJCQkJY3VycmVudENoaWxkTW9kdWxlID0gX21haW4gPyB1bmRlZmluZWQgOiBtb2R1bGVJZDsKLyoqKioqKi8gCQkJCQlfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTsKLyoqKioqKi8gCQkJCX0sCi8qKioqKiovIAkJCi8qKioqKiovIAkJCQkvLyBNb2R1bGUgQVBJCi8qKioqKiovIAkJCQlhY3RpdmU6IHRydWUsCi8qKioqKiovIAkJCQlhY2NlcHQ6IGZ1bmN0aW9uIChkZXAsIGNhbGxiYWNrLCBlcnJvckhhbmRsZXIpIHsKLyoqKioqKi8gCQkJCQlpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTsKLyoqKioqKi8gCQkJCQllbHNlIGlmICh0eXBlb2YgZGVwID09PSAiZnVuY3Rpb24iKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDsKLyoqKioqKi8gCQkJCQllbHNlIGlmICh0eXBlb2YgZGVwID09PSAib2JqZWN0IiAmJiBkZXAgIT09IG51bGwpIHsKLyoqKioqKi8gCQkJCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspIHsKLyoqKioqKi8gCQkJCQkJCWhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9OwovKioqKioqLyAJCQkJCQkJaG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwW2ldXSA9IGVycm9ySGFuZGxlcjsKLyoqKioqKi8gCQkJCQkJfQovKioqKioqLyAJCQkJCX0gZWxzZSB7Ci8qKioqKiovIAkJCQkJCWhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9OwovKioqKioqLyAJCQkJCQlob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBdID0gZXJyb3JIYW5kbGVyOwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCX0sCi8qKioqKiovIAkJCQlkZWNsaW5lOiBmdW5jdGlvbiAoZGVwKSB7Ci8qKioqKiovIAkJCQkJaWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7Ci8qKioqKiovIAkJCQkJZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gIm9iamVjdCIgJiYgZGVwICE9PSBudWxsKQovKioqKioqLyAJCQkJCQlmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykKLyoqKioqKi8gCQkJCQkJCWhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IHRydWU7Ci8qKioqKiovIAkJCQkJZWxzZSBob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlOwovKioqKioqLyAJCQkJfSwKLyoqKioqKi8gCQkJCWRpc3Bvc2U6IGZ1bmN0aW9uIChjYWxsYmFjaykgewovKioqKioqLyAJCQkJCWhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spOwovKioqKioqLyAJCQkJfSwKLyoqKioqKi8gCQkJCWFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHsKLyoqKioqKi8gCQkJCQlob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTsKLyoqKioqKi8gCQkJCX0sCi8qKioqKiovIAkJCQlyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7Ci8qKioqKiovIAkJCQkJdmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spOwovKioqKioqLyAJCQkJCWlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7Ci8qKioqKiovIAkJCQl9LAovKioqKioqLyAJCQkJaW52YWxpZGF0ZTogZnVuY3Rpb24gKCkgewovKioqKioqLyAJCQkJCXRoaXMuX3NlbGZJbnZhbGlkYXRlZCA9IHRydWU7Ci8qKioqKiovIAkJCQkJc3dpdGNoIChjdXJyZW50U3RhdHVzKSB7Ci8qKioqKiovIAkJCQkJCWNhc2UgImlkbGUiOgovKioqKioqLyAJCQkJCQkJY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTsKLyoqKioqKi8gCQkJCQkJCU9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7Ci8qKioqKiovIAkJCQkJCQkJX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oCi8qKioqKiovIAkJCQkJCQkJCW1vZHVsZUlkLAovKioqKioqLyAJCQkJCQkJCQljdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycwovKioqKioqLyAJCQkJCQkJCSk7Ci8qKioqKiovIAkJCQkJCQl9KTsKLyoqKioqKi8gCQkJCQkJCXNldFN0YXR1cygicmVhZHkiKTsKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCQljYXNlICJyZWFkeSI6Ci8qKioqKiovIAkJCQkJCQlPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewovKioqKioqLyAJCQkJCQkJCV9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKAovKioqKioqLyAJCQkJCQkJCQltb2R1bGVJZCwKLyoqKioqKi8gCQkJCQkJCQkJY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMKLyoqKioqKi8gCQkJCQkJCQkpOwovKioqKioqLyAJCQkJCQkJfSk7Ci8qKioqKiovIAkJCQkJCQlicmVhazsKLyoqKioqKi8gCQkJCQkJY2FzZSAicHJlcGFyZSI6Ci8qKioqKiovIAkJCQkJCWNhc2UgImNoZWNrIjoKLyoqKioqKi8gCQkJCQkJY2FzZSAiZGlzcG9zZSI6Ci8qKioqKiovIAkJCQkJCWNhc2UgImFwcGx5IjoKLyoqKioqKi8gCQkJCQkJCShxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSBxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgfHwgW10pLnB1c2goCi8qKioqKiovIAkJCQkJCQkJbW9kdWxlSWQKLyoqKioqKi8gCQkJCQkJCSk7Ci8qKioqKiovIAkJCQkJCQlicmVhazsKLyoqKioqKi8gCQkJCQkJZGVmYXVsdDoKLyoqKioqKi8gCQkJCQkJCS8vIGlnbm9yZSByZXF1ZXN0cyBpbiBlcnJvciBzdGF0ZXMKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCX0sCi8qKioqKiovIAkJCi8qKioqKiovIAkJCQkvLyBNYW5hZ2VtZW50IEFQSQovKioqKioqLyAJCQkJY2hlY2s6IGhvdENoZWNrLAovKioqKioqLyAJCQkJYXBwbHk6IGhvdEFwcGx5LAovKioqKioqLyAJCQkJc3RhdHVzOiBmdW5jdGlvbiAobCkgewovKioqKioqLyAJCQkJCWlmICghbCkgcmV0dXJuIGN1cnJlbnRTdGF0dXM7Ci8qKioqKiovIAkJCQkJcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7Ci8qKioqKiovIAkJCQl9LAovKioqKioqLyAJCQkJYWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24gKGwpIHsKLyoqKioqKi8gCQkJCQlyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTsKLyoqKioqKi8gCQkJCX0sCi8qKioqKiovIAkJCQlyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkgewovKioqKioqLyAJCQkJCXZhciBpZHggPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTsKLyoqKioqKi8gCQkJCQlpZiAoaWR4ID49IDApIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTsKLyoqKioqKi8gCQkJCX0sCi8qKioqKiovIAkJCi8qKioqKiovIAkJCQkvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGwKLyoqKioqKi8gCQkJCWRhdGE6IGN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXQovKioqKioqLyAJCQl9OwovKioqKioqLyAJCQljdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7Ci8qKioqKiovIAkJCXJldHVybiBob3Q7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCQovKioqKioqLyAJCWZ1bmN0aW9uIHNldFN0YXR1cyhuZXdTdGF0dXMpIHsKLyoqKioqKi8gCQkJY3VycmVudFN0YXR1cyA9IG5ld1N0YXR1czsKLyoqKioqKi8gCQkJdmFyIHJlc3VsdHMgPSBbXTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJZm9yICh2YXIgaSA9IDA7IGkgPCByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMubGVuZ3RoOyBpKyspCi8qKioqKiovIAkJCQlyZXN1bHRzW2ldID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJcmV0dXJuIFByb21pc2UuYWxsKHJlc3VsdHMpOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQlmdW5jdGlvbiB1bmJsb2NrKCkgewovKioqKioqLyAJCQlpZiAoLS1ibG9ja2luZ1Byb21pc2VzID09PSAwKSB7Ci8qKioqKiovIAkJCQlzZXRTdGF0dXMoInJlYWR5IikudGhlbihmdW5jdGlvbiAoKSB7Ci8qKioqKiovIAkJCQkJaWYgKGJsb2NraW5nUHJvbWlzZXMgPT09IDApIHsKLyoqKioqKi8gCQkJCQkJdmFyIGxpc3QgPSBibG9ja2luZ1Byb21pc2VzV2FpdGluZzsKLyoqKioqKi8gCQkJCQkJYmxvY2tpbmdQcm9taXNlc1dhaXRpbmcgPSBbXTsKLyoqKioqKi8gCQkJCQkJZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7Ci8qKioqKiovIAkJCQkJCQlsaXN0W2ldKCk7Ci8qKioqKiovIAkJCQkJCX0KLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQl9KTsKLyoqKioqKi8gCQkJfQovKioqKioqLyAJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQlmdW5jdGlvbiB0cmFja0Jsb2NraW5nUHJvbWlzZShwcm9taXNlKSB7Ci8qKioqKiovIAkJCXN3aXRjaCAoY3VycmVudFN0YXR1cykgewovKioqKioqLyAJCQkJY2FzZSAicmVhZHkiOgovKioqKioqLyAJCQkJCXNldFN0YXR1cygicHJlcGFyZSIpOwovKioqKioqLyAJCQkJLyogZmFsbHRocm91Z2ggKi8KLyoqKioqKi8gCQkJCWNhc2UgInByZXBhcmUiOgovKioqKioqLyAJCQkJCWJsb2NraW5nUHJvbWlzZXMrKzsKLyoqKioqKi8gCQkJCQlwcm9taXNlLnRoZW4odW5ibG9jaywgdW5ibG9jayk7Ci8qKioqKiovIAkJCQkJcmV0dXJuIHByb21pc2U7Ci8qKioqKiovIAkJCQlkZWZhdWx0OgovKioqKioqLyAJCQkJCXJldHVybiBwcm9taXNlOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJfQovKioqKioqLyAJCQovKioqKioqLyAJCWZ1bmN0aW9uIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZuKSB7Ci8qKioqKiovIAkJCWlmIChibG9ja2luZ1Byb21pc2VzID09PSAwKSByZXR1cm4gZm4oKTsKLyoqKioqKi8gCQkJcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7Ci8qKioqKiovIAkJCQlibG9ja2luZ1Byb21pc2VzV2FpdGluZy5wdXNoKGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQlyZXNvbHZlKGZuKCkpOwovKioqKioqLyAJCQkJfSk7Ci8qKioqKiovIAkJCX0pOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQlmdW5jdGlvbiBob3RDaGVjayhhcHBseU9uVXBkYXRlKSB7Ci8qKioqKiovIAkJCWlmIChjdXJyZW50U3RhdHVzICE9PSAiaWRsZSIpIHsKLyoqKioqKi8gCQkJCXRocm93IG5ldyBFcnJvcigiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXMiKTsKLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQlyZXR1cm4gc2V0U3RhdHVzKCJjaGVjayIpCi8qKioqKiovIAkJCQkudGhlbihfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0pCi8qKioqKiovIAkJCQkudGhlbihmdW5jdGlvbiAodXBkYXRlKSB7Ci8qKioqKiovIAkJCQkJaWYgKCF1cGRhdGUpIHsKLyoqKioqKi8gCQkJCQkJcmV0dXJuIHNldFN0YXR1cyhhcHBseUludmFsaWRhdGVkTW9kdWxlcygpID8gInJlYWR5IiA6ICJpZGxlIikudGhlbigKLyoqKioqKi8gCQkJCQkJCWZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQkJCQlyZXR1cm4gbnVsbDsKLyoqKioqKi8gCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJKTsKLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCQkJcmV0dXJuIHNldFN0YXR1cygicHJlcGFyZSIpLnRoZW4oZnVuY3Rpb24gKCkgewovKioqKioqLyAJCQkJCQl2YXIgdXBkYXRlZE1vZHVsZXMgPSBbXTsKLyoqKioqKi8gCQkJCQkJY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQkJcmV0dXJuIFByb21pc2UuYWxsKAovKioqKioqLyAJCQkJCQkJT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDKS5yZWR1Y2UoZnVuY3Rpb24gKAovKioqKioqLyAJCQkJCQkJCXByb21pc2VzLAovKioqKioqLyAJCQkJCQkJCWtleQovKioqKioqLyAJCQkJCQkJKSB7Ci8qKioqKiovIAkJCQkJCQkJX193ZWJwYWNrX3JlcXVpcmVfXy5obXJDW2tleV0oCi8qKioqKiovIAkJCQkJCQkJCXVwZGF0ZS5jLAovKioqKioqLyAJCQkJCQkJCQl1cGRhdGUuciwKLyoqKioqKi8gCQkJCQkJCQkJdXBkYXRlLm0sCi8qKioqKiovIAkJCQkJCQkJCXByb21pc2VzLAovKioqKioqLyAJCQkJCQkJCQljdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycywKLyoqKioqKi8gCQkJCQkJCQkJdXBkYXRlZE1vZHVsZXMKLyoqKioqKi8gCQkJCQkJCQkpOwovKioqKioqLyAJCQkJCQkJCXJldHVybiBwcm9taXNlczsKLyoqKioqKi8gCQkJCQkJCX0sCi8qKioqKiovIAkJCQkJCQlbXSkKLyoqKioqKi8gCQkJCQkJKS50aGVuKGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQkJCXJldHVybiB3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyhmdW5jdGlvbiAoKSB7Ci8qKioqKiovIAkJCQkJCQkJaWYgKGFwcGx5T25VcGRhdGUpIHsKLyoqKioqKi8gCQkJCQkJCQkJcmV0dXJuIGludGVybmFsQXBwbHkoYXBwbHlPblVwZGF0ZSk7Ci8qKioqKiovIAkJCQkJCQkJfSBlbHNlIHsKLyoqKioqKi8gCQkJCQkJCQkJcmV0dXJuIHNldFN0YXR1cygicmVhZHkiKS50aGVuKGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQkJCQkJCXJldHVybiB1cGRhdGVkTW9kdWxlczsKLyoqKioqKi8gCQkJCQkJCQkJfSk7Ci8qKioqKiovIAkJCQkJCQkJfQovKioqKioqLyAJCQkJCQkJfSk7Ci8qKioqKiovIAkJCQkJCX0pOwovKioqKioqLyAJCQkJCX0pOwovKioqKioqLyAJCQkJfSk7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCQovKioqKioqLyAJCWZ1bmN0aW9uIGhvdEFwcGx5KG9wdGlvbnMpIHsKLyoqKioqKi8gCQkJaWYgKGN1cnJlbnRTdGF0dXMgIT09ICJyZWFkeSIpIHsKLyoqKioqKi8gCQkJCXJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQl0aHJvdyBuZXcgRXJyb3IoCi8qKioqKiovIAkJCQkJCSJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXMgKHN0YXRlOiAiICsKLyoqKioqKi8gCQkJCQkJCWN1cnJlbnRTdGF0dXMgKwovKioqKioqLyAJCQkJCQkJIikiCi8qKioqKiovIAkJCQkJKTsKLyoqKioqKi8gCQkJCX0pOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJCXJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQlmdW5jdGlvbiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpIHsKLyoqKioqKi8gCQkJb3B0aW9ucyA9IG9wdGlvbnMgfHwge307Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCWFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCXZhciByZXN1bHRzID0gY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7Ci8qKioqKiovIAkJCQlyZXR1cm4gaGFuZGxlcihvcHRpb25zKTsKLyoqKioqKi8gCQkJfSk7Ci8qKioqKiovIAkJCWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gdW5kZWZpbmVkOwovKioqKioqLyAJCQovKioqKioqLyAJCQl2YXIgZXJyb3JzID0gcmVzdWx0cwovKioqKioqLyAJCQkJLm1hcChmdW5jdGlvbiAocikgewovKioqKioqLyAJCQkJCXJldHVybiByLmVycm9yOwovKioqKioqLyAJCQkJfSkKLyoqKioqKi8gCQkJCS5maWx0ZXIoQm9vbGVhbik7Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCWlmIChlcnJvcnMubGVuZ3RoID4gMCkgewovKioqKioqLyAJCQkJcmV0dXJuIHNldFN0YXR1cygiYWJvcnQiKS50aGVuKGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQl0aHJvdyBlcnJvcnNbMF07Ci8qKioqKiovIAkJCQl9KTsKLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQovKioqKioqLyAJCQkvLyBOb3cgaW4gImRpc3Bvc2UiIHBoYXNlCi8qKioqKiovIAkJCXZhciBkaXNwb3NlUHJvbWlzZSA9IHNldFN0YXR1cygiZGlzcG9zZSIpOwovKioqKioqLyAJCQovKioqKioqLyAJCQlyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkgewovKioqKioqLyAJCQkJaWYgKHJlc3VsdC5kaXNwb3NlKSByZXN1bHQuZGlzcG9zZSgpOwovKioqKioqLyAJCQl9KTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJLy8gTm93IGluICJhcHBseSIgcGhhc2UKLyoqKioqKi8gCQkJdmFyIGFwcGx5UHJvbWlzZSA9IHNldFN0YXR1cygiYXBwbHkiKTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJdmFyIGVycm9yOwovKioqKioqLyAJCQl2YXIgcmVwb3J0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7Ci8qKioqKiovIAkJCQlpZiAoIWVycm9yKSBlcnJvciA9IGVycjsKLyoqKioqKi8gCQkJfTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJdmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdOwovKioqKioqLyAJCQlyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkgewovKioqKioqLyAJCQkJaWYgKHJlc3VsdC5hcHBseSkgewovKioqKioqLyAJCQkJCXZhciBtb2R1bGVzID0gcmVzdWx0LmFwcGx5KHJlcG9ydEVycm9yKTsKLyoqKioqKi8gCQkJCQlpZiAobW9kdWxlcykgewovKioqKioqLyAJCQkJCQlmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHsKLyoqKioqKi8gCQkJCQkJCW91dGRhdGVkTW9kdWxlcy5wdXNoKG1vZHVsZXNbaV0pOwovKioqKioqLyAJCQkJCQl9Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJfQovKioqKioqLyAJCQl9KTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJcmV0dXJuIFByb21pc2UuYWxsKFtkaXNwb3NlUHJvbWlzZSwgYXBwbHlQcm9taXNlXSkudGhlbihmdW5jdGlvbiAoKSB7Ci8qKioqKiovIAkJCQkvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZAovKioqKioqLyAJCQkJaWYgKGVycm9yKSB7Ci8qKioqKiovIAkJCQkJcmV0dXJuIHNldFN0YXR1cygiZmFpbCIpLnRoZW4oZnVuY3Rpb24gKCkgewovKioqKioqLyAJCQkJCQl0aHJvdyBlcnJvcjsKLyoqKioqKi8gCQkJCQl9KTsKLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCWlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHsKLyoqKioqKi8gCQkJCQlyZXR1cm4gaW50ZXJuYWxBcHBseShvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChsaXN0KSB7Ci8qKioqKiovIAkJCQkJCW91dGRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkgewovKioqKioqLyAJCQkJCQkJaWYgKGxpc3QuaW5kZXhPZihtb2R1bGVJZCkgPCAwKSBsaXN0LnB1c2gobW9kdWxlSWQpOwovKioqKioqLyAJCQkJCQl9KTsKLyoqKioqKi8gCQkJCQkJcmV0dXJuIGxpc3Q7Ci8qKioqKiovIAkJCQkJfSk7Ci8qKioqKiovIAkJCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCQlyZXR1cm4gc2V0U3RhdHVzKCJpZGxlIikudGhlbihmdW5jdGlvbiAoKSB7Ci8qKioqKiovIAkJCQkJcmV0dXJuIG91dGRhdGVkTW9kdWxlczsKLyoqKioqKi8gCQkJCX0pOwovKioqKioqLyAJCQl9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJZnVuY3Rpb24gYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSB7Ci8qKioqKiovIAkJCWlmIChxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHsKLyoqKioqKi8gCQkJCWlmICghY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMpIGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzID0gW107Ci8qKioqKiovIAkJCQlPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewovKioqKioqLyAJCQkJCXF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkgewovKioqKioqLyAJCQkJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XSgKLyoqKioqKi8gCQkJCQkJCW1vZHVsZUlkLAovKioqKioqLyAJCQkJCQkJY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMKLyoqKioqKi8gCQkJCQkJKTsKLyoqKioqKi8gCQkJCQl9KTsKLyoqKioqKi8gCQkJCX0pOwovKioqKioqLyAJCQkJcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gdW5kZWZpbmVkOwovKioqKioqLyAJCQkJcmV0dXJuIHRydWU7Ci8qKioqKiovIAkJCX0KLyoqKioqKi8gCQl9Ci8qKioqKiovIAl9KSgpOwovKioqKioqLyAJCi8qKioqKiovIAkvKiB3ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCAqLwovKioqKioqLyAJKCgpID0+IHsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSAiIjsKLyoqKioqKi8gCX0pKCk7Ci8qKioqKiovIAkKLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9yZWFjdCByZWZyZXNoICovCi8qKioqKiovIAkoKCkgPT4gewovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uaS5wdXNoKChvcHRpb25zKSA9PiB7Ci8qKioqKiovIAkJCWNvbnN0IG9yaWdpbmFsRmFjdG9yeSA9IG9wdGlvbnMuZmFjdG9yeTsKLyoqKioqKi8gCQkJb3B0aW9ucy5mYWN0b3J5ID0gZnVuY3Rpb24gKG1vZHVsZU9iamVjdCwgbW9kdWxlRXhwb3J0cywgd2VicGFja1JlcXVpcmUpIHsKLyoqKioqKi8gCQkJCV9fd2VicGFja19yZXF1aXJlX18uJFJlZnJlc2gkLnNldHVwKG9wdGlvbnMuaWQpOwovKioqKioqLyAJCQkJdHJ5IHsKLyoqKioqKi8gCQkJCQlvcmlnaW5hbEZhY3RvcnkuY2FsbCh0aGlzLCBtb2R1bGVPYmplY3QsIG1vZHVsZUV4cG9ydHMsIHdlYnBhY2tSZXF1aXJlKTsKLyoqKioqKi8gCQkJCX0gZmluYWxseSB7Ci8qKioqKiovIAkJCQkJaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGVPYmplY3QuZXhwb3J0cyBpbnN0YW5jZW9mIFByb21pc2UpIHsKLyoqKioqKi8gCQkJCQkJb3B0aW9ucy5tb2R1bGUuZXhwb3J0cyA9IG9wdGlvbnMubW9kdWxlLmV4cG9ydHMudGhlbigKLyoqKioqKi8gCQkJCQkJCShyZXN1bHQpID0+IHsKLyoqKioqKi8gCQkJCQkJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLiRSZWZyZXNoJC5jbGVhbnVwKG9wdGlvbnMuaWQpOwovKioqKioqLyAJCQkJCQkJCXJldHVybiByZXN1bHQ7Ci8qKioqKiovIAkJCQkJCQl9LAovKioqKioqLyAJCQkJCQkJKHJlYXNvbikgPT4gewovKioqKioqLyAJCQkJCQkJCV9fd2VicGFja19yZXF1aXJlX18uJFJlZnJlc2gkLmNsZWFudXAob3B0aW9ucy5pZCk7Ci8qKioqKiovIAkJCQkJCQkJcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7Ci8qKioqKiovIAkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCSk7Ci8qKioqKiovIAkJCQkJfSBlbHNlIHsKLyoqKioqKi8gCQkJCQkJX193ZWJwYWNrX3JlcXVpcmVfXy4kUmVmcmVzaCQuY2xlYW51cChvcHRpb25zLmlkKQovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfTsKLyoqKioqKi8gCQl9KQovKioqKioqLyAJCQovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uJFJlZnJlc2gkID0gewovKioqKioqLyAJCQlyZWdpc3RlcjogKCkgPT4gKHVuZGVmaW5lZCksCi8qKioqKiovIAkJCXNpZ25hdHVyZTogKCkgPT4gKCh0eXBlKSA9PiAodHlwZSkpLAovKioqKioqLyAJCQlydW50aW1lOiB7Ci8qKioqKiovIAkJCQljcmVhdGVTaWduYXR1cmVGdW5jdGlvbkZvclRyYW5zZm9ybTogKCkgPT4gKCh0eXBlKSA9PiAodHlwZSkpLAovKioqKioqLyAJCQkJcmVnaXN0ZXI6ICgpID0+ICh1bmRlZmluZWQpCi8qKioqKiovIAkJCX0sCi8qKioqKiovIAkJCXNldHVwOiAoY3VycmVudE1vZHVsZUlkKSA9PiB7Ci8qKioqKiovIAkJCQljb25zdCBwcmV2TW9kdWxlSWQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLiRSZWZyZXNoJC5tb2R1bGVJZDsKLyoqKioqKi8gCQkJCWNvbnN0IHByZXZSZWdpc3RlciA9IF9fd2VicGFja19yZXF1aXJlX18uJFJlZnJlc2gkLnJlZ2lzdGVyOwovKioqKioqLyAJCQkJY29uc3QgcHJldlNpZ25hdHVyZSA9IF9fd2VicGFja19yZXF1aXJlX18uJFJlZnJlc2gkLnNpZ25hdHVyZTsKLyoqKioqKi8gCQkJCWNvbnN0IHByZXZDbGVhbnVwID0gX193ZWJwYWNrX3JlcXVpcmVfXy4kUmVmcmVzaCQuY2xlYW51cDsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCV9fd2VicGFja19yZXF1aXJlX18uJFJlZnJlc2gkLm1vZHVsZUlkID0gY3VycmVudE1vZHVsZUlkOwovKioqKioqLyAJCQovKioqKioqLyAJCQkJX193ZWJwYWNrX3JlcXVpcmVfXy4kUmVmcmVzaCQucmVnaXN0ZXIgPSAodHlwZSwgaWQpID0+IHsKLyoqKioqKi8gCQkJCQljb25zdCB0eXBlSWQgPSBjdXJyZW50TW9kdWxlSWQgKyAiICIgKyBpZDsKLyoqKioqKi8gCQkJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLiRSZWZyZXNoJC5ydW50aW1lLnJlZ2lzdGVyKHR5cGUsIHR5cGVJZCk7Ci8qKioqKiovIAkJCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLiRSZWZyZXNoJC5zaWduYXR1cmUgPSAoKSA9PiAoX193ZWJwYWNrX3JlcXVpcmVfXy4kUmVmcmVzaCQucnVudGltZS5jcmVhdGVTaWduYXR1cmVGdW5jdGlvbkZvclRyYW5zZm9ybSgpKTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCV9fd2VicGFja19yZXF1aXJlX18uJFJlZnJlc2gkLmNsZWFudXAgPSAoY2xlYW51cE1vZHVsZUlkKSA9PiB7Ci8qKioqKiovIAkJCQkJaWYgKGN1cnJlbnRNb2R1bGVJZCA9PT0gY2xlYW51cE1vZHVsZUlkKSB7Ci8qKioqKiovIAkJCQkJCV9fd2VicGFja19yZXF1aXJlX18uJFJlZnJlc2gkLm1vZHVsZUlkID0gcHJldk1vZHVsZUlkOwovKioqKioqLyAJCQkJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLiRSZWZyZXNoJC5yZWdpc3RlciA9IHByZXZSZWdpc3RlcjsKLyoqKioqKi8gCQkJCQkJX193ZWJwYWNrX3JlcXVpcmVfXy4kUmVmcmVzaCQuc2lnbmF0dXJlID0gcHJldlNpZ25hdHVyZTsKLyoqKioqKi8gCQkJCQkJX193ZWJwYWNrX3JlcXVpcmVfXy4kUmVmcmVzaCQuY2xlYW51cCA9IHByZXZDbGVhbnVwOwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfQovKioqKioqLyAJCX07Ci8qKioqKiovIAl9KSgpOwovKioqKioqLyAJCi8qKioqKiovIAkvKiB3ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyAqLwovKioqKioqLyAJKCgpID0+IHsKLyoqKioqKi8gCQkvLyBubyBiYXNlVVJJCi8qKioqKiovIAkJCi8qKioqKiovIAkJLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3MKLyoqKioqKi8gCQkvLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWQKLyoqKioqKi8gCQkvLyBbcmVzb2x2ZSwgcmVqZWN0LCBQcm9taXNlXSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWQKLyoqKioqKi8gCQl2YXIgaW5zdGFsbGVkQ2h1bmtzID0gX193ZWJwYWNrX3JlcXVpcmVfXy5obXJTX2pzb25wID0gX193ZWJwYWNrX3JlcXVpcmVfXy5obXJTX2pzb25wIHx8IHsKLyoqKioqKi8gCQkJIm1haW4iOiAwCi8qKioqKiovIAkJfTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkvLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZwovKioqKioqLyAJCQovKioqKioqLyAJCS8vIG5vIHByZWZldGNoaW5nCi8qKioqKiovIAkJCi8qKioqKiovIAkJLy8gbm8gcHJlbG9hZGVkCi8qKioqKiovIAkJCi8qKioqKiovIAkJdmFyIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3Q7Ci8qKioqKiovIAkJdmFyIHdhaXRpbmdVcGRhdGVSZXNvbHZlcyA9IHt9OwovKioqKioqLyAJCWZ1bmN0aW9uIGxvYWRVcGRhdGVDaHVuayhjaHVua0lkLCB1cGRhdGVkTW9kdWxlc0xpc3QpIHsKLyoqKioqKi8gCQkJY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCA9IHVwZGF0ZWRNb2R1bGVzTGlzdDsKLyoqKioqKi8gCQkJcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHsKLyoqKioqKi8gCQkJCXdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHJlc29sdmU7Ci8qKioqKiovIAkJCQkvLyBzdGFydCB1cGRhdGUgY2h1bmsgbG9hZGluZwovKioqKioqLyAJCQkJdmFyIHVybCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaHUoY2h1bmtJZCk7Ci8qKioqKiovIAkJCQkvLyBjcmVhdGUgZXJyb3IgYmVmb3JlIHN0YWNrIHVud291bmQgdG8gZ2V0IHVzZWZ1bCBzdGFja3RyYWNlIGxhdGVyCi8qKioqKiovIAkJCQl2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTsKLyoqKioqKi8gCQkJCXZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHsKLyoqKioqKi8gCQkJCQlpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHsKLyoqKioqKi8gCQkJCQkJd2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkCi8qKioqKiovIAkJCQkJCXZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7Ci8qKioqKiovIAkJCQkJCXZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7Ci8qKioqKiovIAkJCQkJCWVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBob3QgdXBkYXRlIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknOwovKioqKioqLyAJCQkJCQllcnJvci5uYW1lID0gJ0NodW5rTG9hZEVycm9yJzsKLyoqKioqKi8gCQkJCQkJZXJyb3IudHlwZSA9IGVycm9yVHlwZTsKLyoqKioqKi8gCQkJCQkJZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7Ci8qKioqKiovIAkJCQkJCXJlamVjdChlcnJvcik7Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJfTsKLyoqKioqKi8gCQkJCV9fd2VicGFja19yZXF1aXJlX18ubCh1cmwsIGxvYWRpbmdFbmRlZCk7Ci8qKioqKiovIAkJCX0pOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQlzZWxmWyJ3ZWJwYWNrSG90VXBkYXRlYXBwMSJdID0gKGNodW5rSWQsIG1vcmVNb2R1bGVzLCBydW50aW1lKSA9PiB7Ci8qKioqKiovIAkJCWZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHsKLyoqKioqKi8gCQkJCWlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7Ci8qKioqKiovIAkJCQkJY3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07Ci8qKioqKiovIAkJCQkJaWYoY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCkgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdC5wdXNoKG1vZHVsZUlkKTsKLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQlpZihydW50aW1lKSBjdXJyZW50VXBkYXRlUnVudGltZS5wdXNoKHJ1bnRpbWUpOwovKioqKioqLyAJCQlpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHsKLyoqKioqKi8gCQkJCXdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpOwovKioqKioqLyAJCQkJd2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQl2YXIgY3VycmVudFVwZGF0ZUNodW5rczsKLyoqKioqKi8gCQl2YXIgY3VycmVudFVwZGF0ZTsKLyoqKioqKi8gCQl2YXIgY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3M7Ci8qKioqKiovIAkJdmFyIGN1cnJlbnRVcGRhdGVSdW50aW1lOwovKioqKioqLyAJCWZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7Ci8qKioqKiovIAkJCWlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7Ci8qKioqKiovIAkJCWN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7Ci8qKioqKiovIAkJCWZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkgewovKioqKioqLyAJCQkJdmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07Ci8qKioqKiovIAkJCQl2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCXZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5tYXAoZnVuY3Rpb24gKGlkKSB7Ci8qKioqKiovIAkJCQkJcmV0dXJuIHsKLyoqKioqKi8gCQkJCQkJY2hhaW46IFtpZF0sCi8qKioqKiovIAkJCQkJCWlkOiBpZAovKioqKioqLyAJCQkJCX07Ci8qKioqKiovIAkJCQl9KTsKLyoqKioqKi8gCQkJCXdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7Ci8qKioqKiovIAkJCQkJdmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpOwovKioqKioqLyAJCQkJCXZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDsKLyoqKioqKi8gCQkJCQl2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47Ci8qKioqKiovIAkJCQkJdmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07Ci8qKioqKiovIAkJCQkJaWYgKAovKioqKioqLyAJCQkJCQkhbW9kdWxlIHx8Ci8qKioqKiovIAkJCQkJCShtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZCkKLyoqKioqKi8gCQkJCQkpCi8qKioqKiovIAkJCQkJCWNvbnRpbnVlOwovKioqKioqLyAJCQkJCWlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHsKLyoqKioqKi8gCQkJCQkJcmV0dXJuIHsKLyoqKioqKi8gCQkJCQkJCXR5cGU6ICJzZWxmLWRlY2xpbmVkIiwKLyoqKioqKi8gCQkJCQkJCWNoYWluOiBjaGFpbiwKLyoqKioqKi8gCQkJCQkJCW1vZHVsZUlkOiBtb2R1bGVJZAovKioqKioqLyAJCQkJCQl9OwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCQlpZiAobW9kdWxlLmhvdC5fbWFpbikgewovKioqKioqLyAJCQkJCQlyZXR1cm4gewovKioqKioqLyAJCQkJCQkJdHlwZTogInVuYWNjZXB0ZWQiLAovKioqKioqLyAJCQkJCQkJY2hhaW46IGNoYWluLAovKioqKioqLyAJCQkJCQkJbW9kdWxlSWQ6IG1vZHVsZUlkCi8qKioqKiovIAkJCQkJCX07Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJCWZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHsKLyoqKioqKi8gCQkJCQkJdmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07Ci8qKioqKiovIAkJCQkJCXZhciBwYXJlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbcGFyZW50SWRdOwovKioqKioqLyAJCQkJCQlpZiAoIXBhcmVudCkgY29udGludWU7Ci8qKioqKiovIAkJCQkJCWlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHsKLyoqKioqKi8gCQkJCQkJCXJldHVybiB7Ci8qKioqKiovIAkJCQkJCQkJdHlwZTogImRlY2xpbmVkIiwKLyoqKioqKi8gCQkJCQkJCQljaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLAovKioqKioqLyAJCQkJCQkJCW1vZHVsZUlkOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJCQkJCQlwYXJlbnRJZDogcGFyZW50SWQKLyoqKioqKi8gCQkJCQkJCX07Ci8qKioqKiovIAkJCQkJCX0KLyoqKioqKi8gCQkJCQkJaWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlOwovKioqKioqLyAJCQkJCQlpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7Ci8qKioqKiovIAkJCQkJCQlpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSkKLyoqKioqKi8gCQkJCQkJCQlvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTsKLyoqKioqKi8gCQkJCQkJCWFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7Ci8qKioqKiovIAkJCQkJCQljb250aW51ZTsKLyoqKioqKi8gCQkJCQkJfQovKioqKioqLyAJCQkJCQlkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdOwovKioqKioqLyAJCQkJCQlvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7Ci8qKioqKiovIAkJCQkJCXF1ZXVlLnB1c2goewovKioqKioqLyAJCQkJCQkJY2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSwKLyoqKioqKi8gCQkJCQkJCWlkOiBwYXJlbnRJZAovKioqKioqLyAJCQkJCQl9KTsKLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCQlyZXR1cm4gewovKioqKioqLyAJCQkJCXR5cGU6ICJhY2NlcHRlZCIsCi8qKioqKiovIAkJCQkJbW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLAovKioqKioqLyAJCQkJCW91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLAovKioqKioqLyAJCQkJCW91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llcwovKioqKioqLyAJCQkJfTsKLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQovKioqKioqLyAJCQlmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7Ci8qKioqKiovIAkJCQlmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHsKLyoqKioqKi8gCQkJCQl2YXIgaXRlbSA9IGJbaV07Ci8qKioqKiovIAkJCQkJaWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTsKLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQovKioqKioqLyAJCQkvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZAovKioqKioqLyAJCQkvLyB0aGUgIm91dGRhdGVkIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlbgovKioqKioqLyAJCQl2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTsKLyoqKioqKi8gCQkJdmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdOwovKioqKioqLyAJCQl2YXIgYXBwbGllZFVwZGF0ZSA9IHt9OwovKioqKioqLyAJCQovKioqKioqLyAJCQl2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkgewovKioqKioqLyAJCQkJY29uc29sZS53YXJuKAovKioqKioqLyAJCQkJCSJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoIiArIG1vZHVsZS5pZCArICIpIHRvIGRpc3Bvc2VkIG1vZHVsZSIKLyoqKioqKi8gCQkJCSk7Ci8qKioqKiovIAkJCX07Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCWZvciAodmFyIG1vZHVsZUlkIGluIGN1cnJlbnRVcGRhdGUpIHsKLyoqKioqKi8gCQkJCWlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7Ci8qKioqKiovIAkJCQkJdmFyIG5ld01vZHVsZUZhY3RvcnkgPSBjdXJyZW50VXBkYXRlW21vZHVsZUlkXTsKLyoqKioqKi8gCQkJCQkvKiogQHR5cGUge1RPRE99ICovCi8qKioqKiovIAkJCQkJdmFyIHJlc3VsdDsKLyoqKioqKi8gCQkJCQlpZiAobmV3TW9kdWxlRmFjdG9yeSkgewovKioqKioqLyAJCQkJCQlyZXN1bHQgPSBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMobW9kdWxlSWQpOwovKioqKioqLyAJCQkJCX0gZWxzZSB7Ci8qKioqKiovIAkJCQkJCXJlc3VsdCA9IHsKLyoqKioqKi8gCQkJCQkJCXR5cGU6ICJkaXNwb3NlZCIsCi8qKioqKiovIAkJCQkJCQltb2R1bGVJZDogbW9kdWxlSWQKLyoqKioqKi8gCQkJCQkJfTsKLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQkJLyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi8KLyoqKioqKi8gCQkJCQl2YXIgYWJvcnRFcnJvciA9IGZhbHNlOwovKioqKioqLyAJCQkJCXZhciBkb0FwcGx5ID0gZmFsc2U7Ci8qKioqKiovIAkJCQkJdmFyIGRvRGlzcG9zZSA9IGZhbHNlOwovKioqKioqLyAJCQkJCXZhciBjaGFpbkluZm8gPSAiIjsKLyoqKioqKi8gCQkJCQlpZiAocmVzdWx0LmNoYWluKSB7Ci8qKioqKiovIAkJCQkJCWNoYWluSW5mbyA9ICJcblVwZGF0ZSBwcm9wYWdhdGlvbjogIiArIHJlc3VsdC5jaGFpbi5qb2luKCIgLT4gIik7Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJCXN3aXRjaCAocmVzdWx0LnR5cGUpIHsKLyoqKioqKi8gCQkJCQkJY2FzZSAic2VsZi1kZWNsaW5lZCI6Ci8qKioqKiovIAkJCQkJCQlpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTsKLyoqKioqKi8gCQkJCQkJCWlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZCkKLyoqKioqKi8gCQkJCQkJCQlhYm9ydEVycm9yID0gbmV3IEVycm9yKAovKioqKioqLyAJCQkJCQkJCQkiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogIiArCi8qKioqKiovIAkJCQkJCQkJCQlyZXN1bHQubW9kdWxlSWQgKwovKioqKioqLyAJCQkJCQkJCQkJY2hhaW5JbmZvCi8qKioqKiovIAkJCQkJCQkJKTsKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCQljYXNlICJkZWNsaW5lZCI6Ci8qKioqKiovIAkJCQkJCQlpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTsKLyoqKioqKi8gCQkJCQkJCWlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZCkKLyoqKioqKi8gCQkJCQkJCQlhYm9ydEVycm9yID0gbmV3IEVycm9yKAovKioqKioqLyAJCQkJCQkJCQkiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6ICIgKwovKioqKioqLyAJCQkJCQkJCQkJcmVzdWx0Lm1vZHVsZUlkICsKLyoqKioqKi8gCQkJCQkJCQkJCSIgaW4gIiArCi8qKioqKiovIAkJCQkJCQkJCQlyZXN1bHQucGFyZW50SWQgKwovKioqKioqLyAJCQkJCQkJCQkJY2hhaW5JbmZvCi8qKioqKiovIAkJCQkJCQkJKTsKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCQljYXNlICJ1bmFjY2VwdGVkIjoKLyoqKioqKi8gCQkJCQkJCWlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTsKLyoqKioqKi8gCQkJCQkJCWlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKQovKioqKioqLyAJCQkJCQkJCWFib3J0RXJyb3IgPSBuZXcgRXJyb3IoCi8qKioqKiovIAkJCQkJCQkJCSJBYm9ydGVkIGJlY2F1c2UgIiArIG1vZHVsZUlkICsgIiBpcyBub3QgYWNjZXB0ZWQiICsgY2hhaW5JbmZvCi8qKioqKiovIAkJCQkJCQkJKTsKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCQljYXNlICJhY2NlcHRlZCI6Ci8qKioqKiovIAkJCQkJCQlpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTsKLyoqKioqKi8gCQkJCQkJCWRvQXBwbHkgPSB0cnVlOwovKioqKioqLyAJCQkJCQkJYnJlYWs7Ci8qKioqKiovIAkJCQkJCWNhc2UgImRpc3Bvc2VkIjoKLyoqKioqKi8gCQkJCQkJCWlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpOwovKioqKioqLyAJCQkJCQkJZG9EaXNwb3NlID0gdHJ1ZTsKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCQlkZWZhdWx0OgovKioqKioqLyAJCQkJCQkJdGhyb3cgbmV3IEVycm9yKCJVbmV4Y2VwdGlvbiB0eXBlICIgKyByZXN1bHQudHlwZSk7Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJCWlmIChhYm9ydEVycm9yKSB7Ci8qKioqKiovIAkJCQkJCXJldHVybiB7Ci8qKioqKiovIAkJCQkJCQllcnJvcjogYWJvcnRFcnJvcgovKioqKioqLyAJCQkJCQl9OwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCQlpZiAoZG9BcHBseSkgewovKioqKioqLyAJCQkJCQlhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IG5ld01vZHVsZUZhY3Rvcnk7Ci8qKioqKiovIAkJCQkJCWFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7Ci8qKioqKiovIAkJCQkJCWZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7Ci8qKioqKiovIAkJCQkJCQlpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7Ci8qKioqKiovIAkJCQkJCQkJaWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pCi8qKioqKiovIAkJCQkJCQkJCW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdOwovKioqKioqLyAJCQkJCQkJCWFkZEFsbFRvU2V0KAovKioqKioqLyAJCQkJCQkJCQlvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sCi8qKioqKiovIAkJCQkJCQkJCXJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0KLyoqKioqKi8gCQkJCQkJCQkpOwovKioqKioqLyAJCQkJCQkJfQovKioqKioqLyAJCQkJCQl9Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJCWlmIChkb0Rpc3Bvc2UpIHsKLyoqKioqKi8gCQkJCQkJYWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7Ci8qKioqKiovIAkJCQkJCWFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlOwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQljdXJyZW50VXBkYXRlID0gdW5kZWZpbmVkOwovKioqKioqLyAJCQovKioqKioqLyAJCQkvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtCi8qKioqKiovIAkJCXZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTsKLyoqKioqKi8gCQkJZm9yICh2YXIgaiA9IDA7IGogPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBqKyspIHsKLyoqKioqKi8gCQkJCXZhciBvdXRkYXRlZE1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2pdOwovKioqKioqLyAJCQkJdmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTsKLyoqKioqKi8gCQkJCWlmICgKLyoqKioqKi8gCQkJCQltb2R1bGUgJiYKLyoqKioqKi8gCQkJCQkobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkIHx8IG1vZHVsZS5ob3QuX21haW4pICYmCi8qKioqKiovIAkJCQkJLy8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZAovKioqKioqLyAJCQkJCWFwcGxpZWRVcGRhdGVbb3V0ZGF0ZWRNb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZSAmJgovKioqKioqLyAJCQkJCS8vIHdoZW4gY2FsbGVkIGludmFsaWRhdGUgc2VsZi1hY2NlcHRpbmcgaXMgbm90IHBvc3NpYmxlCi8qKioqKiovIAkJCQkJIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZAovKioqKioqLyAJCQkJKSB7Ci8qKioqKiovIAkJCQkJb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goewovKioqKioqLyAJCQkJCQltb2R1bGU6IG91dGRhdGVkTW9kdWxlSWQsCi8qKioqKiovIAkJCQkJCXJlcXVpcmU6IG1vZHVsZS5ob3QuX3JlcXVpcmVTZWxmLAovKioqKioqLyAJCQkJCQllcnJvckhhbmRsZXI6IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZAovKioqKioqLyAJCQkJCX0pOwovKioqKioqLyAJCQkJfQovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCXZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llczsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJcmV0dXJuIHsKLyoqKioqKi8gCQkJCWRpc3Bvc2U6IGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQljdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7Ci8qKioqKiovIAkJCQkJCWRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07Ci8qKioqKiovIAkJCQkJfSk7Ci8qKioqKiovIAkJCQkJY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSB1bmRlZmluZWQ7Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCQkJdmFyIGlkeDsKLyoqKioqKi8gCQkJCQl2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTsKLyoqKioqKi8gCQkJCQl3aGlsZSAocXVldWUubGVuZ3RoID4gMCkgewovKioqKioqLyAJCQkJCQl2YXIgbW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTsKLyoqKioqKi8gCQkJCQkJdmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07Ci8qKioqKiovIAkJCQkJCWlmICghbW9kdWxlKSBjb250aW51ZTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQkJdmFyIGRhdGEgPSB7fTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQkJLy8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzCi8qKioqKiovIAkJCQkJCXZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7Ci8qKioqKiovIAkJCQkJCWZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHsKLyoqKioqKi8gCQkJCQkJCWRpc3Bvc2VIYW5kbGVyc1tqXS5jYWxsKG51bGwsIGRhdGEpOwovKioqKioqLyAJCQkJCQl9Ci8qKioqKiovIAkJCQkJCV9fd2VicGFja19yZXF1aXJlX18uaG1yRFttb2R1bGVJZF0gPSBkYXRhOwovKioqKioqLyAJCQovKioqKioqLyAJCQkJCQkvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKQovKioqKioqLyAJCQkJCQltb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlOwovKioqKioqLyAJCQovKioqKioqLyAJCQkJCQkvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGUKLyoqKioqKi8gCQkJCQkJZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCQkJCS8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXIKLyoqKioqKi8gCQkJCQkJZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQkJLy8gcmVtb3ZlICJwYXJlbnRzIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuCi8qKioqKiovIAkJCQkJCWZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHsKLyoqKioqKi8gCQkJCQkJCXZhciBjaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGUuY2hpbGRyZW5bal1dOwovKioqKioqLyAJCQkJCQkJaWYgKCFjaGlsZCkgY29udGludWU7Ci8qKioqKiovIAkJCQkJCQlpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpOwovKioqKioqLyAJCQkJCQkJaWYgKGlkeCA+PSAwKSB7Ci8qKioqKiovIAkJCQkJCQkJY2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTsKLyoqKioqKi8gCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJfQovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQkvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlbgovKioqKioqLyAJCQkJCXZhciBkZXBlbmRlbmN5OwovKioqKioqLyAJCQkJCWZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHsKLyoqKioqKi8gCQkJCQkJaWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHsKLyoqKioqKi8gCQkJCQkJCW1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTsKLyoqKioqKi8gCQkJCQkJCWlmIChtb2R1bGUpIHsKLyoqKioqKi8gCQkJCQkJCQltb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9Ci8qKioqKiovIAkJCQkJCQkJCW91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdOwovKioqKioqLyAJCQkJCQkJCWZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykgewovKioqKioqLyAJCQkJCQkJCQlkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07Ci8qKioqKiovIAkJCQkJCQkJCWlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpOwovKioqKioqLyAJCQkJCQkJCQlpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTsKLyoqKioqKi8gCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCX0KLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQl9LAovKioqKioqLyAJCQkJYXBwbHk6IGZ1bmN0aW9uIChyZXBvcnRFcnJvcikgewovKioqKioqLyAJCQkJCS8vIGluc2VydCBuZXcgY29kZQovKioqKioqLyAJCQkJCWZvciAodmFyIHVwZGF0ZU1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHsKLyoqKioqKi8gCQkJCQkJaWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhhcHBsaWVkVXBkYXRlLCB1cGRhdGVNb2R1bGVJZCkpIHsKLyoqKioqKi8gCQkJCQkJCV9fd2VicGFja19yZXF1aXJlX18ubVt1cGRhdGVNb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW3VwZGF0ZU1vZHVsZUlkXTsKLyoqKioqKi8gCQkJCQkJfQovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQkvLyBydW4gbmV3IHJ1bnRpbWUgbW9kdWxlcwovKioqKioqLyAJCQkJCWZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFVwZGF0ZVJ1bnRpbWUubGVuZ3RoOyBpKyspIHsKLyoqKioqKi8gCQkJCQkJY3VycmVudFVwZGF0ZVJ1bnRpbWVbaV0oX193ZWJwYWNrX3JlcXVpcmVfXyk7Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQovKioqKioqLyAJCQkJCS8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzCi8qKioqKiovIAkJCQkJZm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykgewovKioqKioqLyAJCQkJCQlpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkgewovKioqKioqLyAJCQkJCQkJdmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTsKLyoqKioqKi8gCQkJCQkJCWlmIChtb2R1bGUpIHsKLyoqKioqKi8gCQkJCQkJCQltb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9Ci8qKioqKiovIAkJCQkJCQkJCW91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdOwovKioqKioqLyAJCQkJCQkJCXZhciBjYWxsYmFja3MgPSBbXTsKLyoqKioqKi8gCQkJCQkJCQl2YXIgZXJyb3JIYW5kbGVycyA9IFtdOwovKioqKioqLyAJCQkJCQkJCXZhciBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MgPSBbXTsKLyoqKioqKi8gCQkJCQkJCQlmb3IgKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7Ci8qKioqKiovIAkJCQkJCQkJCXZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07Ci8qKioqKiovIAkJCQkJCQkJCXZhciBhY2NlcHRDYWxsYmFjayA9Ci8qKioqKiovIAkJCQkJCQkJCQltb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTsKLyoqKioqKi8gCQkJCQkJCQkJdmFyIGVycm9ySGFuZGxlciA9Ci8qKioqKiovIAkJCQkJCQkJCQltb2R1bGUuaG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwZW5kZW5jeV07Ci8qKioqKiovIAkJCQkJCQkJCWlmIChhY2NlcHRDYWxsYmFjaykgewovKioqKioqLyAJCQkJCQkJCQkJaWYgKGNhbGxiYWNrcy5pbmRleE9mKGFjY2VwdENhbGxiYWNrKSAhPT0gLTEpIGNvbnRpbnVlOwovKioqKioqLyAJCQkJCQkJCQkJY2FsbGJhY2tzLnB1c2goYWNjZXB0Q2FsbGJhY2spOwovKioqKioqLyAJCQkJCQkJCQkJZXJyb3JIYW5kbGVycy5wdXNoKGVycm9ySGFuZGxlcik7Ci8qKioqKiovIAkJCQkJCQkJCQlkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MucHVzaChkZXBlbmRlbmN5KTsKLyoqKioqKi8gCQkJCQkJCQkJfQovKioqKioqLyAJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQlmb3IgKHZhciBrID0gMDsgayA8IGNhbGxiYWNrcy5sZW5ndGg7IGsrKykgewovKioqKioqLyAJCQkJCQkJCQl0cnkgewovKioqKioqLyAJCQkJCQkJCQkJY2FsbGJhY2tzW2tdLmNhbGwobnVsbCwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpOwovKioqKioqLyAJCQkJCQkJCQl9IGNhdGNoIChlcnIpIHsKLyoqKioqKi8gCQkJCQkJCQkJCWlmICh0eXBlb2YgZXJyb3JIYW5kbGVyc1trXSA9PT0gImZ1bmN0aW9uIikgewovKioqKioqLyAJCQkJCQkJCQkJCXRyeSB7Ci8qKioqKiovIAkJCQkJCQkJCQkJCWVycm9ySGFuZGxlcnNba10oZXJyLCB7Ci8qKioqKiovIAkJCQkJCQkJCQkJCQltb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCwKLyoqKioqKi8gCQkJCQkJCQkJCQkJCWRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdCi8qKioqKiovIAkJCQkJCQkJCQkJCX0pOwovKioqKioqLyAJCQkJCQkJCQkJCX0gY2F0Y2ggKGVycjIpIHsKLyoqKioqKi8gCQkJCQkJCQkJCQkJaWYgKG9wdGlvbnMub25FcnJvcmVkKSB7Ci8qKioqKiovIAkJCQkJCQkJCQkJCQlvcHRpb25zLm9uRXJyb3JlZCh7Ci8qKioqKiovIAkJCQkJCQkJCQkJCQkJdHlwZTogImFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWQiLAovKioqKioqLyAJCQkJCQkJCQkJCQkJCW1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLAovKioqKioqLyAJCQkJCQkJCQkJCQkJCWRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLAovKioqKioqLyAJCQkJCQkJCQkJCQkJCWVycm9yOiBlcnIyLAovKioqKioqLyAJCQkJCQkJCQkJCQkJCW9yaWdpbmFsRXJyb3I6IGVycgovKioqKioqLyAJCQkJCQkJCQkJCQkJfSk7Ci8qKioqKiovIAkJCQkJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQkJCQkJaWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHsKLyoqKioqKi8gCQkJCQkJCQkJCQkJCXJlcG9ydEVycm9yKGVycjIpOwovKioqKioqLyAJCQkJCQkJCQkJCQkJcmVwb3J0RXJyb3IoZXJyKTsKLyoqKioqKi8gCQkJCQkJCQkJCQkJfQovKioqKioqLyAJCQkJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQkJCX0gZWxzZSB7Ci8qKioqKiovIAkJCQkJCQkJCQkJaWYgKG9wdGlvbnMub25FcnJvcmVkKSB7Ci8qKioqKiovIAkJCQkJCQkJCQkJCW9wdGlvbnMub25FcnJvcmVkKHsKLyoqKioqKi8gCQkJCQkJCQkJCQkJCXR5cGU6ICJhY2NlcHQtZXJyb3JlZCIsCi8qKioqKiovIAkJCQkJCQkJCQkJCQltb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCwKLyoqKioqKi8gCQkJCQkJCQkJCQkJCWRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLAovKioqKioqLyAJCQkJCQkJCQkJCQkJZXJyb3I6IGVycgovKioqKioqLyAJCQkJCQkJCQkJCQl9KTsKLyoqKioqKi8gCQkJCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQkJCQkJaWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHsKLyoqKioqKi8gCQkJCQkJCQkJCQkJcmVwb3J0RXJyb3IoZXJyKTsKLyoqKioqKi8gCQkJCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCX0KLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCQkJLy8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXMKLyoqKioqKi8gCQkJCQlmb3IgKHZhciBvID0gMDsgbyA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IG8rKykgewovKioqKioqLyAJCQkJCQl2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tvXTsKLyoqKioqKi8gCQkJCQkJdmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7Ci8qKioqKiovIAkJCQkJCXRyeSB7Ci8qKioqKiovIAkJCQkJCQlpdGVtLnJlcXVpcmUobW9kdWxlSWQpOwovKioqKioqLyAJCQkJCQl9IGNhdGNoIChlcnIpIHsKLyoqKioqKi8gCQkJCQkJCWlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09ICJmdW5jdGlvbiIpIHsKLyoqKioqKi8gCQkJCQkJCQl0cnkgewovKioqKioqLyAJCQkJCQkJCQlpdGVtLmVycm9ySGFuZGxlcihlcnIsIHsKLyoqKioqKi8gCQkJCQkJCQkJCW1vZHVsZUlkOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJCQkJCQkJCW1vZHVsZTogX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXQovKioqKioqLyAJCQkJCQkJCQl9KTsKLyoqKioqKi8gCQkJCQkJCQl9IGNhdGNoIChlcnIyKSB7Ci8qKioqKiovIAkJCQkJCQkJCWlmIChvcHRpb25zLm9uRXJyb3JlZCkgewovKioqKioqLyAJCQkJCQkJCQkJb3B0aW9ucy5vbkVycm9yZWQoewovKioqKioqLyAJCQkJCQkJCQkJCXR5cGU6ICJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWQiLAovKioqKioqLyAJCQkJCQkJCQkJCW1vZHVsZUlkOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJCQkJCQkJCQllcnJvcjogZXJyMiwKLyoqKioqKi8gCQkJCQkJCQkJCQlvcmlnaW5hbEVycm9yOiBlcnIKLyoqKioqKi8gCQkJCQkJCQkJCX0pOwovKioqKioqLyAJCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQkJCWlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7Ci8qKioqKiovIAkJCQkJCQkJCQlyZXBvcnRFcnJvcihlcnIyKTsKLyoqKioqKi8gCQkJCQkJCQkJCXJlcG9ydEVycm9yKGVycik7Ci8qKioqKiovIAkJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQl9IGVsc2UgewovKioqKioqLyAJCQkJCQkJCWlmIChvcHRpb25zLm9uRXJyb3JlZCkgewovKioqKioqLyAJCQkJCQkJCQlvcHRpb25zLm9uRXJyb3JlZCh7Ci8qKioqKiovIAkJCQkJCQkJCQl0eXBlOiAic2VsZi1hY2NlcHQtZXJyb3JlZCIsCi8qKioqKiovIAkJCQkJCQkJCQltb2R1bGVJZDogbW9kdWxlSWQsCi8qKioqKiovIAkJCQkJCQkJCQllcnJvcjogZXJyCi8qKioqKiovIAkJCQkJCQkJCX0pOwovKioqKioqLyAJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQlpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkgewovKioqKioqLyAJCQkJCQkJCQlyZXBvcnRFcnJvcihlcnIpOwovKioqKioqLyAJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJfQovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQlyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzOwovKioqKioqLyAJCQkJfQovKioqKioqLyAJCQl9OwovKioqKioqLyAJCX0KLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkuanNvbnAgPSBmdW5jdGlvbiAobW9kdWxlSWQsIGFwcGx5SGFuZGxlcnMpIHsKLyoqKioqKi8gCQkJaWYgKCFjdXJyZW50VXBkYXRlKSB7Ci8qKioqKiovIAkJCQljdXJyZW50VXBkYXRlID0ge307Ci8qKioqKiovIAkJCQljdXJyZW50VXBkYXRlUnVudGltZSA9IFtdOwovKioqKioqLyAJCQkJY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSBbXTsKLyoqKioqKi8gCQkJCWFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJCWlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkgewovKioqKioqLyAJCQkJY3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMuanNvbnAgPSBmdW5jdGlvbiAoCi8qKioqKiovIAkJCWNodW5rSWRzLAovKioqKioqLyAJCQlyZW1vdmVkQ2h1bmtzLAovKioqKioqLyAJCQlyZW1vdmVkTW9kdWxlcywKLyoqKioqKi8gCQkJcHJvbWlzZXMsCi8qKioqKiovIAkJCWFwcGx5SGFuZGxlcnMsCi8qKioqKiovIAkJCXVwZGF0ZWRNb2R1bGVzTGlzdAovKioqKioqLyAJCSkgewovKioqKioqLyAJCQlhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTsKLyoqKioqKi8gCQkJY3VycmVudFVwZGF0ZUNodW5rcyA9IHt9OwovKioqKioqLyAJCQljdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHJlbW92ZWRDaHVua3M7Ci8qKioqKiovIAkJCWN1cnJlbnRVcGRhdGUgPSByZW1vdmVkTW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7Ci8qKioqKiovIAkJCQlvYmpba2V5XSA9IGZhbHNlOwovKioqKioqLyAJCQkJcmV0dXJuIG9iajsKLyoqKioqKi8gCQkJfSwge30pOwovKioqKioqLyAJCQljdXJyZW50VXBkYXRlUnVudGltZSA9IFtdOwovKioqKioqLyAJCQljaHVua0lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7Ci8qKioqKiovIAkJCQlpZiAoCi8qKioqKiovIAkJCQkJX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYKLyoqKioqKi8gCQkJCQlpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZAovKioqKioqLyAJCQkJKSB7Ci8qKioqKiovIAkJCQkJcHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgdXBkYXRlZE1vZHVsZXNMaXN0KSk7Ci8qKioqKiovIAkJCQkJY3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7Ci8qKioqKiovIAkJCQl9IGVsc2UgewovKioqKioqLyAJCQkJCWN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSBmYWxzZTsKLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfSk7Ci8qKioqKiovIAkJCWlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIHsKLyoqKioqKi8gCQkJCV9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykgewovKioqKioqLyAJCQkJCWlmICgKLyoqKioqKi8gCQkJCQkJY3VycmVudFVwZGF0ZUNodW5rcyAmJgovKioqKioqLyAJCQkJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZUNodW5rcywgY2h1bmtJZCkgJiYKLyoqKioqKi8gCQkJCQkJIWN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0KLyoqKioqKi8gCQkJCQkpIHsKLyoqKioqKi8gCQkJCQkJcHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkpOwovKioqKioqLyAJCQkJCQljdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTsKLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQl9OwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0gPSAoKSA9PiB7Ci8qKioqKiovIAkJCWlmICh0eXBlb2YgZmV0Y2ggPT09ICJ1bmRlZmluZWQiKSB0aHJvdyBuZXcgRXJyb3IoIk5vIGJyb3dzZXIgc3VwcG9ydDogbmVlZCBmZXRjaCBBUEkiKTsKLyoqKioqKi8gCQkJcmV0dXJuIGZldGNoKF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaG1yRigpKS50aGVuKChyZXNwb25zZSkgPT4gewovKioqKioqLyAJCQkJaWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybjsgLy8gbm8gdXBkYXRlIGF2YWlsYWJsZQovKioqKioqLyAJCQkJaWYoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byBmZXRjaCB1cGRhdGUgbWFuaWZlc3QgIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpOwovKioqKioqLyAJCQkJcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKLyoqKioqKi8gCQkJfSk7Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkvLyBubyBvbiBjaHVua3MgbG9hZGVkCi8qKioqKiovIAkJCi8qKioqKiovIAkJLy8gbm8ganNvbnAgZnVuY3Rpb24KLyoqKioqKi8gCX0pKCk7Ci8qKioqKiovIAkKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gCQovKioqKioqLyAJLy8gbW9kdWxlIGNhY2hlIGFyZSB1c2VkIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkCi8qKioqKiovIAkvLyBzdGFydHVwCi8qKioqKiovIAkvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18oIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vY2xpZW50L1JlYWN0UmVmcmVzaEVudHJ5LmpzIik7Ci8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fKCIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC00MzdiOGIzZDI5LzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9pbmRleC5qcz9wcm90b2NvbD13cyUzQSZob3N0bmFtZT1sb2NhbGhvc3QmcG9ydD05MDAxJnBhdGhuYW1lPSUyRndzJmxvZ2dpbmc9aW5mbyZvdmVybGF5PXRydWUmcmVjb25uZWN0PTEwJmhvdD10cnVlJmxpdmUtcmVsb2FkPXRydWUiKTsKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18oIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stdmlydHVhbC1lYmU2NWUwN2JmLzAvY2FjaGUvd2VicGFjay1ucG0tNS43OC4wLWFkZDc2MmM5NzItNDIxM2U1YmNjMi56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2Rldi1zZXJ2ZXIuanMiKTsKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18oIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL0BwbW1td2gtcmVhY3QtcmVmcmVzaC13ZWJwYWNrLXBsdWdpbi12aXJ0dWFsLWU1MTVhZDY3YTAvMC9jYWNoZS9AcG1tbXdoLXJlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4tbnBtLTAuNS4xMC0wOTI4ZDE3OThhLWM0NWJlZGVkOWMuemlwL25vZGVfbW9kdWxlcy9AcG1tbXdoL3JlYWN0LXJlZnJlc2gtd2VicGFjay1wbHVnaW4vY2xpZW50L0Vycm9yT3ZlcmxheUVudHJ5LmpzP3NvY2tIb3N0PWxvY2FsaG9zdCZzb2NrUHJvdG9jb2w9aHR0cCIpOwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXygiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLXZpcnR1YWwtMjAyOGFlMzEyYS8wL2NhY2hlL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC1ucG0tMi4zLjctNWYwMDVjNjkzOS02YTI5NGFhNDUyLnppcC9ub2RlX21vZHVsZXMvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wL2F1dG8tcHVibGljLXBhdGgvMS5qcyIpOwovKioqKioqLyAJdmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKCIuL3NyYy9tbWEtYXBwMS50c3giKTsKLyoqKioqKi8gCQovKioqKioqLyAJcmV0dXJuIF9fd2VicGFja19leHBvcnRzX187Ci8qKioqKiovIH0pKCkKCgkJCSk7CgkJfQoJfTsKfSk7Ci8vIyBzb3VyY2VNYXBwaW5nVVJMPW1tYS1hcHAxLmpzLm1hcA==",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 278,
          "bodySize": -43,
          "_transferSize": 235,
          "_error": null
        },
        "serverIPAddress": "[::1]",
        "startedDateTime": "2023-04-10T17:57:16.949Z",
        "time": 18.58600000073237,
        "timings": {
          "blocked": 4.401000000173109,
          "dns": 0.008999999999999952,
          "ssl": -1,
          "connect": 0.6300000000000001,
          "send": 0.21699999999999986,
          "wait": 10.408999999746099,
          "receive": 2.920000000813161,
          "_blocked_queueing": 3.9390000001731096
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "WebSocketClient",
                "scriptId": "1368",
                "url": "http://localhost:9000/mma-root-config.js",
                "lineNumber": 205,
                "columnNumber": 18
              },
              {
                "functionName": "initSocket",
                "scriptId": "1368",
                "url": "http://localhost:9000/mma-root-config.js",
                "lineNumber": 1933,
                "columnNumber": 11
              },
              {
                "functionName": "../../.yarn/__virtual__/webpack-dev-server-virtual-afb283837d/0/cache/webpack-dev-server-npm-4.13.2-72cc544a84-9bf573abf0.zip/node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=localhost&port=9000&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true",
                "scriptId": "1368",
                "url": "http://localhost:9000/mma-root-config.js",
                "lineNumber": 552,
                "columnNumber": 54
              },
              {
                "functionName": "__webpack_require__",
                "scriptId": "1368",
                "url": "http://localhost:9000/mma-root-config.js",
                "lineNumber": 3577,
                "columnNumber": 32
              },
              {
                "functionName": "",
                "scriptId": "1368",
                "url": "http://localhost:9000/mma-root-config.js",
                "lineNumber": 4625,
                "columnNumber": 10
              },
              {
                "functionName": "execute",
                "scriptId": "1368",
                "url": "http://localhost:9000/mma-root-config.js",
                "lineNumber": 4631,
                "columnNumber": 11
              },
              {
                "functionName": "doExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 468,
                "columnNumber": 33
              },
              {
                "functionName": "postOrderExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 464,
                "columnNumber": 11
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 421,
                "columnNumber": 13
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "topLevelLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 420,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 230,
                  "columnNumber": 23
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 228,
                    "columnNumber": 5
                  },
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 774,
                    "columnNumber": 18
                  },
                  {
                    "functionName": "",
                    "scriptId": "1365",
                    "url": "http://localhost:9000/",
                    "lineNumber": 81,
                    "columnNumber": 17
                  }
                ]
              }
            }
          }
        },
        "_priority": null,
        "_resourceType": "websocket",
        "_webSocketMessages": [
          {
            "type": "receive",
            "time": 1681149436.961975,
            "opcode": 1,
            "data": "{\"type\":\"hot\"}"
          },
          {
            "type": "receive",
            "time": 1681149436.962239,
            "opcode": 1,
            "data": "{\"type\":\"liveReload\"}"
          },
          {
            "type": "receive",
            "time": 1681149436.962381,
            "opcode": 1,
            "data": "{\"type\":\"reconnect\",\"data\":10}"
          },
          {
            "type": "receive",
            "time": 1681149436.962561,
            "opcode": 1,
            "data": "{\"type\":\"overlay\",\"data\":true}"
          },
          {
            "type": "receive",
            "time": 1681149436.962675,
            "opcode": 1,
            "data": "{\"type\":\"hash\",\"data\":\"aadb4150b7eb804e9c6e\"}"
          },
          {
            "type": "receive",
            "time": 1681149436.962786,
            "opcode": 1,
            "data": "{\"type\":\"ok\"}"
          }
        ],
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "ws://localhost:9000/ws",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Origin",
              "value": "http://localhost:9000"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:9000"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Sec-WebSocket-Key",
              "value": "665gJlk9Ye/SvdVTfaWZdw=="
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Version",
              "value": "13"
            },
            {
              "name": "Sec-WebSocket-Extensions",
              "value": "permessage-deflate; client_max_window_bits"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 554,
          "bodySize": 0
        },
        "response": {
          "status": 101,
          "statusText": "Switching Protocols",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Accept",
              "value": "xiqdRb3AnoBxCf5FTz9L+X9sGNQ="
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": 129
          },
          "redirectURL": "",
          "headersSize": 129,
          "bodySize": -129,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2023-04-10T17:57:16.959Z",
        "time": 3.67999999980384,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 3.67999999980384,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 653,
                "columnNumber": 20
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 633,
                "columnNumber": 11
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 671,
                "columnNumber": 25
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 707,
                "columnNumber": 29
              },
              {
                "functionName": "systemPrototype.instantiate",
                "scriptId": "1360",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js",
                "lineNumber": 84,
                "columnNumber": 23
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 282,
                "columnNumber": 20
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "getOrCreateLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 281,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 338,
                  "columnNumber": 24
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 337,
                    "columnNumber": 9
                  },
                  {
                    "functionName": "",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 334,
                    "columnNumber": 42
                  }
                ],
                "parent": {
                  "description": "Promise.then",
                  "callFrames": [
                    {
                      "functionName": "getOrCreateLoad",
                      "scriptId": "1359",
                      "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                      "lineNumber": 333,
                      "columnNumber": 5
                    },
                    {
                      "functionName": "",
                      "scriptId": "1359",
                      "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                      "lineNumber": 229,
                      "columnNumber": 17
                    }
                  ],
                  "parent": {
                    "description": "Promise.then",
                    "callFrames": [
                      {
                        "functionName": "systemJSPrototype.import",
                        "scriptId": "1359",
                        "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                        "lineNumber": 228,
                        "columnNumber": 5
                      },
                      {
                        "functionName": "systemJSPrototype.import",
                        "scriptId": "1359",
                        "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                        "lineNumber": 774,
                        "columnNumber": 18
                      },
                      {
                        "functionName": "app",
                        "scriptId": "1368",
                        "url": "http://localhost:9000/mma-root-config.js",
                        "lineNumber": 29,
                        "columnNumber": 27
                      },
                      {
                        "functionName": "",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 9744
                      }
                    ],
                    "parent": {
                      "description": "Promise.then",
                      "callFrames": [
                        {
                          "functionName": "",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 9719
                        }
                      ],
                      "parent": {
                        "description": "Promise.then",
                        "callFrames": [
                          {
                            "functionName": "X",
                            "scriptId": "1372",
                            "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                            "lineNumber": 1,
                            "columnNumber": 9594
                          },
                          {
                            "functionName": "",
                            "scriptId": "1372",
                            "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                            "lineNumber": 1,
                            "columnNumber": 17833
                          }
                        ],
                        "parent": {
                          "description": "Promise.then",
                          "callFrames": [
                            {
                              "functionName": "d",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 17808
                            },
                            {
                              "functionName": "Rt",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 17747
                            },
                            {
                              "functionName": "Pt",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 15763
                            },
                            {
                              "functionName": "./src/mma-root-config.ts",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 26,
                              "columnNumber": 63
                            },
                            {
                              "functionName": "__webpack_require__",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 3577,
                              "columnNumber": 32
                            },
                            {
                              "functionName": "",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 4628,
                              "columnNumber": 36
                            },
                            {
                              "functionName": "execute",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 4631,
                              "columnNumber": 11
                            },
                            {
                              "functionName": "doExec",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 468,
                              "columnNumber": 33
                            },
                            {
                              "functionName": "postOrderExec",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 464,
                              "columnNumber": 11
                            },
                            {
                              "functionName": "",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 421,
                              "columnNumber": 13
                            }
                          ],
                          "parent": {
                            "description": "Promise.then",
                            "callFrames": [
                              {
                                "functionName": "topLevelLoad",
                                "scriptId": "1359",
                                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                "lineNumber": 420,
                                "columnNumber": 5
                              },
                              {
                                "functionName": "",
                                "scriptId": "1359",
                                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                "lineNumber": 230,
                                "columnNumber": 23
                              }
                            ],
                            "parent": {
                              "description": "Promise.then",
                              "callFrames": [
                                {
                                  "functionName": "systemJSPrototype.import",
                                  "scriptId": "1359",
                                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                  "lineNumber": 228,
                                  "columnNumber": 5
                                },
                                {
                                  "functionName": "systemJSPrototype.import",
                                  "scriptId": "1359",
                                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                  "lineNumber": 774,
                                  "columnNumber": 18
                                },
                                {
                                  "functionName": "",
                                  "scriptId": "1365",
                                  "url": "http://localhost:9000/",
                                  "lineNumber": 81,
                                  "columnNumber": 17
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "https://cdn.jsdelivr.net/npm/react@17.0.2/umd/react.development.min.js",
          "httpVersion": "http/2.0",
          "headers": [],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "*"
            },
            {
              "name": "age",
              "value": "2263311"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000, s-maxage=31536000, immutable"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "content-length",
              "value": "11448"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "date",
              "value": "Mon, 10 Apr 2023 17:42:30 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"79f6-PNM5oG3vHat3p541HYWsz+9l/jU\""
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-cache",
              "value": "HIT, HIT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "x-jsd-version",
              "value": "17.0.2"
            },
            {
              "name": "x-jsd-version-type",
              "value": "version"
            },
            {
              "name": "x-served-by",
              "value": "cache-fra-eddf8230058-FRA, cache-lcy-eglc8600036-LCY"
            }
          ],
          "cookies": [],
          "content": {
            "size": 31222,
            "mimeType": "application/javascript",
            "text": "/**\n * Minified by jsDelivr using Terser v5.3.5.\n * Original file: /npm/react@17.0.2/umd/react.development.js\n *\n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\n/** @license React v17.0.2\n * react.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?t(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],t):t((e=e||self).React={})}(this,(function(e){\"use strict\";var t=60103,r=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var n=60109,o=60110,a=60112;e.Suspense=60113;var u=60120,i=60115,c=60116,l=60121,s=60122,f=60117,p=60129,d=60131;if(\"function\"==typeof Symbol&&Symbol.for){var y=Symbol.for;t=y(\"react.element\"),r=y(\"react.portal\"),e.Fragment=y(\"react.fragment\"),e.StrictMode=y(\"react.strict_mode\"),e.Profiler=y(\"react.profiler\"),n=y(\"react.provider\"),o=y(\"react.context\"),a=y(\"react.forward_ref\"),e.Suspense=y(\"react.suspense\"),u=y(\"react.suspense_list\"),i=y(\"react.memo\"),c=y(\"react.lazy\"),l=y(\"react.block\"),s=y(\"react.server.block\"),f=y(\"react.fundamental\"),y(\"react.scope\"),y(\"react.opaque.id\"),p=y(\"react.debug_trace_mode\"),y(\"react.offscreen\"),d=y(\"react.legacy_hidden\")}var v=\"function\"==typeof Symbol&&Symbol.iterator;function m(e){if(null===e||\"object\"!=typeof e)return null;var t=v&&e[v]||e[\"@@iterator\"];return\"function\"==typeof t?t:null}var h=Object.prototype.hasOwnProperty,b=function(e,t){for(var r in t)h.call(t,r)&&(e[r]=t[r])},g=Object.assign||function(e,t){if(null==e)throw new TypeError(\"Object.assign target cannot be null or undefined\");for(var r=Object(e),n=1;n<arguments.length;n++){var o=arguments[n];null!=o&&b(r,Object(o))}return r},_={current:null},w={transition:0},k={current:null},C={},R=null;function S(e){R=e}C.setExtraStackFrame=function(e){R=e},C.getCurrentStack=null,C.getStackAddendum=function(){var e=\"\";R&&(e+=R);var t=C.getCurrentStack;return t&&(e+=t()||\"\"),e};var j={current:!1},P={ReactCurrentDispatcher:_,ReactCurrentBatchConfig:w,ReactCurrentOwner:k,IsSomeRendererActing:j,assign:g};function O(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];E(\"warn\",e,r)}function x(e){for(var t=arguments.length,r=new Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];E(\"error\",e,r)}function E(e,t,r){var n=P.ReactDebugCurrentFrame.getStackAddendum();\"\"!==n&&(t+=\"%s\",r=r.concat([n]));var o=r.map((function(e){return\"\"+e}));o.unshift(\"Warning: \"+t),Function.prototype.apply.call(console[e],console,o)}P.ReactDebugCurrentFrame=C;var T={};function $(e,t){var r=e.constructor,n=r&&(r.displayName||r.name)||\"ReactClass\",o=n+\".\"+t;T[o]||(x(\"Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.\",t,n),T[o]=!0)}var I={isMounted:function(e){return!1},enqueueForceUpdate:function(e,t,r){$(e,\"forceUpdate\")},enqueueReplaceState:function(e,t,r,n){$(e,\"replaceState\")},enqueueSetState:function(e,t,r,n){$(e,\"setState\")}},F={};function D(e,t,r){this.props=e,this.context=t,this.refs=F,this.updater=r||I}Object.freeze(F),D.prototype.isReactComponent={},D.prototype.setState=function(e,t){if(\"object\"!=typeof e&&\"function\"!=typeof e&&null!=e)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,e,t,\"setState\")},D.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,\"forceUpdate\")};var W={isMounted:[\"isMounted\",\"Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks.\"],replaceState:[\"replaceState\",\"Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236).\"]},A=function(e,t){Object.defineProperty(D.prototype,e,{get:function(){O(\"%s(...) is deprecated in plain JavaScript React classes. %s\",t[0],t[1])}})};for(var N in W)W.hasOwnProperty(N)&&A(N,W[N]);function M(){}function z(e,t,r){this.props=e,this.context=t,this.refs=F,this.updater=r||I}M.prototype=D.prototype;var L=z.prototype=new M;function U(e){return e.displayName||\"Context\"}function q(t){if(null==t)return null;if(\"number\"==typeof t.tag&&x(\"Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.\"),\"function\"==typeof t)return t.displayName||t.name||null;if(\"string\"==typeof t)return t;switch(t){case e.Fragment:return\"Fragment\";case r:return\"Portal\";case e.Profiler:return\"Profiler\";case e.StrictMode:return\"StrictMode\";case e.Suspense:return\"Suspense\";case u:return\"SuspenseList\"}if(\"object\"==typeof t)switch(t.$$typeof){case o:return U(t)+\".Consumer\";case n:return U(t._context)+\".Provider\";case a:return d=t,y=t.render,v=\"ForwardRef\",m=y.displayName||y.name||\"\",d.displayName||(\"\"!==m?v+\"(\"+m+\")\":v);case i:return q(t.type);case l:return q(t._render);case c:var s=t,f=s._payload,p=s._init;try{return q(p(f))}catch(e){return null}}var d,y,v,m;return null}L.constructor=z,g(L,D.prototype),L.isPureReactComponent=!0;var V,Y,B,H=Object.prototype.hasOwnProperty,J={key:!0,ref:!0,__self:!0,__source:!0};function X(e){if(H.call(e,\"ref\")){var t=Object.getOwnPropertyDescriptor(e,\"ref\").get;if(t&&t.isReactWarning)return!1}return void 0!==e.ref}function G(e){if(H.call(e,\"key\")){var t=Object.getOwnPropertyDescriptor(e,\"key\").get;if(t&&t.isReactWarning)return!1}return void 0!==e.key}function K(e,t){var r=function(){V||(V=!0,x(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",t))};r.isReactWarning=!0,Object.defineProperty(e,\"key\",{get:r,configurable:!0})}function Q(e,t){var r=function(){Y||(Y=!0,x(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",t))};r.isReactWarning=!0,Object.defineProperty(e,\"ref\",{get:r,configurable:!0})}function Z(e){if(\"string\"==typeof e.ref&&k.current&&e.__self&&k.current.stateNode!==e.__self){var t=q(k.current.type);B[t]||(x('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',t,e.ref),B[t]=!0)}}B={};var ee=function(e,r,n,o,a,u,i){var c={$$typeof:t,type:e,key:r,ref:n,props:i,_owner:u,_store:{}};return Object.defineProperty(c._store,\"validated\",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(c,\"_self\",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(c,\"_source\",{configurable:!1,enumerable:!1,writable:!1,value:a}),Object.freeze&&(Object.freeze(c.props),Object.freeze(c)),c};function te(e,t,r){var n,o={},a=null,u=null,i=null,c=null;if(null!=t)for(n in X(t)&&(u=t.ref,Z(t)),G(t)&&(a=\"\"+t.key),i=void 0===t.__self?null:t.__self,c=void 0===t.__source?null:t.__source,t)H.call(t,n)&&!J.hasOwnProperty(n)&&(o[n]=t[n]);var l=arguments.length-2;if(1===l)o.children=r;else if(l>1){for(var s=Array(l),f=0;f<l;f++)s[f]=arguments[f+2];Object.freeze&&Object.freeze(s),o.children=s}if(e&&e.defaultProps){var p=e.defaultProps;for(n in p)void 0===o[n]&&(o[n]=p[n])}if(a||u){var d=\"function\"==typeof e?e.displayName||e.name||\"Unknown\":e;a&&K(o,d),u&&Q(o,d)}return ee(e,a,u,i,c,k.current,o)}function re(e,t,r){if(null==e)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+e+\".\");var n,o,a=g({},e.props),u=e.key,i=e.ref,c=e._self,l=e._source,s=e._owner;if(null!=t)for(n in X(t)&&(i=t.ref,s=k.current),G(t)&&(u=\"\"+t.key),e.type&&e.type.defaultProps&&(o=e.type.defaultProps),t)H.call(t,n)&&!J.hasOwnProperty(n)&&(void 0===t[n]&&void 0!==o?a[n]=o[n]:a[n]=t[n]);var f=arguments.length-2;if(1===f)a.children=r;else if(f>1){for(var p=Array(f),d=0;d<f;d++)p[d]=arguments[d+2];a.children=p}return ee(e.type,u,i,c,l,s,a)}function ne(e){return\"object\"==typeof e&&null!==e&&e.$$typeof===t}var oe=!1,ae=/\\/+/g;function ue(e){return e.replace(ae,\"$&/\")}function ie(e,t){return\"object\"==typeof e&&null!==e&&null!=e.key?(r=\"\"+e.key,n={\"=\":\"=0\",\":\":\"=2\"},\"$\"+r.replace(/[=:]/g,(function(e){return n[e]}))):t.toString(36);var r,n}function ce(e,n,o,a,u){var i=typeof e;\"undefined\"!==i&&\"boolean\"!==i||(e=null);var c,l,s,f=!1;if(null===e)f=!0;else switch(i){case\"string\":case\"number\":f=!0;break;case\"object\":switch(e.$$typeof){case t:case r:f=!0}}if(f){var p=e,d=u(p),y=\"\"===a?\".\"+ie(p,0):a;if(Array.isArray(d)){var v=\"\";null!=y&&(v=ue(y)+\"/\"),ce(d,n,v,\"\",(function(e){return e}))}else null!=d&&(ne(d)&&(c=d,l=o+(!d.key||p&&p.key===d.key?\"\":ue(\"\"+d.key)+\"/\")+y,d=ee(c.type,l,c.ref,c._self,c._source,c._owner,c.props)),n.push(d));return 1}var h=0,b=\"\"===a?\".\":a+\":\";if(Array.isArray(e))for(var g=0;g<e.length;g++)h+=ce(s=e[g],n,o,b+ie(s,g),u);else{var _=m(e);if(\"function\"==typeof _){var w=e;_===w.entries&&(oe||O(\"Using Maps as children is not supported. Use an array of keyed ReactElements instead.\"),oe=!0);for(var k,C=_.call(w),R=0;!(k=C.next()).done;)h+=ce(s=k.value,n,o,b+ie(s,R++),u)}else if(\"object\"===i){var S=\"\"+e;throw Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===S?\"object with keys {\"+Object.keys(e).join(\", \")+\"}\":S)+\"). If you meant to render a collection of children, use an array instead.\")}}return h}function le(e,t,r){if(null==e)return e;var n=[],o=0;return ce(e,n,\"\",\"\",(function(e){return t.call(r,e,o++)})),n}function se(e){if(-1===e._status){var t=(0,e._result)(),r=e;r._status=0,r._result=t,t.then((function(t){if(0===e._status){var r=t.default;void 0===r&&x(\"lazy: Expected the result of a dynamic import() call. Instead received: %s\\n\\nYour code should look like: \\n  const MyComponent = lazy(() => import('./MyComponent'))\",t);var n=e;n._status=1,n._result=r}}),(function(t){if(0===e._status){var r=e;r._status=2,r._result=t}}))}if(1===e._status)return e._result;throw e._result}function fe(t){return\"string\"==typeof t||\"function\"==typeof t||(t===e.Fragment||t===e.Profiler||t===p||t===e.StrictMode||t===e.Suspense||t===u||t===d||\"object\"==typeof t&&null!==t&&(t.$$typeof===c||t.$$typeof===i||t.$$typeof===n||t.$$typeof===o||t.$$typeof===a||t.$$typeof===f||t.$$typeof===l||t[0]===s))}function pe(){var e=_.current;if(null===e)throw Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");return e}var de,ye,ve,me,he,be,ge,_e=0;function we(){}we.__reactDisabledLog=!0;var ke,Ce=P.ReactCurrentDispatcher;function Re(e,t,r){if(void 0===ke)try{throw Error()}catch(e){var n=e.stack.trim().match(/\\n( *(at )?)/);ke=n&&n[1]||\"\"}return\"\\n\"+ke+e}var Se,je=!1,Pe=\"function\"==typeof WeakMap?WeakMap:Map;function Oe(e,t){if(!e||je)return\"\";var r,n=Se.get(e);if(void 0!==n)return n;je=!0;var o,a=Error.prepareStackTrace;Error.prepareStackTrace=void 0,o=Ce.current,Ce.current=null,function(){if(0===_e){de=console.log,ye=console.info,ve=console.warn,me=console.error,he=console.group,be=console.groupCollapsed,ge=console.groupEnd;var e={configurable:!0,enumerable:!0,value:we,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}_e++}();try{if(t){var u=function(){throw Error()};if(Object.defineProperty(u.prototype,\"props\",{set:function(){throw Error()}}),\"object\"==typeof Reflect&&Reflect.construct){try{Reflect.construct(u,[])}catch(e){r=e}Reflect.construct(e,[],u)}else{try{u.call()}catch(e){r=e}e.call(u.prototype)}}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&\"string\"==typeof t.stack){for(var i=t.stack.split(\"\\n\"),c=r.stack.split(\"\\n\"),l=i.length-1,s=c.length-1;l>=1&&s>=0&&i[l]!==c[s];)s--;for(;l>=1&&s>=0;l--,s--)if(i[l]!==c[s]){if(1!==l||1!==s)do{if(l--,--s<0||i[l]!==c[s]){var f=\"\\n\"+i[l].replace(\" at new \",\" at \");return\"function\"==typeof e&&Se.set(e,f),f}}while(l>=1&&s>=0);break}}}finally{je=!1,Ce.current=o,function(){if(0==--_e){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:g({},e,{value:de}),info:g({},e,{value:ye}),warn:g({},e,{value:ve}),error:g({},e,{value:me}),group:g({},e,{value:he}),groupCollapsed:g({},e,{value:be}),groupEnd:g({},e,{value:ge})})}_e<0&&x(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\")}(),Error.prepareStackTrace=a}var p=e?e.displayName||e.name:\"\",d=p?Re(p):\"\";return\"function\"==typeof e&&Se.set(e,d),d}function xe(e,t,r){return Oe(e,!1)}function Ee(t,r,n){if(null==t)return\"\";if(\"function\"==typeof t)return Oe(t,function(e){var t=e.prototype;return!(!t||!t.isReactComponent)}(t));if(\"string\"==typeof t)return Re(t);switch(t){case e.Suspense:return Re(\"Suspense\");case u:return Re(\"SuspenseList\")}if(\"object\"==typeof t)switch(t.$$typeof){case a:return xe(t.render);case i:return Ee(t.type,r,n);case l:return xe(t._render);case c:var o=t,s=o._payload,f=o._init;try{return Ee(f(s),r,n)}catch(e){}}return\"\"}Se=new Pe;var Te,$e={},Ie=P.ReactDebugCurrentFrame;function Fe(e){if(e){var t=e._owner,r=Ee(e.type,e._source,t?t.type:null);Ie.setExtraStackFrame(r)}else Ie.setExtraStackFrame(null)}function De(e){if(e){var t=e._owner;S(Ee(e.type,e._source,t?t.type:null))}else S(null)}function We(){if(k.current){var e=q(k.current.type);if(e)return\"\\n\\nCheck the render method of `\"+e+\"`.\"}return\"\"}function Ae(e){return null!=e&&void 0!==(t=e.__source)?\"\\n\\nCheck your code at \"+t.fileName.replace(/^.*[\\\\\\/]/,\"\")+\":\"+t.lineNumber+\".\":\"\";var t}Te=!1;var Ne={};function Me(e,t){if(e._store&&!e._store.validated&&null==e.key){e._store.validated=!0;var r=function(e){var t=We();if(!t){var r=\"string\"==typeof e?e:e.displayName||e.name;r&&(t=\"\\n\\nCheck the top-level render call using <\"+r+\">.\")}return t}(t);if(!Ne[r]){Ne[r]=!0;var n=\"\";e&&e._owner&&e._owner!==k.current&&(n=\" It was passed a child from \"+q(e._owner.type)+\".\"),De(e),x('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',r,n),De(null)}}}function ze(e,t){if(\"object\"==typeof e)if(Array.isArray(e))for(var r=0;r<e.length;r++){var n=e[r];ne(n)&&Me(n,t)}else if(ne(e))e._store&&(e._store.validated=!0);else if(e){var o=m(e);if(\"function\"==typeof o&&o!==e.entries)for(var a,u=o.call(e);!(a=u.next()).done;)ne(a.value)&&Me(a.value,t)}}function Le(e){var t,r=e.type;if(null!=r&&\"string\"!=typeof r){if(\"function\"==typeof r)t=r.propTypes;else{if(\"object\"!=typeof r||r.$$typeof!==a&&r.$$typeof!==i)return;t=r.propTypes}if(t){var n=q(r);!function(e,t,r,n,o){var a=Function.call.bind(Object.prototype.hasOwnProperty);for(var u in e)if(a(e,u)){var i=void 0;try{if(\"function\"!=typeof e[u]){var c=Error((n||\"React class\")+\": \"+r+\" type `\"+u+\"` is invalid; it must be a function, usually from the `prop-types` package, but received `\"+typeof e[u]+\"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");throw c.name=\"Invariant Violation\",c}i=e[u](t,u,n,r,null,\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\")}catch(e){i=e}!i||i instanceof Error||(Fe(o),x(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",n||\"React class\",r,u,typeof i),Fe(null)),i instanceof Error&&!(i.message in $e)&&($e[i.message]=!0,Fe(o),x(\"Failed %s type: %s\",r,i.message),Fe(null))}}(t,e.props,\"prop\",n,e)}else if(void 0!==r.PropTypes&&!Te){Te=!0,x(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\",q(r)||\"Unknown\")}\"function\"!=typeof r.getDefaultProps||r.getDefaultProps.isReactClassApproved||x(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\")}}function Ue(e){for(var t=Object.keys(e.props),r=0;r<t.length;r++){var n=t[r];if(\"children\"!==n&&\"key\"!==n){De(e),x(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\",n),De(null);break}}null!==e.ref&&(De(e),x(\"Invalid attribute `ref` supplied to `React.Fragment`.\"),De(null))}function qe(r,n,o){var a=fe(r);if(!a){var u=\"\";(void 0===r||\"object\"==typeof r&&null!==r&&0===Object.keys(r).length)&&(u+=\" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");var i,c=Ae(n);u+=c||We(),null===r?i=\"null\":Array.isArray(r)?i=\"array\":void 0!==r&&r.$$typeof===t?(i=\"<\"+(q(r.type)||\"Unknown\")+\" />\",u=\" Did you accidentally export a JSX literal instead of a component?\"):i=typeof r,x(\"React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",i,u)}var l=te.apply(this,arguments);if(null==l)return l;if(a)for(var s=2;s<arguments.length;s++)ze(arguments[s],r);return r===e.Fragment?Ue(l):Le(l),l}var Ve=!1;var Ye,Be,He,Je,Xe,Ge,Ke;if(\"object\"==typeof performance&&\"function\"==typeof performance.now){var Qe=performance;Ge=function(){return Qe.now()}}else{var Ze=Date,et=Ze.now();Ge=function(){return Ze.now()-et}}if(\"undefined\"==typeof window||\"function\"!=typeof MessageChannel){var tt=null,rt=null,nt=function(){if(null!==tt)try{var e=Ge();tt(!0,e),tt=null}catch(e){throw setTimeout(nt,0),e}};Ye=function(e){null!==tt?setTimeout(Ye,0,e):(tt=e,setTimeout(nt,0))},Be=function(e,t){rt=setTimeout(e,t)},He=function(){clearTimeout(rt)},Je=function(){return!1},Xe=Ke=function(){}}else{var ot=window.setTimeout,at=window.clearTimeout;if(\"undefined\"!=typeof console){var ut=window.requestAnimationFrame,it=window.cancelAnimationFrame;\"function\"!=typeof ut&&console.error(\"This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills\"),\"function\"!=typeof it&&console.error(\"This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills\")}var ct=!1,lt=null,st=-1,ft=5,pt=0;Je=function(){return Ge()>=pt},Xe=function(){},Ke=function(e){e<0||e>125?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):ft=e>0?Math.floor(1e3/e):5};var dt=new MessageChannel,yt=dt.port2;dt.port1.onmessage=function(){if(null!==lt){var e=Ge();pt=e+ft;try{lt(!0,e)?yt.postMessage(null):(ct=!1,lt=null)}catch(e){throw yt.postMessage(null),e}}else ct=!1},Ye=function(e){lt=e,ct||(ct=!0,yt.postMessage(null))},Be=function(e,t){st=ot((function(){e(Ge())}),t)},He=function(){at(st),st=-1}}function vt(e,t){var r=e.length;e.push(t),function(e,t,r){var n=r;for(;;){var o=n-1>>>1,a=e[o];if(!(void 0!==a&&bt(a,t)>0))return;e[o]=t,e[n]=a,n=o}}(e,t,r)}function mt(e){var t=e[0];return void 0===t?null:t}function ht(e){var t=e[0];if(void 0!==t){var r=e.pop();return r!==t&&(e[0]=r,function(e,t,r){var n=r,o=e.length;for(;n<o;){var a=2*(n+1)-1,u=e[a],i=a+1,c=e[i];if(void 0!==u&&bt(u,t)<0)void 0!==c&&bt(c,u)<0?(e[n]=c,e[i]=t,n=i):(e[n]=u,e[a]=t,n=a);else{if(!(void 0!==c&&bt(c,t)<0))return;e[n]=c,e[i]=t,n=i}}}(e,r,0)),t}return null}function bt(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var gt=[],_t=[],wt=1,kt=null,Ct=3,Rt=!1,St=!1,jt=!1;function Pt(e){for(var t=mt(_t);null!==t;){if(null===t.callback)ht(_t);else{if(!(t.startTime<=e))return;ht(_t),t.sortIndex=t.expirationTime,vt(gt,t)}t=mt(_t)}}function Ot(e){if(jt=!1,Pt(e),!St)if(null!==mt(gt))St=!0,Ye(xt);else{var t=mt(_t);null!==t&&Be(Ot,t.startTime-e)}}function xt(e,t){St=!1,jt&&(jt=!1,He()),Rt=!0;var r=Ct;try{return Et(e,t)}finally{kt=null,Ct=r,Rt=!1}}function Et(e,t){var r=t;for(Pt(r),kt=mt(gt);null!==kt&&(!(kt.expirationTime>r)||e&&!Je());){var n=kt.callback;if(\"function\"==typeof n){kt.callback=null,Ct=kt.priorityLevel;var o=n(kt.expirationTime<=r);r=Ge(),\"function\"==typeof o?kt.callback=o:kt===mt(gt)&&ht(gt),Pt(r)}else ht(gt);kt=mt(gt)}if(null!==kt)return!0;var a=mt(_t);return null!==a&&Be(Ot,a.startTime-r),!1}var Tt=Xe,$t=Object.freeze({__proto__:null,unstable_ImmediatePriority:1,unstable_UserBlockingPriority:2,unstable_NormalPriority:3,unstable_IdlePriority:5,unstable_LowPriority:4,unstable_runWithPriority:function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=Ct;Ct=e;try{return t()}finally{Ct=r}},unstable_next:function(e){var t;switch(Ct){case 1:case 2:case 3:t=3;break;default:t=Ct}var r=Ct;Ct=t;try{return e()}finally{Ct=r}},unstable_scheduleCallback:function(e,t,r){var n,o,a=Ge();if(\"object\"==typeof r&&null!==r){var u=r.delay;n=\"number\"==typeof u&&u>0?a+u:a}else n=a;switch(e){case 1:o=-1;break;case 2:o=250;break;case 5:o=1073741823;break;case 4:o=1e4;break;case 3:default:o=5e3}var i=n+o,c={id:wt++,callback:t,priorityLevel:e,startTime:n,expirationTime:i,sortIndex:-1};return n>a?(c.sortIndex=n,vt(_t,c),null===mt(gt)&&c===mt(_t)&&(jt?He():jt=!0,Be(Ot,n-a))):(c.sortIndex=i,vt(gt,c),St||Rt||(St=!0,Ye(xt))),c},unstable_cancelCallback:function(e){e.callback=null},unstable_wrapCallback:function(e){var t=Ct;return function(){var r=Ct;Ct=t;try{return e.apply(this,arguments)}finally{Ct=r}}},unstable_getCurrentPriorityLevel:function(){return Ct},get unstable_shouldYield(){return Je},unstable_requestPaint:Tt,unstable_continueExecution:function(){St||Rt||(St=!0,Ye(xt))},unstable_pauseExecution:function(){},unstable_getFirstCallbackNode:function(){return mt(gt)},get unstable_now(){return Ge},get unstable_forceFrameRate(){return Ke},unstable_Profiling:null}),It=0,Ft=0,Dt=null,Wt=null;Dt={current:new Set},Wt={current:null};var At=null;function Nt(e){var t=!1,r=null;if(At.forEach((function(n){try{n.onInteractionTraced(e)}catch(e){t||(t=!0,r=e)}})),t)throw r}function Mt(e){var t=!1,r=null;if(At.forEach((function(n){try{n.onInteractionScheduledWorkCompleted(e)}catch(e){t||(t=!0,r=e)}})),t)throw r}function zt(e,t){var r=!1,n=null;if(At.forEach((function(o){try{o.onWorkScheduled(e,t)}catch(e){r||(r=!0,n=e)}})),r)throw n}function Lt(e,t){var r=!1,n=null;if(At.forEach((function(o){try{o.onWorkStarted(e,t)}catch(e){r||(r=!0,n=e)}})),r)throw n}function Ut(e,t){var r=!1,n=null;if(At.forEach((function(o){try{o.onWorkStopped(e,t)}catch(e){r||(r=!0,n=e)}})),r)throw n}function qt(e,t){var r=!1,n=null;if(At.forEach((function(o){try{o.onWorkCanceled(e,t)}catch(e){r||(r=!0,n=e)}})),r)throw n}At=new Set;var Vt={ReactCurrentDispatcher:_,ReactCurrentOwner:k,IsSomeRendererActing:j,ReactCurrentBatchConfig:w,assign:g,Scheduler:$t,SchedulerTracing:Object.freeze({__proto__:null,get __interactionsRef(){return Dt},get __subscriberRef(){return Wt},unstable_clear:function(e){var t=Dt.current;Dt.current=new Set;try{return e()}finally{Dt.current=t}},unstable_getCurrent:function(){return Dt.current},unstable_getThreadID:function(){return++Ft},unstable_trace:function(e,t,r){var n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o={__count:1,id:It++,name:e,timestamp:t},a=Dt.current,u=new Set(a);u.add(o),Dt.current=u;var i,c=Wt.current;try{null!==c&&c.onInteractionTraced(o)}finally{try{null!==c&&c.onWorkStarted(u,n)}finally{try{i=r()}finally{Dt.current=a;try{null!==c&&c.onWorkStopped(u,n)}finally{o.__count--,null!==c&&0===o.__count&&c.onInteractionScheduledWorkCompleted(o)}}}}return i},unstable_wrap:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=Dt.current,n=Wt.current;null!==n&&n.onWorkScheduled(r,t),r.forEach((function(e){e.__count++}));var o=!1;function a(){var a=Dt.current;Dt.current=r,n=Wt.current;try{var u;try{null!==n&&n.onWorkStarted(r,t)}finally{try{u=e.apply(void 0,arguments)}finally{Dt.current=a,null!==n&&n.onWorkStopped(r,t)}}return u}finally{o||(o=!0,r.forEach((function(e){e.__count--,null!==n&&0===e.__count&&n.onInteractionScheduledWorkCompleted(e)})))}}return a.cancel=function(){n=Wt.current;try{null!==n&&n.onWorkCanceled(r,t)}finally{r.forEach((function(e){e.__count--,n&&0===e.__count&&n.onInteractionScheduledWorkCompleted(e)}))}},a},unstable_subscribe:function(e){At.add(e),1===At.size&&(Wt.current={onInteractionScheduledWorkCompleted:Mt,onInteractionTraced:Nt,onWorkCanceled:qt,onWorkScheduled:zt,onWorkStarted:Lt,onWorkStopped:Ut})},unstable_unsubscribe:function(e){At.delete(e),0===At.size&&(Wt.current=null)}})};Vt.ReactDebugCurrentFrame=C;try{var Yt=Object.freeze({});new Map([[Yt,null]]),new Set([Yt])}catch(e){}var Bt=qe,Ht=function(e,t,r){for(var n=re.apply(this,arguments),o=2;o<arguments.length;o++)ze(arguments[o],n.type);return Le(n),n},Jt=function(e){var t=qe.bind(null,e);return t.type=e,Ve||(Ve=!0,O(\"React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.\")),Object.defineProperty(t,\"type\",{enumerable:!1,get:function(){return O(\"Factory.type is deprecated. Access the class directly before passing it to createFactory.\"),Object.defineProperty(this,\"type\",{value:e}),e}}),t},Xt={map:le,forEach:function(e,t,r){le(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return le(e,(function(){t++})),t},toArray:function(e){return le(e,(function(e){return e}))||[]},only:function(e){if(!ne(e))throw Error(\"React.Children.only expected to receive a single React element child.\");return e}};e.Children=Xt,e.Component=D,e.PureComponent=z,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Vt,e.cloneElement=Ht,e.createContext=function(e,t){void 0===t?t=null:null!==t&&\"function\"!=typeof t&&x(\"createContext: Expected the optional second argument to be a function. Instead received: %s\",t);var r={$$typeof:o,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null};r.Provider={$$typeof:n,_context:r};var a=!1,u=!1,i=!1,c={$$typeof:o,_context:r,_calculateChangedBits:r._calculateChangedBits};return Object.defineProperties(c,{Provider:{get:function(){return u||(u=!0,x(\"Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?\")),r.Provider},set:function(e){r.Provider=e}},_currentValue:{get:function(){return r._currentValue},set:function(e){r._currentValue=e}},_currentValue2:{get:function(){return r._currentValue2},set:function(e){r._currentValue2=e}},_threadCount:{get:function(){return r._threadCount},set:function(e){r._threadCount=e}},Consumer:{get:function(){return a||(a=!0,x(\"Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?\")),r.Consumer}},displayName:{get:function(){return r.displayName},set:function(e){i||(O(\"Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.\",e),i=!0)}}}),r.Consumer=c,r._currentRenderer=null,r._currentRenderer2=null,r},e.createElement=Bt,e.createFactory=Jt,e.createRef=function(){var e={current:null};return Object.seal(e),e},e.forwardRef=function(e){null!=e&&e.$$typeof===i?x(\"forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).\"):\"function\"!=typeof e?x(\"forwardRef requires a render function but was given %s.\",null===e?\"null\":typeof e):0!==e.length&&2!==e.length&&x(\"forwardRef render functions accept exactly two parameters: props and ref. %s\",1===e.length?\"Did you forget to use the ref parameter?\":\"Any additional parameter will be undefined.\"),null!=e&&(null==e.defaultProps&&null==e.propTypes||x(\"forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?\"));var t,r={$$typeof:a,render:e};return Object.defineProperty(r,\"displayName\",{enumerable:!1,configurable:!0,get:function(){return t},set:function(r){t=r,null==e.displayName&&(e.displayName=r)}}),r},e.isValidElement=ne,e.lazy=function(e){var t,r,n={$$typeof:c,_payload:{_status:-1,_result:e},_init:se};return Object.defineProperties(n,{defaultProps:{configurable:!0,get:function(){return t},set:function(e){x(\"React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.\"),t=e,Object.defineProperty(n,\"defaultProps\",{enumerable:!0})}},propTypes:{configurable:!0,get:function(){return r},set:function(e){x(\"React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.\"),r=e,Object.defineProperty(n,\"propTypes\",{enumerable:!0})}}}),n},e.memo=function(e,t){fe(e)||x(\"memo: The first argument must be a component. Instead received: %s\",null===e?\"null\":typeof e);var r,n={$$typeof:i,type:e,compare:void 0===t?null:t};return Object.defineProperty(n,\"displayName\",{enumerable:!1,configurable:!0,get:function(){return r},set:function(t){r=t,null==e.displayName&&(e.displayName=t)}}),n},e.useCallback=function(e,t){return pe().useCallback(e,t)},e.useContext=function(e,t){var r=pe();if(void 0!==t&&x(\"useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s\",t,\"number\"==typeof t&&Array.isArray(arguments[2])?\"\\n\\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks\":\"\"),void 0!==e._context){var n=e._context;n.Consumer===e?x(\"Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?\"):n.Provider===e&&x(\"Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?\")}return r.useContext(e,t)},e.useDebugValue=function(e,t){return pe().useDebugValue(e,t)},e.useEffect=function(e,t){return pe().useEffect(e,t)},e.useImperativeHandle=function(e,t,r){return pe().useImperativeHandle(e,t,r)},e.useLayoutEffect=function(e,t){return pe().useLayoutEffect(e,t)},e.useMemo=function(e,t){return pe().useMemo(e,t)},e.useReducer=function(e,t,r){return pe().useReducer(e,t,r)},e.useRef=function(e){return pe().useRef(e)},e.useState=function(e){return pe().useState(e)},e.version=\"17.0.2\"}));\n//# sourceMappingURL=/sm/3e53c4dd5559aa8181e7ba634a07a06a76ba520186255d56052f324876d760b9.map"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "[2a04:4e42:82::485]",
        "startedDateTime": "2023-04-10T17:57:17.000Z",
        "time": 6.492000000434928,
        "timings": {
          "blocked": 2.390000000109896,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 1.9279999992200174,
          "receive": 2.1740000011050142,
          "_blocked_queueing": 2.343000000109896
        }
      },
      {
        "_fromCache": "disk",
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 653,
                "columnNumber": 20
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 633,
                "columnNumber": 11
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 671,
                "columnNumber": 25
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 707,
                "columnNumber": 29
              },
              {
                "functionName": "systemPrototype.instantiate",
                "scriptId": "1360",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js",
                "lineNumber": 84,
                "columnNumber": 23
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 282,
                "columnNumber": 20
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "getOrCreateLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 281,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 338,
                  "columnNumber": 24
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 337,
                    "columnNumber": 9
                  },
                  {
                    "functionName": "",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 334,
                    "columnNumber": 42
                  }
                ],
                "parent": {
                  "description": "Promise.then",
                  "callFrames": [
                    {
                      "functionName": "getOrCreateLoad",
                      "scriptId": "1359",
                      "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                      "lineNumber": 333,
                      "columnNumber": 5
                    },
                    {
                      "functionName": "",
                      "scriptId": "1359",
                      "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                      "lineNumber": 229,
                      "columnNumber": 17
                    }
                  ],
                  "parent": {
                    "description": "Promise.then",
                    "callFrames": [
                      {
                        "functionName": "systemJSPrototype.import",
                        "scriptId": "1359",
                        "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                        "lineNumber": 228,
                        "columnNumber": 5
                      },
                      {
                        "functionName": "systemJSPrototype.import",
                        "scriptId": "1359",
                        "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                        "lineNumber": 774,
                        "columnNumber": 18
                      },
                      {
                        "functionName": "app",
                        "scriptId": "1368",
                        "url": "http://localhost:9000/mma-root-config.js",
                        "lineNumber": 29,
                        "columnNumber": 27
                      },
                      {
                        "functionName": "",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 9744
                      }
                    ],
                    "parent": {
                      "description": "Promise.then",
                      "callFrames": [
                        {
                          "functionName": "",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 9719
                        }
                      ],
                      "parent": {
                        "description": "Promise.then",
                        "callFrames": [
                          {
                            "functionName": "X",
                            "scriptId": "1372",
                            "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                            "lineNumber": 1,
                            "columnNumber": 9594
                          },
                          {
                            "functionName": "",
                            "scriptId": "1372",
                            "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                            "lineNumber": 1,
                            "columnNumber": 17833
                          }
                        ],
                        "parent": {
                          "description": "Promise.then",
                          "callFrames": [
                            {
                              "functionName": "d",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 17808
                            },
                            {
                              "functionName": "Rt",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 17747
                            },
                            {
                              "functionName": "Pt",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 15763
                            },
                            {
                              "functionName": "./src/mma-root-config.ts",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 26,
                              "columnNumber": 63
                            },
                            {
                              "functionName": "__webpack_require__",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 3577,
                              "columnNumber": 32
                            },
                            {
                              "functionName": "",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 4628,
                              "columnNumber": 36
                            },
                            {
                              "functionName": "execute",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 4631,
                              "columnNumber": 11
                            },
                            {
                              "functionName": "doExec",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 468,
                              "columnNumber": 33
                            },
                            {
                              "functionName": "postOrderExec",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 464,
                              "columnNumber": 11
                            },
                            {
                              "functionName": "",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 421,
                              "columnNumber": 13
                            }
                          ],
                          "parent": {
                            "description": "Promise.then",
                            "callFrames": [
                              {
                                "functionName": "topLevelLoad",
                                "scriptId": "1359",
                                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                "lineNumber": 420,
                                "columnNumber": 5
                              },
                              {
                                "functionName": "",
                                "scriptId": "1359",
                                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                "lineNumber": 230,
                                "columnNumber": 23
                              }
                            ],
                            "parent": {
                              "description": "Promise.then",
                              "callFrames": [
                                {
                                  "functionName": "systemJSPrototype.import",
                                  "scriptId": "1359",
                                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                  "lineNumber": 228,
                                  "columnNumber": 5
                                },
                                {
                                  "functionName": "systemJSPrototype.import",
                                  "scriptId": "1359",
                                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                  "lineNumber": 774,
                                  "columnNumber": 18
                                },
                                {
                                  "functionName": "",
                                  "scriptId": "1365",
                                  "url": "http://localhost:9000/",
                                  "lineNumber": 81,
                                  "columnNumber": 17
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "https://cdn.jsdelivr.net/npm/react-dom@17.0.2/umd/react-dom.development.min.js",
          "httpVersion": "http/2.0",
          "headers": [],
          "queryString": [],
          "cookies": [],
          "headersSize": -1,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "",
          "httpVersion": "http/2.0",
          "headers": [
            {
              "name": "accept-ranges",
              "value": "bytes"
            },
            {
              "name": "access-control-allow-origin",
              "value": "*"
            },
            {
              "name": "access-control-expose-headers",
              "value": "*"
            },
            {
              "name": "age",
              "value": "2263311"
            },
            {
              "name": "alt-svc",
              "value": "h3=\":443\";ma=86400,h3-29=\":443\";ma=86400,h3-27=\":443\";ma=86400"
            },
            {
              "name": "cache-control",
              "value": "public, max-age=31536000, s-maxage=31536000, immutable"
            },
            {
              "name": "content-encoding",
              "value": "br"
            },
            {
              "name": "content-length",
              "value": "77438"
            },
            {
              "name": "content-type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "cross-origin-resource-policy",
              "value": "cross-origin"
            },
            {
              "name": "date",
              "value": "Mon, 10 Apr 2023 17:42:30 GMT"
            },
            {
              "name": "etag",
              "value": "W/\"3c10d-8guIQAxe2rRAhDSTKUZdFHsq7Hk\""
            },
            {
              "name": "timing-allow-origin",
              "value": "*"
            },
            {
              "name": "vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "x-cache",
              "value": "HIT, HIT"
            },
            {
              "name": "x-content-type-options",
              "value": "nosniff"
            },
            {
              "name": "x-jsd-version",
              "value": "17.0.2"
            },
            {
              "name": "x-jsd-version-type",
              "value": "version"
            },
            {
              "name": "x-served-by",
              "value": "cache-fra-eddf8230080-FRA, cache-lcy-eglc8600036-LCY"
            }
          ],
          "cookies": [],
          "content": {
            "size": 246029,
            "mimeType": "application/javascript",
            "text": "/**\n * Minified by jsDelivr using Terser v5.3.5.\n * Original file: /npm/react-dom@17.0.2/umd/react-dom.development.js\n *\n * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files\n */\n/** @license React v17.0.2\n * react-dom.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n!function(e,t){\"object\"==typeof exports&&\"undefined\"!=typeof module?t(exports,require(\"react\")):\"function\"==typeof define&&define.amd?define([\"exports\",\"react\"],t):t((e=e||self).ReactDOM={},e.React)}(this,(function(e,t){\"use strict\";var n=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function r(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];o(\"warn\",e,n)}function a(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];o(\"error\",e,n)}function o(e,t,r){var a=n.ReactDebugCurrentFrame.getStackAddendum();\"\"!==a&&(t+=\"%s\",r=r.concat([a]));var o=r.map((function(e){return\"\"+e}));o.unshift(\"Warning: \"+t),Function.prototype.apply.call(console[e],console,o)}if(!t)throw Error(\"ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.\");var i=10,l=11,u=12,s=13,c=14,d=15,f=17,p=19,h=20,m=22,v=23,g=24,y=!1,b=new Set,w={},k={};function S(e,t){x(e,t),x(e+\"Capture\",t)}function x(e,t){w[e]&&a(\"EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.\",e),w[e]=t;var n=e.toLowerCase();k[n]=e,\"onDoubleClick\"===e&&(k.ondblclick=e);for(var r=0;r<t.length;r++)b.add(t[r])}var E=!(\"undefined\"==typeof window||void 0===window.document||void 0===window.document.createElement),C=\":A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD\",R=C+\"\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040\",T=\"data-reactroot\",P=new RegExp(\"^[\"+C+\"][\"+R+\"]*$\"),_=Object.prototype.hasOwnProperty,D={},I={};function N(e){return!!_.call(I,e)||!_.call(D,e)&&(P.test(e)?(I[e]=!0,!0):(D[e]=!0,a(\"Invalid attribute name: `%s`\",e),!1))}function L(e,t,n){return null!==t?0===t.type:!n&&(e.length>2&&(\"o\"===e[0]||\"O\"===e[0])&&(\"n\"===e[1]||\"N\"===e[1]))}function O(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case\"function\":case\"symbol\":return!0;case\"boolean\":if(r)return!1;if(null!==n)return!n.acceptsBooleans;var a=e.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}function z(e,t,n,r){if(null==t)return!0;if(O(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||t<1}return!1}function M(e){return A.hasOwnProperty(e)?A[e]:null}function U(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var A={};[\"children\",\"dangerouslySetInnerHTML\",\"defaultValue\",\"defaultChecked\",\"innerHTML\",\"suppressContentEditableWarning\",\"suppressHydrationWarning\",\"style\"].forEach((function(e){A[e]=new U(e,0,!1,e,null,!1,!1)})),[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach((function(e){var t=e[0],n=e[1];A[t]=new U(t,1,!1,n,null,!1,!1)})),[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach((function(e){A[e]=new U(e,2,!1,e.toLowerCase(),null,!1,!1)})),[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach((function(e){A[e]=new U(e,2,!1,e,null,!1,!1)})),[\"allowFullScreen\",\"async\",\"autoFocus\",\"autoPlay\",\"controls\",\"default\",\"defer\",\"disabled\",\"disablePictureInPicture\",\"disableRemotePlayback\",\"formNoValidate\",\"hidden\",\"loop\",\"noModule\",\"noValidate\",\"open\",\"playsInline\",\"readOnly\",\"required\",\"reversed\",\"scoped\",\"seamless\",\"itemScope\"].forEach((function(e){A[e]=new U(e,3,!1,e.toLowerCase(),null,!1,!1)})),[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach((function(e){A[e]=new U(e,3,!0,e,null,!1,!1)})),[\"capture\",\"download\"].forEach((function(e){A[e]=new U(e,4,!1,e,null,!1,!1)})),[\"cols\",\"rows\",\"size\",\"span\"].forEach((function(e){A[e]=new U(e,6,!1,e,null,!1,!1)})),[\"rowSpan\",\"start\"].forEach((function(e){A[e]=new U(e,5,!1,e.toLowerCase(),null,!1,!1)}));var F=/[\\-\\:]([a-z])/g,W=function(e){return e[1].toUpperCase()};[\"accent-height\",\"alignment-baseline\",\"arabic-form\",\"baseline-shift\",\"cap-height\",\"clip-path\",\"clip-rule\",\"color-interpolation\",\"color-interpolation-filters\",\"color-profile\",\"color-rendering\",\"dominant-baseline\",\"enable-background\",\"fill-opacity\",\"fill-rule\",\"flood-color\",\"flood-opacity\",\"font-family\",\"font-size\",\"font-size-adjust\",\"font-stretch\",\"font-style\",\"font-variant\",\"font-weight\",\"glyph-name\",\"glyph-orientation-horizontal\",\"glyph-orientation-vertical\",\"horiz-adv-x\",\"horiz-origin-x\",\"image-rendering\",\"letter-spacing\",\"lighting-color\",\"marker-end\",\"marker-mid\",\"marker-start\",\"overline-position\",\"overline-thickness\",\"paint-order\",\"panose-1\",\"pointer-events\",\"rendering-intent\",\"shape-rendering\",\"stop-color\",\"stop-opacity\",\"strikethrough-position\",\"strikethrough-thickness\",\"stroke-dasharray\",\"stroke-dashoffset\",\"stroke-linecap\",\"stroke-linejoin\",\"stroke-miterlimit\",\"stroke-opacity\",\"stroke-width\",\"text-anchor\",\"text-decoration\",\"text-rendering\",\"underline-position\",\"underline-thickness\",\"unicode-bidi\",\"unicode-range\",\"units-per-em\",\"v-alphabetic\",\"v-hanging\",\"v-ideographic\",\"v-mathematical\",\"vector-effect\",\"vert-adv-y\",\"vert-origin-x\",\"vert-origin-y\",\"word-spacing\",\"writing-mode\",\"xmlns:xlink\",\"x-height\"].forEach((function(e){var t=e.replace(F,W);A[t]=new U(t,1,!1,e,null,!1,!1)})),[\"xlink:actuate\",\"xlink:arcrole\",\"xlink:role\",\"xlink:show\",\"xlink:title\",\"xlink:type\"].forEach((function(e){var t=e.replace(F,W);A[t]=new U(t,1,!1,e,\"http://www.w3.org/1999/xlink\",!1,!1)})),[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach((function(e){var t=e.replace(F,W);A[t]=new U(t,1,!1,e,\"http://www.w3.org/XML/1998/namespace\",!1,!1)})),[\"tabIndex\",\"crossOrigin\"].forEach((function(e){A[e]=new U(e,1,!1,e.toLowerCase(),null,!1,!1)}));A.xlinkHref=new U(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1),[\"src\",\"href\",\"action\",\"formAction\"].forEach((function(e){A[e]=new U(e,1,!1,e.toLowerCase(),null,!0,!0)}));var j=/^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i,B=!1;function V(e){!B&&j.test(e)&&(B=!0,a(\"A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.\",JSON.stringify(e)))}function H(e,t,n,r){if(r.mustUseProperty)return e[r.propertyName];r.sanitizeURL&&V(\"\"+n);var a=r.attributeName,o=null;if(4===r.type){if(e.hasAttribute(a)){var i=e.getAttribute(a);return\"\"===i||(z(t,n,r,!1)?i:i===\"\"+n?n:i)}}else if(e.hasAttribute(a)){if(z(t,n,r,!1))return e.getAttribute(a);if(3===r.type)return n;o=e.getAttribute(a)}return z(t,n,r,!1)?null===o?n:o:o===\"\"+n?n:o}function q(e,t,n){if(N(t)){if(function(e){return null!==e&&\"object\"==typeof e&&e.$$typeof===ue}(n))return n;if(!e.hasAttribute(t))return void 0===n?void 0:null;var r=e.getAttribute(t);return r===\"\"+n?n:r}}function $(e,t,n,r){var a=M(t);if(!L(t,a,r))if(z(t,n,a,r)&&(n=null),r||null===a){if(N(t)){var o=t;null===n?e.removeAttribute(o):e.setAttribute(o,\"\"+n)}}else if(a.mustUseProperty){var i=a.propertyName;if(null===n){var l=a.type;e[i]=3!==l&&\"\"}else e[i]=n}else{var u=a.attributeName,s=a.attributeNamespace;if(null===n)e.removeAttribute(u);else{var c,d=a.type;3===d||4===d&&!0===n?c=\"\":(c=\"\"+n,a.sanitizeURL&&V(c.toString())),s?e.setAttributeNS(s,u,c):e.setAttribute(u,c)}}}var Q=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.assign,Y=60103,K=60106,X=60107,G=60108,Z=60114,J=60109,ee=60110,te=60112,ne=60113,re=60120,ae=60115,oe=60116,ie=60121,le=60119,ue=60128,se=60129,ce=60130,de=60131;if(\"function\"==typeof Symbol&&Symbol.for){var fe=Symbol.for;Y=fe(\"react.element\"),K=fe(\"react.portal\"),X=fe(\"react.fragment\"),G=fe(\"react.strict_mode\"),Z=fe(\"react.profiler\"),J=fe(\"react.provider\"),ee=fe(\"react.context\"),te=fe(\"react.forward_ref\"),ne=fe(\"react.suspense\"),re=fe(\"react.suspense_list\"),ae=fe(\"react.memo\"),oe=fe(\"react.lazy\"),ie=fe(\"react.block\"),fe(\"react.server.block\"),fe(\"react.fundamental\"),le=fe(\"react.scope\"),ue=fe(\"react.opaque.id\"),se=fe(\"react.debug_trace_mode\"),ce=fe(\"react.offscreen\"),de=fe(\"react.legacy_hidden\")}var pe=\"function\"==typeof Symbol&&Symbol.iterator;function he(e){if(null===e||\"object\"!=typeof e)return null;var t=pe&&e[pe]||e[\"@@iterator\"];return\"function\"==typeof t?t:null}var me,ve,ge,ye,be,we,ke,Se=0;function xe(){}function Ee(){if(0===Se){me=console.log,ve=console.info,ge=console.warn,ye=console.error,be=console.group,we=console.groupCollapsed,ke=console.groupEnd;var e={configurable:!0,enumerable:!0,value:xe,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}Se++}function Ce(){if(0===--Se){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:Q({},e,{value:me}),info:Q({},e,{value:ve}),warn:Q({},e,{value:ge}),error:Q({},e,{value:ye}),group:Q({},e,{value:be}),groupCollapsed:Q({},e,{value:we}),groupEnd:Q({},e,{value:ke})})}Se<0&&a(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\")}xe.__reactDisabledLog=!0;var Re,Te=n.ReactCurrentDispatcher;function Pe(e,t,n){if(void 0===Re)try{throw Error()}catch(e){var r=e.stack.trim().match(/\\n( *(at )?)/);Re=r&&r[1]||\"\"}return\"\\n\"+Re+e}var _e,De=!1,Ie=\"function\"==typeof WeakMap?WeakMap:Map;function Ne(e,t){if(!e||De)return\"\";var n,r=_e.get(e);if(void 0!==r)return r;De=!0;var a,o=Error.prepareStackTrace;Error.prepareStackTrace=void 0,a=Te.current,Te.current=null,Ee();try{if(t){var i=function(){throw Error()};if(Object.defineProperty(i.prototype,\"props\",{set:function(){throw Error()}}),\"object\"==typeof Reflect&&Reflect.construct){try{Reflect.construct(i,[])}catch(e){n=e}Reflect.construct(e,[],i)}else{try{i.call()}catch(e){n=e}e.call(i.prototype)}}else{try{throw Error()}catch(e){n=e}e()}}catch(t){if(t&&n&&\"string\"==typeof t.stack){for(var l=t.stack.split(\"\\n\"),u=n.stack.split(\"\\n\"),s=l.length-1,c=u.length-1;s>=1&&c>=0&&l[s]!==u[c];)c--;for(;s>=1&&c>=0;s--,c--)if(l[s]!==u[c]){if(1!==s||1!==c)do{if(s--,--c<0||l[s]!==u[c]){var d=\"\\n\"+l[s].replace(\" at new \",\" at \");return\"function\"==typeof e&&_e.set(e,d),d}}while(s>=1&&c>=0);break}}}finally{De=!1,Te.current=a,Ce(),Error.prepareStackTrace=o}var f=e?e.displayName||e.name:\"\",p=f?Pe(f):\"\";return\"function\"==typeof e&&_e.set(e,p),p}function Le(e,t,n){return Ne(e,!1)}function Oe(e,t,n){if(null==e)return\"\";if(\"function\"==typeof e)return Ne(e,!(!(r=e.prototype)||!r.isReactComponent));var r;if(\"string\"==typeof e)return Pe(e);switch(e){case ne:return Pe(\"Suspense\");case re:return Pe(\"SuspenseList\")}if(\"object\"==typeof e)switch(e.$$typeof){case te:return Le(e.render);case ae:return Oe(e.type,t,n);case ie:return Le(e._render);case oe:var a=e,o=a._payload,i=a._init;try{return Oe(i(o),t,n)}catch(e){}}return\"\"}function ze(e){e._debugOwner&&e._debugOwner.type,e._debugSource;switch(e.tag){case 5:return Pe(e.type);case 16:return Pe(\"Lazy\");case s:return Pe(\"Suspense\");case p:return Pe(\"SuspenseList\");case 0:case 2:case d:return Le(e.type);case l:return Le(e.type.render);case m:return Le(e.type._render);case 1:return Ne(e.type,!0);default:return\"\"}}function Me(e){try{var t=\"\",n=e;do{t+=ze(n),n=n.return}while(n);return t}catch(e){return\"\\nError generating stack: \"+e.message+\"\\n\"+e.stack}}function Ue(e){return e.displayName||\"Context\"}function Ae(e){if(null==e)return null;if(\"number\"==typeof e.tag&&a(\"Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.\"),\"function\"==typeof e)return e.displayName||e.name||null;if(\"string\"==typeof e)return e;switch(e){case X:return\"Fragment\";case K:return\"Portal\";case Z:return\"Profiler\";case G:return\"StrictMode\";case ne:return\"Suspense\";case re:return\"SuspenseList\"}if(\"object\"==typeof e)switch(e.$$typeof){case ee:return Ue(e)+\".Consumer\";case J:return Ue(e._context)+\".Provider\";case te:return o=e,i=e.render,l=\"ForwardRef\",u=i.displayName||i.name||\"\",o.displayName||(\"\"!==u?l+\"(\"+u+\")\":l);case ae:return Ae(e.type);case ie:return Ae(e._render);case oe:var t=e,n=t._payload,r=t._init;try{return Ae(r(n))}catch(e){return null}}var o,i,l,u;return null}_e=new Ie;var Fe=n.ReactDebugCurrentFrame,We=null,je=!1;function Be(){if(null===We)return null;var e=We._debugOwner;return null!=e?Ae(e.type):null}function Ve(){return null===We?\"\":Me(We)}function He(){Fe.getCurrentStack=null,We=null,je=!1}function qe(e){Fe.getCurrentStack=Ve,We=e,je=!1}function $e(e){je=e}function Qe(e){return\"\"+e}function Ye(e){switch(typeof e){case\"boolean\":case\"number\":case\"object\":case\"string\":case\"undefined\":return e;default:return\"\"}}var Ke={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0};function Xe(e,t){Ke[t.type]||t.onChange||t.onInput||t.readOnly||t.disabled||null==t.value||a(\"You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.\"),t.onChange||t.readOnly||t.disabled||null==t.checked||a(\"You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.\")}function Ge(e){var t=e.type,n=e.nodeName;return n&&\"input\"===n.toLowerCase()&&(\"checkbox\"===t||\"radio\"===t)}function Ze(e){return e._valueTracker}function Je(e){Ze(e)||(e._valueTracker=function(e){var t=Ge(e)?\"checked\":\"value\",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=\"\"+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&\"function\"==typeof n.get&&\"function\"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=\"\"+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=\"\"+e},stopTracking:function(){!function(e){e._valueTracker=null}(e),delete e[t]}}}}(e))}function et(e){if(!e)return!1;var t=Ze(e);if(!t)return!0;var n=t.getValue(),r=function(e){var t=\"\";return e?t=Ge(e)?e.checked?\"true\":\"false\":e.value:t}(e);return r!==n&&(t.setValue(r),!0)}function tt(e){if(void 0===(e=e||(\"undefined\"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}var nt=!1,rt=!1,at=!1,ot=!1;function it(e){return\"checkbox\"===e.type||\"radio\"===e.type?null!=e.checked:null!=e.value}function lt(e,t){var n=e,r=t.checked;return Q({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:n._wrapperState.initialChecked})}function ut(e,t){Xe(0,t),void 0===t.checked||void 0===t.defaultChecked||rt||(a(\"%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components\",Be()||\"A component\",t.type),rt=!0),void 0===t.value||void 0===t.defaultValue||nt||(a(\"%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components\",Be()||\"A component\",t.type),nt=!0);var n=e,r=null==t.defaultValue?\"\":t.defaultValue;n._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:Ye(null!=t.value?t.value:r),controlled:it(t)}}function st(e,t){var n=e,r=t.checked;null!=r&&$(n,\"checked\",r,!1)}function ct(e,t){var n=e,r=it(t);n._wrapperState.controlled||!r||ot||(a(\"A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components\"),ot=!0),!n._wrapperState.controlled||r||at||(a(\"A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components\"),at=!0),st(e,t);var o=Ye(t.value),i=t.type;if(null!=o)\"number\"===i?(0===o&&\"\"===n.value||n.value!=o)&&(n.value=Qe(o)):n.value!==Qe(o)&&(n.value=Qe(o));else if(\"submit\"===i||\"reset\"===i)return void n.removeAttribute(\"value\");t.hasOwnProperty(\"value\")?pt(n,t.type,o):t.hasOwnProperty(\"defaultValue\")&&pt(n,t.type,Ye(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(n.defaultChecked=!!t.defaultChecked)}function dt(e,t,n){var r=e;if(t.hasOwnProperty(\"value\")||t.hasOwnProperty(\"defaultValue\")){var a=t.type;if((\"submit\"===a||\"reset\"===a)&&(void 0===t.value||null===t.value))return;var o=Qe(r._wrapperState.initialValue);n||o!==r.value&&(r.value=o),r.defaultValue=o}var i=r.name;\"\"!==i&&(r.name=\"\"),r.defaultChecked=!r.defaultChecked,r.defaultChecked=!!r._wrapperState.initialChecked,\"\"!==i&&(r.name=i)}function ft(e,t){var n=e;ct(n,t),function(e,t){var n=t.name;if(\"radio\"===t.type&&null!=n){for(var r=e;r.parentNode;)r=r.parentNode;for(var a=r.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+n)+'][type=\"radio\"]'),o=0;o<a.length;o++){var i=a[o];if(i!==e&&i.form===e.form){var l=Lu(i);if(!l)throw Error(\"ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.\");et(i),ct(i,l)}}}}(n,t)}function pt(e,t,n){\"number\"===t&&tt(e.ownerDocument)===e||(null==n?e.defaultValue=Qe(e._wrapperState.initialValue):e.defaultValue!==Qe(n)&&(e.defaultValue=Qe(n)))}var ht,mt=!1,vt=!1;function gt(e,n){\"object\"==typeof n.children&&null!==n.children&&t.Children.forEach(n.children,(function(e){null!=e&&\"string\"!=typeof e&&\"number\"!=typeof e&&\"string\"==typeof e.type&&(vt||(vt=!0,a(\"Only strings and numbers are supported as <option> children.\")))})),null==n.selected||mt||(a(\"Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.\"),mt=!0)}function yt(e,n){var r=Q({children:void 0},n),a=function(e){var n=\"\";return t.Children.forEach(e,(function(e){null!=e&&(n+=e)})),n}(n.children);return a&&(r.children=a),r}function bt(){var e=Be();return e?\"\\n\\nCheck the render method of `\"+e+\"`.\":\"\"}ht=!1;var wt=[\"value\",\"defaultValue\"];function kt(e,t,n,r){var a=e.options;if(t){for(var o=n,i={},l=0;l<o.length;l++)i[\"$\"+o[l]]=!0;for(var u=0;u<a.length;u++){var s=i.hasOwnProperty(\"$\"+a[u].value);a[u].selected!==s&&(a[u].selected=s),s&&r&&(a[u].defaultSelected=!0)}}else{for(var c=Qe(Ye(n)),d=null,f=0;f<a.length;f++){if(a[f].value===c)return a[f].selected=!0,void(r&&(a[f].defaultSelected=!0));null!==d||a[f].disabled||(d=a[f])}null!==d&&(d.selected=!0)}}function St(e,t){return Q({},t,{value:void 0})}function xt(e,t){var n=e;!function(e){Xe(0,e);for(var t=0;t<wt.length;t++){var n=wt[t];if(null!=e[n]){var r=Array.isArray(e[n]);e.multiple&&!r?a(\"The `%s` prop supplied to <select> must be an array if `multiple` is true.%s\",n,bt()):!e.multiple&&r&&a(\"The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s\",n,bt())}}}(t),n._wrapperState={wasMultiple:!!t.multiple},void 0===t.value||void 0===t.defaultValue||ht||(a(\"Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components\"),ht=!0)}var Et=!1;function Ct(e,t){var n=e;if(null!=t.dangerouslySetInnerHTML)throw Error(\"`dangerouslySetInnerHTML` does not make sense on <textarea>.\");return Q({},t,{value:void 0,defaultValue:void 0,children:Qe(n._wrapperState.initialValue)})}function Rt(e,t){var n=e;Xe(0,t),void 0===t.value||void 0===t.defaultValue||Et||(a(\"%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components\",Be()||\"A component\"),Et=!0);var r=t.value;if(null==r){var o=t.children,i=t.defaultValue;if(null!=o){if(a(\"Use the `defaultValue` or `value` props instead of setting children on <textarea>.\"),null!=i)throw Error(\"If you supply `defaultValue` on a <textarea>, do not pass children.\");if(Array.isArray(o)){if(!(o.length<=1))throw Error(\"<textarea> can only have at most one child.\");o=o[0]}i=o}null==i&&(i=\"\"),r=i}n._wrapperState={initialValue:Ye(r)}}function Tt(e,t){var n=e,r=Ye(t.value),a=Ye(t.defaultValue);if(null!=r){var o=Qe(r);o!==n.value&&(n.value=o),null==t.defaultValue&&n.defaultValue!==o&&(n.defaultValue=o)}null!=a&&(n.defaultValue=Qe(a))}function Pt(e,t){var n=e,r=n.textContent;r===n._wrapperState.initialValue&&\"\"!==r&&null!==r&&(n.value=r)}var _t=\"http://www.w3.org/1999/xhtml\",Dt=\"http://www.w3.org/1998/Math/MathML\",It=\"http://www.w3.org/2000/svg\",Nt=_t,Lt=It;function Ot(e){switch(e){case\"svg\":return It;case\"math\":return Dt;default:return _t}}function zt(e,t){return null==e||e===_t?Ot(t):e===It&&\"foreignObject\"===t?_t:e}var Mt,Ut,At=(Ut=function(e,t){if(e.namespaceURI!==Lt||\"innerHTML\"in e)e.innerHTML=t;else{(Mt=Mt||document.createElement(\"div\")).innerHTML=\"<svg>\"+t.valueOf().toString()+\"</svg>\";for(var n=Mt.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;n.firstChild;)e.appendChild(n.firstChild)}},\"undefined\"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return Ut(e,t,n,r)}))}:Ut),Ft=function(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t},Wt={animation:[\"animationDelay\",\"animationDirection\",\"animationDuration\",\"animationFillMode\",\"animationIterationCount\",\"animationName\",\"animationPlayState\",\"animationTimingFunction\"],background:[\"backgroundAttachment\",\"backgroundClip\",\"backgroundColor\",\"backgroundImage\",\"backgroundOrigin\",\"backgroundPositionX\",\"backgroundPositionY\",\"backgroundRepeat\",\"backgroundSize\"],backgroundPosition:[\"backgroundPositionX\",\"backgroundPositionY\"],border:[\"borderBottomColor\",\"borderBottomStyle\",\"borderBottomWidth\",\"borderImageOutset\",\"borderImageRepeat\",\"borderImageSlice\",\"borderImageSource\",\"borderImageWidth\",\"borderLeftColor\",\"borderLeftStyle\",\"borderLeftWidth\",\"borderRightColor\",\"borderRightStyle\",\"borderRightWidth\",\"borderTopColor\",\"borderTopStyle\",\"borderTopWidth\"],borderBlockEnd:[\"borderBlockEndColor\",\"borderBlockEndStyle\",\"borderBlockEndWidth\"],borderBlockStart:[\"borderBlockStartColor\",\"borderBlockStartStyle\",\"borderBlockStartWidth\"],borderBottom:[\"borderBottomColor\",\"borderBottomStyle\",\"borderBottomWidth\"],borderColor:[\"borderBottomColor\",\"borderLeftColor\",\"borderRightColor\",\"borderTopColor\"],borderImage:[\"borderImageOutset\",\"borderImageRepeat\",\"borderImageSlice\",\"borderImageSource\",\"borderImageWidth\"],borderInlineEnd:[\"borderInlineEndColor\",\"borderInlineEndStyle\",\"borderInlineEndWidth\"],borderInlineStart:[\"borderInlineStartColor\",\"borderInlineStartStyle\",\"borderInlineStartWidth\"],borderLeft:[\"borderLeftColor\",\"borderLeftStyle\",\"borderLeftWidth\"],borderRadius:[\"borderBottomLeftRadius\",\"borderBottomRightRadius\",\"borderTopLeftRadius\",\"borderTopRightRadius\"],borderRight:[\"borderRightColor\",\"borderRightStyle\",\"borderRightWidth\"],borderStyle:[\"borderBottomStyle\",\"borderLeftStyle\",\"borderRightStyle\",\"borderTopStyle\"],borderTop:[\"borderTopColor\",\"borderTopStyle\",\"borderTopWidth\"],borderWidth:[\"borderBottomWidth\",\"borderLeftWidth\",\"borderRightWidth\",\"borderTopWidth\"],columnRule:[\"columnRuleColor\",\"columnRuleStyle\",\"columnRuleWidth\"],columns:[\"columnCount\",\"columnWidth\"],flex:[\"flexBasis\",\"flexGrow\",\"flexShrink\"],flexFlow:[\"flexDirection\",\"flexWrap\"],font:[\"fontFamily\",\"fontFeatureSettings\",\"fontKerning\",\"fontLanguageOverride\",\"fontSize\",\"fontSizeAdjust\",\"fontStretch\",\"fontStyle\",\"fontVariant\",\"fontVariantAlternates\",\"fontVariantCaps\",\"fontVariantEastAsian\",\"fontVariantLigatures\",\"fontVariantNumeric\",\"fontVariantPosition\",\"fontWeight\",\"lineHeight\"],fontVariant:[\"fontVariantAlternates\",\"fontVariantCaps\",\"fontVariantEastAsian\",\"fontVariantLigatures\",\"fontVariantNumeric\",\"fontVariantPosition\"],gap:[\"columnGap\",\"rowGap\"],grid:[\"gridAutoColumns\",\"gridAutoFlow\",\"gridAutoRows\",\"gridTemplateAreas\",\"gridTemplateColumns\",\"gridTemplateRows\"],gridArea:[\"gridColumnEnd\",\"gridColumnStart\",\"gridRowEnd\",\"gridRowStart\"],gridColumn:[\"gridColumnEnd\",\"gridColumnStart\"],gridColumnGap:[\"columnGap\"],gridGap:[\"columnGap\",\"rowGap\"],gridRow:[\"gridRowEnd\",\"gridRowStart\"],gridRowGap:[\"rowGap\"],gridTemplate:[\"gridTemplateAreas\",\"gridTemplateColumns\",\"gridTemplateRows\"],listStyle:[\"listStyleImage\",\"listStylePosition\",\"listStyleType\"],margin:[\"marginBottom\",\"marginLeft\",\"marginRight\",\"marginTop\"],marker:[\"markerEnd\",\"markerMid\",\"markerStart\"],mask:[\"maskClip\",\"maskComposite\",\"maskImage\",\"maskMode\",\"maskOrigin\",\"maskPositionX\",\"maskPositionY\",\"maskRepeat\",\"maskSize\"],maskPosition:[\"maskPositionX\",\"maskPositionY\"],outline:[\"outlineColor\",\"outlineStyle\",\"outlineWidth\"],overflow:[\"overflowX\",\"overflowY\"],padding:[\"paddingBottom\",\"paddingLeft\",\"paddingRight\",\"paddingTop\"],placeContent:[\"alignContent\",\"justifyContent\"],placeItems:[\"alignItems\",\"justifyItems\"],placeSelf:[\"alignSelf\",\"justifySelf\"],textDecoration:[\"textDecorationColor\",\"textDecorationLine\",\"textDecorationStyle\"],textEmphasis:[\"textEmphasisColor\",\"textEmphasisStyle\"],transition:[\"transitionDelay\",\"transitionDuration\",\"transitionProperty\",\"transitionTimingFunction\"],wordWrap:[\"overflowWrap\"]},jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0};var Bt=[\"Webkit\",\"ms\",\"Moz\",\"O\"];function Vt(e,t,n){return null==t||\"boolean\"==typeof t||\"\"===t?\"\":n||\"number\"!=typeof t||0===t||jt.hasOwnProperty(e)&&jt[e]?(\"\"+t).trim():t+\"px\"}Object.keys(jt).forEach((function(e){Bt.forEach((function(t){jt[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=jt[e]}))}));var Ht=/([A-Z])/g,qt=/^ms-/;var $t=/^(?:webkit|moz|o)[A-Z]/,Qt=/^-ms-/,Yt=/-(.)/g,Kt=/;\\s*$/,Xt={},Gt={},Zt=!1,Jt=!1,en=function(e){Xt.hasOwnProperty(e)&&Xt[e]||(Xt[e]=!0,a(\"Unsupported style property %s. Did you mean %s?\",e,e.replace(Qt,\"ms-\").replace(Yt,(function(e,t){return t.toUpperCase()}))))},tn=function(e,t){e.indexOf(\"-\")>-1?en(e):$t.test(e)?function(e){Xt.hasOwnProperty(e)&&Xt[e]||(Xt[e]=!0,a(\"Unsupported vendor-prefixed style property %s. Did you mean %s?\",e,e.charAt(0).toUpperCase()+e.slice(1)))}(e):Kt.test(t)&&function(e,t){Gt.hasOwnProperty(t)&&Gt[t]||(Gt[t]=!0,a('Style property values shouldn\\'t contain a semicolon. Try \"%s: %s\" instead.',e,t.replace(Kt,\"\")))}(e,t),\"number\"==typeof t&&(isNaN(t)?function(e,t){Zt||(Zt=!0,a(\"`NaN` is an invalid value for the `%s` css style property.\",e))}(e):isFinite(t)||function(e,t){Jt||(Jt=!0,a(\"`Infinity` is an invalid value for the `%s` css style property.\",e))}(e))};function nn(e){var t=\"\",n=\"\";for(var r in e)if(e.hasOwnProperty(r)){var a=e[r];if(null!=a){var o=0===r.indexOf(\"--\");t+=n+(o?r:r.replace(Ht,\"-$1\").toLowerCase().replace(qt,\"-ms-\"))+\":\",t+=Vt(r,a,o),n=\";\"}}return t||null}function rn(e,t){var n=e.style;for(var r in t)if(t.hasOwnProperty(r)){var a=0===r.indexOf(\"--\");a||tn(r,t[r]);var o=Vt(r,t[r],a);\"float\"===r&&(r=\"cssFloat\"),a?n.setProperty(r,o):n[r]=o}}function an(e){var t={};for(var n in e)for(var r=Wt[n]||[n],a=0;a<r.length;a++)t[r[a]]=n;return t}var on=Q({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ln(e,t){if(t){if(on[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(e+\" is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.\");if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(\"Can only set one of `children` or `props.dangerouslySetInnerHTML`.\");if(\"object\"!=typeof t.dangerouslySetInnerHTML||!(\"__html\"in t.dangerouslySetInnerHTML))throw Error(\"`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.\")}if(!t.suppressContentEditableWarning&&t.contentEditable&&null!=t.children&&a(\"A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.\"),null!=t.style&&\"object\"!=typeof t.style)throw Error(\"The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.\")}}function un(e,t){if(-1===e.indexOf(\"-\"))return\"string\"==typeof t.is;switch(e){case\"annotation-xml\":case\"color-profile\":case\"font-face\":case\"font-face-src\":case\"font-face-uri\":case\"font-face-format\":case\"font-face-name\":case\"missing-glyph\":return!1;default:return!0}}var sn={accept:\"accept\",acceptcharset:\"acceptCharset\",\"accept-charset\":\"acceptCharset\",accesskey:\"accessKey\",action:\"action\",allowfullscreen:\"allowFullScreen\",alt:\"alt\",as:\"as\",async:\"async\",autocapitalize:\"autoCapitalize\",autocomplete:\"autoComplete\",autocorrect:\"autoCorrect\",autofocus:\"autoFocus\",autoplay:\"autoPlay\",autosave:\"autoSave\",capture:\"capture\",cellpadding:\"cellPadding\",cellspacing:\"cellSpacing\",challenge:\"challenge\",charset:\"charSet\",checked:\"checked\",children:\"children\",cite:\"cite\",class:\"className\",classid:\"classID\",classname:\"className\",cols:\"cols\",colspan:\"colSpan\",content:\"content\",contenteditable:\"contentEditable\",contextmenu:\"contextMenu\",controls:\"controls\",controlslist:\"controlsList\",coords:\"coords\",crossorigin:\"crossOrigin\",dangerouslysetinnerhtml:\"dangerouslySetInnerHTML\",data:\"data\",datetime:\"dateTime\",default:\"default\",defaultchecked:\"defaultChecked\",defaultvalue:\"defaultValue\",defer:\"defer\",dir:\"dir\",disabled:\"disabled\",disablepictureinpicture:\"disablePictureInPicture\",disableremoteplayback:\"disableRemotePlayback\",download:\"download\",draggable:\"draggable\",enctype:\"encType\",enterkeyhint:\"enterKeyHint\",for:\"htmlFor\",form:\"form\",formmethod:\"formMethod\",formaction:\"formAction\",formenctype:\"formEncType\",formnovalidate:\"formNoValidate\",formtarget:\"formTarget\",frameborder:\"frameBorder\",headers:\"headers\",height:\"height\",hidden:\"hidden\",high:\"high\",href:\"href\",hreflang:\"hrefLang\",htmlfor:\"htmlFor\",httpequiv:\"httpEquiv\",\"http-equiv\":\"httpEquiv\",icon:\"icon\",id:\"id\",innerhtml:\"innerHTML\",inputmode:\"inputMode\",integrity:\"integrity\",is:\"is\",itemid:\"itemID\",itemprop:\"itemProp\",itemref:\"itemRef\",itemscope:\"itemScope\",itemtype:\"itemType\",keyparams:\"keyParams\",keytype:\"keyType\",kind:\"kind\",label:\"label\",lang:\"lang\",list:\"list\",loop:\"loop\",low:\"low\",manifest:\"manifest\",marginwidth:\"marginWidth\",marginheight:\"marginHeight\",max:\"max\",maxlength:\"maxLength\",media:\"media\",mediagroup:\"mediaGroup\",method:\"method\",min:\"min\",minlength:\"minLength\",multiple:\"multiple\",muted:\"muted\",name:\"name\",nomodule:\"noModule\",nonce:\"nonce\",novalidate:\"noValidate\",open:\"open\",optimum:\"optimum\",pattern:\"pattern\",placeholder:\"placeholder\",playsinline:\"playsInline\",poster:\"poster\",preload:\"preload\",profile:\"profile\",radiogroup:\"radioGroup\",readonly:\"readOnly\",referrerpolicy:\"referrerPolicy\",rel:\"rel\",required:\"required\",reversed:\"reversed\",role:\"role\",rows:\"rows\",rowspan:\"rowSpan\",sandbox:\"sandbox\",scope:\"scope\",scoped:\"scoped\",scrolling:\"scrolling\",seamless:\"seamless\",selected:\"selected\",shape:\"shape\",size:\"size\",sizes:\"sizes\",span:\"span\",spellcheck:\"spellCheck\",src:\"src\",srcdoc:\"srcDoc\",srclang:\"srcLang\",srcset:\"srcSet\",start:\"start\",step:\"step\",style:\"style\",summary:\"summary\",tabindex:\"tabIndex\",target:\"target\",title:\"title\",type:\"type\",usemap:\"useMap\",value:\"value\",width:\"width\",wmode:\"wmode\",wrap:\"wrap\",about:\"about\",accentheight:\"accentHeight\",\"accent-height\":\"accentHeight\",accumulate:\"accumulate\",additive:\"additive\",alignmentbaseline:\"alignmentBaseline\",\"alignment-baseline\":\"alignmentBaseline\",allowreorder:\"allowReorder\",alphabetic:\"alphabetic\",amplitude:\"amplitude\",arabicform:\"arabicForm\",\"arabic-form\":\"arabicForm\",ascent:\"ascent\",attributename:\"attributeName\",attributetype:\"attributeType\",autoreverse:\"autoReverse\",azimuth:\"azimuth\",basefrequency:\"baseFrequency\",baselineshift:\"baselineShift\",\"baseline-shift\":\"baselineShift\",baseprofile:\"baseProfile\",bbox:\"bbox\",begin:\"begin\",bias:\"bias\",by:\"by\",calcmode:\"calcMode\",capheight:\"capHeight\",\"cap-height\":\"capHeight\",clip:\"clip\",clippath:\"clipPath\",\"clip-path\":\"clipPath\",clippathunits:\"clipPathUnits\",cliprule:\"clipRule\",\"clip-rule\":\"clipRule\",color:\"color\",colorinterpolation:\"colorInterpolation\",\"color-interpolation\":\"colorInterpolation\",colorinterpolationfilters:\"colorInterpolationFilters\",\"color-interpolation-filters\":\"colorInterpolationFilters\",colorprofile:\"colorProfile\",\"color-profile\":\"colorProfile\",colorrendering:\"colorRendering\",\"color-rendering\":\"colorRendering\",contentscripttype:\"contentScriptType\",contentstyletype:\"contentStyleType\",cursor:\"cursor\",cx:\"cx\",cy:\"cy\",d:\"d\",datatype:\"datatype\",decelerate:\"decelerate\",descent:\"descent\",diffuseconstant:\"diffuseConstant\",direction:\"direction\",display:\"display\",divisor:\"divisor\",dominantbaseline:\"dominantBaseline\",\"dominant-baseline\":\"dominantBaseline\",dur:\"dur\",dx:\"dx\",dy:\"dy\",edgemode:\"edgeMode\",elevation:\"elevation\",enablebackground:\"enableBackground\",\"enable-background\":\"enableBackground\",end:\"end\",exponent:\"exponent\",externalresourcesrequired:\"externalResourcesRequired\",fill:\"fill\",fillopacity:\"fillOpacity\",\"fill-opacity\":\"fillOpacity\",fillrule:\"fillRule\",\"fill-rule\":\"fillRule\",filter:\"filter\",filterres:\"filterRes\",filterunits:\"filterUnits\",floodopacity:\"floodOpacity\",\"flood-opacity\":\"floodOpacity\",floodcolor:\"floodColor\",\"flood-color\":\"floodColor\",focusable:\"focusable\",fontfamily:\"fontFamily\",\"font-family\":\"fontFamily\",fontsize:\"fontSize\",\"font-size\":\"fontSize\",fontsizeadjust:\"fontSizeAdjust\",\"font-size-adjust\":\"fontSizeAdjust\",fontstretch:\"fontStretch\",\"font-stretch\":\"fontStretch\",fontstyle:\"fontStyle\",\"font-style\":\"fontStyle\",fontvariant:\"fontVariant\",\"font-variant\":\"fontVariant\",fontweight:\"fontWeight\",\"font-weight\":\"fontWeight\",format:\"format\",from:\"from\",fx:\"fx\",fy:\"fy\",g1:\"g1\",g2:\"g2\",glyphname:\"glyphName\",\"glyph-name\":\"glyphName\",glyphorientationhorizontal:\"glyphOrientationHorizontal\",\"glyph-orientation-horizontal\":\"glyphOrientationHorizontal\",glyphorientationvertical:\"glyphOrientationVertical\",\"glyph-orientation-vertical\":\"glyphOrientationVertical\",glyphref:\"glyphRef\",gradienttransform:\"gradientTransform\",gradientunits:\"gradientUnits\",hanging:\"hanging\",horizadvx:\"horizAdvX\",\"horiz-adv-x\":\"horizAdvX\",horizoriginx:\"horizOriginX\",\"horiz-origin-x\":\"horizOriginX\",ideographic:\"ideographic\",imagerendering:\"imageRendering\",\"image-rendering\":\"imageRendering\",in2:\"in2\",in:\"in\",inlist:\"inlist\",intercept:\"intercept\",k1:\"k1\",k2:\"k2\",k3:\"k3\",k4:\"k4\",k:\"k\",kernelmatrix:\"kernelMatrix\",kernelunitlength:\"kernelUnitLength\",kerning:\"kerning\",keypoints:\"keyPoints\",keysplines:\"keySplines\",keytimes:\"keyTimes\",lengthadjust:\"lengthAdjust\",letterspacing:\"letterSpacing\",\"letter-spacing\":\"letterSpacing\",lightingcolor:\"lightingColor\",\"lighting-color\":\"lightingColor\",limitingconeangle:\"limitingConeAngle\",local:\"local\",markerend:\"markerEnd\",\"marker-end\":\"markerEnd\",markerheight:\"markerHeight\",markermid:\"markerMid\",\"marker-mid\":\"markerMid\",markerstart:\"markerStart\",\"marker-start\":\"markerStart\",markerunits:\"markerUnits\",markerwidth:\"markerWidth\",mask:\"mask\",maskcontentunits:\"maskContentUnits\",maskunits:\"maskUnits\",mathematical:\"mathematical\",mode:\"mode\",numoctaves:\"numOctaves\",offset:\"offset\",opacity:\"opacity\",operator:\"operator\",order:\"order\",orient:\"orient\",orientation:\"orientation\",origin:\"origin\",overflow:\"overflow\",overlineposition:\"overlinePosition\",\"overline-position\":\"overlinePosition\",overlinethickness:\"overlineThickness\",\"overline-thickness\":\"overlineThickness\",paintorder:\"paintOrder\",\"paint-order\":\"paintOrder\",panose1:\"panose1\",\"panose-1\":\"panose1\",pathlength:\"pathLength\",patterncontentunits:\"patternContentUnits\",patterntransform:\"patternTransform\",patternunits:\"patternUnits\",pointerevents:\"pointerEvents\",\"pointer-events\":\"pointerEvents\",points:\"points\",pointsatx:\"pointsAtX\",pointsaty:\"pointsAtY\",pointsatz:\"pointsAtZ\",prefix:\"prefix\",preservealpha:\"preserveAlpha\",preserveaspectratio:\"preserveAspectRatio\",primitiveunits:\"primitiveUnits\",property:\"property\",r:\"r\",radius:\"radius\",refx:\"refX\",refy:\"refY\",renderingintent:\"renderingIntent\",\"rendering-intent\":\"renderingIntent\",repeatcount:\"repeatCount\",repeatdur:\"repeatDur\",requiredextensions:\"requiredExtensions\",requiredfeatures:\"requiredFeatures\",resource:\"resource\",restart:\"restart\",result:\"result\",results:\"results\",rotate:\"rotate\",rx:\"rx\",ry:\"ry\",scale:\"scale\",security:\"security\",seed:\"seed\",shaperendering:\"shapeRendering\",\"shape-rendering\":\"shapeRendering\",slope:\"slope\",spacing:\"spacing\",specularconstant:\"specularConstant\",specularexponent:\"specularExponent\",speed:\"speed\",spreadmethod:\"spreadMethod\",startoffset:\"startOffset\",stddeviation:\"stdDeviation\",stemh:\"stemh\",stemv:\"stemv\",stitchtiles:\"stitchTiles\",stopcolor:\"stopColor\",\"stop-color\":\"stopColor\",stopopacity:\"stopOpacity\",\"stop-opacity\":\"stopOpacity\",strikethroughposition:\"strikethroughPosition\",\"strikethrough-position\":\"strikethroughPosition\",strikethroughthickness:\"strikethroughThickness\",\"strikethrough-thickness\":\"strikethroughThickness\",string:\"string\",stroke:\"stroke\",strokedasharray:\"strokeDasharray\",\"stroke-dasharray\":\"strokeDasharray\",strokedashoffset:\"strokeDashoffset\",\"stroke-dashoffset\":\"strokeDashoffset\",strokelinecap:\"strokeLinecap\",\"stroke-linecap\":\"strokeLinecap\",strokelinejoin:\"strokeLinejoin\",\"stroke-linejoin\":\"strokeLinejoin\",strokemiterlimit:\"strokeMiterlimit\",\"stroke-miterlimit\":\"strokeMiterlimit\",strokewidth:\"strokeWidth\",\"stroke-width\":\"strokeWidth\",strokeopacity:\"strokeOpacity\",\"stroke-opacity\":\"strokeOpacity\",suppresscontenteditablewarning:\"suppressContentEditableWarning\",suppresshydrationwarning:\"suppressHydrationWarning\",surfacescale:\"surfaceScale\",systemlanguage:\"systemLanguage\",tablevalues:\"tableValues\",targetx:\"targetX\",targety:\"targetY\",textanchor:\"textAnchor\",\"text-anchor\":\"textAnchor\",textdecoration:\"textDecoration\",\"text-decoration\":\"textDecoration\",textlength:\"textLength\",textrendering:\"textRendering\",\"text-rendering\":\"textRendering\",to:\"to\",transform:\"transform\",typeof:\"typeof\",u1:\"u1\",u2:\"u2\",underlineposition:\"underlinePosition\",\"underline-position\":\"underlinePosition\",underlinethickness:\"underlineThickness\",\"underline-thickness\":\"underlineThickness\",unicode:\"unicode\",unicodebidi:\"unicodeBidi\",\"unicode-bidi\":\"unicodeBidi\",unicoderange:\"unicodeRange\",\"unicode-range\":\"unicodeRange\",unitsperem:\"unitsPerEm\",\"units-per-em\":\"unitsPerEm\",unselectable:\"unselectable\",valphabetic:\"vAlphabetic\",\"v-alphabetic\":\"vAlphabetic\",values:\"values\",vectoreffect:\"vectorEffect\",\"vector-effect\":\"vectorEffect\",version:\"version\",vertadvy:\"vertAdvY\",\"vert-adv-y\":\"vertAdvY\",vertoriginx:\"vertOriginX\",\"vert-origin-x\":\"vertOriginX\",vertoriginy:\"vertOriginY\",\"vert-origin-y\":\"vertOriginY\",vhanging:\"vHanging\",\"v-hanging\":\"vHanging\",videographic:\"vIdeographic\",\"v-ideographic\":\"vIdeographic\",viewbox:\"viewBox\",viewtarget:\"viewTarget\",visibility:\"visibility\",vmathematical:\"vMathematical\",\"v-mathematical\":\"vMathematical\",vocab:\"vocab\",widths:\"widths\",wordspacing:\"wordSpacing\",\"word-spacing\":\"wordSpacing\",writingmode:\"writingMode\",\"writing-mode\":\"writingMode\",x1:\"x1\",x2:\"x2\",x:\"x\",xchannelselector:\"xChannelSelector\",xheight:\"xHeight\",\"x-height\":\"xHeight\",xlinkactuate:\"xlinkActuate\",\"xlink:actuate\":\"xlinkActuate\",xlinkarcrole:\"xlinkArcrole\",\"xlink:arcrole\":\"xlinkArcrole\",xlinkhref:\"xlinkHref\",\"xlink:href\":\"xlinkHref\",xlinkrole:\"xlinkRole\",\"xlink:role\":\"xlinkRole\",xlinkshow:\"xlinkShow\",\"xlink:show\":\"xlinkShow\",xlinktitle:\"xlinkTitle\",\"xlink:title\":\"xlinkTitle\",xlinktype:\"xlinkType\",\"xlink:type\":\"xlinkType\",xmlbase:\"xmlBase\",\"xml:base\":\"xmlBase\",xmllang:\"xmlLang\",\"xml:lang\":\"xmlLang\",xmlns:\"xmlns\",\"xml:space\":\"xmlSpace\",xmlnsxlink:\"xmlnsXlink\",\"xmlns:xlink\":\"xmlnsXlink\",xmlspace:\"xmlSpace\",y1:\"y1\",y2:\"y2\",y:\"y\",ychannelselector:\"yChannelSelector\",z:\"z\",zoomandpan:\"zoomAndPan\"},cn={\"aria-current\":0,\"aria-details\":0,\"aria-disabled\":0,\"aria-hidden\":0,\"aria-invalid\":0,\"aria-keyshortcuts\":0,\"aria-label\":0,\"aria-roledescription\":0,\"aria-autocomplete\":0,\"aria-checked\":0,\"aria-expanded\":0,\"aria-haspopup\":0,\"aria-level\":0,\"aria-modal\":0,\"aria-multiline\":0,\"aria-multiselectable\":0,\"aria-orientation\":0,\"aria-placeholder\":0,\"aria-pressed\":0,\"aria-readonly\":0,\"aria-required\":0,\"aria-selected\":0,\"aria-sort\":0,\"aria-valuemax\":0,\"aria-valuemin\":0,\"aria-valuenow\":0,\"aria-valuetext\":0,\"aria-atomic\":0,\"aria-busy\":0,\"aria-live\":0,\"aria-relevant\":0,\"aria-dropeffect\":0,\"aria-grabbed\":0,\"aria-activedescendant\":0,\"aria-colcount\":0,\"aria-colindex\":0,\"aria-colspan\":0,\"aria-controls\":0,\"aria-describedby\":0,\"aria-errormessage\":0,\"aria-flowto\":0,\"aria-labelledby\":0,\"aria-owns\":0,\"aria-posinset\":0,\"aria-rowcount\":0,\"aria-rowindex\":0,\"aria-rowspan\":0,\"aria-setsize\":0},dn={},fn=new RegExp(\"^(aria)-[\"+R+\"]*$\"),pn=new RegExp(\"^(aria)[A-Z][\"+R+\"]*$\"),hn=Object.prototype.hasOwnProperty;function mn(e,t){if(hn.call(dn,t)&&dn[t])return!0;if(pn.test(t)){var n=\"aria-\"+t.slice(4).toLowerCase(),r=cn.hasOwnProperty(n)?n:null;if(null==r)return a(\"Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.\",t),dn[t]=!0,!0;if(t!==r)return a(\"Invalid ARIA attribute `%s`. Did you mean `%s`?\",t,r),dn[t]=!0,!0}if(fn.test(t)){var o=t.toLowerCase(),i=cn.hasOwnProperty(o)?o:null;if(null==i)return dn[t]=!0,!1;if(t!==i)return a(\"Unknown ARIA attribute `%s`. Did you mean `%s`?\",t,i),dn[t]=!0,!0}return!0}function vn(e,t){un(e,t)||function(e,t){var n=[];for(var r in t)mn(0,r)||n.push(r);var o=n.map((function(e){return\"`\"+e+\"`\"})).join(\", \");1===n.length?a(\"Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props\",o,e):n.length>1&&a(\"Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props\",o,e)}(e,t)}var gn=!1;var yn,bn={},wn=Object.prototype.hasOwnProperty,kn=/^on./,Sn=/^on[^A-Z]/,xn=new RegExp(\"^(aria)-[\"+R+\"]*$\"),En=new RegExp(\"^(aria)[A-Z][\"+R+\"]*$\");yn=function(e,t,n,r){if(wn.call(bn,t)&&bn[t])return!0;var o=t.toLowerCase();if(\"onfocusin\"===o||\"onfocusout\"===o)return a(\"React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.\"),bn[t]=!0,!0;if(null!=r){var i=r.registrationNameDependencies,l=r.possibleRegistrationNames;if(i.hasOwnProperty(t))return!0;var u=l.hasOwnProperty(o)?l[o]:null;if(null!=u)return a(\"Invalid event handler property `%s`. Did you mean `%s`?\",t,u),bn[t]=!0,!0;if(kn.test(t))return a(\"Unknown event handler property `%s`. It will be ignored.\",t),bn[t]=!0,!0}else if(kn.test(t))return Sn.test(t)&&a(\"Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.\",t),bn[t]=!0,!0;if(xn.test(t)||En.test(t))return!0;if(\"innerhtml\"===o)return a(\"Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.\"),bn[t]=!0,!0;if(\"aria\"===o)return a(\"The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.\"),bn[t]=!0,!0;if(\"is\"===o&&null!=n&&\"string\"!=typeof n)return a(\"Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.\",typeof n),bn[t]=!0,!0;if(\"number\"==typeof n&&isNaN(n))return a(\"Received NaN for the `%s` attribute. If this is expected, cast the value to a string.\",t),bn[t]=!0,!0;var s=M(t),c=null!==s&&0===s.type;if(sn.hasOwnProperty(o)){var d=sn[o];if(d!==t)return a(\"Invalid DOM property `%s`. Did you mean `%s`?\",t,d),bn[t]=!0,!0}else if(!c&&t!==o)return a(\"React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.\",t,o),bn[t]=!0,!0;return\"boolean\"==typeof n&&O(t,n,s,!1)?(n?a('Received `%s` for a non-boolean attribute `%s`.\\n\\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.',n,t,t,n,t):a('Received `%s` for a non-boolean attribute `%s`.\\n\\nIf you want to write it to the DOM, pass a string instead: %s=\"%s\" or %s={value.toString()}.\\n\\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.',n,t,t,n,t,t,t),bn[t]=!0,!0):!!c||(O(t,n,s,!1)?(bn[t]=!0,!1):(\"false\"!==n&&\"true\"!==n||null===s||3!==s.type||(a(\"Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?\",n,t,\"false\"===n?\"The browser will interpret it as a truthy value.\":'Although this works, it will not work as expected if you pass the string \"false\".',t,n),bn[t]=!0),!0))};function Cn(e,t,n){un(e,t)||function(e,t,n){var r=[];for(var o in t)yn(0,o,t[o],n)||r.push(o);var i=r.map((function(e){return\"`\"+e+\"`\"})).join(\", \");1===r.length?a(\"Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior \",i,e):r.length>1&&a(\"Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior \",i,e)}(e,t,n)}function Rn(e){var t=e.target||e.srcElement||window;return t.correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var Tn=null,Pn=null,_n=null;function Dn(e){var t=Iu(e);if(t){if(\"function\"!=typeof Tn)throw Error(\"setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.\");var n=t.stateNode;if(n){var r=Lu(n);Tn(t.stateNode,t.type,r)}}}function In(e){Pn?_n?_n.push(e):_n=[e]:Pn=e}function Nn(){if(Pn){var e=Pn,t=_n;if(Pn=null,_n=null,Dn(e),t)for(var n=0;n<t.length;n++)Dn(t[n])}}var Ln=function(e,t){return e(t)},On=function(e,t,n,r,a){return e(t,n,r,a)},zn=function(){},Mn=Ln,Un=!1,An=!1;function Fn(){(null!==Pn||null!==_n)&&(zn(),Nn())}function Wn(e,t){var n=e.stateNode;if(null===n)return null;var r=Lu(n);if(null===r)return null;var a=r[t];if(function(e,t,n){switch(e){case\"onClick\":case\"onClickCapture\":case\"onDoubleClick\":case\"onDoubleClickCapture\":case\"onMouseDown\":case\"onMouseDownCapture\":case\"onMouseMove\":case\"onMouseMoveCapture\":case\"onMouseUp\":case\"onMouseUpCapture\":case\"onMouseEnter\":return!(!n.disabled||(r=t,\"button\"!==r&&\"input\"!==r&&\"select\"!==r&&\"textarea\"!==r));default:return!1}var r}(t,e.type,r))return null;if(a&&\"function\"!=typeof a)throw Error(\"Expected `\"+t+\"` listener to be a function, instead got a value of `\"+typeof a+\"` type.\");return a}var jn=!1;if(E)try{var Bn={};Object.defineProperty(Bn,\"passive\",{get:function(){jn=!0}}),window.addEventListener(\"test\",Bn,Bn),window.removeEventListener(\"test\",Bn,Bn)}catch(e){jn=!1}function Vn(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Hn=Vn;if(\"undefined\"!=typeof window&&\"function\"==typeof window.dispatchEvent&&\"undefined\"!=typeof document&&\"function\"==typeof document.createEvent){var qn=document.createElement(\"react\");Hn=function(e,t,n,r,a,o,i,l,u){if(\"undefined\"==typeof document)throw Error(\"The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.\");var s=document.createEvent(\"Event\"),c=!1,d=!0,f=window.event,p=Object.getOwnPropertyDescriptor(window,\"event\");function h(){qn.removeEventListener(k,g,!1),void 0!==window.event&&window.hasOwnProperty(\"event\")&&(window.event=f)}var m,v=Array.prototype.slice.call(arguments,3);function g(){c=!0,h(),t.apply(n,v),d=!1}var y=!1,b=!1;function w(e){if(m=e.error,y=!0,null===m&&0===e.colno&&0===e.lineno&&(b=!0),e.defaultPrevented&&null!=m&&\"object\"==typeof m)try{m._suppressLogging=!0}catch(e){}}var k=\"react-\"+(e||\"invokeguardedcallback\");if(window.addEventListener(\"error\",w),qn.addEventListener(k,g,!1),s.initEvent(k,!1,!1),qn.dispatchEvent(s),p&&Object.defineProperty(window,\"event\",p),c&&d&&(y?b&&(m=new Error(\"A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.\")):m=new Error(\"An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \\\"Pause on exceptions\\\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.\"),this.onError(m)),window.removeEventListener(\"error\",w),!c)return h(),Vn.apply(this,arguments)}}var $n=Hn,Qn=!1,Yn=null,Kn=!1,Xn=null,Gn={onError:function(e){Qn=!0,Yn=e}};function Zn(e,t,n,r,a,o,i,l,u){Qn=!1,Yn=null,$n.apply(Gn,arguments)}function Jn(){return Qn}function er(){if(Qn){var e=Yn;return Qn=!1,Yn=null,e}throw Error(\"clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.\")}var tr=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.Scheduler,nr=tr.unstable_cancelCallback,rr=tr.unstable_now,ar=tr.unstable_scheduleCallback,or=tr.unstable_shouldYield,ir=tr.unstable_requestPaint,lr=(tr.unstable_getFirstCallbackNode,tr.unstable_runWithPriority),ur=(tr.unstable_next,tr.unstable_continueExecution,tr.unstable_pauseExecution,tr.unstable_getCurrentPriorityLevel),sr=tr.unstable_ImmediatePriority,cr=tr.unstable_UserBlockingPriority,dr=tr.unstable_NormalPriority,fr=tr.unstable_LowPriority,pr=tr.unstable_IdlePriority,hr=(tr.unstable_forceFrameRate,tr.unstable_flushAllWithoutAsserting);function mr(e){return e._reactInternals}var vr,gr,yr,br,wr=64,kr=128,Sr=256,xr=512,Er=8192,Cr=1024,Rr=2048,Tr=4096,Pr=16384,_r=n.ReactCurrentOwner;function Dr(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{var r=t;do{0!=(1026&(t=r).flags)&&(n=t.return),r=t.return}while(r)}return 3===t.tag?n:null}function Ir(e){if(e.tag===s){var t=e.memoizedState;if(null===t){var n=e.alternate;null!==n&&(t=n.memoizedState)}if(null!==t)return t.dehydrated}return null}function Nr(e){return 3===e.tag?e.stateNode.containerInfo:null}function Lr(e){if(Dr(e)!==e)throw Error(\"Unable to find node on an unmounted component.\")}function Or(e){var t=e.alternate;if(!t){var n=Dr(e);if(null===n)throw Error(\"Unable to find node on an unmounted component.\");return n!==e?null:e}for(var r=e,a=t;;){var o=r.return;if(null===o)break;var i=o.alternate;if(null===i){var l=o.return;if(null!==l){r=a=l;continue}break}if(o.child===i.child){for(var u=o.child;u;){if(u===r)return Lr(o),e;if(u===a)return Lr(o),t;u=u.sibling}throw Error(\"Unable to find node on an unmounted component.\")}if(r.return!==a.return)r=o,a=i;else{for(var s=!1,c=o.child;c;){if(c===r){s=!0,r=o,a=i;break}if(c===a){s=!0,a=o,r=i;break}c=c.sibling}if(!s){for(c=i.child;c;){if(c===r){s=!0,r=i,a=o;break}if(c===a){s=!0,a=i,r=o;break}c=c.sibling}if(!s)throw Error(\"Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.\")}}if(r.alternate!==a)throw Error(\"Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.\")}if(3!==r.tag)throw Error(\"Unable to find node on an unmounted component.\");return r.stateNode.current===r?e:t}function zr(e){var t=Or(e);if(!t)return null;for(var n=t;;){if(5===n.tag||6===n.tag)return n;if(n.child)n.child.return=n,n=n.child;else{if(n===t)return null;for(;!n.sibling;){if(!n.return||n.return===t)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}function Mr(e,t){for(var n=t,r=e.alternate;null!==n;){if(n===e||n===r)return!0;n=n.return}return!1}var Ur=!1,Ar=[],Fr=null,Wr=null,jr=null,Br=new Map,Vr=new Map,Hr=[];var qr=[\"mousedown\",\"mouseup\",\"touchcancel\",\"touchend\",\"touchstart\",\"auxclick\",\"dblclick\",\"pointercancel\",\"pointerdown\",\"pointerup\",\"dragend\",\"dragstart\",\"drop\",\"compositionend\",\"compositionstart\",\"keydown\",\"keypress\",\"keyup\",\"input\",\"textInput\",\"copy\",\"cut\",\"paste\",\"click\",\"change\",\"contextmenu\",\"reset\",\"submit\"];function $r(e){return qr.indexOf(e)>-1}function Qr(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function Yr(e,t,n,r,a){var o=Qr(e,t,n,r,a);Ar.push(o)}function Kr(e,t){switch(e){case\"focusin\":case\"focusout\":Fr=null;break;case\"dragenter\":case\"dragleave\":Wr=null;break;case\"mouseover\":case\"mouseout\":jr=null;break;case\"pointerover\":case\"pointerout\":var n=t.pointerId;Br.delete(n);break;case\"gotpointercapture\":case\"lostpointercapture\":var r=t.pointerId;Vr.delete(r)}}function Xr(e,t,n,r,a,o){if(null===e||e.nativeEvent!==o){var i=Qr(t,n,r,a,o);if(null!==t){var l=Iu(t);null!==l&&gr(l)}return i}e.eventSystemFlags|=r;var u=e.targetContainers;return null!==a&&-1===u.indexOf(a)&&u.push(a),e}function Gr(e){var t=Du(e.target);if(null!==t){var n=Dr(t);if(null!==n){var r=n.tag;if(r===s){var a=Ir(n);if(null!==a)return e.blockedOn=a,void br(e.lanePriority,(function(){lr(e.priority,(function(){yr(n)}))}))}else if(3===r){if(n.stateNode.hydrate)return void(e.blockedOn=Nr(n))}}}e.blockedOn=null}function Zr(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;t.length>0;){var n=t[0],r=po(e.domEventName,e.eventSystemFlags,n,e.nativeEvent);if(null!==r){var a=Iu(r);return null!==a&&gr(a),e.blockedOn=r,!1}t.shift()}return!0}function Jr(e,t,n){Zr(e)&&n.delete(t)}function ea(){for(Ur=!1;Ar.length>0;){var e=Ar[0];if(null!==e.blockedOn){var t=Iu(e.blockedOn);null!==t&&vr(t);break}for(var n=e.targetContainers;n.length>0;){var r=n[0],a=po(e.domEventName,e.eventSystemFlags,r,e.nativeEvent);if(null!==a){e.blockedOn=a;break}n.shift()}null===e.blockedOn&&Ar.shift()}null!==Fr&&Zr(Fr)&&(Fr=null),null!==Wr&&Zr(Wr)&&(Wr=null),null!==jr&&Zr(jr)&&(jr=null),Br.forEach(Jr),Vr.forEach(Jr)}function ta(e,t){e.blockedOn===t&&(e.blockedOn=null,Ur||(Ur=!0,ar(dr,ea)))}function na(e){if(Ar.length>0){ta(Ar[0],e);for(var t=1;t<Ar.length;t++){var n=Ar[t];n.blockedOn===e&&(n.blockedOn=null)}}null!==Fr&&ta(Fr,e),null!==Wr&&ta(Wr,e),null!==jr&&ta(jr,e);var r=function(t){return ta(t,e)};Br.forEach(r),Vr.forEach(r);for(var a=0;a<Hr.length;a++){var o=Hr[a];o.blockedOn===e&&(o.blockedOn=null)}for(;Hr.length>0;){var i=Hr[0];if(null!==i.blockedOn)break;Gr(i),null===i.blockedOn&&Hr.shift()}}function ra(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n[\"Webkit\"+e]=\"webkit\"+t,n[\"Moz\"+e]=\"moz\"+t,n}var aa={animationend:ra(\"Animation\",\"AnimationEnd\"),animationiteration:ra(\"Animation\",\"AnimationIteration\"),animationstart:ra(\"Animation\",\"AnimationStart\"),transitionend:ra(\"Transition\",\"TransitionEnd\")},oa={},ia={};function la(e){if(oa[e])return oa[e];if(!aa[e])return e;var t=aa[e];for(var n in t)if(t.hasOwnProperty(n)&&n in ia)return oa[e]=t[n];return e}E&&(ia=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete aa.animationend.animation,delete aa.animationiteration.animation,delete aa.animationstart.animation),\"TransitionEvent\"in window||delete aa.transitionend.transition);var ua=la(\"animationend\"),sa=la(\"animationiteration\"),ca=la(\"animationstart\"),da=la(\"transitionend\"),fa=new Map,pa=new Map,ha=[\"cancel\",\"cancel\",\"click\",\"click\",\"close\",\"close\",\"contextmenu\",\"contextMenu\",\"copy\",\"copy\",\"cut\",\"cut\",\"auxclick\",\"auxClick\",\"dblclick\",\"doubleClick\",\"dragend\",\"dragEnd\",\"dragstart\",\"dragStart\",\"drop\",\"drop\",\"focusin\",\"focus\",\"focusout\",\"blur\",\"input\",\"input\",\"invalid\",\"invalid\",\"keydown\",\"keyDown\",\"keypress\",\"keyPress\",\"keyup\",\"keyUp\",\"mousedown\",\"mouseDown\",\"mouseup\",\"mouseUp\",\"paste\",\"paste\",\"pause\",\"pause\",\"play\",\"play\",\"pointercancel\",\"pointerCancel\",\"pointerdown\",\"pointerDown\",\"pointerup\",\"pointerUp\",\"ratechange\",\"rateChange\",\"reset\",\"reset\",\"seeked\",\"seeked\",\"submit\",\"submit\",\"touchcancel\",\"touchCancel\",\"touchend\",\"touchEnd\",\"touchstart\",\"touchStart\",\"volumechange\",\"volumeChange\"],ma=[\"change\",\"selectionchange\",\"textInput\",\"compositionstart\",\"compositionend\",\"compositionupdate\"],va=[\"drag\",\"drag\",\"dragenter\",\"dragEnter\",\"dragexit\",\"dragExit\",\"dragleave\",\"dragLeave\",\"dragover\",\"dragOver\",\"mousemove\",\"mouseMove\",\"mouseout\",\"mouseOut\",\"mouseover\",\"mouseOver\",\"pointermove\",\"pointerMove\",\"pointerout\",\"pointerOut\",\"pointerover\",\"pointerOver\",\"scroll\",\"scroll\",\"toggle\",\"toggle\",\"touchmove\",\"touchMove\",\"wheel\",\"wheel\"],ga=[\"abort\",\"abort\",ua,\"animationEnd\",sa,\"animationIteration\",ca,\"animationStart\",\"canplay\",\"canPlay\",\"canplaythrough\",\"canPlayThrough\",\"durationchange\",\"durationChange\",\"emptied\",\"emptied\",\"encrypted\",\"encrypted\",\"ended\",\"ended\",\"error\",\"error\",\"gotpointercapture\",\"gotPointerCapture\",\"load\",\"load\",\"loadeddata\",\"loadedData\",\"loadedmetadata\",\"loadedMetadata\",\"loadstart\",\"loadStart\",\"lostpointercapture\",\"lostPointerCapture\",\"playing\",\"playing\",\"progress\",\"progress\",\"seeking\",\"seeking\",\"stalled\",\"stalled\",\"suspend\",\"suspend\",\"timeupdate\",\"timeUpdate\",da,\"transitionEnd\",\"waiting\",\"waiting\"];function ya(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1],o=\"on\"+(a[0].toUpperCase()+a.slice(1));pa.set(r,t),fa.set(r,o),S(o,[r])}}var ba=t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.SchedulerTracing,wa=ba.__interactionsRef,ka=ba.__subscriberRef,Sa=(ba.unstable_clear,ba.unstable_getCurrent,ba.unstable_getThreadID),xa=(ba.unstable_subscribe,ba.unstable_trace,ba.unstable_unsubscribe,ba.unstable_wrap),Ea=rr;if(null==wa||null==wa.current)throw Error(\"It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling\");Ea();var Ca=15,Ra=10,Ta=3584,Pa=4186112,_a=62914560,Da=33554432,Ia=67108864,Na=134217727,La=134217728,Oa=805306368,za=1073741824,Ma=-1;var Ua=8;function Aa(e){if(0!=(1&e))return Ua=Ca,1;if(0!=(2&e))return Ua=14,2;if(0!=(4&e))return Ua=13,4;var t=24&e;if(0!==t)return Ua=12,t;if(0!=(32&e))return Ua=11,32;var n=192&e;if(0!==n)return Ua=Ra,n;if(0!=(256&e))return Ua=9,256;var r=Ta&e;if(0!==r)return Ua=8,r;if(0!=(4096&e))return Ua=7,4096;var o=Pa&e;if(0!==o)return Ua=6,o;var i=_a&e;if(0!==i)return Ua=5,i;if(e&Ia)return Ua=4,Ia;if(0!=(e&La))return Ua=3,La;var l=Oa&e;return 0!==l?(Ua=2,l):0!=(za&e)?(Ua=1,za):(a(\"Should have found matching lanes. This is a bug in React.\"),Ua=8,e)}function Fa(e,t){var n=e.pendingLanes;if(0===n)return Ua=0,0;var r=0,a=0,o=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==o)r=o,a=Ua=Ca;else{var u=n&Na;if(0!==u){var s=u&~i;if(0!==s)r=Aa(s),a=Ua;else{var c=u&l;0!==c&&(r=Aa(c),a=Ua)}}else{var d=n&~i;0!==d?(r=Aa(d),a=Ua):0!==l&&(r=Aa(l),a=Ua)}}if(0===r)return 0;if(r=n&function(e){return(function(e){var t=31-to(e);return t<0?0:1<<t}(e)<<1)-1}(r),0!==t&&t!==r&&0==(t&i)){if(Aa(t),a<=Ua)return t;Ua=a}var f=e.entangledLanes;if(0!==f)for(var p=e.entanglements,h=r&f;h>0;){var m=$a(h),v=1<<m;r|=p[m],h&=~v}return r}function Wa(e,t){Aa(e);return Ua>=Ra?t+250:Ua>=6?t+5e3:Ma}function ja(e){var t=-1073741825&e.pendingLanes;return 0!==t?t:t&za?za:0}function Ba(e){return 0!=(e&Na)}function Va(e){return(e&_a)===e}function Ha(e,t){switch(e){case 0:break;case Ca:return 1;case 14:return 2;case 12:var n=qa(24&~t);return 0===n?Ha(Ra,t):n;case Ra:var r=qa(192&~t);return 0===r?Ha(8,t):r;case 8:var a=qa(Ta&~t);return 0===a&&0===(a=qa(Pa&~t))&&(a=qa(Ta)),a;case 6:case 5:break;case 2:var o=qa(Oa&~t);return 0===o&&(o=qa(Oa)),o}throw Error(\"Invalid update priority: \"+e+\". This is a bug in React.\")}function qa(e){return function(e){return e&-e}(e)}function $a(e){return 31-to(e)}function Qa(e,t){return 0!=(e&t)}function Ya(e,t){return(e&t)===t}function Ka(e,t){return e|t}function Xa(e,t){return e&~t}function Ga(e){for(var t=[],n=0;n<31;n++)t.push(e);return t}function Za(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,e.eventTimes[$a(t)]=n}function Ja(e,t,n){e.pingedLanes|=e.suspendedLanes&t}function eo(e,t){e.mutableReadLanes|=t&e.pendingLanes}var to=Math.clz32?Math.clz32:function(e){if(0===e)return 32;return 31-(no(e)/ro|0)|0},no=Math.log,ro=Math.LN2;var ao=cr,oo=lr,io=!0;function lo(e){io=!!e}function uo(e,t,n){var r;switch(function(e){var t=pa.get(e);return void 0===t?2:t}(t)){case 0:r=so;break;case 1:r=co;break;case 2:default:r=fo}return r.bind(null,t,n,e)}function so(e,t,n,r){r.timeStamp,Un||zn(),function(e,t,n,r,a){var o=Un;Un=!0;try{On(e,t,n,r,a)}finally{(Un=o)||Fn()}}(fo,e,t,n,r)}function co(e,t,n,r){oo(ao,fo.bind(null,e,t,n,r))}function fo(e,t,n,r){if(io){var a;if((a=0==(4&t))&&Ar.length>0&&$r(e))Yr(null,e,t,n,r);else{var o=po(e,t,n,r);if(null!==o){if(a){if($r(e))return void Yr(o,e,t,n,r);if(function(e,t,n,r,a){switch(t){case\"focusin\":return Fr=Xr(Fr,e,t,n,r,a),!0;case\"dragenter\":return Wr=Xr(Wr,e,t,n,r,a),!0;case\"mouseover\":return jr=Xr(jr,e,t,n,r,a),!0;case\"pointerover\":var o=a,i=o.pointerId;return Br.set(i,Xr(Br.get(i)||null,e,t,n,r,o)),!0;case\"gotpointercapture\":var l=a,u=l.pointerId;return Vr.set(u,Xr(Vr.get(u)||null,e,t,n,r,l)),!0}return!1}(o,e,t,n,r))return;Kr(e,r)}il(e,t,r,null,n)}else a&&Kr(e,r)}}}function po(e,t,n,r){var a=Du(Rn(r));if(null!==a){var o=Dr(a);if(null===o)a=null;else{var i=o.tag;if(i===s){var l=Ir(o);if(null!==l)return l;a=null}else if(3===i){if(o.stateNode.hydrate)return Nr(o);a=null}else o!==a&&(a=null)}}return il(e,t,r,a,n),null}var ho=null,mo=null,vo=null;function go(){if(vo)return vo;var e,t,n=mo,r=n.length,a=yo(),o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);var l=t>1?1-t:void 0;return vo=a.slice(e,l)}function yo(){return\"value\"in ho?ho.value:ho.textContent}function bo(e){var t,n=e.keyCode;return\"charCode\"in e?0===(t=e.charCode)&&13===n&&(t=13):t=n,10===t&&(t=13),t>=32||13===t?t:0}function wo(){return!0}function ko(){return!1}function So(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)if(e.hasOwnProperty(i)){var l=e[i];this[i]=l?l(a):a[i]}var u=null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue;return this.isDefaultPrevented=u?wo:ko,this.isPropagationStopped=ko,this}return Q(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():\"unknown\"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=wo)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():\"unknown\"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=wo)},persist:function(){},isPersistent:wo}),t}var xo,Eo,Co,Ro={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},To=So(Ro),Po=Q({},Ro,{view:0,detail:0}),_o=So(Po);var Do=Q({},Po,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Bo,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return\"movementX\"in e?e.movementX:(function(e){e!==Co&&(Co&&\"mousemove\"===e.type?(xo=e.screenX-Co.screenX,Eo=e.screenY-Co.screenY):(xo=0,Eo=0),Co=e)}(e),xo)},movementY:function(e){return\"movementY\"in e?e.movementY:Eo}}),Io=So(Do),No=So(Q({},Do,{dataTransfer:0})),Lo=So(Q({},Po,{relatedTarget:0})),Oo=So(Q({},Ro,{animationName:0,elapsedTime:0,pseudoElement:0})),zo=So(Q({},Ro,{clipboardData:function(e){return\"clipboardData\"in e?e.clipboardData:window.clipboardData}})),Mo=So(Q({},Ro,{data:0})),Uo=Mo,Ao={Esc:\"Escape\",Spacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Fo={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"};var Wo={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function jo(e){var t=this.nativeEvent;if(t.getModifierState)return t.getModifierState(e);var n=Wo[e];return!!n&&!!t[n]}function Bo(e){return jo}var Vo=So(Q({},Po,{key:function(e){if(e.key){var t=Ao[e.key]||e.key;if(\"Unidentified\"!==t)return t}if(\"keypress\"===e.type){var n=bo(e);return 13===n?\"Enter\":String.fromCharCode(n)}return\"keydown\"===e.type||\"keyup\"===e.type?Fo[e.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Bo,charCode:function(e){return\"keypress\"===e.type?bo(e):0},keyCode:function(e){return\"keydown\"===e.type||\"keyup\"===e.type?e.keyCode:0},which:function(e){return\"keypress\"===e.type?bo(e):\"keydown\"===e.type||\"keyup\"===e.type?e.keyCode:0}})),Ho=So(Q({},Do,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),qo=So(Q({},Po,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Bo})),$o=So(Q({},Ro,{propertyName:0,elapsedTime:0,pseudoElement:0})),Qo=So(Q({},Do,{deltaX:function(e){return\"deltaX\"in e?e.deltaX:\"wheelDeltaX\"in e?-e.wheelDeltaX:0},deltaY:function(e){return\"deltaY\"in e?e.deltaY:\"wheelDeltaY\"in e?-e.wheelDeltaY:\"wheelDelta\"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Yo=[9,13,27,32],Ko=E&&\"CompositionEvent\"in window,Xo=null;E&&\"documentMode\"in document&&(Xo=document.documentMode);var Go=E&&\"TextEvent\"in window&&!Xo,Zo=E&&(!Ko||Xo&&Xo>8&&Xo<=11),Jo=String.fromCharCode(32);var ei=!1;function ti(e,t){switch(e){case\"keyup\":return-1!==Yo.indexOf(t.keyCode);case\"keydown\":return 229!==t.keyCode;case\"keypress\":case\"mousedown\":case\"focusout\":return!0;default:return!1}}function ni(e){var t=e.detail;return\"object\"==typeof t&&\"data\"in t?t.data:null}function ri(e){return\"ko\"===e.locale}var ai=!1;function oi(e,t,n,r,a){var o,i;if(Ko?o=function(e){switch(e){case\"compositionstart\":return\"onCompositionStart\";case\"compositionend\":return\"onCompositionEnd\";case\"compositionupdate\":return\"onCompositionUpdate\"}}(t):ai?ti(t,r)&&(o=\"onCompositionEnd\"):function(e,t){return\"keydown\"===e&&229===t.keyCode}(t,r)&&(o=\"onCompositionStart\"),!o)return null;Zo&&!ri(r)&&(ai||\"onCompositionStart\"!==o?\"onCompositionEnd\"===o&&ai&&(i=go()):ai=function(e){return ho=e,mo=yo(),!0}(a));var l=ul(n,o);if(l.length>0){var u=new Mo(o,t,null,r,a);if(e.push({event:u,listeners:l}),i)u.data=i;else{var s=ni(r);null!==s&&(u.data=s)}}}function ii(e,t){if(ai){if(\"compositionend\"===e||!Ko&&ti(e,t)){var n=go();return ho=null,mo=null,vo=null,ai=!1,n}return null}switch(e){case\"paste\":return null;case\"keypress\":if(!function(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}(t)){if(t.char&&t.char.length>1)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case\"compositionend\":return Zo&&!ri(t)?null:t.data;default:return null}}function li(e,t,n,r,a){var o;if(!(o=Go?function(e,t){switch(e){case\"compositionend\":return ni(t);case\"keypress\":return 32!==t.which?null:(ei=!0,Jo);case\"textInput\":var n=t.data;return n===Jo&&ei?null:n;default:return null}}(t,r):ii(t,r)))return null;var i=ul(n,\"onBeforeInput\");if(i.length>0){var l=new Uo(\"onBeforeInput\",\"beforeinput\",null,r,a);e.push({event:l,listeners:i}),l.data=o}}var ui={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function si(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return\"input\"===t?!!ui[e.type]:\"textarea\"===t}\n/**\n   * Checks if an event is supported in the current execution environment.\n   *\n   * NOTE: This will not work correctly for non-generic events such as `change`,\n   * `reset`, `load`, `error`, and `select`.\n   *\n   * Borrows from Modernizr.\n   *\n   * @param {string} eventNameSuffix Event name, e.g. \"click\".\n   * @return {boolean} True if the event is supported.\n   * @internal\n   * @license Modernizr 3.0.0pre (Custom Build) | MIT\n   */function ci(e,t,n,r){In(r);var a=ul(t,\"onChange\");if(a.length>0){var o=new To(\"onChange\",\"change\",null,n,r);e.push({event:o,listeners:a})}}var di=null,fi=null;function pi(e){var t=[];ci(t,fi,e,Rn(e)),function(e,t){if(Un)return e(t);Un=!0;try{Ln(e,t)}finally{Un=!1,Fn()}}(hi,t)}function hi(e){Ji(e,0)}function mi(e){if(et(Nu(e)))return e}function vi(e,t){if(\"change\"===e)return t}var gi=!1;function yi(){di&&(di.detachEvent(\"onpropertychange\",bi),di=null,fi=null)}function bi(e){\"value\"===e.propertyName&&mi(fi)&&pi(e)}function wi(e,t,n){\"focusin\"===e?(yi(),function(e,t){fi=t,(di=e).attachEvent(\"onpropertychange\",bi)}(t,n)):\"focusout\"===e&&yi()}function ki(e,t){if(\"selectionchange\"===e||\"keyup\"===e||\"keydown\"===e)return mi(fi)}function Si(e,t){if(\"click\"===e)return mi(t)}function xi(e,t){if(\"input\"===e||\"change\"===e)return mi(t)}function Ei(e,t,n,r,a,o,i){var l,u,s,c,d,f,p=n?Nu(n):window;if(\"select\"===(c=(s=p).nodeName&&s.nodeName.toLowerCase())||\"input\"===c&&\"file\"===s.type?l=vi:si(p)?gi?l=xi:(l=ki,u=wi):function(e){var t=e.nodeName;return t&&\"input\"===t.toLowerCase()&&(\"checkbox\"===e.type||\"radio\"===e.type)}(p)&&(l=Si),l){var h=l(t,n);if(h)return void ci(e,h,r,a)}u&&u(t,p,n),\"focusout\"===t&&(f=(d=p)._wrapperState)&&f.controlled&&\"number\"===d.type&&pt(d,\"number\",d.value)}function Ci(e,t,n,r,a,o,i){var l=\"mouseover\"===t||\"pointerover\"===t,u=\"mouseout\"===t||\"pointerout\"===t;if(l&&0==(16&o)){var s=r.relatedTarget||r.fromElement;if(s&&(Du(s)||_u(s)))return}if(u||l){var c,d,f;if(a.window===a)c=a;else{var p=a.ownerDocument;c=p?p.defaultView||p.parentWindow:window}if(u){var h=r.relatedTarget||r.toElement;if(d=n,null!==(f=h?Du(h):null))(f!==Dr(f)||5!==f.tag&&6!==f.tag)&&(f=null)}else d=null,f=n;if(d!==f){var m=Io,v=\"onMouseLeave\",g=\"onMouseEnter\",y=\"mouse\";\"pointerout\"!==t&&\"pointerover\"!==t||(m=Ho,v=\"onPointerLeave\",g=\"onPointerEnter\",y=\"pointer\");var b=null==d?c:Nu(d),w=null==f?c:Nu(f),k=new m(v,y+\"leave\",d,r,a);k.target=b,k.relatedTarget=w;var S=null;if(Du(a)===n){var x=new m(g,y+\"enter\",f,r,a);x.target=w,x.relatedTarget=b,S=x}!function(e,t,n,r,a){var o=r&&a?function(e,t){for(var n=e,r=t,a=0,o=n;o;o=sl(o))a++;for(var i=0,l=r;l;l=sl(l))i++;for(;a-i>0;)n=sl(n),a--;for(;i-a>0;)r=sl(r),i--;var u=a;for(;u--;){if(n===r||null!==r&&n===r.alternate)return n;n=sl(n),r=sl(r)}return null}(r,a):null;null!==r&&cl(e,t,r,o,!1);null!==a&&null!==n&&cl(e,n,a,o,!0)}(e,k,S,d,f)}}}E&&(gi=function(e){if(!E)return!1;var t=\"on\"+e,n=t in document;if(!n){var r=document.createElement(\"div\");r.setAttribute(t,\"return;\"),n=\"function\"==typeof r[t]}return n}(\"input\")&&(!document.documentMode||document.documentMode>9));var Ri=\"function\"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Ti=Object.prototype.hasOwnProperty;function Pi(e,t){if(Ri(e,t))return!0;if(\"object\"!=typeof e||null===e||\"object\"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var a=0;a<n.length;a++)if(!Ti.call(t,n[a])||!Ri(e[n[a]],t[n[a]]))return!1;return!0}function _i(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Di(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function Ii(e,t){for(var n=_i(e),r=0,a=0;n;){if(3===n.nodeType){if(a=r+n.textContent.length,r<=t&&a>=t)return{node:n,offset:t-r};r=a}n=_i(Di(n))}}function Ni(e){var t=e.ownerDocument,n=t&&t.defaultView||window,r=n.getSelection&&n.getSelection();if(!r||0===r.rangeCount)return null;var a=r.anchorNode,o=r.anchorOffset,i=r.focusNode,l=r.focusOffset;try{a.nodeType,i.nodeType}catch(e){return null}return function(e,t,n,r,a){var o=0,i=-1,l=-1,u=0,s=0,c=e,d=null;e:for(;;){for(var f=null;c!==t||0!==n&&3!==c.nodeType||(i=o+n),c!==r||0!==a&&3!==c.nodeType||(l=o+a),3===c.nodeType&&(o+=c.nodeValue.length),null!==(f=c.firstChild);)d=c,c=f;for(;;){if(c===e)break e;if(d===t&&++u===n&&(i=o),d===r&&++s===a&&(l=o),null!==(f=c.nextSibling))break;d=(c=d).parentNode}c=f}if(-1===i||-1===l)return null;return{start:i,end:l}}(e,a,o,i,l)}function Li(e){return e&&3===e.nodeType}function Oi(e,t){return!(!e||!t)&&(e===t||!Li(e)&&(Li(t)?Oi(e,t.parentNode):\"contains\"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function zi(e){return e&&e.ownerDocument&&Oi(e.ownerDocument.documentElement,e)}function Mi(e){try{return\"string\"==typeof e.contentWindow.location.href}catch(e){return!1}}function Ui(){for(var e=window,t=tt();t instanceof e.HTMLIFrameElement;){if(!Mi(t))return t;t=tt((e=t.contentWindow).document)}return t}function Ai(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(\"input\"===t&&(\"text\"===e.type||\"search\"===e.type||\"tel\"===e.type||\"url\"===e.type||\"password\"===e.type)||\"textarea\"===t||\"true\"===e.contentEditable)}function Fi(e){var t=Ui(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&zi(n)){null!==r&&Ai(n)&&function(e,t){var n=t.start,r=t.end;void 0===r&&(r=n);\"selectionStart\"in e?(e.selectionStart=n,e.selectionEnd=Math.min(r,e.value.length)):function(e,t){var n=e.ownerDocument||document,r=n&&n.defaultView||window;if(r.getSelection){var a=r.getSelection(),o=e.textContent.length,i=Math.min(t.start,o),l=void 0===t.end?i:Math.min(t.end,o);if(!a.extend&&i>l){var u=l;l=i,i=u}var s=Ii(e,i),c=Ii(e,l);if(s&&c){if(1===a.rangeCount&&a.anchorNode===s.node&&a.anchorOffset===s.offset&&a.focusNode===c.node&&a.focusOffset===c.offset)return;var d=n.createRange();d.setStart(s.node,s.offset),a.removeAllRanges(),i>l?(a.addRange(d),a.extend(c.node,c.offset)):(d.setEnd(c.node,c.offset),a.addRange(d))}}}(e,t)}(n,r);for(var a=[],o=n;o=o.parentNode;)1===o.nodeType&&a.push({element:o,left:o.scrollLeft,top:o.scrollTop});\"function\"==typeof n.focus&&n.focus();for(var i=0;i<a.length;i++){var l=a[i];l.element.scrollLeft=l.left,l.element.scrollTop=l.top}}}function Wi(e){return(\"selectionStart\"in e?{start:e.selectionStart,end:e.selectionEnd}:Ni(e))||{start:0,end:0}}var ji=E&&\"documentMode\"in document&&document.documentMode<=11;var Bi=null,Vi=null,Hi=null,qi=!1;function $i(e,t,n){var r,a=(r=n).window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!qi&&null!=Bi&&Bi===tt(a)){var o=function(e){if(\"selectionStart\"in e&&Ai(e))return{start:e.selectionStart,end:e.selectionEnd};var t=(e.ownerDocument&&e.ownerDocument.defaultView||window).getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}(Bi);if(!Hi||!Pi(Hi,o)){Hi=o;var i=ul(Vi,\"onSelect\");if(i.length>0){var l=new To(\"onSelect\",\"select\",null,t,n);e.push({event:l,listeners:i}),l.target=Bi}}}}function Qi(e,t,n,r,a,o,i){var l=fa.get(t);if(void 0!==l){var u=To,s=t;switch(t){case\"keypress\":if(0===bo(r))return;case\"keydown\":case\"keyup\":u=Vo;break;case\"focusin\":s=\"focus\",u=Lo;break;case\"focusout\":s=\"blur\",u=Lo;break;case\"beforeblur\":case\"afterblur\":u=Lo;break;case\"click\":if(2===r.button)return;case\"auxclick\":case\"dblclick\":case\"mousedown\":case\"mousemove\":case\"mouseup\":case\"mouseout\":case\"mouseover\":case\"contextmenu\":u=Io;break;case\"drag\":case\"dragend\":case\"dragenter\":case\"dragexit\":case\"dragleave\":case\"dragover\":case\"dragstart\":case\"drop\":u=No;break;case\"touchcancel\":case\"touchend\":case\"touchmove\":case\"touchstart\":u=qo;break;case ua:case sa:case ca:u=Oo;break;case da:u=$o;break;case\"scroll\":u=_o;break;case\"wheel\":u=Qo;break;case\"copy\":case\"cut\":case\"paste\":u=zo;break;case\"gotpointercapture\":case\"lostpointercapture\":case\"pointercancel\":case\"pointerdown\":case\"pointermove\":case\"pointerout\":case\"pointerover\":case\"pointerup\":u=Ho}var c=0!=(4&o),d=!c&&\"scroll\"===t,f=function(e,t,n,r,a){var o=null!==t?t+\"Capture\":null,i=r?o:t,l=[],u=e,s=null;for(;null!==u;){var c=u,d=c.stateNode;if(5===c.tag&&null!==d&&(s=d,null!==i)){var f=Wn(u,i);null!=f&&l.push(ll(u,f,s))}if(a)break;u=u.return}return l}(n,l,r.type,c,d);if(f.length>0){var p=new u(l,s,null,r,a);e.push({event:p,listeners:f})}}}function Yi(e,t,n,r,a,o,i){Qi(e,t,n,r,a,o),0==(7&o)&&(Ci(e,t,n,r,a,o),Ei(e,t,n,r,a),function(e,t,n,r,a,o,i){var l=n?Nu(n):window;switch(t){case\"focusin\":(si(l)||\"true\"===l.contentEditable)&&(Bi=l,Vi=n,Hi=null);break;case\"focusout\":Bi=null,Vi=null,Hi=null;break;case\"mousedown\":qi=!0;break;case\"contextmenu\":case\"mouseup\":case\"dragend\":qi=!1,$i(e,r,a);break;case\"selectionchange\":if(ji)break;case\"keydown\":case\"keyup\":$i(e,r,a)}}(e,t,n,r,a),function(e,t,n,r,a,o,i){oi(e,t,n,r,a),li(e,t,n,r,a)}(e,t,n,r,a))}ya(ha,0),ya(va,1),ya(ga,2),function(e,t){for(var n=0;n<e.length;n++)pa.set(e[n],t)}(ma,0),x(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]),x(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]),x(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]),x(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]),S(\"onChange\",[\"change\",\"click\",\"focusin\",\"focusout\",\"input\",\"keydown\",\"keyup\",\"selectionchange\"]),S(\"onSelect\",[\"focusout\",\"contextmenu\",\"dragend\",\"focusin\",\"keydown\",\"keyup\",\"mousedown\",\"mouseup\",\"selectionchange\"]),S(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]),S(\"onCompositionEnd\",[\"compositionend\",\"focusout\",\"keydown\",\"keypress\",\"keyup\",\"mousedown\"]),S(\"onCompositionStart\",[\"compositionstart\",\"focusout\",\"keydown\",\"keypress\",\"keyup\",\"mousedown\"]),S(\"onCompositionUpdate\",[\"compositionupdate\",\"focusout\",\"keydown\",\"keypress\",\"keyup\",\"mousedown\"]);var Ki=[\"abort\",\"canplay\",\"canplaythrough\",\"durationchange\",\"emptied\",\"encrypted\",\"ended\",\"error\",\"loadeddata\",\"loadedmetadata\",\"loadstart\",\"pause\",\"play\",\"playing\",\"progress\",\"ratechange\",\"seeked\",\"seeking\",\"stalled\",\"suspend\",\"timeupdate\",\"volumechange\",\"waiting\"],Xi=new Set([\"cancel\",\"close\",\"invalid\",\"load\",\"scroll\",\"toggle\"].concat(Ki));function Gi(e,t,n){var r=e.type||\"unknown-event\";e.currentTarget=n,function(e,t,n,r,a,o,i,l,u){if(Zn.apply(this,arguments),Qn){var s=er();Kn||(Kn=!0,Xn=s)}}(r,t,void 0,e),e.currentTarget=null}function Zi(e,t,n){var r;if(n)for(var a=t.length-1;a>=0;a--){var o=t[a],i=o.instance,l=o.currentTarget,u=o.listener;if(i!==r&&e.isPropagationStopped())return;Gi(e,u,l),r=i}else for(var s=0;s<t.length;s++){var c=t[s],d=c.instance,f=c.currentTarget,p=c.listener;if(d!==r&&e.isPropagationStopped())return;Gi(e,p,f),r=d}}function Ji(e,t){for(var n=0!=(4&t),r=0;r<e.length;r++){var a=e[r];Zi(a.event,a.listeners,n)}!function(){if(Kn){var e=Xn;throw Kn=!1,Xn=null,e}}()}function el(e,t){var n=zu(t),r=dl(e,false);n.has(r)||(al(t,e,2,false),n.add(r))}var tl=\"_reactListening\"+Math.random().toString(36).slice(2);function nl(e){e[tl]||(e[tl]=!0,b.forEach((function(t){Xi.has(t)||rl(t,!1,e,null),rl(t,!0,e,null)})))}function rl(e,t,n,r){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=n;if(\"selectionchange\"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&Xi.has(e)){if(\"scroll\"!==e)return;a|=2,o=r}var i=zu(o),l=dl(e,t);i.has(l)||(t&&(a|=4),al(o,e,a,t),i.add(l))}function al(e,t,n,r,a){var o=uo(e,t,n),i=void 0;jn&&(\"touchstart\"!==t&&\"touchmove\"!==t&&\"wheel\"!==t||(i=!0)),e=e,r?void 0!==i?function(e,t,n,r){e.addEventListener(t,n,{capture:!0,passive:r})}(e,t,o,i):function(e,t,n){e.addEventListener(t,n,!0)}(e,t,o):void 0!==i?function(e,t,n,r){e.addEventListener(t,n,{passive:r})}(e,t,o,i):function(e,t,n){e.addEventListener(t,n,!1)}(e,t,o)}function ol(e,t){return e===t||8===e.nodeType&&e.parentNode===t}function il(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)){var i=a;if(null!==r){var l=r;e:for(;;){if(null===l)return;var u=l.tag;if(3===u||4===u){var s=l.stateNode.containerInfo;if(ol(s,i))break;if(4===u)for(var c=l.return;null!==c;){var d=c.tag;if(3===d||4===d)if(ol(c.stateNode.containerInfo,i))return;c=c.return}for(;null!==s;){var f=Du(s);if(null===f)return;var p=f.tag;if(5===p||6===p){l=o=f;continue e}s=s.parentNode}}l=l.return}}}!function(e,t,n){if(An)return e(t,n);An=!0;try{Mn(e,t,n)}finally{An=!1,Fn()}}((function(){return function(e,t,n,r,a){var o=[];Yi(o,e,r,n,Rn(n),t),Ji(o,t)}(e,t,n,o)}))}function ll(e,t,n){return{instance:e,listener:t,currentTarget:n}}function ul(e,t){for(var n=t+\"Capture\",r=[],a=e;null!==a;){var o=a,i=o.stateNode;if(5===o.tag&&null!==i){var l=i,u=Wn(a,n);null!=u&&r.unshift(ll(a,u,l));var s=Wn(a,t);null!=s&&r.push(ll(a,s,l))}a=a.return}return r}function sl(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function cl(e,t,n,r,a){for(var o=t._reactName,i=[],l=n;null!==l&&l!==r;){var u=l,s=u.alternate,c=u.stateNode,d=u.tag;if(null!==s&&s===r)break;if(5===d&&null!==c){var f=c;if(a){var p=Wn(l,o);null!=p&&i.unshift(ll(l,p,f))}else if(!a){var h=Wn(l,o);null!=h&&i.push(ll(l,h,f))}}l=l.return}0!==i.length&&e.push({event:t,listeners:i})}function dl(e,t){return e+\"__\"+(t?\"capture\":\"bubble\")}var fl,pl,hl,ml,vl,gl,yl,bl,wl,kl,Sl=!1,xl=\"dangerouslySetInnerHTML\",El=\"suppressContentEditableWarning\",Cl=\"suppressHydrationWarning\",Rl=\"autoFocus\",Tl=\"children\",Pl=\"style\",_l=Nt;fl={dialog:!0,webview:!0},hl=function(e,t){vn(e,t),function(e,t){\"input\"!==e&&\"textarea\"!==e&&\"select\"!==e||null==t||null!==t.value||gn||(gn=!0,\"select\"===e&&t.multiple?a(\"`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.\",e):a(\"`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.\",e))}(e,t),Cn(e,t,{registrationNameDependencies:w,possibleRegistrationNames:k})},bl=E&&!document.documentMode;var Dl=/\\r\\n?/g,Il=/\\u0000|\\uFFFD/g;function Nl(e){return 9===e.nodeType?e:e.ownerDocument}function Ll(){}function Ol(e){e.onclick=Ll}function zl(e,t,n,r){var a,o=un(t,n);switch(hl(t,n),t){case\"dialog\":el(\"cancel\",e),el(\"close\",e),a=n;break;case\"iframe\":case\"object\":case\"embed\":el(\"load\",e),a=n;break;case\"video\":case\"audio\":for(var i=0;i<Ki.length;i++)el(Ki[i],e);a=n;break;case\"source\":el(\"error\",e),a=n;break;case\"img\":case\"image\":case\"link\":el(\"error\",e),el(\"load\",e),a=n;break;case\"details\":el(\"toggle\",e),a=n;break;case\"input\":ut(e,n),a=lt(e,n),el(\"invalid\",e);break;case\"option\":gt(0,n),a=yt(0,n);break;case\"select\":xt(e,n),a=St(0,n),el(\"invalid\",e);break;case\"textarea\":Rt(e,n),a=Ct(e,n),el(\"invalid\",e);break;default:a=n}switch(ln(t,a),function(e,t,n,r,a){for(var o in r)if(r.hasOwnProperty(o)){var i=r[o];if(o===Pl)i&&Object.freeze(i),rn(t,i);else if(o===xl){var l=i?i.__html:void 0;null!=l&&At(t,l)}else o===Tl?\"string\"==typeof i?(\"textarea\"!==e||\"\"!==i)&&Ft(t,i):\"number\"==typeof i&&Ft(t,\"\"+i):o===El||o===Cl||o===Rl||(w.hasOwnProperty(o)?null!=i&&(\"function\"!=typeof i&&yl(o,i),\"onScroll\"===o&&el(\"scroll\",t)):null!=i&&$(t,o,i,a))}}(t,e,0,a,o),t){case\"input\":Je(e),dt(e,n,!1);break;case\"textarea\":Je(e),Pt(e);break;case\"option\":!function(e,t){null!=t.value&&e.setAttribute(\"value\",Qe(Ye(t.value)))}(e,n);break;case\"select\":!function(e,t){var n=e;n.multiple=!!t.multiple;var r=t.value;null!=r?kt(n,!!t.multiple,r,!1):null!=t.defaultValue&&kt(n,!!t.multiple,t.defaultValue,!0)}(e,n);break;default:\"function\"==typeof a.onClick&&Ol(e)}}function Ml(e,t,n,r,o){hl(t,r);var i,l,u,s,c=null;switch(t){case\"input\":i=lt(e,n),l=lt(e,r),c=[];break;case\"option\":i=yt(0,n),l=yt(0,r),c=[];break;case\"select\":i=St(0,n),l=St(0,r),c=[];break;case\"textarea\":i=Ct(e,n),l=Ct(e,r),c=[];break;default:l=r,\"function\"!=typeof(i=n).onClick&&\"function\"==typeof l.onClick&&Ol(e)}ln(t,l);var d=null;for(u in i)if(!l.hasOwnProperty(u)&&i.hasOwnProperty(u)&&null!=i[u])if(u===Pl){var f=i[u];for(s in f)f.hasOwnProperty(s)&&(d||(d={}),d[s]=\"\")}else u===xl||u===Tl||u===El||u===Cl||u===Rl||(w.hasOwnProperty(u)?c||(c=[]):(c=c||[]).push(u,null));for(u in l){var p=l[u],h=null!=i?i[u]:void 0;if(l.hasOwnProperty(u)&&p!==h&&(null!=p||null!=h))if(u===Pl)if(p&&Object.freeze(p),h){for(s in h)!h.hasOwnProperty(s)||p&&p.hasOwnProperty(s)||(d||(d={}),d[s]=\"\");for(s in p)p.hasOwnProperty(s)&&h[s]!==p[s]&&(d||(d={}),d[s]=p[s])}else d||(c||(c=[]),c.push(u,d)),d=p;else if(u===xl){var m=p?p.__html:void 0,v=h?h.__html:void 0;null!=m&&v!==m&&(c=c||[]).push(u,m)}else u===Tl?\"string\"!=typeof p&&\"number\"!=typeof p||(c=c||[]).push(u,\"\"+p):u===El||u===Cl||(w.hasOwnProperty(u)?(null!=p&&(\"function\"!=typeof p&&yl(u,p),\"onScroll\"===u&&el(\"scroll\",e)),c||h===p||(c=[])):\"object\"==typeof p&&null!==p&&p.$$typeof===ue?p.toString():(c=c||[]).push(u,p))}return d&&(!function(e,t){if(t){var n,r=an(e),o=an(t),i={};for(var l in r){var u=r[l],s=o[l];if(s&&u!==s){var c=u+\",\"+s;if(i[c])continue;i[c]=!0,a(\"%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.\",null==(n=e[u])||\"boolean\"==typeof n||\"\"===n?\"Removing\":\"Updating\",u,s)}}}}(d,l.style),(c=c||[]).push(Pl,d)),c}function Ul(e,t,n,r,a){\"input\"===n&&\"radio\"===a.type&&null!=a.name&&st(e,a);un(n,r);switch(function(e,t,n,r){for(var a=0;a<t.length;a+=2){var o=t[a],i=t[a+1];o===Pl?rn(e,i):o===xl?At(e,i):o===Tl?Ft(e,i):$(e,o,i,r)}}(e,t,0,un(n,a)),n){case\"input\":ct(e,a);break;case\"textarea\":Tt(e,a);break;case\"select\":!function(e,t){var n=e,r=n._wrapperState.wasMultiple;n._wrapperState.wasMultiple=!!t.multiple;var a=t.value;null!=a?kt(n,!!t.multiple,a,!1):r!==!!t.multiple&&(null!=t.defaultValue?kt(n,!!t.multiple,t.defaultValue,!0):kt(n,!!t.multiple,t.multiple?[]:\"\",!1))}(e,a)}}function Al(e,t){ml(e.nodeValue,t)}function Fl(e,t){Sl||(Sl=!0,a(\"Did not expect server HTML to contain a <%s> in <%s>.\",t.nodeName.toLowerCase(),e.nodeName.toLowerCase()))}function Wl(e,t){Sl||(Sl=!0,a('Did not expect server HTML to contain the text node \"%s\" in <%s>.',t.nodeValue,e.nodeName.toLowerCase()))}function jl(e,t,n){Sl||(Sl=!0,a(\"Expected server HTML to contain a matching <%s> in <%s>.\",t,e.nodeName.toLowerCase()))}function Bl(e,t){\"\"!==t&&(Sl||(Sl=!0,a('Expected server HTML to contain a matching text node for \"%s\" in <%s>.',t,e.nodeName.toLowerCase())))}wl=function(e){return(\"string\"==typeof e?e:\"\"+e).replace(Dl,\"\\n\").replace(Il,\"\")},ml=function(e,t){if(!Sl){var n=wl(t),r=wl(e);r!==n&&(Sl=!0,a('Text content did not match. Server: \"%s\" Client: \"%s\"',r,n))}},vl=function(e,t,n){if(!Sl){var r=wl(n),o=wl(t);o!==r&&(Sl=!0,a(\"Prop `%s` did not match. Server: %s Client: %s\",e,JSON.stringify(o),JSON.stringify(r)))}},gl=function(e){if(!Sl){Sl=!0;var t=[];e.forEach((function(e){t.push(e)})),a(\"Extra attributes from the server: %s\",t)}},yl=function(e,t){!1===t?a(\"Expected `%s` listener to be a function, instead got `false`.\\n\\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.\",e,e,e):a(\"Expected `%s` listener to be a function, instead got a value of `%s` type.\",e,typeof t)},kl=function(e,t){var n=e.namespaceURI===_l?e.ownerDocument.createElement(e.tagName):e.ownerDocument.createElementNS(e.namespaceURI,e.tagName);return n.innerHTML=t,n.innerHTML};var Vl,Hl,ql=[\"address\",\"applet\",\"area\",\"article\",\"aside\",\"base\",\"basefont\",\"bgsound\",\"blockquote\",\"body\",\"br\",\"button\",\"caption\",\"center\",\"col\",\"colgroup\",\"dd\",\"details\",\"dir\",\"div\",\"dl\",\"dt\",\"embed\",\"fieldset\",\"figcaption\",\"figure\",\"footer\",\"form\",\"frame\",\"frameset\",\"h1\",\"h2\",\"h3\",\"h4\",\"h5\",\"h6\",\"head\",\"header\",\"hgroup\",\"hr\",\"html\",\"iframe\",\"img\",\"input\",\"isindex\",\"li\",\"link\",\"listing\",\"main\",\"marquee\",\"menu\",\"menuitem\",\"meta\",\"nav\",\"noembed\",\"noframes\",\"noscript\",\"object\",\"ol\",\"p\",\"param\",\"plaintext\",\"pre\",\"script\",\"section\",\"select\",\"source\",\"style\",\"summary\",\"table\",\"tbody\",\"td\",\"template\",\"textarea\",\"tfoot\",\"th\",\"thead\",\"title\",\"tr\",\"track\",\"ul\",\"wbr\",\"xmp\"],$l=[\"applet\",\"caption\",\"html\",\"table\",\"td\",\"th\",\"marquee\",\"object\",\"template\",\"foreignObject\",\"desc\",\"title\"],Ql=$l.concat([\"button\"]),Yl=[\"dd\",\"dt\",\"li\",\"option\",\"optgroup\",\"p\",\"rp\",\"rt\"],Kl={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null};Hl=function(e,t){var n=Q({},e||Kl),r={tag:t};return-1!==$l.indexOf(t)&&(n.aTagInScope=null,n.buttonTagInScope=null,n.nobrTagInScope=null),-1!==Ql.indexOf(t)&&(n.pTagInButtonScope=null),-1!==ql.indexOf(t)&&\"address\"!==t&&\"div\"!==t&&\"p\"!==t&&(n.listItemTagAutoclosing=null,n.dlItemTagAutoclosing=null),n.current=r,\"form\"===t&&(n.formTag=r),\"a\"===t&&(n.aTagInScope=r),\"button\"===t&&(n.buttonTagInScope=r),\"nobr\"===t&&(n.nobrTagInScope=r),\"p\"===t&&(n.pTagInButtonScope=r),\"li\"===t&&(n.listItemTagAutoclosing=r),\"dd\"!==t&&\"dt\"!==t||(n.dlItemTagAutoclosing=r),n};var Xl={};Vl=function(e,t,n){var r=(n=n||Kl).current,o=r&&r.tag;null!=t&&(null!=e&&a(\"validateDOMNesting: when childText is passed, childTag should be null\"),e=\"#text\");var i=function(e,t){switch(t){case\"select\":return\"option\"===e||\"optgroup\"===e||\"#text\"===e;case\"optgroup\":return\"option\"===e||\"#text\"===e;case\"option\":return\"#text\"===e;case\"tr\":return\"th\"===e||\"td\"===e||\"style\"===e||\"script\"===e||\"template\"===e;case\"tbody\":case\"thead\":case\"tfoot\":return\"tr\"===e||\"style\"===e||\"script\"===e||\"template\"===e;case\"colgroup\":return\"col\"===e||\"template\"===e;case\"table\":return\"caption\"===e||\"colgroup\"===e||\"tbody\"===e||\"tfoot\"===e||\"thead\"===e||\"style\"===e||\"script\"===e||\"template\"===e;case\"head\":return\"base\"===e||\"basefont\"===e||\"bgsound\"===e||\"link\"===e||\"meta\"===e||\"title\"===e||\"noscript\"===e||\"noframes\"===e||\"style\"===e||\"script\"===e||\"template\"===e;case\"html\":return\"head\"===e||\"body\"===e||\"frameset\"===e;case\"frameset\":return\"frame\"===e;case\"#document\":return\"html\"===e}switch(e){case\"h1\":case\"h2\":case\"h3\":case\"h4\":case\"h5\":case\"h6\":return\"h1\"!==t&&\"h2\"!==t&&\"h3\"!==t&&\"h4\"!==t&&\"h5\"!==t&&\"h6\"!==t;case\"rp\":case\"rt\":return-1===Yl.indexOf(t);case\"body\":case\"caption\":case\"col\":case\"colgroup\":case\"frameset\":case\"frame\":case\"head\":case\"html\":case\"tbody\":case\"td\":case\"tfoot\":case\"th\":case\"thead\":case\"tr\":return null==t}return!0}(e,o)?null:r,l=i?null:function(e,t){switch(e){case\"address\":case\"article\":case\"aside\":case\"blockquote\":case\"center\":case\"details\":case\"dialog\":case\"dir\":case\"div\":case\"dl\":case\"fieldset\":case\"figcaption\":case\"figure\":case\"footer\":case\"header\":case\"hgroup\":case\"main\":case\"menu\":case\"nav\":case\"ol\":case\"p\":case\"section\":case\"summary\":case\"ul\":case\"pre\":case\"listing\":case\"table\":case\"hr\":case\"xmp\":case\"h1\":case\"h2\":case\"h3\":case\"h4\":case\"h5\":case\"h6\":return t.pTagInButtonScope;case\"form\":return t.formTag||t.pTagInButtonScope;case\"li\":return t.listItemTagAutoclosing;case\"dd\":case\"dt\":return t.dlItemTagAutoclosing;case\"button\":return t.buttonTagInScope;case\"a\":return t.aTagInScope;case\"nobr\":return t.nobrTagInScope}return null}(e,n),u=i||l;if(u){var s=u.tag,c=!!i+\"|\"+e+\"|\"+s;if(!Xl[c]){Xl[c]=!0;var d=e,f=\"\";if(\"#text\"===e?/\\S/.test(t)?d=\"Text nodes\":(d=\"Whitespace text nodes\",f=\" Make sure you don't have any extra whitespace between tags on each line of your source code.\"):d=\"<\"+e+\">\",i){var p=\"\";\"table\"===s&&\"tr\"===e&&(p+=\" Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.\"),a(\"validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s\",d,s,f,p)}else a(\"validateDOMNesting(...): %s cannot appear as a descendant of <%s>.\",d,s)}}};var Gl=\"$?\",Zl=\"$!\",Jl=null,eu=null;function tu(e,t){switch(e){case\"button\":case\"input\":case\"select\":case\"textarea\":return!!t.autoFocus}return!1}function nu(e){var t;Jl=io,t=Ui(),eu={focusedElem:t,selectionRange:Ai(t)?Wi(t):null};return lo(!1),null}function ru(e,t,n,r,o){var i=r;if(Vl(e,null,i.ancestorInfo),\"string\"==typeof t.children||\"number\"==typeof t.children){var l=\"\"+t.children,u=Hl(i.ancestorInfo,e);Vl(null,l,u)}var s=function(e,t,n,r){var o,i,l=Nl(n),u=r;if(u===_l&&(u=Ot(e)),u===_l){if((o=un(e,t))||e===e.toLowerCase()||a(\"<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.\",e),\"script\"===e){var s=l.createElement(\"div\");s.innerHTML=\"<script><\\/script>\";var c=s.firstChild;i=s.removeChild(c)}else if(\"string\"==typeof t.is)i=l.createElement(e,{is:t.is});else if(i=l.createElement(e),\"select\"===e){var d=i;t.multiple?d.multiple=!0:t.size&&(d.size=t.size)}}else i=l.createElementNS(u,e);return u===_l&&(o||\"[object HTMLUnknownElement]\"!==Object.prototype.toString.call(i)||Object.prototype.hasOwnProperty.call(fl,e)||(fl[e]=!0,a(\"The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\",e))),i}(e,t,n,i.namespace);return Tu(o,s),Ou(s,t),s}function au(e,t){return\"textarea\"===e||\"option\"===e||\"noscript\"===e||\"string\"==typeof t.children||\"number\"==typeof t.children||\"object\"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function ou(e,t,n,r){Vl(null,e,n.ancestorInfo);var a=function(e,t){return Nl(t).createTextNode(e)}(e,t);return Tu(r,a),a}var iu=\"function\"==typeof setTimeout?setTimeout:void 0,lu=\"function\"==typeof clearTimeout?clearTimeout:void 0;function uu(e){Ft(e,\"\")}function su(e,t){e.removeChild(t)}function cu(e){var t=(e=e).style;\"function\"==typeof t.setProperty?t.setProperty(\"display\",\"none\",\"important\"):t.display=\"none\"}function du(e,t){e=e;var n=t.style,r=null!=n&&n.hasOwnProperty(\"display\")?n.display:null;e.style.display=Vt(\"display\",r)}function fu(e,t){e.nodeValue=t}function pu(e){if(1===e.nodeType)e.textContent=\"\";else if(9===e.nodeType){var t=e.body;null!=t&&(t.textContent=\"\")}}function hu(e){return e.data===Zl}function mu(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function vu(e){return mu(e.nextSibling)}function gu(e){return mu(e.firstChild)}function yu(e,t,n,r,a,o){return Tu(o,e),Ou(e,n),function(e,t,n,r,a){var o,i;switch(pl=!0===n.suppressHydrationWarning,o=un(t,n),hl(t,n),t){case\"dialog\":el(\"cancel\",e),el(\"close\",e);break;case\"iframe\":case\"object\":case\"embed\":el(\"load\",e);break;case\"video\":case\"audio\":for(var l=0;l<Ki.length;l++)el(Ki[l],e);break;case\"source\":el(\"error\",e);break;case\"img\":case\"image\":case\"link\":el(\"error\",e),el(\"load\",e);break;case\"details\":el(\"toggle\",e);break;case\"input\":ut(e,n),el(\"invalid\",e);break;case\"option\":gt(0,n);break;case\"select\":xt(e,n),el(\"invalid\",e);break;case\"textarea\":Rt(e,n),el(\"invalid\",e)}ln(t,n),i=new Set;for(var u=e.attributes,s=0;s<u.length;s++)switch(u[s].name.toLowerCase()){case\"data-reactroot\":case\"value\":case\"checked\":case\"selected\":break;default:i.add(u[s].name)}var c,d=null;for(var f in n)if(n.hasOwnProperty(f)){var p=n[f];if(f===Tl)\"string\"==typeof p?e.textContent!==p&&(pl||ml(e.textContent,p),d=[Tl,p]):\"number\"==typeof p&&e.textContent!==\"\"+p&&(pl||ml(e.textContent,p),d=[Tl,\"\"+p]);else if(w.hasOwnProperty(f))null!=p&&(\"function\"!=typeof p&&yl(f,p),\"onScroll\"===f&&el(\"scroll\",e));else if(\"boolean\"==typeof o){var h=void 0,m=M(f);if(pl);else if(f===El||f===Cl||\"value\"===f||\"checked\"===f||\"selected\"===f);else if(f===xl){var v=e.innerHTML,g=p?p.__html:void 0;if(null!=g){var y=kl(e,g);y!==v&&vl(f,v,y)}}else if(f===Pl){if(i.delete(f),bl){var b=nn(p);b!==(h=e.getAttribute(\"style\"))&&vl(f,h,b)}}else if(o)i.delete(f.toLowerCase()),p!==(h=q(e,f,p))&&vl(f,h,p);else if(!L(f,m,o)&&!z(f,p,m,o)){var k=!1;if(null!==m)i.delete(m.attributeName),h=H(e,f,p,m);else{var S=r;if(S===_l&&(S=Ot(t)),S===_l)i.delete(f.toLowerCase());else{var x=(c=void 0,c=f.toLowerCase(),sn.hasOwnProperty(c)&&sn[c]||null);null!==x&&x!==f&&(k=!0,i.delete(x)),i.delete(f)}h=q(e,f,p)}p===h||k||vl(f,h,p)}}}switch(i.size>0&&!pl&&gl(i),t){case\"input\":Je(e),dt(e,n,!0);break;case\"textarea\":Je(e),Pt(e);break;case\"select\":case\"option\":break;default:\"function\"==typeof n.onClick&&Ol(e)}return d}(e,t,n,a.namespace)}function bu(e){for(var t=e.previousSibling,n=0;t;){if(8===t.nodeType){var r=t.data;if(\"$\"===r||r===Zl||r===Gl){if(0===n)return t;n--}else\"/$\"===r&&n++}t=t.previousSibling}return null}var wu=0;function ku(e){var t=\"r:\"+(wu++).toString(36);return{toString:function(){return e(),t},valueOf:function(){return e(),t}}}var Su=Math.random().toString(36).slice(2),xu=\"__reactFiber$\"+Su,Eu=\"__reactProps$\"+Su,Cu=\"__reactContainer$\"+Su,Ru=\"__reactEvents$\"+Su;function Tu(e,t){t[xu]=e}function Pu(e){e[Cu]=null}function _u(e){return!!e[Cu]}function Du(e){var t=e[xu];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Cu]||n[xu]){var r=t.alternate;if(null!==t.child||null!==r&&null!==r.child)for(var a=bu(e);null!==a;){var o=a[xu];if(o)return o;a=bu(a)}return t}n=(e=n).parentNode}return null}function Iu(e){var t=e[xu]||e[Cu];return t&&(5===t.tag||6===t.tag||t.tag===s||3===t.tag)?t:null}function Nu(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(\"getNodeFromInstance: Invalid argument.\")}function Lu(e){return e[Eu]||null}function Ou(e,t){e[Eu]=t}function zu(e){var t=e[Ru];return void 0===t&&(t=e[Ru]=new Set),t}var Mu={},Uu=n.ReactDebugCurrentFrame;function Au(e){if(e){var t=e._owner,n=Oe(e.type,e._source,t?t.type:null);Uu.setExtraStackFrame(n)}else Uu.setExtraStackFrame(null)}function Fu(e,t,n,r,o){var i=Function.call.bind(Object.prototype.hasOwnProperty);for(var l in e)if(i(e,l)){var u=void 0;try{if(\"function\"!=typeof e[l]){var s=Error((r||\"React class\")+\": \"+n+\" type `\"+l+\"` is invalid; it must be a function, usually from the `prop-types` package, but received `\"+typeof e[l]+\"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");throw s.name=\"Invariant Violation\",s}u=e[l](t,l,r,n,null,\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\")}catch(e){u=e}!u||u instanceof Error||(Au(o),a(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",r||\"React class\",n,l,typeof u),Au(null)),u instanceof Error&&!(u.message in Mu)&&(Mu[u.message]=!0,Au(o),a(\"Failed %s type: %s\",n,u.message),Au(null))}}var Wu,ju=[];Wu=[];var Bu,Vu=-1;function Hu(e){return{current:e}}function qu(e,t){Vu<0?a(\"Unexpected pop.\"):(t!==Wu[Vu]&&a(\"Unexpected Fiber popped.\"),e.current=ju[Vu],ju[Vu]=null,Wu[Vu]=null,Vu--)}function $u(e,t,n){Vu++,ju[Vu]=e.current,Wu[Vu]=n,e.current=t}Bu={};var Qu={};Object.freeze(Qu);var Yu=Hu(Qu),Ku=Hu(!1),Xu=Qu;function Gu(e,t,n){return n&&ts(t)?Xu:Yu.current}function Zu(e,t,n){var r=e.stateNode;r.__reactInternalMemoizedUnmaskedChildContext=t,r.__reactInternalMemoizedMaskedChildContext=n}function Ju(e,t){var n=e.type,r=n.contextTypes;if(!r)return Qu;var a=e.stateNode;if(a&&a.__reactInternalMemoizedUnmaskedChildContext===t)return a.__reactInternalMemoizedMaskedChildContext;var o={};for(var i in r)o[i]=t[i];return Fu(r,o,\"context\",Ae(n)||\"Unknown\"),a&&Zu(e,t,o),o}function es(){return Ku.current}function ts(e){var t=e.childContextTypes;return null!=t}function ns(e){qu(Ku,e),qu(Yu,e)}function rs(e){qu(Ku,e),qu(Yu,e)}function as(e,t,n){if(Yu.current!==Qu)throw Error(\"Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.\");$u(Yu,t,e),$u(Ku,n,e)}function os(e,t,n){var r=e.stateNode,o=t.childContextTypes;if(\"function\"!=typeof r.getChildContext){var i=Ae(t)||\"Unknown\";return Bu[i]||(Bu[i]=!0,a(\"%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.\",i,i)),n}var l=r.getChildContext();for(var u in l)if(!(u in o))throw Error((Ae(t)||\"Unknown\")+'.getChildContext(): key \"'+u+'\" is not defined in childContextTypes.');return Fu(o,l,\"child context\",Ae(t)||\"Unknown\"),Q({},n,l)}function is(e){var t=e.stateNode,n=t&&t.__reactInternalMemoizedMergedChildContext||Qu;return Xu=Yu.current,$u(Yu,n,e),$u(Ku,Ku.current,e),!0}function ls(e,t,n){var r=e.stateNode;if(!r)throw Error(\"Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.\");if(n){var a=os(e,t,Xu);r.__reactInternalMemoizedMergedChildContext=a,qu(Ku,e),qu(Yu,e),$u(Yu,a,e),$u(Ku,n,e)}else qu(Ku,e),$u(Ku,n,e)}function us(e){if(!function(e){return Dr(e)===e}(e)||1!==e.tag)throw Error(\"Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.\");var t=e;do{switch(t.tag){case 3:return t.stateNode.context;case 1:if(ts(t.type))return t.stateNode.__reactInternalMemoizedMergedChildContext}t=t.return}while(null!==t);throw Error(\"Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.\")}var ss=null,cs=null,ds=!1,fs=\"undefined\"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__;function ps(e,t){if(cs&&\"function\"==typeof cs.onCommitFiberRoot)try{var n=(e.current.flags&wr)===wr;cs.onCommitFiberRoot(ss,e,t,n)}catch(e){ds||(ds=!0,a(\"React instrumentation encountered an error: %s\",e))}}var hs=lr,ms=ar,vs=nr,gs=or,ys=ir,bs=rr,ws=ur,ks=sr,Ss=cr,xs=dr,Es=fr,Cs=pr;if(null==wa||null==wa.current)throw Error(\"It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling\");var Rs={},Ts=99,Ps=98,_s=97,Ds=gs,Is=void 0!==ys?ys:function(){},Ns=null,Ls=null,Os=!1,zs=bs(),Ms=zs<1e4?bs:function(){return bs()-zs};function Us(){switch(ws()){case ks:return Ts;case Ss:return Ps;case xs:return _s;case Es:return 96;case Cs:return 95;default:throw Error(\"Unknown priority level.\")}}function As(e){switch(e){case Ts:return ks;case Ps:return Ss;case _s:return xs;case 96:return Es;case 95:return Cs;default:throw Error(\"Unknown priority level.\")}}function Fs(e,t){var n=As(e);return hs(n,t)}function Ws(e,t,n){var r=As(e);return ms(r,t,n)}function js(e){e!==Rs&&vs(e)}function Bs(){if(null!==Ls){var e=Ls;Ls=null,vs(e)}Vs()}function Vs(){if(!Os&&null!==Ns){Os=!0;var e=0;try{var t=Ns;Fs(Ts,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(true)}while(null!==n)}})),Ns=null}catch(t){throw null!==Ns&&(Ns=Ns.slice(e+1)),ms(ks,Bs),t}finally{Os=!1}}}var Hs=\"17.0.2\",qs=n.ReactCurrentBatchConfig;var $s={recordUnsafeLifecycleWarnings:function(e,t){},flushPendingUnsafeLifecycleWarnings:function(){},recordLegacyContextWarning:function(e,t){},flushLegacyContextWarning:function(){},discardPendingWarnings:function(){}},Qs=function(e){var t=[];return e.forEach((function(e){t.push(e)})),t.sort().join(\", \")},Ys=[],Ks=[],Xs=[],Gs=[],Zs=[],Js=[],ec=new Set;$s.recordUnsafeLifecycleWarnings=function(e,t){ec.has(e.type)||(\"function\"==typeof t.componentWillMount&&!0!==t.componentWillMount.__suppressDeprecationWarning&&Ys.push(e),1&e.mode&&\"function\"==typeof t.UNSAFE_componentWillMount&&Ks.push(e),\"function\"==typeof t.componentWillReceiveProps&&!0!==t.componentWillReceiveProps.__suppressDeprecationWarning&&Xs.push(e),1&e.mode&&\"function\"==typeof t.UNSAFE_componentWillReceiveProps&&Gs.push(e),\"function\"==typeof t.componentWillUpdate&&!0!==t.componentWillUpdate.__suppressDeprecationWarning&&Zs.push(e),1&e.mode&&\"function\"==typeof t.UNSAFE_componentWillUpdate&&Js.push(e))},$s.flushPendingUnsafeLifecycleWarnings=function(){var e=new Set;Ys.length>0&&(Ys.forEach((function(t){e.add(Ae(t.type)||\"Component\"),ec.add(t.type)})),Ys=[]);var t=new Set;Ks.length>0&&(Ks.forEach((function(e){t.add(Ae(e.type)||\"Component\"),ec.add(e.type)})),Ks=[]);var n=new Set;Xs.length>0&&(Xs.forEach((function(e){n.add(Ae(e.type)||\"Component\"),ec.add(e.type)})),Xs=[]);var o=new Set;Gs.length>0&&(Gs.forEach((function(e){o.add(Ae(e.type)||\"Component\"),ec.add(e.type)})),Gs=[]);var i=new Set;Zs.length>0&&(Zs.forEach((function(e){i.add(Ae(e.type)||\"Component\"),ec.add(e.type)})),Zs=[]);var l=new Set;(Js.length>0&&(Js.forEach((function(e){l.add(Ae(e.type)||\"Component\"),ec.add(e.type)})),Js=[]),t.size>0)&&a(\"Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\\nPlease update the following components: %s\",Qs(t));o.size>0&&a(\"Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n* Move data fetching code or side effects to componentDidUpdate.\\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n\\nPlease update the following components: %s\",Qs(o));l.size>0&&a(\"Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n* Move data fetching code or side effects to componentDidUpdate.\\n\\nPlease update the following components: %s\",Qs(l));e.size>0&&r(\"componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\\nPlease update the following components: %s\",Qs(e));n.size>0&&r(\"componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n* Move data fetching code or side effects to componentDidUpdate.\\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\\nPlease update the following components: %s\",Qs(n));i.size>0&&r(\"componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n* Move data fetching code or side effects to componentDidUpdate.\\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\\nPlease update the following components: %s\",Qs(i))};var tc=new Map,nc=new Set;function rc(e,t){if(e&&e.defaultProps){var n=Q({},t),r=e.defaultProps;for(var a in r)void 0===n[a]&&(n[a]=r[a]);return n}return t}$s.recordLegacyContextWarning=function(e,t){var n=function(e){for(var t=null,n=e;null!==n;)1&n.mode&&(t=n),n=n.return;return t}(e);if(null!==n){if(!nc.has(e.type)){var r=tc.get(n);(null!=e.type.contextTypes||null!=e.type.childContextTypes||null!==t&&\"function\"==typeof t.getChildContext)&&(void 0===r&&(r=[],tc.set(n,r)),r.push(e))}}else a(\"Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.\")},$s.flushLegacyContextWarning=function(){tc.forEach((function(e,t){if(0!==e.length){var n=e[0],r=new Set;e.forEach((function(e){r.add(Ae(e.type)||\"Component\"),nc.add(e.type)}));var o=Qs(r);try{qe(n),a(\"Legacy context API has been detected within a strict-mode tree.\\n\\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\\n\\nPlease update the following components: %s\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context\",o)}finally{He()}}}))},$s.discardPendingWarnings=function(){Ys=[],Ks=[],Xs=[],Gs=[],Zs=[],Js=[],tc=new Map};var ac,oc=1073741823,ic=Hu(null);ac={};var lc=null,uc=null,sc=null,cc=!1;function dc(){lc=null,uc=null,sc=null,cc=!1}function fc(){cc=!0}function pc(){cc=!1}function hc(e,t){var n=e.type._context;$u(ic,n._currentValue,e),n._currentValue=t,void 0!==n._currentRenderer&&null!==n._currentRenderer&&n._currentRenderer!==ac&&a(\"Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.\"),n._currentRenderer=ac}function mc(e){var t=ic.current;qu(ic,e),e.type._context._currentValue=t}function vc(e,t){for(var n=e;null!==n;){var r=n.alternate;if(Ya(n.childLanes,t)){if(null===r||Ya(r.childLanes,t))break;r.childLanes=Ka(r.childLanes,t)}else n.childLanes=Ka(n.childLanes,t),null!==r&&(r.childLanes=Ka(r.childLanes,t));n=n.return}}function gc(e,t){lc=e,uc=null,sc=null;var n=e.dependencies;null!==n&&(null!==n.firstContext&&(Qa(n.lanes,t)&&yh(),n.firstContext=null))}function yc(e,t){if(cc&&a(\"Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().\"),sc===e);else if(!1===t||0===t);else{var n;\"number\"!=typeof t||t===oc?(sc=e,n=oc):n=t;var r={context:e,observedBits:n,next:null};if(null===uc){if(null===lc)throw Error(\"Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().\");uc=r,lc.dependencies={lanes:0,firstContext:r,responders:null}}else uc=uc.next=r}return e._currentValue}var bc,wc,kc=2,Sc=!1;function xc(e){var t={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null};e.updateQueue=t}function Ec(e,t){var n=t.updateQueue,r=e.updateQueue;if(n===r){var a={baseState:r.baseState,firstBaseUpdate:r.firstBaseUpdate,lastBaseUpdate:r.lastBaseUpdate,shared:r.shared,effects:r.effects};t.updateQueue=a}}function Cc(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Rc(e,t){var n=e.updateQueue;if(null!==n){var r=n.shared,o=r.pending;null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,wc!==r||bc||(a(\"An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\"),bc=!0)}}function Tc(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r){var a=r.updateQueue;if(n===a){var o=null,i=null,l=n.firstBaseUpdate;if(null!==l){var u=l;do{var s={eventTime:u.eventTime,lane:u.lane,tag:u.tag,payload:u.payload,callback:u.callback,next:null};null===i?o=i=s:(i.next=s,i=s),u=u.next}while(null!==u);null===i?o=i=t:(i.next=t,i=t)}else o=i=t;return n={baseState:a.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:a.shared,effects:a.effects},void(e.updateQueue=n)}}var c=n.lastBaseUpdate;null===c?n.firstBaseUpdate=t:c.next=t,n.lastBaseUpdate=t}function Pc(e,t,n,r,a,o){switch(n.tag){case 1:var i=n.payload;if(\"function\"==typeof i){fc();var l=i.call(o,r,a);if(1&e.mode){Ee();try{i.call(o,r,a)}finally{Ce()}}return pc(),l}return i;case 3:e.flags=-4097&e.flags|wr;case 0:var u,s=n.payload;if(\"function\"==typeof s){if(fc(),u=s.call(o,r,a),1&e.mode){Ee();try{s.call(o,r,a)}finally{Ce()}}pc()}else u=s;return null==u?r:Q({},r,u);case kc:return Sc=!0,r}return r}function _c(e,t,n,r){var a=e.updateQueue;Sc=!1,wc=a.shared;var o=a.firstBaseUpdate,i=a.lastBaseUpdate,l=a.shared.pending;if(null!==l){a.shared.pending=null;var u=l,s=u.next;u.next=null,null===i?o=s:i.next=s,i=u;var c=e.alternate;if(null!==c){var d=c.updateQueue,f=d.lastBaseUpdate;f!==i&&(null===f?d.firstBaseUpdate=s:f.next=s,d.lastBaseUpdate=u)}}if(null!==o){for(var p=a.baseState,h=0,m=null,v=null,g=null,y=o;;){var b=y.lane,w=y.eventTime;if(Ya(r,b)){if(null!==g){var k={eventTime:w,lane:0,tag:y.tag,payload:y.payload,callback:y.callback,next:null};g=g.next=k}if(p=Pc(e,0,y,p,t,n),null!==y.callback){e.flags|=32;var S=a.effects;null===S?a.effects=[y]:S.push(y)}}else{var x={eventTime:w,lane:b,tag:y.tag,payload:y.payload,callback:y.callback,next:null};null===g?(v=g=x,m=p):g=g.next=x,h=Ka(h,b)}if(null===(y=y.next)){if(null===(l=a.shared.pending))break;var E=l,C=E.next;E.next=null,y=C,a.lastBaseUpdate=E,a.shared.pending=null}}null===g&&(m=p),a.baseState=m,a.firstBaseUpdate=v,a.lastBaseUpdate=g,mv(h),e.lanes=h,e.memoizedState=p}wc=null}function Dc(e,t){if(\"function\"!=typeof e)throw Error(\"Invalid argument passed as callback. Expected a function. Instead received: \"+e);e.call(t)}function Ic(){Sc=!1}function Nc(){return Sc}function Lc(e,t,n){var r=t.effects;if(t.effects=null,null!==r)for(var a=0;a<r.length;a++){var o=r[a],i=o.callback;null!==i&&(o.callback=null,Dc(i,n))}}bc=!1,wc=null;var Oc,zc,Mc,Uc,Ac,Fc,Wc,jc,Bc,Vc,Hc={},qc=Array.isArray,$c=(new t.Component).refs;Oc=new Set,zc=new Set,Mc=new Set,Uc=new Set,jc=new Set,Ac=new Set,Bc=new Set,Vc=new Set;var Qc=new Set;function Yc(e,t,n,r){var a=e.memoizedState;if(1&e.mode){Ee();try{n(r,a)}finally{Ce()}}var o=n(r,a);Fc(t,o);var i=null==o?a:Q({},a,o);(e.memoizedState=i,0===e.lanes)&&(e.updateQueue.baseState=i)}Wc=function(e,t){if(null!==e&&\"function\"!=typeof e){var n=t+\"_\"+e;Qc.has(n)||(Qc.add(n),a(\"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.\",t,e))}},Fc=function(e,t){if(void 0===t){var n=Ae(e)||\"Component\";Ac.has(n)||(Ac.add(n),a(\"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.\",n))}},Object.defineProperty(Hc,\"_processChildContext\",{enumerable:!1,value:function(){throw Error(\"_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).\")}}),Object.freeze(Hc);var Kc,Xc,Gc,Zc,Jc,ed={isMounted:function(e){var t=_r.current;if(null!==t&&1===t.tag){var n=t,r=n.stateNode;r._warnedAboutRefsInRender||a(\"%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.\",Ae(n.type)||\"A component\"),r._warnedAboutRefsInRender=!0}var o=mr(e);return!!o&&Dr(o)===o},enqueueSetState:function(e,t,n){var r=mr(e),a=Km(),o=Xm(r),i=Cc(a,o);i.payload=t,null!=n&&(Wc(n,\"setState\"),i.callback=n),Rc(r,i),Zm(r,o,a)},enqueueReplaceState:function(e,t,n){var r=mr(e),a=Km(),o=Xm(r),i=Cc(a,o);i.tag=1,i.payload=t,null!=n&&(Wc(n,\"replaceState\"),i.callback=n),Rc(r,i),Zm(r,o,a)},enqueueForceUpdate:function(e,t){var n=mr(e),r=Km(),a=Xm(n),o=Cc(r,a);o.tag=kc,null!=t&&(Wc(t,\"forceUpdate\"),o.callback=t),Rc(n,o),Zm(n,a,r)}};function td(e,t,n,r,o,i,l){var u=e.stateNode;if(\"function\"==typeof u.shouldComponentUpdate){if(1&e.mode){Ee();try{u.shouldComponentUpdate(r,i,l)}finally{Ce()}}var s=u.shouldComponentUpdate(r,i,l);return void 0===s&&a(\"%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.\",Ae(t)||\"Component\"),s}return!t.prototype||!t.prototype.isPureReactComponent||(!Pi(n,r)||!Pi(o,i))}function nd(e,t){var n;t.updater=ed,e.stateNode=t,n=e,t._reactInternals=n,t._reactInternalInstance=Hc}function rd(e,t,n){var r=!1,o=Qu,i=Qu,l=t.contextType;if(\"contextType\"in t&&(!(null===l||void 0!==l&&l.$$typeof===ee&&void 0===l._context)&&!Vc.has(t))){Vc.add(t);var u=\"\";u=void 0===l?\" However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.\":\"object\"!=typeof l?\" However, it is set to a \"+typeof l+\".\":l.$$typeof===J?\" Did you accidentally pass the Context.Provider instead?\":void 0!==l._context?\" Did you accidentally pass the Context.Consumer instead?\":\" However, it is set to an object with keys {\"+Object.keys(l).join(\", \")+\"}.\",a(\"%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s\",Ae(t)||\"Component\",u)}if(\"object\"==typeof l&&null!==l)i=yc(l);else{o=Gu(0,t,!0);var s=t.contextTypes;i=(r=null!=s)?Ju(e,o):Qu}if(1&e.mode){Ee();try{new t(n,i)}finally{Ce()}}var c=new t(n,i),d=e.memoizedState=null!==c.state&&void 0!==c.state?c.state:null;if(nd(e,c),\"function\"==typeof t.getDerivedStateFromProps&&null===d){var f=Ae(t)||\"Component\";zc.has(f)||(zc.add(f),a(\"`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.\",f,null===c.state?\"null\":\"undefined\",f))}if(\"function\"==typeof t.getDerivedStateFromProps||\"function\"==typeof c.getSnapshotBeforeUpdate){var p=null,h=null,m=null;if(\"function\"==typeof c.componentWillMount&&!0!==c.componentWillMount.__suppressDeprecationWarning?p=\"componentWillMount\":\"function\"==typeof c.UNSAFE_componentWillMount&&(p=\"UNSAFE_componentWillMount\"),\"function\"==typeof c.componentWillReceiveProps&&!0!==c.componentWillReceiveProps.__suppressDeprecationWarning?h=\"componentWillReceiveProps\":\"function\"==typeof c.UNSAFE_componentWillReceiveProps&&(h=\"UNSAFE_componentWillReceiveProps\"),\"function\"==typeof c.componentWillUpdate&&!0!==c.componentWillUpdate.__suppressDeprecationWarning?m=\"componentWillUpdate\":\"function\"==typeof c.UNSAFE_componentWillUpdate&&(m=\"UNSAFE_componentWillUpdate\"),null!==p||null!==h||null!==m){var v=Ae(t)||\"Component\",g=\"function\"==typeof t.getDerivedStateFromProps?\"getDerivedStateFromProps()\":\"getSnapshotBeforeUpdate()\";Uc.has(v)||(Uc.add(v),a(\"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\nhttps://reactjs.org/link/unsafe-component-lifecycles\",v,g,null!==p?\"\\n  \"+p:\"\",null!==h?\"\\n  \"+h:\"\",null!==m?\"\\n  \"+m:\"\"))}}return r&&Zu(e,o,i),c}function ad(e,t,n,r){var o=t.state;if(\"function\"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),\"function\"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==o){var i=Ae(e.type)||\"Component\";Oc.has(i)||(Oc.add(i),a(\"%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.\",i)),ed.enqueueReplaceState(t,t.state,null)}}function od(e,t,n,r){!function(e,t,n){var r=e.stateNode,o=Ae(t)||\"Component\";r.render||(t.prototype&&\"function\"==typeof t.prototype.render?a(\"%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?\",o):a(\"%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.\",o)),!r.getInitialState||r.getInitialState.isReactClassApproved||r.state||a(\"getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?\",o),r.getDefaultProps&&!r.getDefaultProps.isReactClassApproved&&a(\"getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.\",o),r.propTypes&&a(\"propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.\",o),r.contextType&&a(\"contextType was defined as an instance property on %s. Use a static property to define contextType instead.\",o),r.contextTypes&&a(\"contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.\",o),t.contextType&&t.contextTypes&&!Bc.has(t)&&(Bc.add(t),a(\"%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.\",o)),\"function\"==typeof r.componentShouldUpdate&&a(\"%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.\",o),t.prototype&&t.prototype.isPureReactComponent&&void 0!==r.shouldComponentUpdate&&a(\"%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.\",Ae(t)||\"A pure component\"),\"function\"==typeof r.componentDidUnmount&&a(\"%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?\",o),\"function\"==typeof r.componentDidReceiveProps&&a(\"%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().\",o),\"function\"==typeof r.componentWillRecieveProps&&a(\"%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\",o),\"function\"==typeof r.UNSAFE_componentWillRecieveProps&&a(\"%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?\",o);var i=r.props!==n;void 0!==r.props&&i&&a(\"%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.\",o,o),r.defaultProps&&a(\"Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.\",o,o),\"function\"!=typeof r.getSnapshotBeforeUpdate||\"function\"==typeof r.componentDidUpdate||Mc.has(t)||(Mc.add(t),a(\"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.\",Ae(t))),\"function\"==typeof r.getDerivedStateFromProps&&a(\"%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.\",o),\"function\"==typeof r.getDerivedStateFromError&&a(\"%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.\",o),\"function\"==typeof t.getSnapshotBeforeUpdate&&a(\"%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.\",o);var l=r.state;l&&(\"object\"!=typeof l||qc(l))&&a(\"%s.state: must be set to an object or null\",o),\"function\"==typeof r.getChildContext&&\"object\"!=typeof t.childContextTypes&&a(\"%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().\",o)}(e,t,n);var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=$c,xc(e);var i=t.contextType;if(\"object\"==typeof i&&null!==i)o.context=yc(i);else{var l=Gu(0,t,!0);o.context=Ju(e,l)}if(o.state===n){var u=Ae(t)||\"Component\";jc.has(u)||(jc.add(u),a(\"%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.\",u))}1&e.mode&&$s.recordLegacyContextWarning(e,o),$s.recordUnsafeLifecycleWarnings(e,o),_c(e,n,o,r),o.state=e.memoizedState;var s=t.getDerivedStateFromProps;\"function\"==typeof s&&(Yc(e,t,s,n),o.state=e.memoizedState),\"function\"==typeof t.getDerivedStateFromProps||\"function\"==typeof o.getSnapshotBeforeUpdate||\"function\"!=typeof o.UNSAFE_componentWillMount&&\"function\"!=typeof o.componentWillMount||(!function(e,t){var n=t.state;\"function\"==typeof t.componentWillMount&&t.componentWillMount(),\"function\"==typeof t.UNSAFE_componentWillMount&&t.UNSAFE_componentWillMount(),n!==t.state&&(a(\"%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.\",Ae(e.type)||\"Component\"),ed.enqueueReplaceState(t,t.state,null))}(e,o),_c(e,n,o,r),o.state=e.memoizedState),\"function\"==typeof o.componentDidMount&&(e.flags|=4)}var id;Kc=!1,Xc=!1,Gc={},Zc={},Jc={},id=function(e,t){if(null!==e&&\"object\"==typeof e&&e._store&&!e._store.validated&&null==e.key){if(\"object\"!=typeof e._store)throw Error(\"React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.\");e._store.validated=!0;var n=Ae(t.type)||\"Component\";Zc[n]||(Zc[n]=!0,a('Each child in a list should have a unique \"key\" prop. See https://reactjs.org/link/warning-keys for more information.'))}};var ld=Array.isArray;function ud(e,t,n){var r=n.ref;if(null!==r&&\"function\"!=typeof r&&\"object\"!=typeof r){if(1&e.mode&&(!n._owner||!n._self||n._owner.stateNode===n._self)){var o=Ae(e.type)||\"Component\";Gc[o]||(a('A string ref, \"%s\", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',r),Gc[o]=!0)}if(n._owner){var i,l=n._owner;if(l){var u=l;if(1!==u.tag)throw Error(\"Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref\");i=u.stateNode}if(!i)throw Error(\"Missing owner for string ref \"+r+\". This error is likely caused by a bug in React. Please file an issue.\");var s=\"\"+r;if(null!==t&&null!==t.ref&&\"function\"==typeof t.ref&&t.ref._stringRef===s)return t.ref;var c=function(e){var t=i.refs;t===$c&&(t=i.refs={}),null===e?delete t[s]:t[s]=e};return c._stringRef=s,c}if(\"string\"!=typeof r)throw Error(\"Expected ref to be a function, a string, an object returned by React.createRef(), or null.\");if(!n._owner)throw Error(\"Element ref was specified as a string (\"+r+\") but no owner was set. This could happen for one of the following reasons:\\n1. You may be adding a ref to a function component\\n2. You may be adding a ref to a component that was not created inside a component's render method\\n3. You have multiple copies of React loaded\\nSee https://reactjs.org/link/refs-must-have-owner for more information.\")}return r}function sd(e,t){if(\"textarea\"!==e.type)throw Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===Object.prototype.toString.call(t)?\"object with keys {\"+Object.keys(t).join(\", \")+\"}\":t)+\"). If you meant to render a collection of children, use an array instead.\")}function cd(e){var t=Ae(e.type)||\"Component\";Jc[t]||(Jc[t]=!0,a(\"Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.\"))}function dd(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(var a=r;null!==a;)t(n,a),a=a.sibling;return null}function r(e,t){for(var n=new Map,r=t;null!==r;)null!==r.key?n.set(r.key,r):n.set(r.index,r),r=r.sibling;return n}function o(e,t){var n=Cg(e,t);return n.index=0,n.sibling=null,n}function i(t,n,r){if(t.index=r,!e)return n;var a=t.alternate;if(null!==a){var o=a.index;return o<n?(t.flags=2,n):o}return t.flags=2,n}function u(t){return e&&null===t.alternate&&(t.flags=2),t}function s(e,t,n,r){if(null===t||6!==t.tag){var a=Ig(n,e.mode,r);return a.return=e,a}var i=o(t,n);return i.return=e,i}function c(e,t,n,r){if(null!==t&&(t.elementType===n.type||cg(t,n))){var a=o(t,n.props);return a.ref=ud(e,t,n),a.return=e,a._debugSource=n._source,a._debugOwner=n._owner,a}var i=Pg(n,e.mode,r);return i.ref=ud(e,t,n),i.return=e,i}function f(e,t,n,r){if(null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation){var a=Ng(n,e.mode,r);return a.return=e,a}var i=o(t,n.children||[]);return i.return=e,i}function p(e,t,n,r,a){if(null===t||7!==t.tag){var i=_g(n,e.mode,r,a);return i.return=e,i}var l=o(t,n);return l.return=e,l}function h(e,t,n){if(\"string\"==typeof t||\"number\"==typeof t){var r=Ig(\"\"+t,e.mode,n);return r.return=e,r}if(\"object\"==typeof t&&null!==t){switch(t.$$typeof){case Y:var a=Pg(t,e.mode,n);return a.ref=ud(e,null,t),a.return=e,a;case K:var o=Ng(t,e.mode,n);return o.return=e,o}if(ld(t)||he(t)){var i=_g(t,e.mode,n,null);return i.return=e,i}sd(e,t)}return\"function\"==typeof t&&cd(e),null}function v(e,t,n,r){var a=null!==t?t.key:null;if(\"string\"==typeof n||\"number\"==typeof n)return null!==a?null:s(e,t,\"\"+n,r);if(\"object\"==typeof n&&null!==n){switch(n.$$typeof){case Y:return n.key===a?n.type===X?p(e,t,n.props.children,r,a):c(e,t,n,r):null;case K:return n.key===a?f(e,t,n,r):null}if(ld(n)||he(n))return null!==a?null:p(e,t,n,r,null);sd(e,n)}return\"function\"==typeof n&&cd(e),null}function g(e,t,n,r,a){if(\"string\"==typeof r||\"number\"==typeof r)return s(t,e.get(n)||null,\"\"+r,a);if(\"object\"==typeof r&&null!==r){switch(r.$$typeof){case Y:var o=e.get(null===r.key?n:r.key)||null;return r.type===X?p(t,o,r.props.children,a,r.key):c(t,o,r,a);case K:return f(t,e.get(null===r.key?n:r.key)||null,r,a)}if(ld(r)||he(r))return p(t,e.get(n)||null,r,a,null);sd(t,r)}return\"function\"==typeof r&&cd(t),null}function y(e,t,n){if(\"object\"!=typeof e||null===e)return t;switch(e.$$typeof){case Y:case K:id(e,n);var r=e.key;if(\"string\"!=typeof r)break;if(null===t){(t=new Set).add(r);break}if(!t.has(r)){t.add(r);break}a(\"Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.\",r)}return t}return function(s,c,f,p){var b=\"object\"==typeof f&&null!==f&&f.type===X&&null===f.key;b&&(f=f.props.children);var w=\"object\"==typeof f&&null!==f;if(w)switch(f.$$typeof){case Y:return u(function(e,r,a,i){for(var l=a.key,u=r;null!==u;){if(u.key===l){switch(u.tag){case 7:if(a.type===X){n(e,u.sibling);var s=o(u,a.props.children);return s.return=e,s._debugSource=a._source,s._debugOwner=a._owner,s}break;case m:default:if(u.elementType===a.type||cg(u,a)){n(e,u.sibling);var c=o(u,a.props);return c.ref=ud(e,u,a),c.return=e,c._debugSource=a._source,c._debugOwner=a._owner,c}}n(e,u);break}t(e,u),u=u.sibling}if(a.type===X){var d=_g(a.props.children,e.mode,i,a.key);return d.return=e,d}var f=Pg(a,e.mode,i);return f.ref=ud(e,r,a),f.return=e,f}(s,c,f,p));case K:return u(function(e,r,a,i){for(var l=a.key,u=r;null!==u;){if(u.key===l){if(4===u.tag&&u.stateNode.containerInfo===a.containerInfo&&u.stateNode.implementation===a.implementation){n(e,u.sibling);var s=o(u,a.children||[]);return s.return=e,s}n(e,u);break}t(e,u),u=u.sibling}var c=Ng(a,e.mode,i);return c.return=e,c}(s,c,f,p))}if(\"string\"==typeof f||\"number\"==typeof f)return u(function(e,t,r,a){if(null!==t&&6===t.tag){n(e,t.sibling);var i=o(t,r);return i.return=e,i}n(e,t);var l=Ig(r,e.mode,a);return l.return=e,l}(s,c,\"\"+f,p));if(ld(f))return function(a,o,l,u){for(var s=null,c=0;c<l.length;c++)s=y(l[c],s,a);for(var d=null,f=null,p=o,m=0,b=0,w=null;null!==p&&b<l.length;b++){p.index>b?(w=p,p=null):w=p.sibling;var k=v(a,p,l[b],u);if(null===k){null===p&&(p=w);break}e&&p&&null===k.alternate&&t(a,p),m=i(k,m,b),null===f?d=k:f.sibling=k,f=k,p=w}if(b===l.length)return n(a,p),d;if(null===p){for(;b<l.length;b++){var S=h(a,l[b],u);null!==S&&(m=i(S,m,b),null===f?d=S:f.sibling=S,f=S)}return d}for(var x=r(0,p);b<l.length;b++){var E=g(x,a,b,l[b],u);null!==E&&(e&&null!==E.alternate&&x.delete(null===E.key?b:E.key),m=i(E,m,b),null===f?d=E:f.sibling=E,f=E)}return e&&x.forEach((function(e){return t(a,e)})),d}(s,c,f,p);if(he(f))return function(o,l,u,s){var c=he(u);if(\"function\"!=typeof c)throw Error(\"An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.\");\"function\"==typeof Symbol&&\"Generator\"===u[Symbol.toStringTag]&&(Xc||a(\"Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.\"),Xc=!0),u.entries===c&&(Kc||a(\"Using Maps as children is not supported. Use an array of keyed ReactElements instead.\"),Kc=!0);var d=c.call(u);if(d)for(var f=null,p=d.next();!p.done;p=d.next())f=y(p.value,f,o);var m=c.call(u);if(null==m)throw Error(\"An iterable object provided no iterator.\");for(var b=null,w=null,k=l,S=0,x=0,E=null,C=m.next();null!==k&&!C.done;x++,C=m.next()){k.index>x?(E=k,k=null):E=k.sibling;var R=v(o,k,C.value,s);if(null===R){null===k&&(k=E);break}e&&k&&null===R.alternate&&t(o,k),S=i(R,S,x),null===w?b=R:w.sibling=R,w=R,k=E}if(C.done)return n(o,k),b;if(null===k){for(;!C.done;x++,C=m.next()){var T=h(o,C.value,s);null!==T&&(S=i(T,S,x),null===w?b=T:w.sibling=T,w=T)}return b}for(var P=r(0,k);!C.done;x++,C=m.next()){var _=g(P,o,x,C.value,s);null!==_&&(e&&null!==_.alternate&&P.delete(null===_.key?x:_.key),S=i(_,S,x),null===w?b=_:w.sibling=_,w=_)}return e&&P.forEach((function(e){return t(o,e)})),b}(s,c,f,p);if(w&&sd(s,f),\"function\"==typeof f&&cd(s),void 0===f&&!b)switch(s.tag){case 1:if(s.stateNode.render._isMockFunction)break;case m:case 0:case l:case d:throw Error((Ae(s.type)||\"Component\")+\"(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.\")}return n(s,c)}}var fd=dd(!0),pd=dd(!1);function hd(e,t){for(var n=e.child;null!==n;)Rg(n,t),n=n.sibling}var md={},vd=Hu(md),gd=Hu(md),yd=Hu(md);function bd(e){if(e===md)throw Error(\"Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.\");return e}function wd(){return bd(yd.current)}function kd(e,t){$u(yd,t,e),$u(gd,e,e),$u(vd,md,e);var n=function(e){var t,n,r=e.nodeType;switch(r){case 9:case 11:t=9===r?\"#document\":\"#fragment\";var a=e.documentElement;n=a?a.namespaceURI:zt(null,\"\");break;default:var o=8===r?e.parentNode:e;n=zt(o.namespaceURI||null,t=o.tagName)}var i=t.toLowerCase();return{namespace:n,ancestorInfo:Hl(null,i)}}(t);qu(vd,e),$u(vd,n,e)}function Sd(e){qu(vd,e),qu(gd,e),qu(yd,e)}function xd(){return bd(vd.current)}function Ed(e){bd(yd.current);var t,n,r,a=bd(vd.current),o=(t=a,n=e.type,{namespace:zt((r=t).namespace,n),ancestorInfo:Hl(r.ancestorInfo,n)});a!==o&&($u(gd,e,e),$u(vd,o,e))}function Cd(e){gd.current===e&&(qu(vd,e),qu(gd,e))}var Rd=Hu(0);function Td(e,t){return 0!=(e&t)}function Pd(e){return 1&e}function _d(e,t){return 1&e|t}function Dd(e,t){$u(Rd,t,e)}function Id(e){qu(Rd,e)}function Nd(e,t){var n=e.memoizedState;if(null!==n)return null!==n.dehydrated;var r=e.memoizedProps;return void 0!==r.fallback&&(!0!==r.unstable_avoidThisFallback||!t)}function Ld(e){for(var t=e;null!==t;){if(t.tag===s){var n=t.memoizedState;if(null!==n){var r=n.dehydrated;if(null===r||r.data===Gl||hu(r))return t}}else if(t.tag===p&&void 0!==t.memoizedProps.revealOrder){if(0!=(t.flags&wr))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)return null;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Od=null,zd=null,Md=!1;function Ud(e,t){switch(e.tag){case 3:!function(e,t){1===t.nodeType?Fl(e,t):8===t.nodeType||Wl(e,t)}(e.stateNode.containerInfo,t);break;case 5:!function(e,t,n,r){!0!==t.suppressHydrationWarning&&(1===r.nodeType?Fl(n,r):8===r.nodeType||Wl(n,r))}(e.type,e.memoizedProps,e.stateNode,t)}var n,r=((n=xg(5,null,null,0)).elementType=\"DELETED\",n.type=\"DELETED\",n);r.stateNode=t,r.return=e,r.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Ad(e,t){switch(t.flags=-1025&t.flags|2,e.tag){case 3:var n=e.stateNode.containerInfo;switch(t.tag){case 5:var r=t.type;t.pendingProps;!function(e,t,n){jl(e,t)}(n,r);break;case 6:!function(e,t){Bl(e,t)}(n,t.pendingProps)}break;case 5:e.type;var a=e.memoizedProps,o=e.stateNode;switch(t.tag){case 5:var i=t.type;t.pendingProps;!function(e,t,n,r,a){!0!==t.suppressHydrationWarning&&jl(n,r)}(0,a,o,i);break;case 6:!function(e,t,n,r){!0!==t.suppressHydrationWarning&&Bl(n,r)}(0,a,o,t.pendingProps);break;case s:!function(e,t,n){t.suppressHydrationWarning}(0,a)}break;default:return}}function Fd(e,t){switch(e.tag){case 5:var n=e.type,r=(e.pendingProps,function(e,t,n){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e}(t,n));return null!==r&&(e.stateNode=r,!0);case 6:var a=function(e,t){return\"\"===t||3!==e.nodeType?null:e}(t,e.pendingProps);return null!==a&&(e.stateNode=a,!0);case s:default:return!1}}function Wd(e){if(Md){var t=zd;if(!t)return Ad(Od,e),Md=!1,void(Od=e);var n=t;if(!Fd(e,t)){if(!(t=vu(n))||!Fd(e,t))return Ad(Od,e),Md=!1,void(Od=e);Ud(Od,n)}Od=e,zd=gu(t)}}function jd(e){var t=e.stateNode,n=e.memoizedProps,r=function(e,t,n){return Tu(n,e),function(e,t){return e.nodeValue!==t}(e,t)}(t,n,e);if(r){var a=Od;if(null!==a)switch(a.tag){case 3:a.stateNode.containerInfo;!function(e,t,n){Al(t,n)}(0,t,n);break;case 5:a.type;var o=a.memoizedProps;a.stateNode;!function(e,t,n,r,a){!0!==t.suppressHydrationWarning&&Al(r,a)}(0,o,0,t,n)}}return r}function Bd(e){var t=e.memoizedState,n=null!==t?t.dehydrated:null;if(!n)throw Error(\"Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.\");return function(e){for(var t=e.nextSibling,n=0;t;){if(8===t.nodeType){var r=t.data;if(\"/$\"===r){if(0===n)return vu(t);n--}else\"$\"!==r&&r!==Zl&&r!==Gl||n++}t=t.nextSibling}return null}(n)}function Vd(e){for(var t=e.return;null!==t&&5!==t.tag&&3!==t.tag&&t.tag!==s;)t=t.return;Od=t}function Hd(e){if(e!==Od)return!1;if(!Md)return Vd(e),Md=!0,!1;var t=e.type;if(5!==e.tag||\"head\"!==t&&\"body\"!==t&&!au(t,e.memoizedProps))for(var n=zd;n;)Ud(e,n),n=vu(n);return Vd(e),zd=e.tag===s?Bd(e):Od?vu(e.stateNode):null,!0}function qd(){Od=null,zd=null,Md=!1}function $d(){return Md}var Qd,Yd=[];function Kd(){for(var e=0;e<Yd.length;e++){Yd[e]._workInProgressVersionPrimary=null}Yd.length=0}function Xd(e,t){e._workInProgressVersionPrimary=t,Yd.push(e)}Qd={};var Gd,Zd,Jd=n.ReactCurrentDispatcher,ef=n.ReactCurrentBatchConfig;Zd={},Gd=new Set;var tf=0,nf=null,rf=null,af=null,of=!1,lf=!1,uf=null,sf=null,cf=-1,df=!1;function ff(){var e=uf;null===sf?sf=[e]:sf.push(e)}function pf(){var e=uf;null!==sf&&(cf++,sf[cf]!==e&&function(e){var t=Ae(nf.type);if(!Gd.has(t)&&(Gd.add(t),null!==sf)){for(var n=\"\",r=30,o=0;o<=cf;o++){for(var i=sf[o],l=o===cf?e:i,u=o+1+\". \"+i;u.length<r;)u+=\" \";n+=u+=l+\"\\n\"}a(\"React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n   Previous render            Next render\\n   ------------------------------------------------------\\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\",t,n)}}(e))}function hf(e){null==e||Array.isArray(e)||a(\"%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.\",uf,typeof e)}function mf(){throw Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\\n1. You might have mismatching versions of React and the renderer (such as React DOM)\\n2. You might be breaking the Rules of Hooks\\n3. You might have more than one copy of React in the same app\\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\")}function vf(e,t){if(df)return!1;if(null===t)return a(\"%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.\",uf),!1;e.length!==t.length&&a(\"The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\\n\\nPrevious: %s\\nIncoming: %s\",uf,\"[\"+t.join(\", \")+\"]\",\"[\"+e.join(\", \")+\"]\");for(var n=0;n<t.length&&n<e.length;n++)if(!Ri(e[n],t[n]))return!1;return!0}function gf(e,t,n,r,a,o){tf=o,nf=t,sf=null!==e?e._debugHookTypes:null,cf=-1,df=null!==e&&e.type!==t.type,t.memoizedState=null,t.updateQueue=null,t.lanes=0,null!==e&&null!==e.memoizedState?Jd.current=pp:Jd.current=null!==sf?fp:dp;var i=n(r,a);if(lf){var l=0;do{if(lf=!1,!(l<25))throw Error(\"Too many re-renders. React limits the number of renders to prevent an infinite loop.\");l+=1,df=!1,rf=null,af=null,t.updateQueue=null,cf=-1,Jd.current=hp,i=n(r,a)}while(lf)}Jd.current=cp,t._debugHookTypes=sf;var u=null!==rf&&null!==rf.next;if(tf=0,nf=null,rf=null,af=null,uf=null,sf=null,cf=-1,of=!1,u)throw Error(\"Rendered fewer hooks than expected. This may be caused by an accidental early return statement.\");return i}function yf(e,t,n){t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes=Xa(e.lanes,n)}function bf(){if(Jd.current=cp,of){for(var e=nf.memoizedState;null!==e;){var t=e.queue;null!==t&&(t.pending=null),e=e.next}of=!1}tf=0,nf=null,rf=null,af=null,sf=null,cf=-1,uf=null,ap=!1,lf=!1}function wf(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===af?nf.memoizedState=af=e:af=af.next=e,af}function kf(){var e,t;if(null===rf){var n=nf.alternate;e=null!==n?n.memoizedState:null}else e=rf.next;if(null!==(t=null===af?nf.memoizedState:af.next))t=(af=t).next,rf=e;else{if(null===e)throw Error(\"Rendered more hooks than during the previous render.\");var r={memoizedState:(rf=e).memoizedState,baseState:rf.baseState,baseQueue:rf.baseQueue,queue:rf.queue,next:null};null===af?nf.memoizedState=af=r:af=af.next=r}return af}function Sf(e,t){return\"function\"==typeof t?t(e):t}function xf(e,t,n){var r,a=wf();r=void 0!==n?n(t):t,a.memoizedState=a.baseState=r;var o=a.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:r},i=o.dispatch=sp.bind(null,nf,o);return[a.memoizedState,i]}function Ef(e,t,n){var r=kf(),o=r.queue;if(null===o)throw Error(\"Should have a queue. This is likely a bug in React. Please file an issue.\");o.lastRenderedReducer=e;var i=rf,l=i.baseQueue,u=o.pending;if(null!==u){if(null!==l){var s=l.next,c=u.next;l.next=c,u.next=s}i.baseQueue!==l&&a(\"Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.\"),i.baseQueue=l=u,o.pending=null}if(null!==l){var d=l.next,f=i.baseState,p=null,h=null,m=null,v=d;do{var g=v.lane;if(Ya(tf,g)){if(null!==m){var y={lane:0,action:v.action,eagerReducer:v.eagerReducer,eagerState:v.eagerState,next:null};m=m.next=y}if(v.eagerReducer===e)f=v.eagerState;else f=e(f,v.action)}else{var b={lane:g,action:v.action,eagerReducer:v.eagerReducer,eagerState:v.eagerState,next:null};null===m?(h=m=b,p=f):m=m.next=b,nf.lanes=Ka(nf.lanes,g),mv(g)}v=v.next}while(null!==v&&v!==d);null===m?p=f:m.next=h,Ri(f,r.memoizedState)||yh(),r.memoizedState=f,r.baseState=p,r.baseQueue=m,o.lastRenderedState=f}var w=o.dispatch;return[r.memoizedState,w]}function Cf(e,t,n){var r=kf(),a=r.queue;if(null===a)throw Error(\"Should have a queue. This is likely a bug in React. Please file an issue.\");a.lastRenderedReducer=e;var o=a.dispatch,i=a.pending,l=r.memoizedState;if(null!==i){a.pending=null;var u=i.next,s=u;do{l=e(l,s.action),s=s.next}while(s!==u);Ri(l,r.memoizedState)||yh(),r.memoizedState=l,null===r.baseQueue&&(r.baseState=l),a.lastRenderedState=l}return[l,o]}function Rf(e,t,n){var r;null==(r=t)._currentPrimaryRenderer?r._currentPrimaryRenderer=Qd:r._currentPrimaryRenderer!==Qd&&a(\"Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.\");var o=(0,t._getVersion)(t._source),i=!1,l=function(e){return e._workInProgressVersionPrimary}(t);if(null!==l?i=l===o:(i=Ya(tf,e.mutableReadLanes))&&Xd(t,o),i){var u=n(t._source);return\"function\"==typeof u&&a(\"Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.\"),u}throw function(e){Yd.push(e)}(t),Error(\"Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.\")}function Tf(e,t,n,r){var o=fm;if(null===o)throw Error(\"Expected a work-in-progress root. This is a bug in React. Please file an issue.\");var i=t._getVersion,l=i(t._source),u=Jd.current,s=u.useState((function(){return Rf(o,t,n)})),c=s[0],d=s[1],f=c,p=af,h=e.memoizedState,m=h.refs,v=m.getSnapshot,g=h.source,y=h.subscribe,b=nf;if(e.memoizedState={refs:m,source:t,subscribe:r},u.useEffect((function(){m.getSnapshot=n,m.setSnapshot=d;var e=i(t._source);if(!Ri(l,e)){var r=n(t._source);if(\"function\"==typeof r&&a(\"Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.\"),!Ri(f,r)){d(r);var u=Xm(b);eo(o,u)}!function(e,t){e.entangledLanes|=t;for(var n=e.entanglements,r=t;r>0;){var a=$a(r),o=1<<a;n[a]|=t,r&=~o}}(o,o.mutableReadLanes)}}),[n,t,r]),u.useEffect((function(){var e=r(t._source,(function(){var e=m.getSnapshot,n=m.setSnapshot;try{n(e(t._source));var r=Xm(b);eo(o,r)}catch(e){n((function(){throw e}))}}));return\"function\"!=typeof e&&a(\"Mutable source subscribe function must return an unsubscribe function.\"),e}),[t,r]),!Ri(v,n)||!Ri(g,t)||!Ri(y,r)){var w={pending:null,dispatch:null,lastRenderedReducer:Sf,lastRenderedState:f};w.dispatch=d=sp.bind(null,nf,w),p.queue=w,p.baseQueue=null,f=Rf(o,t,n),p.memoizedState=p.baseState=f}return f}function Pf(e,t,n){var r=wf();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},Tf(r,e,t,n)}function _f(e,t,n){return Tf(kf(),e,t,n)}function Df(e){var t=wf();\"function\"==typeof e&&(e=e()),t.memoizedState=t.baseState=e;var n=t.queue={pending:null,dispatch:null,lastRenderedReducer:Sf,lastRenderedState:e},r=n.dispatch=sp.bind(null,nf,n);return[t.memoizedState,r]}function If(e){return Ef(Sf)}function Nf(e){return Cf(Sf)}function Lf(e,t,n,r){var a={tag:e,create:t,destroy:n,deps:r,next:null},o=nf.updateQueue;if(null===o)o={lastEffect:null},nf.updateQueue=o,o.lastEffect=a.next=a;else{var i=o.lastEffect;if(null===i)o.lastEffect=a.next=a;else{var l=i.next;i.next=a,a.next=l,o.lastEffect=a}}return a}function Of(e){var t=wf(),n={current:e};return Object.seal(n),t.memoizedState=n,n}function zf(e){return kf().memoizedState}function Mf(e,t,n,r){var a=wf(),o=void 0===r?null:r;nf.flags|=e,a.memoizedState=Lf(1|t,n,void 0,o)}function Uf(e,t,n,r){var a=kf(),o=void 0===r?null:r,i=void 0;if(null!==rf){var l=rf.memoizedState;if(i=l.destroy,null!==o)if(vf(o,l.deps))return void Lf(t,n,i,o)}nf.flags|=e,a.memoizedState=Lf(1|t,n,i,o)}function Af(e,t){return\"undefined\"!=typeof jest&&$v(nf),Mf(516,4,e,t)}function Ff(e,t){return\"undefined\"!=typeof jest&&$v(nf),Uf(516,4,e,t)}function Wf(e,t){return Mf(4,2,e,t)}function jf(e,t){return Uf(4,2,e,t)}function Bf(e,t){if(\"function\"==typeof t){var n=t,r=e();return n(r),function(){n(null)}}if(null!=t){var o=t;o.hasOwnProperty(\"current\")||a(\"Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.\",\"an object with keys {\"+Object.keys(o).join(\", \")+\"}\");var i=e();return o.current=i,function(){o.current=null}}}function Vf(e,t,n){\"function\"!=typeof t&&a(\"Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.\",null!==t?typeof t:\"null\");var r=null!=n?n.concat([e]):null;return Mf(4,2,Bf.bind(null,t,e),r)}function Hf(e,t,n){\"function\"!=typeof t&&a(\"Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.\",null!==t?typeof t:\"null\");var r=null!=n?n.concat([e]):null;return Uf(4,2,Bf.bind(null,t,e),r)}function qf(e,t){}var $f=qf;function Qf(e,t){var n=void 0===t?null:t;return wf().memoizedState=[e,n],e}function Yf(e,t){var n=kf(),r=void 0===t?null:t,a=n.memoizedState;if(null!==a&&(null!==r&&vf(r,a[1])))return a[0];return n.memoizedState=[e,r],e}function Kf(e,t){var n=wf(),r=void 0===t?null:t,a=e();return n.memoizedState=[a,r],a}function Xf(e,t){var n=kf(),r=void 0===t?null:t,a=n.memoizedState;if(null!==a&&(null!==r&&vf(r,a[1])))return a[0];var o=e();return n.memoizedState=[o,r],o}function Gf(e){var t=Df(e),n=t[0],r=t[1];return Af((function(){var t=ef.transition;ef.transition=1;try{r(e)}finally{ef.transition=t}}),[e]),n}function Zf(e){var t=If(),n=t[0],r=t[1];return Ff((function(){var t=ef.transition;ef.transition=1;try{r(e)}finally{ef.transition=t}}),[e]),n}function Jf(e){var t=Nf(),n=t[0],r=t[1];return Ff((function(){var t=ef.transition;ef.transition=1;try{r(e)}finally{ef.transition=t}}),[e]),n}function ep(e,t){var n=Us();Fs(n<Ps?Ps:n,(function(){e(!0)})),Fs(n>_s?_s:n,(function(){var n=ef.transition;ef.transition=1;try{e(!1),t()}finally{ef.transition=n}}))}function tp(){var e=Df(!1),t=e[0],n=e[1],r=ep.bind(null,n);return Of(r),[r,t]}function np(){var e=If()[0];return[zf().current,e]}function rp(){var e=Nf()[0];return[zf().current,e]}var ap=!1;function op(e){var t=Ae(e.type)||\"Unknown\";je&&!Zd[t]&&(a(\"The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.\"),Zd[t]=!0)}function ip(){var e=ku.bind(null,op.bind(null,nf));if($d()){var t=!1,n=nf,r={$$typeof:ue,toString:o=function(){throw t||(t=!0,ap=!0,a(e()),ap=!1,op(n)),Error(\"The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.\")},valueOf:o},a=Df(r)[1];return 0==(2&nf.mode)&&(nf.flags|=516,Lf(5,(function(){a(e())}),void 0,null)),r}var o,i=e();return Df(i),i}function lp(){return If()[0]}function up(){return Nf()[0]}function sp(e,t,n){\"function\"==typeof arguments[3]&&a(\"State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().\");var r=Km(),o=Xm(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},l=t.pending;null===l?i.next=i:(i.next=l.next,l.next=i),t.pending=i;var u=e.alternate;if(e===nf||null!==u&&u===nf)lf=of=!0;else{if(0===e.lanes&&(null===u||0===u.lanes)){var s=t.lastRenderedReducer;if(null!==s){var c;c=Jd.current,Jd.current=vp;try{var d=t.lastRenderedState,f=s(d,n);if(i.eagerReducer=s,i.eagerState=f,Ri(f,d))return}catch(e){}finally{Jd.current=c}}}\"undefined\"!=typeof jest&&(qv(e),Qv(e)),Zm(e,o,r)}}var cp={readContext:yc,useCallback:mf,useContext:mf,useEffect:mf,useImperativeHandle:mf,useLayoutEffect:mf,useMemo:mf,useReducer:mf,useRef:mf,useState:mf,useDebugValue:mf,useDeferredValue:mf,useTransition:mf,useMutableSource:mf,useOpaqueIdentifier:mf,unstable_isNewReconciler:y},dp=null,fp=null,pp=null,hp=null,mp=null,vp=null,gp=null,yp=function(){a(\"Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().\")},bp=function(){a(\"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks\")};dp={readContext:function(e,t){return yc(e,t)},useCallback:function(e,t){return uf=\"useCallback\",ff(),hf(t),Qf(e,t)},useContext:function(e,t){return uf=\"useContext\",ff(),yc(e,t)},useEffect:function(e,t){return uf=\"useEffect\",ff(),hf(t),Af(e,t)},useImperativeHandle:function(e,t,n){return uf=\"useImperativeHandle\",ff(),hf(n),Vf(e,t,n)},useLayoutEffect:function(e,t){return uf=\"useLayoutEffect\",ff(),hf(t),Wf(e,t)},useMemo:function(e,t){uf=\"useMemo\",ff(),hf(t);var n=Jd.current;Jd.current=mp;try{return Kf(e,t)}finally{Jd.current=n}},useReducer:function(e,t,n){uf=\"useReducer\",ff();var r=Jd.current;Jd.current=mp;try{return xf(e,t,n)}finally{Jd.current=r}},useRef:function(e){return uf=\"useRef\",ff(),Of(e)},useState:function(e){uf=\"useState\",ff();var t=Jd.current;Jd.current=mp;try{return Df(e)}finally{Jd.current=t}},useDebugValue:function(e,t){uf=\"useDebugValue\",ff()},useDeferredValue:function(e){return uf=\"useDeferredValue\",ff(),Gf(e)},useTransition:function(){return uf=\"useTransition\",ff(),tp()},useMutableSource:function(e,t,n){return uf=\"useMutableSource\",ff(),Pf(e,t,n)},useOpaqueIdentifier:function(){return uf=\"useOpaqueIdentifier\",ff(),ip()},unstable_isNewReconciler:y},fp={readContext:function(e,t){return yc(e,t)},useCallback:function(e,t){return uf=\"useCallback\",pf(),Qf(e,t)},useContext:function(e,t){return uf=\"useContext\",pf(),yc(e,t)},useEffect:function(e,t){return uf=\"useEffect\",pf(),Af(e,t)},useImperativeHandle:function(e,t,n){return uf=\"useImperativeHandle\",pf(),Vf(e,t,n)},useLayoutEffect:function(e,t){return uf=\"useLayoutEffect\",pf(),Wf(e,t)},useMemo:function(e,t){uf=\"useMemo\",pf();var n=Jd.current;Jd.current=mp;try{return Kf(e,t)}finally{Jd.current=n}},useReducer:function(e,t,n){uf=\"useReducer\",pf();var r=Jd.current;Jd.current=mp;try{return xf(e,t,n)}finally{Jd.current=r}},useRef:function(e){return uf=\"useRef\",pf(),Of(e)},useState:function(e){uf=\"useState\",pf();var t=Jd.current;Jd.current=mp;try{return Df(e)}finally{Jd.current=t}},useDebugValue:function(e,t){uf=\"useDebugValue\",pf()},useDeferredValue:function(e){return uf=\"useDeferredValue\",pf(),Gf(e)},useTransition:function(){return uf=\"useTransition\",pf(),tp()},useMutableSource:function(e,t,n){return uf=\"useMutableSource\",pf(),Pf(e,t,n)},useOpaqueIdentifier:function(){return uf=\"useOpaqueIdentifier\",pf(),ip()},unstable_isNewReconciler:y},pp={readContext:function(e,t){return yc(e,t)},useCallback:function(e,t){return uf=\"useCallback\",pf(),Yf(e,t)},useContext:function(e,t){return uf=\"useContext\",pf(),yc(e,t)},useEffect:function(e,t){return uf=\"useEffect\",pf(),Ff(e,t)},useImperativeHandle:function(e,t,n){return uf=\"useImperativeHandle\",pf(),Hf(e,t,n)},useLayoutEffect:function(e,t){return uf=\"useLayoutEffect\",pf(),jf(e,t)},useMemo:function(e,t){uf=\"useMemo\",pf();var n=Jd.current;Jd.current=vp;try{return Xf(e,t)}finally{Jd.current=n}},useReducer:function(e,t,n){uf=\"useReducer\",pf();var r=Jd.current;Jd.current=vp;try{return Ef(e)}finally{Jd.current=r}},useRef:function(e){return uf=\"useRef\",pf(),zf()},useState:function(e){uf=\"useState\",pf();var t=Jd.current;Jd.current=vp;try{return If()}finally{Jd.current=t}},useDebugValue:function(e,t){return uf=\"useDebugValue\",pf(),$f()},useDeferredValue:function(e){return uf=\"useDeferredValue\",pf(),Zf(e)},useTransition:function(){return uf=\"useTransition\",pf(),np()},useMutableSource:function(e,t,n){return uf=\"useMutableSource\",pf(),_f(e,t,n)},useOpaqueIdentifier:function(){return uf=\"useOpaqueIdentifier\",pf(),lp()},unstable_isNewReconciler:y},hp={readContext:function(e,t){return yc(e,t)},useCallback:function(e,t){return uf=\"useCallback\",pf(),Yf(e,t)},useContext:function(e,t){return uf=\"useContext\",pf(),yc(e,t)},useEffect:function(e,t){return uf=\"useEffect\",pf(),Ff(e,t)},useImperativeHandle:function(e,t,n){return uf=\"useImperativeHandle\",pf(),Hf(e,t,n)},useLayoutEffect:function(e,t){return uf=\"useLayoutEffect\",pf(),jf(e,t)},useMemo:function(e,t){uf=\"useMemo\",pf();var n=Jd.current;Jd.current=gp;try{return Xf(e,t)}finally{Jd.current=n}},useReducer:function(e,t,n){uf=\"useReducer\",pf();var r=Jd.current;Jd.current=gp;try{return Cf(e)}finally{Jd.current=r}},useRef:function(e){return uf=\"useRef\",pf(),zf()},useState:function(e){uf=\"useState\",pf();var t=Jd.current;Jd.current=gp;try{return Nf()}finally{Jd.current=t}},useDebugValue:function(e,t){return uf=\"useDebugValue\",pf(),$f()},useDeferredValue:function(e){return uf=\"useDeferredValue\",pf(),Jf(e)},useTransition:function(){return uf=\"useTransition\",pf(),rp()},useMutableSource:function(e,t,n){return uf=\"useMutableSource\",pf(),_f(e,t,n)},useOpaqueIdentifier:function(){return uf=\"useOpaqueIdentifier\",pf(),up()},unstable_isNewReconciler:y},mp={readContext:function(e,t){return yp(),yc(e,t)},useCallback:function(e,t){return uf=\"useCallback\",bp(),ff(),Qf(e,t)},useContext:function(e,t){return uf=\"useContext\",bp(),ff(),yc(e,t)},useEffect:function(e,t){return uf=\"useEffect\",bp(),ff(),Af(e,t)},useImperativeHandle:function(e,t,n){return uf=\"useImperativeHandle\",bp(),ff(),Vf(e,t,n)},useLayoutEffect:function(e,t){return uf=\"useLayoutEffect\",bp(),ff(),Wf(e,t)},useMemo:function(e,t){uf=\"useMemo\",bp(),ff();var n=Jd.current;Jd.current=mp;try{return Kf(e,t)}finally{Jd.current=n}},useReducer:function(e,t,n){uf=\"useReducer\",bp(),ff();var r=Jd.current;Jd.current=mp;try{return xf(e,t,n)}finally{Jd.current=r}},useRef:function(e){return uf=\"useRef\",bp(),ff(),Of(e)},useState:function(e){uf=\"useState\",bp(),ff();var t=Jd.current;Jd.current=mp;try{return Df(e)}finally{Jd.current=t}},useDebugValue:function(e,t){uf=\"useDebugValue\",bp(),ff()},useDeferredValue:function(e){return uf=\"useDeferredValue\",bp(),ff(),Gf(e)},useTransition:function(){return uf=\"useTransition\",bp(),ff(),tp()},useMutableSource:function(e,t,n){return uf=\"useMutableSource\",bp(),ff(),Pf(e,t,n)},useOpaqueIdentifier:function(){return uf=\"useOpaqueIdentifier\",bp(),ff(),ip()},unstable_isNewReconciler:y},vp={readContext:function(e,t){return yp(),yc(e,t)},useCallback:function(e,t){return uf=\"useCallback\",bp(),pf(),Yf(e,t)},useContext:function(e,t){return uf=\"useContext\",bp(),pf(),yc(e,t)},useEffect:function(e,t){return uf=\"useEffect\",bp(),pf(),Ff(e,t)},useImperativeHandle:function(e,t,n){return uf=\"useImperativeHandle\",bp(),pf(),Hf(e,t,n)},useLayoutEffect:function(e,t){return uf=\"useLayoutEffect\",bp(),pf(),jf(e,t)},useMemo:function(e,t){uf=\"useMemo\",bp(),pf();var n=Jd.current;Jd.current=vp;try{return Xf(e,t)}finally{Jd.current=n}},useReducer:function(e,t,n){uf=\"useReducer\",bp(),pf();var r=Jd.current;Jd.current=vp;try{return Ef(e)}finally{Jd.current=r}},useRef:function(e){return uf=\"useRef\",bp(),pf(),zf()},useState:function(e){uf=\"useState\",bp(),pf();var t=Jd.current;Jd.current=vp;try{return If()}finally{Jd.current=t}},useDebugValue:function(e,t){return uf=\"useDebugValue\",bp(),pf(),$f()},useDeferredValue:function(e){return uf=\"useDeferredValue\",bp(),pf(),Zf(e)},useTransition:function(){return uf=\"useTransition\",bp(),pf(),np()},useMutableSource:function(e,t,n){return uf=\"useMutableSource\",bp(),pf(),_f(e,t,n)},useOpaqueIdentifier:function(){return uf=\"useOpaqueIdentifier\",bp(),pf(),lp()},unstable_isNewReconciler:y},gp={readContext:function(e,t){return yp(),yc(e,t)},useCallback:function(e,t){return uf=\"useCallback\",bp(),pf(),Yf(e,t)},useContext:function(e,t){return uf=\"useContext\",bp(),pf(),yc(e,t)},useEffect:function(e,t){return uf=\"useEffect\",bp(),pf(),Ff(e,t)},useImperativeHandle:function(e,t,n){return uf=\"useImperativeHandle\",bp(),pf(),Hf(e,t,n)},useLayoutEffect:function(e,t){return uf=\"useLayoutEffect\",bp(),pf(),jf(e,t)},useMemo:function(e,t){uf=\"useMemo\",bp(),pf();var n=Jd.current;Jd.current=vp;try{return Xf(e,t)}finally{Jd.current=n}},useReducer:function(e,t,n){uf=\"useReducer\",bp(),pf();var r=Jd.current;Jd.current=vp;try{return Cf(e)}finally{Jd.current=r}},useRef:function(e){return uf=\"useRef\",bp(),pf(),zf()},useState:function(e){uf=\"useState\",bp(),pf();var t=Jd.current;Jd.current=vp;try{return Nf()}finally{Jd.current=t}},useDebugValue:function(e,t){return uf=\"useDebugValue\",bp(),pf(),$f()},useDeferredValue:function(e){return uf=\"useDeferredValue\",bp(),pf(),Jf(e)},useTransition:function(){return uf=\"useTransition\",bp(),pf(),rp()},useMutableSource:function(e,t,n){return uf=\"useMutableSource\",bp(),pf(),_f(e,t,n)},useOpaqueIdentifier:function(){return uf=\"useOpaqueIdentifier\",bp(),pf(),up()},unstable_isNewReconciler:y};var wp=rr,kp=0,Sp=-1;function xp(){return kp}function Ep(){kp=wp()}function Cp(e){Sp=wp(),e.actualStartTime<0&&(e.actualStartTime=wp())}function Rp(e){Sp=-1}function Tp(e,t){if(Sp>=0){var n=wp()-Sp;e.actualDuration+=n,t&&(e.selfBaseDuration=n),Sp=-1}}function Pp(e){for(var t=e.child;t;)e.actualDuration+=t.actualDuration,t=t.sibling}var _p,Dp,Ip,Np,Lp,Op,zp,Mp,Up=n.ReactCurrentOwner,Ap=!1;function Fp(e,t,n,r){t.child=null===e?pd(t,null,n,r):fd(t,e.child,n,r)}function Wp(e,t,n,r,a){if(t.type!==t.elementType){var o=n.propTypes;o&&Fu(o,r,\"prop\",Ae(n))}var i,l=n.render,u=t.ref;if(gc(t,a),Up.current=t,$e(!0),i=gf(e,t,l,r,u,a),1&t.mode){Ee();try{i=gf(e,t,l,r,u,a)}finally{Ce()}}return $e(!1),null===e||Ap?(t.flags|=1,Fp(e,t,i,a),t.child):(yf(e,t,a),bh(e,t,a))}function jp(e,t,n,r,a,o){if(null===e){var i=n.type;if(function(e){return\"function\"==typeof e&&!Eg(e)&&void 0===e.defaultProps}(i)&&null===n.compare&&void 0===n.defaultProps){var l;return l=lg(i),t.tag=d,t.type=l,Zp(t,i),Bp(e,t,l,r,a,o)}var u=i.propTypes;u&&Fu(u,r,\"prop\",Ae(i));var s=Tg(n.type,null,r,t,t.mode,o);return s.ref=t.ref,s.return=t,t.child=s,s}var c=n.type,f=c.propTypes;f&&Fu(f,r,\"prop\",Ae(c));var p=e.child;if(!Qa(a,o)){var h=p.memoizedProps,m=n.compare;if((m=null!==m?m:Pi)(h,r)&&e.ref===t.ref)return bh(e,t,o)}t.flags|=1;var v=Cg(p,r);return v.ref=t.ref,v.return=t,t.child=v,v}function Bp(e,t,n,r,a,o){if(t.type!==t.elementType){var i=t.elementType;if(i.$$typeof===oe){var l=i,u=l._payload,s=l._init;try{i=s(u)}catch(e){i=null}var c=i&&i.propTypes;c&&Fu(c,r,\"prop\",Ae(i))}}if(null!==e&&(Pi(e.memoizedProps,r)&&e.ref===t.ref&&t.type===e.type)){if(Ap=!1,!Qa(o,a))return t.lanes=e.lanes,bh(e,t,o);0!=(e.flags&Pr)&&(Ap=!0)}return $p(e,t,n,r,o)}function Vp(e,t,n){var r,a=t.pendingProps,o=a.children,i=null!==e?e.memoizedState:null;if(\"hidden\"===a.mode||\"unstable-defer-without-hiding\"===a.mode)if(0==(4&t.mode)){var l={baseLanes:0};t.memoizedState=l,lv(t,n)}else{if(!Qa(n,za)){var u;if(null!==i)u=Ka(i.baseLanes,n);else u=n;Xv(za),t.lanes=t.childLanes=za;var s={baseLanes:u};return t.memoizedState=s,lv(t,u),null}var c={baseLanes:0};t.memoizedState=c,lv(t,null!==i?i.baseLanes:n)}else null!==i?(r=Ka(i.baseLanes,n),t.memoizedState=null):r=n,lv(t,r);return Fp(e,t,o,n),t.child}_p={},Dp={},Ip={},Np={},Lp={},Op=!1,zp={},Mp={};var Hp=Vp;function qp(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=kr)}function $p(e,t,n,r,a){if(t.type!==t.elementType){var o=n.propTypes;o&&Fu(o,r,\"prop\",Ae(n))}var i,l;if(i=Ju(t,Gu(0,n,!0)),gc(t,a),Up.current=t,$e(!0),l=gf(e,t,n,r,i,a),1&t.mode){Ee();try{l=gf(e,t,n,r,i,a)}finally{Ce()}}return $e(!1),null===e||Ap?(t.flags|=1,Fp(e,t,l,a),t.child):(yf(e,t,a),bh(e,t,a))}function Qp(e,t,n,r,o){if(t.type!==t.elementType){var i=n.propTypes;i&&Fu(i,r,\"prop\",Ae(n))}var l,u;ts(n)?(l=!0,is(t)):l=!1,gc(t,o),null===t.stateNode?(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),rd(t,n,r),od(t,n,r,o),u=!0):u=null===e?function(e,t,n,r){var a=e.stateNode,o=e.memoizedProps;a.props=o;var i=a.context,l=t.contextType,u=Qu;u=\"object\"==typeof l&&null!==l?yc(l):Ju(e,Gu(0,t,!0));var s=t.getDerivedStateFromProps,c=\"function\"==typeof s||\"function\"==typeof a.getSnapshotBeforeUpdate;c||\"function\"!=typeof a.UNSAFE_componentWillReceiveProps&&\"function\"!=typeof a.componentWillReceiveProps||o===n&&i===u||ad(e,a,n,u),Ic();var d=e.memoizedState,f=a.state=d;if(_c(e,n,a,r),f=e.memoizedState,o===n&&d===f&&!es()&&!Nc())return\"function\"==typeof a.componentDidMount&&(e.flags|=4),!1;\"function\"==typeof s&&(Yc(e,t,s,n),f=e.memoizedState);var p=Nc()||td(e,t,o,n,d,f,u);return p?(c||\"function\"!=typeof a.UNSAFE_componentWillMount&&\"function\"!=typeof a.componentWillMount||(\"function\"==typeof a.componentWillMount&&a.componentWillMount(),\"function\"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),\"function\"==typeof a.componentDidMount&&(e.flags|=4)):(\"function\"==typeof a.componentDidMount&&(e.flags|=4),e.memoizedProps=n,e.memoizedState=f),a.props=n,a.state=f,a.context=u,p}(t,n,r,o):function(e,t,n,r,a){var o=t.stateNode;Ec(e,t);var i=t.memoizedProps,l=t.type===t.elementType?i:rc(t.type,i);o.props=l;var u=t.pendingProps,s=o.context,c=n.contextType,d=Qu;d=\"object\"==typeof c&&null!==c?yc(c):Ju(t,Gu(0,n,!0));var f=n.getDerivedStateFromProps,p=\"function\"==typeof f||\"function\"==typeof o.getSnapshotBeforeUpdate;p||\"function\"!=typeof o.UNSAFE_componentWillReceiveProps&&\"function\"!=typeof o.componentWillReceiveProps||i===u&&s===d||ad(t,o,r,d),Ic();var h=t.memoizedState,m=o.state=h;if(_c(t,r,o,a),m=t.memoizedState,i===u&&h===m&&!es()&&!Nc())return\"function\"==typeof o.componentDidUpdate&&(i===e.memoizedProps&&h===e.memoizedState||(t.flags|=4)),\"function\"==typeof o.getSnapshotBeforeUpdate&&(i===e.memoizedProps&&h===e.memoizedState||(t.flags|=Sr)),!1;\"function\"==typeof f&&(Yc(t,n,f,r),m=t.memoizedState);var v=Nc()||td(t,n,l,r,h,m,d);return v?(p||\"function\"!=typeof o.UNSAFE_componentWillUpdate&&\"function\"!=typeof o.componentWillUpdate||(\"function\"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,m,d),\"function\"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,m,d)),\"function\"==typeof o.componentDidUpdate&&(t.flags|=4),\"function\"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=Sr)):(\"function\"==typeof o.componentDidUpdate&&(i===e.memoizedProps&&h===e.memoizedState||(t.flags|=4)),\"function\"==typeof o.getSnapshotBeforeUpdate&&(i===e.memoizedProps&&h===e.memoizedState||(t.flags|=Sr)),t.memoizedProps=r,t.memoizedState=m),o.props=r,o.state=m,o.context=d,v}(e,t,n,r,o);var s=Yp(e,t,n,u,l,o),c=t.stateNode;return u&&c.props!==r&&(Op||a(\"It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.\",Ae(t.type)||\"a component\"),Op=!0),s}function Yp(e,t,n,r,a,o){qp(e,t);var i=0!=(t.flags&wr);if(!r&&!i)return a&&ls(t,n,!1),bh(e,t,o);var l,u=t.stateNode;if(Up.current=t,i&&\"function\"!=typeof n.getDerivedStateFromError)l=null,Rp();else{if($e(!0),l=u.render(),1&t.mode){Ee();try{u.render()}finally{Ce()}}$e(!1)}return t.flags|=1,null!==e&&i?function(e,t,n,r){t.child=fd(t,e.child,null,r),t.child=fd(t,null,n,r)}(e,t,l,o):Fp(e,t,l,o),t.memoizedState=u.state,a&&ls(t,n,!0),t.child}function Kp(e){var t=e.stateNode;t.pendingContext?as(e,t.pendingContext,t.pendingContext!==t.context):t.context&&as(e,t.context,!1),kd(e,t.containerInfo)}function Xp(e,t,n){Kp(t);var r=t.updateQueue;if(null===e||null===r)throw Error(\"If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.\");var a=t.pendingProps,o=t.memoizedState,i=null!==o?o.element:null;Ec(e,t),_c(t,a,null,n);var l=t.memoizedState.element;if(l===i)return qd(),bh(e,t,n);var u,s,c=t.stateNode;if(c.hydrate&&(s=(u=t).stateNode.containerInfo,zd=gu(s),Od=u,Md=!0,1)){var d=c.mutableSourceEagerHydrationData;if(null!=d)for(var f=0;f<d.length;f+=2){Xd(d[f],d[f+1])}var p=pd(t,null,l,n);t.child=p;for(var h=p;h;)h.flags=-3&h.flags|Cr,h=h.sibling}else Fp(e,t,l,n),qd();return t.child}function Gp(e,t,n,r,a){null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2);var o=t.pendingProps,i=n,u=i._payload,s=(0,i._init)(u);t.type=s;var d=t.tag=function(e){if(\"function\"==typeof e)return Eg(e)?1:0;if(null!=e){var t=e.$$typeof;if(t===te)return l;if(t===ae)return c}return 2}(s),f=rc(s,o);switch(d){case 0:return Zp(t,s),t.type=s=lg(s),$p(null,t,s,f,a);case 1:return t.type=s=ug(s),Qp(null,t,s,f,a);case l:return t.type=s=sg(s),Wp(null,t,s,f,a);case c:if(t.type!==t.elementType){var p=s.propTypes;p&&Fu(p,f,\"prop\",Ae(s))}return jp(null,t,s,rc(s.type,f),r,a)}var h=\"\";throw null!==s&&\"object\"==typeof s&&s.$$typeof===oe&&(h=\" Did you wrap a component in React.lazy() more than once?\"),Error(\"Element type is invalid. Received a promise that resolves to: \"+s+\". Lazy element type must resolve to a class or function.\"+h)}function Zp(e,t){if(t&&t.childContextTypes&&a(\"%s(...): childContextTypes cannot be defined on a function component.\",t.displayName||t.name||\"Component\"),null!==e.ref){var n=\"\",r=Be();r&&(n+=\"\\n\\nCheck the render method of `\"+r+\"`.\");var o=r||e._debugID||\"\",i=e._debugSource;i&&(o=i.fileName+\":\"+i.lineNumber),Lp[o]||(Lp[o]=!0,a(\"Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s\",n))}if(\"function\"==typeof t.getDerivedStateFromProps){var l=Ae(t)||\"Unknown\";Np[l]||(a(\"%s: Function components do not support getDerivedStateFromProps.\",l),Np[l]=!0)}if(\"object\"==typeof t.contextType&&null!==t.contextType){var u=Ae(t)||\"Unknown\";Ip[u]||(a(\"%s: Function components do not support contextType.\",u),Ip[u]=!0)}}var Jp={dehydrated:null,retryLane:0};function eh(e){return{baseLanes:e}}function th(e,t){return{baseLanes:Ka(e.baseLanes,t)}}function nh(e,t){return Xa(e.childLanes,t)}function rh(e,t,n){var r=t.pendingProps;Vg(t)&&(t.flags|=wr);var a=Rd.current,o=!1;if(0!=(t.flags&wr)||function(e,t,n,r){return(null===t||null!==t.memoizedState)&&Td(e,2)}(a,e)?(o=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0!==r.fallback&&!0!==r.unstable_avoidThisFallback&&(a=a|1),Dd(t,a=Pd(a)),null===e){void 0!==r.fallback&&Wd(t);var i=r.children,l=r.fallback;if(o){var u=ah(t,i,l,n);return t.child.memoizedState=eh(n),t.memoizedState=Jp,u}if(\"number\"==typeof r.unstable_expectedLoadTime){var s=ah(t,i,l,n);return t.child.memoizedState=eh(n),t.memoizedState=Jp,t.lanes=Da,Xv(Da),s}return function(e,t,n){var r=e.mode,a=Dg({mode:\"visible\",children:t},r,n,null);return a.return=e,e.child=a,a}(t,i,n)}if(null!==e.memoizedState){if(o){var c=r.fallback,d=lh(e,t,r.children,c,n),f=t.child,p=e.child.memoizedState;return f.memoizedState=null===p?eh(n):th(p,n),f.childLanes=nh(e,n),t.memoizedState=Jp,d}var h=ih(e,t,r.children,n);return t.memoizedState=null,h}if(o){var m=r.fallback,v=lh(e,t,r.children,m,n),g=t.child,y=e.child.memoizedState;return g.memoizedState=null===y?eh(n):th(y,n),g.childLanes=nh(e,n),t.memoizedState=Jp,v}var b=ih(e,t,r.children,n);return t.memoizedState=null,b}function ah(e,t,n,r){var a,o,i=e.mode,l=e.child,u={mode:\"hidden\",children:t};return 0==(2&i)&&null!==l?((a=l).childLanes=0,a.pendingProps=u,8&e.mode&&(a.actualDuration=0,a.actualStartTime=-1,a.selfBaseDuration=0,a.treeBaseDuration=0),o=_g(n,i,r,null)):(a=Dg(u,i,0,null),o=_g(n,i,r,null)),a.return=e,o.return=e,a.sibling=o,e.child=a,o}function oh(e,t){return Cg(e,t)}function ih(e,t,n,r){var a=e.child,o=a.sibling,i=oh(a,{mode:\"visible\",children:n});return 0==(2&t.mode)&&(i.lanes=r),i.return=t,i.sibling=null,null!==o&&(o.nextEffect=null,o.flags=8,t.firstEffect=t.lastEffect=o),t.child=i,i}function lh(e,t,n,r,a){var o,i,l=t.mode,u=e.child,s=u.sibling,c={mode:\"hidden\",children:n};if(0==(2&l)&&t.child!==u){(o=t.child).childLanes=0,o.pendingProps=c,8&t.mode&&(o.actualDuration=0,o.actualStartTime=-1,o.selfBaseDuration=u.selfBaseDuration,o.treeBaseDuration=u.treeBaseDuration);var d=o.lastEffect;null!==d?(t.firstEffect=o.firstEffect,t.lastEffect=d,d.nextEffect=null):t.firstEffect=t.lastEffect=null}else o=oh(u,c);return null!==s?i=Cg(s,r):(i=_g(r,l,a,null)).flags|=2,i.return=t,o.return=t,o.sibling=i,t.child=o,i}function uh(e,t){e.lanes=Ka(e.lanes,t);var n=e.alternate;null!==n&&(n.lanes=Ka(n.lanes,t)),vc(e.return,t)}function sh(e,t){var n=Array.isArray(e),r=!n&&\"function\"==typeof he(e);if(n||r){var o=n?\"array\":\"iterable\";return a(\"A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>\",o,t,o),!1}return!0}function ch(e,t,n,r,a,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=a,i.lastEffect=o)}function dh(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail,l=r.children;!function(e){if(void 0!==e&&\"forwards\"!==e&&\"backwards\"!==e&&\"together\"!==e&&!zp[e])if(zp[e]=!0,\"string\"==typeof e)switch(e.toLowerCase()){case\"together\":case\"forwards\":case\"backwards\":a('\"%s\" is not a valid value for revealOrder on <SuspenseList />. Use lowercase \"%s\" instead.',e,e.toLowerCase());break;case\"forward\":case\"backward\":a('\"%s\" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use \"%ss\" instead.',e,e.toLowerCase());break;default:a('\"%s\" is not a supported revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?',e)}else a('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean \"together\", \"forwards\" or \"backwards\"?',e)}(o),function(e,t){void 0===e||Mp[e]||(\"collapsed\"!==e&&\"hidden\"!==e?(Mp[e]=!0,a('\"%s\" is not a supported value for tail on <SuspenseList />. Did you mean \"collapsed\" or \"hidden\"?',e)):\"forwards\"!==t&&\"backwards\"!==t&&(Mp[e]=!0,a('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is \"forwards\" or \"backwards\". Did you mean to specify revealOrder=\"forwards\"?',e)))}(i,o),function(e,t){if((\"forwards\"===t||\"backwards\"===t)&&null!=e&&!1!==e)if(Array.isArray(e)){for(var n=0;n<e.length;n++)if(!sh(e[n],n))return}else{var r=he(e);if(\"function\"==typeof r){var o=r.call(e);if(o)for(var i=o.next(),l=0;!i.done;i=o.next()){if(!sh(i.value,l))return;l++}}else a('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',t)}}(l,o),Fp(e,t,l,n);var u=Rd.current;Td(u,2)?(u=_d(u,2),t.flags|=wr):(null!==e&&0!=(e.flags&wr)&&function(e,t,n){for(var r=t;null!==r;){if(r.tag===s)null!==r.memoizedState&&uh(r,n);else if(r.tag===p)uh(r,n);else if(null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)return;for(;null===r.sibling;){if(null===r.return||r.return===e)return;r=r.return}r.sibling.return=r.return,r=r.sibling}}(t,t.child,n),u=Pd(u));if(Dd(t,u),0==(2&t.mode))t.memoizedState=null;else switch(o){case\"forwards\":var c,d=function(e){for(var t=e,n=null;null!==t;){var r=t.alternate;null!==r&&null===Ld(r)&&(n=t),t=t.sibling}return n}(t.child);null===d?(c=t.child,t.child=null):(c=d.sibling,d.sibling=null),ch(t,!1,c,d,i,t.lastEffect);break;case\"backwards\":var f=null,h=t.child;for(t.child=null;null!==h;){var m=h.alternate;if(null!==m&&null===Ld(m)){t.child=h;break}var v=h.sibling;h.sibling=f,f=h,h=v}ch(t,!0,f,null,i,t.lastEffect);break;case\"together\":ch(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}var fh=!1;function ph(e,t,n){var r=t.type._context,o=t.pendingProps,l=t.memoizedProps,u=o.value;\"value\"in o||fh||(fh=!0,a(\"The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?\"));var s=t.type.propTypes;if(s&&Fu(s,o,\"prop\",\"Context.Provider\"),hc(t,u),null!==l){var c=function(e,t,n){if(Ri(n,t))return 0;var r=\"function\"==typeof e._calculateChangedBits?e._calculateChangedBits(n,t):oc;return(r&oc)!==r&&a(\"calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s\",r),0|r}(r,u,l.value);if(0===c){if(l.children===o.children&&!es())return bh(e,t,n)}else!function(e,t,n,r){var a=e.child;for(null!==a&&(a.return=e);null!==a;){var o=void 0,l=a.dependencies;if(null!==l){o=a.child;for(var u=l.firstContext;null!==u;){if(u.context===t&&0!=(u.observedBits&n)){if(1===a.tag){var s=Cc(Ma,qa(r));s.tag=kc,Rc(a,s)}a.lanes=Ka(a.lanes,r);var c=a.alternate;null!==c&&(c.lanes=Ka(c.lanes,r)),vc(a.return,r),l.lanes=Ka(l.lanes,r);break}u=u.next}}else o=a.tag===i&&a.type===e.type?null:a.child;if(null!==o)o.return=a;else for(o=a;null!==o;){if(o===e){o=null;break}var d=o.sibling;if(null!==d){d.return=o.return,o=d;break}o=o.return}a=o}}(t,r,c,n)}return Fp(e,t,o.children,n),t.child}var hh,mh,vh,gh=!1;function yh(){Ap=!0}function bh(e,t,n){return null!==e&&(t.dependencies=e.dependencies),Rp(),mv(t.lanes),Qa(n,t.childLanes)?(function(e,t){if(null!==e&&t.child!==e.child)throw Error(\"Resuming work not yet implemented.\");if(null!==t.child){var n=t.child,r=Cg(n,n.pendingProps);for(t.child=r,r.return=t;null!==n.sibling;)n=n.sibling,(r=r.sibling=Cg(n,n.pendingProps)).return=t;r.sibling=null}}(e,t),t.child):null}function wh(e,t,n){var r=t.lanes;if(t._debugNeedsRemount&&null!==e)return function(e,t,n){var r=t.return;if(null===r)throw new Error(\"Cannot swap the root fiber.\");if(e.alternate=null,t.alternate=null,n.index=t.index,n.sibling=t.sibling,n.return=t.return,n.ref=t.ref,t===r.child)r.child=n;else{var a=r.child;if(null===a)throw new Error(\"Expected parent to have a child.\");for(;a.sibling!==t;)if(null===(a=a.sibling))throw new Error(\"Expected to find the previous sibling.\");a.sibling=n}var o=r.lastEffect;return null!==o?(o.nextEffect=e,r.lastEffect=e):r.firstEffect=r.lastEffect=e,e.nextEffect=null,e.flags=8,n.flags|=2,n}(e,t,Tg(t.type,t.key,t.pendingProps,t._debugOwner||null,t.mode,t.lanes));if(null!==e)if(e.memoizedProps!==t.pendingProps||es()||t.type!==e.type)Ap=!0;else{if(!Qa(n,r)){switch(Ap=!1,t.tag){case 3:Kp(t),qd();break;case 5:Ed(t);break;case 1:ts(t.type)&&is(t);break;case 4:kd(t,t.stateNode.containerInfo);break;case i:hc(t,t.memoizedProps.value);break;case u:Qa(n,t.childLanes)&&(t.flags|=4);var o=t.stateNode;o.effectDuration=0,o.passiveEffectDuration=0;break;case s:if(null!==t.memoizedState){if(Qa(n,t.child.childLanes))return rh(e,t,n);Dd(t,Pd(Rd.current));var y=bh(e,t,n);return null!==y?y.sibling:null}Dd(t,Pd(Rd.current));break;case p:var b=0!=(e.flags&wr),w=Qa(n,t.childLanes);if(b){if(w)return dh(e,t,n);t.flags|=wr}var k=t.memoizedState;if(null!==k&&(k.rendering=null,k.tail=null,k.lastEffect=null),Dd(t,Rd.current),w)break;return null;case v:case g:return t.lanes=0,Vp(e,t,n)}return bh(e,t,n)}Ap=0!=(e.flags&Pr)}else Ap=!1;switch(t.lanes=0,t.tag){case 2:return function(e,t,n,r){null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2);var o,i,l=t.pendingProps;if(o=Ju(t,Gu(0,n,!1)),gc(t,r),n.prototype&&\"function\"==typeof n.prototype.render){var u=Ae(n)||\"Unknown\";_p[u]||(a(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.\",u,u),_p[u]=!0)}if(1&t.mode&&$s.recordLegacyContextWarning(t,null),$e(!0),Up.current=t,i=gf(null,t,n,l,o,r),$e(!1),t.flags|=1,\"object\"==typeof i&&null!==i&&\"function\"==typeof i.render&&void 0===i.$$typeof){var s=Ae(n)||\"Unknown\";Dp[s]||(a(\"The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.\",s,s,s),Dp[s]=!0)}if(\"object\"==typeof i&&null!==i&&\"function\"==typeof i.render&&void 0===i.$$typeof){var c=Ae(n)||\"Unknown\";Dp[c]||(a(\"The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.\",c,c,c),Dp[c]=!0),t.tag=1,t.memoizedState=null,t.updateQueue=null;var d=!1;ts(n)?(d=!0,is(t)):d=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,xc(t);var f=n.getDerivedStateFromProps;return\"function\"==typeof f&&Yc(t,n,f,l),nd(t,i),od(t,n,l,r),Yp(null,t,n,!0,d,r)}if(t.tag=0,1&t.mode){Ee();try{i=gf(null,t,n,l,o,r)}finally{Ce()}}return Fp(null,t,i,r),Zp(t,n),t.child}(e,t,t.type,n);case 16:return Gp(e,t,t.elementType,r,n);case 0:var S=t.type,x=t.pendingProps;return $p(e,t,S,t.elementType===S?x:rc(S,x),n);case 1:var E=t.type,C=t.pendingProps;return Qp(e,t,E,t.elementType===E?C:rc(E,C),n);case 3:return Xp(e,t,n);case 5:return function(e,t,n){Ed(t),null===e&&Wd(t);var r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,i=a.children;return au(r,a)?i=null:null!==o&&au(r,o)&&(t.flags|=16),qp(e,t),Fp(e,t,i,n),t.child}(e,t,n);case 6:return function(e,t){return null===e&&Wd(t),null}(e,t);case s:return rh(e,t,n);case 4:return function(e,t,n){kd(t,t.stateNode.containerInfo);var r=t.pendingProps;return null===e?t.child=fd(t,null,r,n):Fp(e,t,r,n),t.child}(e,t,n);case l:var R=t.type,T=t.pendingProps;return Wp(e,t,R,t.elementType===R?T:rc(R,T),n);case 7:return function(e,t,n){return Fp(e,t,t.pendingProps,n),t.child}(e,t,n);case 8:return function(e,t,n){return Fp(e,t,t.pendingProps.children,n),t.child}(e,t,n);case u:return function(e,t,n){t.flags|=4;var r=t.stateNode;return r.effectDuration=0,r.passiveEffectDuration=0,Fp(e,t,t.pendingProps.children,n),t.child}(e,t,n);case i:return ph(e,t,n);case 9:return function(e,t,n){var r=t.type;void 0===r._context?r!==r.Consumer&&(gh||(gh=!0,a(\"Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?\"))):r=r._context;var o=t.pendingProps,i=o.children;\"function\"!=typeof i&&a(\"A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.\"),gc(t,n);var l,u=yc(r,o.unstable_observedBits);return Up.current=t,$e(!0),l=i(u),$e(!1),t.flags|=1,Fp(e,t,l,n),t.child}(e,t,n);case c:var P=t.type,_=rc(P,t.pendingProps);if(t.type!==t.elementType){var D=P.propTypes;D&&Fu(D,_,\"prop\",Ae(P))}return jp(e,t,P,_=rc(P.type,_),r,n);case d:return Bp(e,t,t.type,t.pendingProps,r,n);case f:var I=t.type,N=t.pendingProps;return function(e,t,n,r,a){var o;return null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ts(n)?(o=!0,is(t)):o=!1,gc(t,a),rd(t,n,r),od(t,n,r,a),Yp(null,t,n,!0,o,a)}(e,t,I,t.elementType===I?N:rc(I,N),n);case p:return dh(e,t,n);case h:case 21:case m:break;case v:return Vp(e,t,n);case g:return Hp(e,t,n)}throw Error(\"Unknown unit of work tag (\"+t.tag+\"). This error is likely caused by a bug in React. Please file an issue.\")}function kh(e){e.flags|=4}function Sh(e){e.flags|=kr}function xh(e,t){if(!$d())switch(e.tailMode){case\"hidden\":for(var n=e.tail,r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?e.tail=null:r.sibling=null;break;case\"collapsed\":for(var a=e.tail,o=null;null!==a;)null!==a.alternate&&(o=a),a=a.sibling;null===o?t||null===e.tail?e.tail=null:e.tail.sibling=null:o.sibling=null}}function Eh(e,t,n){var r,a,o,y=t.pendingProps;switch(t.tag){case 2:case 16:case d:case 0:case l:case 7:case 8:case u:case 9:case c:return null;case 1:return ts(t.type)&&ns(t),null;case 3:Sd(t),rs(t),Kd();var b=t.stateNode;if(b.pendingContext&&(b.context=b.pendingContext,b.pendingContext=null),null===e||null===e.child)Hd(t)?kh(t):b.hydrate||(t.flags|=Sr);return null;case 5:Cd(t);var w=wd(),k=t.type;if(null!==e&&null!=t.stateNode)mh(e,t,k,y),e.ref!==t.ref&&Sh(t);else{if(!y){if(null===t.stateNode)throw Error(\"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.\");return null}var S=xd();if(Hd(t))a=S,o=yu((r=t).stateNode,r.type,r.memoizedProps,0,a,r),r.updateQueue=o,null!==o&&kh(t);else{var x=ru(k,y,w,S,t);hh(x,t),t.stateNode=x,function(e,t,n,r,a){return zl(e,t,n),tu(t,n)}(x,k,y)&&kh(t)}null!==t.ref&&Sh(t)}return null;case 6:var E=y;if(e&&null!=t.stateNode){var C=e.memoizedProps;vh(0,t,C,E)}else{if(\"string\"!=typeof E&&null===t.stateNode)throw Error(\"We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.\");var R=wd(),T=xd();Hd(t)?jd(t)&&kh(t):t.stateNode=ou(E,R,T,t)}return null;case s:Id(t);var P=t.memoizedState;if(0!=(t.flags&wr))return t.lanes=n,0!=(8&t.mode)&&Pp(t),t;var _=null!==P,D=!1;if(null===e)void 0!==t.memoizedProps.fallback&&Hd(t);else D=null!==e.memoizedState;if(_&&!D)if(0!=(2&t.mode))null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||Td(Rd.current,1)?0===gm&&(gm=3):function(){0!==gm&&3!==gm||(gm=4);null!==fm&&(Ba(wm)||Ba(km))&&nv(fm,hm)}();return(_||D)&&(t.flags|=4),null;case 4:return Sd(t),null===e&&nl(t.stateNode.containerInfo),null;case i:return mc(t),null;case f:return ts(t.type)&&ns(t),null;case p:Id(t);var I=t.memoizedState;if(null===I)return null;var N=0!=(t.flags&wr),L=I.rendering;if(null===L)if(N)xh(I,!1);else{if(!(0===gm&&(null===e||0==(e.flags&wr))))for(var O=t.child;null!==O;){var z=Ld(O);if(null!==z){N=!0,t.flags|=wr,xh(I,!1);var M=z.updateQueue;return null!==M&&(t.updateQueue=M,t.flags|=4),null===I.lastEffect&&(t.firstEffect=null),t.lastEffect=I.lastEffect,hd(t,n),Dd(t,_d(Rd.current,2)),t.child}O=O.sibling}null!==I.tail&&Ms()>Tm()&&(t.flags|=wr,N=!0,xh(I,!1),t.lanes=Da,Xv(Da))}else{if(!N){var U=Ld(L);if(null!==U){t.flags|=wr,N=!0;var A=U.updateQueue;if(null!==A&&(t.updateQueue=A,t.flags|=4),xh(I,!0),null===I.tail&&\"hidden\"===I.tailMode&&!L.alternate&&!$d()){var F=t.lastEffect=I.lastEffect;return null!==F&&(F.nextEffect=null),null}}else 2*Ms()-I.renderingStartTime>Tm()&&n!==za&&(t.flags|=wr,N=!0,xh(I,!1),t.lanes=Da,Xv(Da))}if(I.isBackwards)L.sibling=t.child,t.child=L;else{var W=I.last;null!==W?W.sibling=L:t.child=L,I.last=L}}if(null!==I.tail){var j=I.tail;I.rendering=j,I.tail=j.sibling,I.lastEffect=t.lastEffect,I.renderingStartTime=Ms(),j.sibling=null;var B=Rd.current;return Dd(t,B=N?_d(B,2):Pd(B)),j}return null;case h:case 21:case m:break;case v:case g:if(uv(t),null!==e){var V=t.memoizedState;null!==e.memoizedState!==(null!==V)&&\"unstable-defer-without-hiding\"!==y.mode&&(t.flags|=4)}return null}throw Error(\"Unknown unit of work tag (\"+t.tag+\"). This error is likely caused by a bug in React. Please file an issue.\")}function Ch(e,t){switch(e.tag){case 1:ts(e.type)&&ns(e);var n=e.flags;return n&Tr?(e.flags=-4097&n|wr,0!=(8&e.mode)&&Pp(e),e):null;case 3:Sd(e),rs(e),Kd();var r=e.flags;if(0!=(r&wr))throw Error(\"The root failed to unmount after an error. This is likely a bug in React. Please file an issue.\");return e.flags=-4097&r|wr,e;case 5:return Cd(e),null;case s:Id(e);var a=e.flags;return a&Tr?(e.flags=-4097&a|wr,0!=(8&e.mode)&&Pp(e),e):null;case p:return Id(e),null;case 4:return Sd(e),null;case i:return mc(e),null;case v:case g:return uv(e),null;default:return null}}function Rh(e){switch(e.tag){case 1:var t=e.type.childContextTypes;null!=t&&ns(e);break;case 3:Sd(e),rs(e),Kd();break;case 5:Cd(e);break;case 4:Sd(e);break;case s:case p:Id(e);break;case i:mc(e);break;case v:case g:uv(e)}}function Th(e,t){return{value:e,source:t,stack:Me(t)}}function Ph(e,t){try{0;var n=t.value,r=t.source,a=t.stack,o=null!==a?a:\"\";if(null!=n&&n._suppressLogging){if(1===e.tag)return;console.error(n)}var i=r?Ae(r.type):null,l=i?\"The above error occurred in the <\"+i+\"> component:\":\"The above error occurred in one of your React components:\",u=Ae(e.type),s=l+\"\\n\"+o+\"\\n\\n\"+(u?\"React will try to recreate this component tree from scratch using the error boundary you provided, \"+u+\".\":\"Consider adding an error boundary to your tree to customize error handling behavior.\\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.\");console.error(s)}catch(e){setTimeout((function(){throw e}))}}hh=function(e,t,n,r){for(var a,o,i=t.child;null!==i;){if(5===i.tag||6===i.tag)a=e,o=i.stateNode,a.appendChild(o);else if(4===i.tag);else if(null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)return;for(;null===i.sibling;){if(null===i.return||i.return===t)return;i=i.return}i.sibling.return=i.return,i=i.sibling}},mh=function(e,t,n,r,a){var o=e.memoizedProps;if(o!==r){var i=function(e,t,n,r,a,o){var i=o;if(typeof r.children!=typeof n.children&&(\"string\"==typeof r.children||\"number\"==typeof r.children)){var l=\"\"+r.children,u=Hl(i.ancestorInfo,t);Vl(null,l,u)}return Ml(e,t,n,r)}(t.stateNode,n,o,r,0,xd());t.updateQueue=i,i&&kh(t)}},vh=function(e,t,n,r){n!==r&&kh(t)};var _h=\"function\"==typeof WeakMap?WeakMap:Map;function Dh(e,t,n){var r=Cc(Ma,n);r.tag=3,r.payload={element:null};var a=t.value;return r.callback=function(){Lv(a),Ph(e,t)},r}function Ih(e,t,n){var r=Cc(Ma,n);r.tag=3;var o=e.type.getDerivedStateFromError;if(\"function\"==typeof o){var i=t.value;r.payload=function(){return Ph(e,t),o(i)}}var l=e.stateNode;return null!==l&&\"function\"==typeof l.componentDidCatch?r.callback=function(){var n;dg(e),\"function\"!=typeof o&&(n=this,null===Im?Im=new Set([n]):Im.add(n),Ph(e,t));var r=t.value,i=t.stack;this.componentDidCatch(r,{componentStack:null!==i?i:\"\"}),\"function\"!=typeof o&&(Qa(e.lanes,1)||a(\"%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.\",Ae(e.type)||\"Unknown\"))}:r.callback=function(){dg(e)},r}function Nh(e,t,n){var r,a=e.pingCache;if(null===a?(a=e.pingCache=new _h,r=new Set,a.set(t,r)):void 0===(r=a.get(t))&&(r=new Set,a.set(t,r)),!r.has(n)){r.add(n);var o=Mv.bind(null,e,t,n);t.then(o,o)}}function Lh(e,t,n,r,a){if(n.flags|=Rr,n.firstEffect=n.lastEffect=null,null!==r&&\"object\"==typeof r&&\"function\"==typeof r.then){var o=r;if(0==(2&n.mode)){var i=n.alternate;i?(n.updateQueue=i.updateQueue,n.memoizedState=i.memoizedState,n.lanes=i.lanes):(n.updateQueue=null,n.memoizedState=null)}var l=Td(Rd.current,1),u=t;do{if(u.tag===s&&Nd(u,l)){var c=u.updateQueue;if(null===c){var d=new Set;d.add(o),u.updateQueue=d}else c.add(o);if(0==(2&u.mode)){if(u.flags|=wr,n.flags|=Pr,n.flags&=-2981,1===n.tag)if(null===n.alternate)n.tag=f;else{var p=Cc(Ma,1);p.tag=kc,Rc(n,p)}return void(n.lanes=Ka(n.lanes,1))}return Nh(e,o,a),u.flags|=Tr,void(u.lanes=a)}u=u.return}while(null!==u);r=new Error((Ae(n.type)||\"A React component\")+\" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.\")}5!==gm&&(gm=2),r=Th(r,n);var h=t;do{switch(h.tag){case 3:var m=r;h.flags|=Tr;var v=qa(a);return h.lanes=Ka(h.lanes,v),void Tc(h,Dh(h,m,v));case 1:var g=r,y=h.type,b=h.stateNode;if(0==(h.flags&wr)&&(\"function\"==typeof y.getDerivedStateFromError||null!==b&&\"function\"==typeof b.componentDidCatch&&!Nv(b))){h.flags|=Tr;var w=qa(a);return h.lanes=Ka(h.lanes,w),void Tc(h,Ih(h,g,w))}}h=h.return}while(null!==h)}var Oh;Oh=new Set;var zh=\"function\"==typeof WeakSet?WeakSet:Set,Mh=function(e,t){t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()};function Uh(e){var t=e.ref;null!==t&&(\"function\"==typeof t?(Zn(null,t,null,null),Jn()&&zv(e,er())):t.current=null)}function Ah(e,t){(Zn(null,t,null),Jn())&&zv(e,er())}function Fh(e,t){switch(t.tag){case 0:case l:case d:case m:return;case 1:if(t.flags&Sr&&null!==e){var n=e.memoizedProps,r=e.memoizedState,o=t.stateNode;t.type!==t.elementType||Op||(o.props!==t.memoizedProps&&a(\"Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.\",Ae(t.type)||\"instance\"),o.state!==t.memoizedState&&a(\"Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.\",Ae(t.type)||\"instance\"));var i=o.getSnapshotBeforeUpdate(t.elementType===t.type?n:rc(t.type,n),r),u=Oh;void 0!==i||u.has(t.type)||(u.add(t.type),a(\"%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.\",Ae(t.type))),o.__reactInternalSnapshotBeforeUpdate=i}return;case 3:if(t.flags&Sr)pu(t.stateNode.containerInfo);return;case 5:case 6:case 4:case f:return}throw Error(\"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.\")}function Wh(e,t,n,r){switch(n.tag){case 0:case l:case d:case m:return function(e,t){var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var o=r.next,i=o;do{if((i.tag&e)===e){var l=i.create;i.destroy=l();var u=i.destroy;void 0!==u&&\"function\"!=typeof u&&a(\"An effect function must not return anything besides a function, which is used for clean-up.%s\",null===u?\" You returned null. If your effect does not require clean up, return undefined (or nothing).\":\"function\"==typeof u.then?\"\\n\\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\\n\\nuseEffect(() => {\\n  async function fetchData() {\\n    // You can await here\\n    const response = await MyAPI.getData(someId);\\n    // ...\\n  }\\n  fetchData();\\n}, [someId]); // Or [] if effect doesn't need props or state\\n\\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching\":\" You returned: \"+u)}i=i.next}while(i!==o)}}(3,n),void function(e){var t=e.updateQueue,n=null!==t?t.lastEffect:null;if(null!==n){var r=n.next,a=r;do{var o=a,i=o.next,l=o.tag;0!=(4&l)&&0!=(1&l)&&(_v(e,a),Pv(e,a)),a=i}while(a!==r)}}(n);case 1:var o=n.stateNode;if(4&n.flags)if(null===t)n.type!==n.elementType||Op||(o.props!==n.memoizedProps&&a(\"Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.\",Ae(n.type)||\"instance\"),o.state!==n.memoizedState&&a(\"Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.\",Ae(n.type)||\"instance\")),o.componentDidMount();else{var i=n.elementType===n.type?t.memoizedProps:rc(n.type,t.memoizedProps),c=t.memoizedState;n.type!==n.elementType||Op||(o.props!==n.memoizedProps&&a(\"Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.\",Ae(n.type)||\"instance\"),o.state!==n.memoizedState&&a(\"Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.\",Ae(n.type)||\"instance\")),o.componentDidUpdate(i,c,o.__reactInternalSnapshotBeforeUpdate)}var y=n.updateQueue;return void(null!==y&&(n.type!==n.elementType||Op||(o.props!==n.memoizedProps&&a(\"Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.\",Ae(n.type)||\"instance\"),o.state!==n.memoizedState&&a(\"Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.\",Ae(n.type)||\"instance\")),Lc(0,y,o)));case 3:var b=n.updateQueue;if(null!==b){var w=null;if(null!==n.child)switch(n.child.tag){case 5:case 1:w=n.child.stateNode}Lc(0,b,w)}return;case 5:var k=n.stateNode;if(null===t&&4&n.flags)!function(e,t,n,r){tu(t,n)&&e.focus()}(k,n.type,n.memoizedProps);return;case 6:case 4:return;case u:var S=n.memoizedProps,x=(S.onCommit,S.onRender),E=(n.stateNode.effectDuration,xp());return void(\"function\"==typeof x&&x(n.memoizedProps.id,null===t?\"mount\":\"update\",n.actualDuration,n.treeBaseDuration,n.actualStartTime,E,e.memoizedInteractions));case s:return void function(e,t){if(null===t.memoizedState){var n=t.alternate;if(null!==n){var r=n.memoizedState;if(null!==r){var a=r.dehydrated;null!==a&&function(e){na(e)}(a)}}}}(0,n);case p:case f:case h:case 21:case v:case g:return}throw Error(\"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.\")}function jh(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;t?cu(r):du(n.stateNode,n.memoizedProps)}else if(6===n.tag){var a=n.stateNode;t?a.nodeValue=\"\":fu(a,n.memoizedProps)}else if(n.tag!==v&&n.tag!==g||null===n.memoizedState||n===e){if(null!==n.child){n.child.return=n,n=n.child;continue}}else;if(n===e)return;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function Bh(e){var t=e.ref;if(null!==t){var n,r=e.stateNode;switch(e.tag){case 5:n=r;break;default:n=r}\"function\"==typeof t?t(n):(t.hasOwnProperty(\"current\")||a(\"Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().\",Ae(e.type)),t.current=n)}}function Vh(e){var t=e.ref;null!==t&&(\"function\"==typeof t?t(null):t.current=null)}function Hh(e,t,n){switch(function(e){if(cs&&\"function\"==typeof cs.onCommitFiberUnmount)try{cs.onCommitFiberUnmount(ss,e)}catch(e){ds||(ds=!0,a(\"React instrumentation encountered an error: %s\",e))}}(t),t.tag){case 0:case l:case c:case d:case m:var r=t.updateQueue;if(null!==r){var o=r.lastEffect;if(null!==o){var i=o.next,u=i;do{var s=u,f=s.destroy,p=s.tag;void 0!==f&&(0!=(4&p)?_v(t,u):Ah(t,f)),u=u.next}while(u!==i)}}return;case 1:Uh(t);var v=t.stateNode;return void(\"function\"==typeof v.componentWillUnmount&&function(e,t){Zn(null,Mh,null,e,t),Jn()&&zv(e,er())}(t,v));case 5:return void Uh(t);case 4:return void Gh(e,t);case h:case 18:case 21:return}}function qh(e,t,n){for(var r=t;;)if(Hh(e,r),null===r.child||4===r.tag){if(r===t)return;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}else r.child.return=r,r=r.child}function $h(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null,e._debugOwner=null}function Qh(e){return 5===e.tag||3===e.tag||4===e.tag}function Yh(e){var t,n,r=function(e){for(var t=e.return;null!==t;){if(Qh(t))return t;t=t.return}throw Error(\"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.\")}(e),a=r.stateNode;switch(r.tag){case 5:t=a,n=!1;break;case 3:case 4:t=a.containerInfo,n=!0;break;case h:default:throw Error(\"Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.\")}16&r.flags&&(uu(t),r.flags&=-17);var o=function(e){var t=e;e:for(;;){for(;null===t.sibling;){if(null===t.return||Qh(t.return))return null;t=t.return}for(t.sibling.return=t.return,t=t.sibling;5!==t.tag&&6!==t.tag&&18!==t.tag;){if(2&t.flags)continue e;if(null===t.child||4===t.tag)continue e;t.child.return=t,t=t.child}if(!(2&t.flags))return t.stateNode}}(e);n?Kh(e,o,t):Xh(e,o,t)}function Kh(e,t,n){var r=e.tag,a=5===r||6===r;if(a){var o=a?e.stateNode:e.stateNode.instance;t?function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)}(n,o,t):function(e,t){var n;8===e.nodeType?(n=e.parentNode).insertBefore(t,e):(n=e).appendChild(t),null==e._reactRootContainer&&null===n.onclick&&Ol(n)}(n,o)}else if(4===r);else{var i=e.child;if(null!==i){Kh(i,t,n);for(var l=i.sibling;null!==l;)Kh(l,t,n),l=l.sibling}}}function Xh(e,t,n){var r=e.tag,a=5===r||6===r;if(a){var o=a?e.stateNode:e.stateNode.instance;t?function(e,t,n){e.insertBefore(t,n)}(n,o,t):function(e,t){e.appendChild(t)}(n,o)}else if(4===r);else{var i=e.child;if(null!==i){Xh(i,t,n);for(var l=i.sibling;null!==l;)Xh(l,t,n),l=l.sibling}}}function Gh(e,t,n){for(var r,a,o,i,l=t,u=!1;;){if(!u){var s=l.return;e:for(;;){if(null===s)throw Error(\"Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.\");var c=s.stateNode;switch(s.tag){case 5:r=c,a=!1;break e;case 3:case 4:r=c.containerInfo,a=!0;break e}s=s.return}u=!0}if(5===l.tag||6===l.tag)qh(e,l),a?(o=r,i=l.stateNode,8===o.nodeType?o.parentNode.removeChild(i):o.removeChild(i)):su(r,l.stateNode);else if(4===l.tag){if(null!==l.child){r=l.stateNode.containerInfo,a=!0,l.child.return=l,l=l.child;continue}}else if(Hh(e,l),null!==l.child){l.child.return=l,l=l.child;continue}if(l===t)return;for(;null===l.sibling;){if(null===l.return||l.return===t)return;4===(l=l.return).tag&&(u=!1)}l.sibling.return=l.return,l=l.sibling}}function Zh(e,t,n){Gh(e,t);var r=t.alternate;$h(t),null!==r&&$h(r)}function Jh(e,t){switch(t.tag){case 0:case l:case c:case d:case m:return void function(e,t){var n=t.updateQueue,r=null!==n?n.lastEffect:null;if(null!==r){var a=r.next,o=a;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&i()}o=o.next}while(o!==a)}}(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,a=null!==e?e.memoizedProps:r,o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&function(e,t,n,r,a,o){Ou(e,a),Ul(e,t,n,r,a)}(n,i,o,a,r)}return;case 6:if(null===t.stateNode)throw Error(\"This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.\");var y=t.stateNode,b=t.memoizedProps;null!==e&&e.memoizedProps;return void function(e,t,n){e.nodeValue=n}(y,0,b);case 3:var w=t.stateNode;return void(w.hydrate&&(w.hydrate=!1,na(w.containerInfo)));case u:return;case s:return function(e){if(null!==e.memoizedState){Em=Ms(),jh(e.child,!0)}}(t),void em(t);case p:return void em(t);case f:return;case h:case 21:break;case v:case g:return void jh(t,null!==t.memoizedState)}throw Error(\"This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.\")}function em(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new zh),t.forEach((function(t){var r=Uv.bind(null,e,t);n.has(t)||(!0!==t.__reactDoNotTraceInteractions&&(r=xa(r)),n.add(t),t.then(r,r))}))}}function tm(e,t){if(null!==e){var n=e.memoizedState;if(null===n||null!==n.dehydrated){var r=t.memoizedState;return null!==r&&null===r.dehydrated}}return!1}function nm(e){uu(e.stateNode)}if(\"function\"==typeof Symbol&&Symbol.for){var rm=Symbol.for;rm(\"selector.component\"),rm(\"selector.has_pseudo_class\"),rm(\"selector.role\"),rm(\"selector.test_id\"),rm(\"selector.text\")}var am=[];var om=Math.ceil,im=n.ReactCurrentDispatcher,lm=n.ReactCurrentOwner,um=n.IsSomeRendererActing,sm=16,cm=32,dm=0,fm=null,pm=null,hm=0,mm=0,vm=Hu(0),gm=0,ym=null,bm=0,wm=0,km=0,Sm=0,xm=null,Em=0,Cm=1/0;function Rm(){Cm=Ms()+500}function Tm(){return Cm}var Pm=null,_m=!1,Dm=null,Im=null,Nm=!1,Lm=null,Om=90,zm=0,Mm=[],Um=[],Am=null,Fm=0,Wm=null,jm=0,Bm=null,Vm=Ma,Hm=0,qm=0,$m=!1,Qm=null,Ym=!1;function Km(){return 0!=(48&dm)?Ms():Vm!==Ma?Vm:Vm=Ms()}function Xm(e){var t=e.mode;if(0==(2&t))return 1;if(0==(4&t))return Us()===Ts?1:2;if(0===Hm&&(Hm=bm),0!==qs.transition)return 0!==qm&&(qm=null!==xm?xm.pendingLanes:0),function(e,t){var n=qa(Pa&~t);return 0===n&&0===(n=qa(Pa&~e))&&(n=qa(Pa)),n}(Hm,qm);var n,r=Us();0!=(4&dm)&&r===Ps?n=Ha(12,Hm):n=Ha(function(e){switch(e){case 99:return Ca;case 98:return Ra;case 97:case 96:return 8;case 95:return 2;default:return 0}}(r),Hm);return n}function Gm(e){var t,n=e.mode;return 0==(2&n)?1:0==(4&n)?Us()===Ts?1:2:(0===Hm&&(Hm=bm),0===(t=qa(_a&~Hm))&&(t=qa(_a)),t)}function Zm(e,t,n){!function(){if(Fm>50)throw Fm=0,Wm=null,Error(\"Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.\");jm>50&&(jm=0,a(\"Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.\"))}(),function(e){if(je&&0!=(dm&sm)&&!ap)switch(e.tag){case 0:case l:case d:var t=pm&&Ae(pm.type)||\"Unknown\",n=t;if(!Bv.has(n))Bv.add(n),a(\"Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render\",Ae(e.type)||\"Unknown\",t,t);break;case 1:Vv||(a(\"Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.\"),Vv=!0)}}(e);var r=Jm(e,t);if(null===r)return function(e){var t=e.tag;if(3!==t&&1!==t&&0!==t&&t!==l&&t!==c&&t!==d&&t!==m)return;if(0!=(e.flags&Er))return;var n=Ae(e.type)||\"ReactComponent\";if(null!==jv){if(jv.has(n))return;jv.add(n)}else jv=new Set([n]);if($m);else{var r=We;try{qe(e),a(\"Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.\",1===t?\"the componentWillUnmount method\":\"a useEffect cleanup function\")}finally{r?qe(e):He()}}}(e),null;Za(r,t,n),r===fm&&(km=Ka(km,t),4===gm&&nv(r,hm));var o=Us();1===t?0!=(8&dm)&&0==(48&dm)?(Zv(r,t),rv(r)):(ev(r,n),Zv(r,t),0===dm&&(Rm(),Bs())):(0==(4&dm)||o!==Ps&&o!==Ts||(null===Am?Am=new Set([r]):Am.add(r)),ev(r,n),Zv(r,t)),xm=r}function Jm(e,t){e.lanes=Ka(e.lanes,t);var n=e.alternate;null!==n&&(n.lanes=Ka(n.lanes,t)),null===n&&0!=(1026&e.flags)&&Fv(e);for(var r=e,a=e.return;null!==a;)a.childLanes=Ka(a.childLanes,t),null!==(n=a.alternate)?n.childLanes=Ka(n.childLanes,t):0!=(1026&a.flags)&&Fv(e),r=a,a=a.return;return 3===r.tag?r.stateNode:null}function ev(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.pendingLanes,r=e.suspendedLanes,a=e.pingedLanes,o=e.expirationTimes,i=n;i>0;){var l=$a(i),u=1<<l,s=o[l];s===Ma?0!=(u&r)&&0==(u&a)||(o[l]=Wa(u,t)):s<=t&&(e.expiredLanes|=u),i&=~u}}(e,t);var r=Fa(e,e===fm?hm:0),a=Ua;if(0!==r){if(null!==n){if(e.callbackPriority===a)return;js(n)}var o,i;if(a===Ca)i=rv.bind(null,e),null===Ns?(Ns=[i],Ls=ms(ks,Vs)):Ns.push(i),o=Rs;else if(14===a)o=Ws(Ts,rv.bind(null,e));else{o=Ws(function(e){switch(e){case Ca:case 14:return 99;case 13:case 12:case 11:case Ra:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(\"Invalid update priority: \"+e+\". This is a bug in React.\")}}(a),tv.bind(null,e))}e.callbackPriority=a,e.callbackNode=o}else null!==n&&(js(n),e.callbackNode=null,e.callbackPriority=0)}function tv(e){if(Vm=Ma,Hm=0,qm=0,0!=(48&dm))throw Error(\"Should not already be working.\");var t=e.callbackNode;if(Tv()&&e.callbackNode!==t)return null;var n=Fa(e,e===fm?hm:0);if(0===n)return null;var r=function(e,t){var n=dm;dm|=sm;var r=dv();fm===e&&hm===t||(Rm(),sv(e,t),Jv(e,t));var a=pv(e);for(;;)try{yv();break}catch(t){cv(e,t)}return dc(),hv(a),fv(r),dm=n,null!==pm?0:(fm=null,hm=0,gm)}(e,n);if(Qa(bm,km))sv(e,0);else if(0!==r){if(2===r&&(dm|=64,e.hydrate&&(e.hydrate=!1,pu(e.containerInfo)),0!==(n=ja(e))&&(r=vv(e,n))),1===r){var a=ym;throw sv(e,0),nv(e,n),ev(e,Ms()),a}var o=e.current.alternate;e.finishedWork=o,e.finishedLanes=n,function(e,t,n){switch(t){case 0:case 1:throw Error(\"Root did not complete. This is a bug in React.\");case 2:Sv(e);break;case 3:if(nv(e,n),Va(n)&&!tg()){var r=Em+500-Ms();if(r>10){if(0!==Fa(e,0))break;var a=e.suspendedLanes;if(!Ya(a,n)){Km();Ja(e,a);break}e.timeoutHandle=iu(Sv.bind(null,e),r);break}}Sv(e);break;case 4:if(nv(e,n),function(e){return(e&Pa)===e}(n))break;if(!tg()){var o=function(e,t){for(var n=e.eventTimes,r=Ma;t>0;){var a=$a(t),o=1<<a,i=n[a];i>r&&(r=i),t&=~o}return r}(e,n),i=Ms()-o,l=((u=i)<120?120:u<480?480:u<1080?1080:u<1920?1920:u<3e3?3e3:u<4320?4320:1960*om(u/1960))-i;if(l>10){e.timeoutHandle=iu(Sv.bind(null,e),l);break}}Sv(e);break;case 5:Sv(e);break;default:throw Error(\"Unknown root exit status.\")}var u}(e,r,n)}return ev(e,Ms()),e.callbackNode===t?tv.bind(null,e):null}function nv(e,t){t=Xa(t,Sm),function(e,t){e.suspendedLanes|=t,e.pingedLanes&=~t;for(var n=e.expirationTimes,r=t;r>0;){var a=$a(r),o=1<<a;n[a]=Ma,r&=~o}}(e,t=Xa(t,km))}function rv(e){if(0!=(48&dm))throw Error(\"Should not already be working.\");var t,n;if(Tv(),e===fm&&Qa(e.expiredLanes,hm)?(n=vv(e,t=hm),Qa(bm,km)&&(n=vv(e,t=Fa(e,t)))):n=vv(e,t=Fa(e,0)),0!==e.tag&&2===n&&(dm|=64,e.hydrate&&(e.hydrate=!1,pu(e.containerInfo)),0!==(t=ja(e))&&(n=vv(e,t))),1===n){var r=ym;throw sv(e,0),nv(e,t),ev(e,Ms()),r}var a=e.current.alternate;return e.finishedWork=a,e.finishedLanes=t,Sv(e),ev(e,Ms()),null}function av(e,t){var n=dm;dm|=1;try{return e(t)}finally{0===(dm=n)&&(Rm(),Bs())}}function ov(e,t){var n=dm;dm&=-2,dm|=8;try{return e(t)}finally{0===(dm=n)&&(Rm(),Bs())}}function iv(e,t){var n=dm;if(0!=(48&n))return a(\"flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.\"),e(t);dm|=1;try{return e?Fs(Ts,e.bind(null,t)):void 0}finally{dm=n,Bs()}}function lv(e,t){$u(vm,mm,e),mm=Ka(mm,t),bm=Ka(bm,t)}function uv(e){mm=vm.current,qu(vm,e)}function sv(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,lu(n)),null!==pm)for(var r=pm.return;null!==r;)Rh(r),r=r.return;fm=e,pm=Cg(e.current,null),hm=mm=bm=t,gm=0,ym=null,wm=0,km=0,Sm=0,Bm=null,$s.discardPendingWarnings()}function cv(e,t){for(;;){var n=pm;try{if(dc(),bf(),He(),lm.current=null,null===n||null===n.return)return gm=1,ym=t,void(pm=null);8&n.mode&&Tp(n,!0),Lh(e,n.return,n,t,hm),wv(n)}catch(e){t=e,pm===n&&null!==n?(n=n.return,pm=n):n=pm;continue}return}}function dv(){var e=im.current;return im.current=cp,null===e?cp:e}function fv(e){im.current=e}function pv(e){var t=wa.current;return wa.current=e.memoizedInteractions,t}function hv(e){wa.current=e}function mv(e){wm=Ka(e,wm)}function vv(e,t){var n=dm;dm|=sm;var r=dv();fm===e&&hm===t||(sv(e,t),Jv(e,t));for(var a=pv(e);;)try{gv();break}catch(t){cv(e,t)}if(dc(),hv(a),dm=n,fv(r),null!==pm)throw Error(\"Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.\");return fm=null,hm=0,gm}function gv(){for(;null!==pm;)bv(pm)}function yv(){for(;null!==pm&&!Ds();)bv(pm)}function bv(e){var t,n=e.alternate;qe(e),0!=(8&e.mode)?(Cp(e),t=Wv(n,e,mm),Tp(e,!0)):t=Wv(n,e,mm),He(),e.memoizedProps=e.pendingProps,null===t?wv(e):pm=t,lm.current=null}function wv(e){var t=e;do{var n=t.alternate,r=t.return;if(0==(t.flags&Rr)){qe(t);var a=void 0;if(0==(8&t.mode)?a=Eh(n,t,mm):(Cp(t),a=Eh(n,t,mm),Tp(t,!1)),He(),null!==a)return void(pm=a);if(kv(t),null!==r&&0==(r.flags&Rr))null===r.firstEffect&&(r.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==r.lastEffect&&(r.lastEffect.nextEffect=t.firstEffect),r.lastEffect=t.lastEffect),t.flags>1&&(null!==r.lastEffect?r.lastEffect.nextEffect=t:r.firstEffect=t,r.lastEffect=t)}else{var o=Ch(t);if(null!==o)return o.flags&=2047,void(pm=o);if(0!=(8&t.mode)){Tp(t,!1);for(var i=t.actualDuration,l=t.child;null!==l;)i+=l.actualDuration,l=l.sibling;t.actualDuration=i}null!==r&&(r.firstEffect=r.lastEffect=null,r.flags|=Rr)}var u=t.sibling;if(null!==u)return void(pm=u);pm=t=r}while(null!==t);0===gm&&(gm=5)}function kv(e){if(e.tag!==g&&e.tag!==v||null===e.memoizedState||Qa(mm,za)||0==(4&e.mode)){var t=0;if(0!=(8&e.mode)){for(var n=e.actualDuration,r=e.selfBaseDuration,a=null===e.alternate||e.child!==e.alternate.child,o=e.child;null!==o;)t=Ka(t,Ka(o.lanes,o.childLanes)),a&&(n+=o.actualDuration),r+=o.treeBaseDuration,o=o.sibling;if(e.tag===s&&null!==e.memoizedState){var i=e.child;null!==i&&(r-=i.treeBaseDuration)}e.actualDuration=n,e.treeBaseDuration=r}else for(var l=e.child;null!==l;)t=Ka(t,Ka(l.lanes,l.childLanes)),l=l.sibling;e.childLanes=t}}function Sv(e){var t=Us();return Fs(Ts,xv.bind(null,e,t)),null}function xv(e,t){do{Tv()}while(null!==Lm);if($s.flushLegacyContextWarning(),$s.flushPendingUnsafeLifecycleWarnings(),0!=(48&dm))throw Error(\"Should not already be working.\");var n=e.finishedWork,r=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(\"Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.\");e.callbackNode=null;var a,o=Ka(n.lanes,n.childLanes);if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t;for(var r=e.entanglements,a=e.eventTimes,o=e.expirationTimes,i=n;i>0;){var l=$a(i),u=1<<l;r[l]=0,a[l]=Ma,o[l]=Ma,i&=~u}}(e,o),null!==Am&&!function(e){return 0!=(24&e)}(o)&&Am.has(e)&&Am.delete(e),e===fm&&(fm=null,pm=null,hm=0),n.flags>1?null!==n.lastEffect?(n.lastEffect.nextEffect=n,a=n.firstEffect):a=n:a=n.firstEffect,null!==a){var i=dm;dm|=cm;var l=pv(e);lm.current=null,Qm=nu(e.containerInfo),Ym=!1,Pm=a;do{if(Zn(null,Ev,null),Jn()){if(null===Pm)throw Error(\"Should be working on an effect.\");var u=er();zv(Pm,u),Pm=Pm.nextEffect}}while(null!==Pm);Qm=null,Ep(),Pm=a;do{if(Zn(null,Cv,null,e,t),Jn()){if(null===Pm)throw Error(\"Should be working on an effect.\");var s=er();zv(Pm,s),Pm=Pm.nextEffect}}while(null!==Pm);e.containerInfo,Fi(eu),lo(Jl),Jl=null,eu=null,e.current=n,Pm=a;do{if(Zn(null,Rv,null,e,r),Jn()){if(null===Pm)throw Error(\"Should be working on an effect.\");var c=er();zv(Pm,c),Pm=Pm.nextEffect}}while(null!==Pm);Pm=null,Is(),hv(l),dm=i}else e.current=n,Ep();var d=Nm;if(Nm)Nm=!1,Lm=e,zm=r,Om=t;else for(Pm=a;null!==Pm;){var f=Pm.nextEffect;Pm.nextEffect=null,8&Pm.flags&&rg(Pm),Pm=f}if(0!==(o=e.pendingLanes)){if(null!==Bm){var p=Bm;Bm=null;for(var h=0;h<p.length;h++)Gv(e,p[h],e.memoizedInteractions)}Zv(e,o)}else Im=null;if(d||eg(e,r),1===o?e===Wm?Fm++:(Fm=0,Wm=e):Fm=0,ps(n.stateNode,t),am.forEach((function(e){return e()})),ev(e,Ms()),_m){_m=!1;var m=Dm;throw Dm=null,m}return 0!=(8&dm)||Bs(),null}function Ev(){for(;null!==Pm;){var e=Pm.alternate;Ym||null===Qm||(0!=(8&Pm.flags)?Mr(Pm,Qm)&&(Ym=!0):Pm.tag===s&&tm(e,Pm)&&Mr(Pm,Qm)&&(Ym=!0));var t=Pm.flags;0!=(t&Sr)&&(qe(Pm),Fh(e,Pm),He()),0!=(t&xr)&&(Nm||(Nm=!0,Ws(_s,(function(){return Tv(),null})))),Pm=Pm.nextEffect}}function Cv(e,t){for(;null!==Pm;){qe(Pm);var n=Pm.flags;if(16&n&&nm(Pm),n&kr){var r=Pm.alternate;null!==r&&Vh(r)}switch(1038&n){case 2:Yh(Pm),Pm.flags&=-3;break;case 6:Yh(Pm),Pm.flags&=-3,Jh(Pm.alternate,Pm);break;case Cr:Pm.flags&=-1025;break;case 1028:Pm.flags&=-1025,Jh(Pm.alternate,Pm);break;case 4:Jh(Pm.alternate,Pm);break;case 8:Zh(e,Pm)}He(),Pm=Pm.nextEffect}}function Rv(e,t){for(;null!==Pm;){qe(Pm);var n=Pm.flags;if(36&n)Wh(e,Pm.alternate,Pm);n&kr&&Bh(Pm),He(),Pm=Pm.nextEffect}}function Tv(){if(90!==Om){var e=Om>_s?_s:Om;return Om=90,Fs(e,Iv)}return!1}function Pv(e,t){Mm.push(t,e),Nm||(Nm=!0,Ws(_s,(function(){return Tv(),null})))}function _v(e,t){Um.push(t,e),e.flags|=Er;var n=e.alternate;null!==n&&(n.flags|=Er),Nm||(Nm=!0,Ws(_s,(function(){return Tv(),null})))}function Dv(e){var t=e.create;e.destroy=t()}function Iv(){if(null===Lm)return!1;var e=Lm,t=zm;if(Lm=null,zm=0,0!=(48&dm))throw Error(\"Cannot flush passive effects while already rendering.\");$m=!0;var n=dm;dm|=cm;var r=pv(e),a=Um;Um=[];for(var o=0;o<a.length;o+=2){var i=a[o],l=a[o+1],u=i.destroy;i.destroy=void 0,l.flags&=-8193;var s=l.alternate;if(null!==s&&(s.flags&=-8193),\"function\"==typeof u){if(qe(l),Zn(null,u,null),Jn()){if(null===l)throw Error(\"Should be working on an effect.\");zv(l,er())}He()}}var c=Mm;Mm=[];for(var d=0;d<c.length;d+=2){var f=c[d],p=c[d+1];if(qe(p),Zn(null,Dv,null,f),Jn()){if(null===p)throw Error(\"Should be working on an effect.\");zv(p,er())}He()}for(var h=e.current.firstEffect;null!==h;){var m=h.nextEffect;h.nextEffect=null,8&h.flags&&rg(h),h=m}return hv(r),eg(e,t),$m=!1,dm=n,Bs(),jm=null===Lm?0:jm+1,!0}function Nv(e){return null!==Im&&Im.has(e)}var Lv=function(e){_m||(_m=!0,Dm=e)};function Ov(e,t,n){Rc(e,Dh(e,Th(n,t),1));var r=Km(),a=Jm(e,1);null!==a&&(Za(a,1,r),ev(a,r),Zv(a,1))}function zv(e,t){if(3!==e.tag)for(var n=e.return;null!==n;){if(3===n.tag)return void Ov(n,e,t);if(1===n.tag){var r=n.type,a=n.stateNode;if(\"function\"==typeof r.getDerivedStateFromError||\"function\"==typeof a.componentDidCatch&&!Nv(a)){var o=Th(t,e);Rc(n,Ih(n,o,1));var i=Km(),l=Jm(n,1);if(null!==l)Za(l,1,i),ev(l,i),Zv(l,1);else if(\"function\"==typeof a.componentDidCatch&&!Nv(a))try{a.componentDidCatch(t,o)}catch(e){}return}}n=n.return}else Ov(e,e,t)}function Mv(e,t,n){var r=e.pingCache;null!==r&&r.delete(t);var a=Km();Ja(e,n),fm===e&&Ya(hm,n)&&(4===gm||3===gm&&Va(hm)&&Ms()-Em<500?sv(e,0):Sm=Ka(Sm,n)),ev(e,a),Zv(e,n)}function Uv(e,t){var n;null!==(n=e.stateNode)&&n.delete(t),function(e,t){0===t&&(t=Gm(e));var n=Km(),r=Jm(e,t);null!==r&&(Za(r,t,n),ev(r,n),Zv(r,t))}(e,0)}var Av=null;function Fv(e){if(0==(dm&sm)&&6&e.mode){var t=e.tag;if(2===t||3===t||1===t||0===t||t===l||t===c||t===d||t===m){var n=Ae(e.type)||\"ReactComponent\";if(null!==Av){if(Av.has(n))return;Av.add(n)}else Av=new Set([n]);var r=We;try{qe(e),a(\"Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.\")}finally{r?qe(e):He()}}}}var Wv,jv=null;Wv=function(e,t,n){var r=Lg(null,t);try{return wh(e,t,n)}catch(a){if(null!==a&&\"object\"==typeof a&&\"function\"==typeof a.then)throw a;if(dc(),bf(),Rh(t),Lg(t,r),8&t.mode&&Cp(t),Zn(null,wh,null,e,t,n),Jn())throw er();throw a}};var Bv,Vv=!1;Bv=new Set;var Hv={current:!1};function qv(e){if(!0===um.current&&!0!==Hv.current){var t=We;try{qe(e),a(\"It looks like you're using the wrong act() around your test interactions.\\nBe sure to use the matching version of act() corresponding to your renderer:\\n\\n// for react-dom:\\nimport {act} from 'react-dom/test-utils';\\n// ...\\nact(() => ...);\\n\\n// for react-test-renderer:\\nimport TestRenderer from react-test-renderer';\\nconst {act} = TestRenderer;\\n// ...\\nact(() => ...);\")}finally{t?qe(e):He()}}}function $v(e){0!=(1&e.mode)&&!1===um.current&&!1===Hv.current&&a(\"An update to %s ran an effect, but was not wrapped in act(...).\\n\\nWhen testing, code that causes React state updates should be wrapped into act(...):\\n\\nact(() => {\\n  /* fire events that update state */\\n});\\n/* assert on the output */\\n\\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act\",Ae(e.type))}var Qv=function(e){if(0===dm&&!1===um.current&&!1===Hv.current){var t=We;try{qe(e),a(\"An update to %s inside a test was not wrapped in act(...).\\n\\nWhen testing, code that causes React state updates should be wrapped into act(...):\\n\\nact(() => {\\n  /* fire events that update state */\\n});\\n/* assert on the output */\\n\\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act\",Ae(e.type))}finally{t?qe(e):He()}}},Yv=!1;function Kv(e,t){return 1e3*t+e.interactionThreadID}function Xv(e){null===Bm?Bm=[e]:Bm.push(e)}function Gv(e,t,n){if(n.size>0){var r=e.pendingInteractionMap,a=r.get(t);null!=a?n.forEach((function(e){a.has(e)||e.__count++,a.add(e)})):(r.set(t,new Set(n)),n.forEach((function(e){e.__count++})));var o=ka.current;if(null!==o){var i=Kv(e,t);o.onWorkScheduled(n,i)}}}function Zv(e,t){Gv(e,t,wa.current)}function Jv(e,t){var n=new Set;if(e.pendingInteractionMap.forEach((function(e,r){Qa(t,r)&&e.forEach((function(e){return n.add(e)}))})),e.memoizedInteractions=n,n.size>0){var r=ka.current;if(null!==r){var a=Kv(e,t);try{r.onWorkStarted(n,a)}catch(e){Ws(Ts,(function(){throw e}))}}}}function eg(e,t){var n,r=e.pendingLanes;try{if(null!==(n=ka.current)&&e.memoizedInteractions.size>0){var a=Kv(e,t);n.onWorkStopped(e.memoizedInteractions,a)}}catch(e){Ws(Ts,(function(){throw e}))}finally{var o=e.pendingInteractionMap;o.forEach((function(e,t){Qa(r,t)||(o.delete(t),e.forEach((function(e){if(e.__count--,null!==n&&0===e.__count)try{n.onInteractionScheduledWorkCompleted(e)}catch(e){Ws(Ts,(function(){throw e}))}})))}))}}function tg(){return ng>0}var ng=0;function rg(e){e.sibling=null,e.stateNode=null}var ag=null,og=null,ig=function(e){ag=e};function lg(e){if(null===ag)return e;var t=ag(e);return void 0===t?e:t.current}function ug(e){return lg(e)}function sg(e){if(null===ag)return e;var t=ag(e);if(void 0===t){if(null!=e&&\"function\"==typeof e.render){var n=lg(e.render);if(e.render!==n){var r={$$typeof:te,render:n};return void 0!==e.displayName&&(r.displayName=e.displayName),r}}return e}return t.current}function cg(e,t){if(null===ag)return!1;var n=e.elementType,r=t.type,a=!1,o=\"object\"==typeof r&&null!==r?r.$$typeof:null;switch(e.tag){case 1:\"function\"==typeof r&&(a=!0);break;case 0:(\"function\"==typeof r||o===oe)&&(a=!0);break;case l:(o===te||o===oe)&&(a=!0);break;case c:case d:(o===ae||o===oe)&&(a=!0);break;default:return!1}if(a){var i=ag(n);if(void 0!==i&&i===ag(r))return!0}return!1}function dg(e){null!==ag&&\"function\"==typeof WeakSet&&(null===og&&(og=new WeakSet),og.add(e))}var fg=function(e,t){if(null!==ag){var n=t.staleFamilies,r=t.updatedFamilies;Tv(),iv((function(){hg(e.current,r,n)}))}},pg=function(e,t){e.context===Qu&&(Tv(),iv((function(){Ag(t,e,null,null)})))};function hg(e,t,n){var r=e.alternate,a=e.child,o=e.sibling,i=e.tag,u=e.type,s=null;switch(i){case 0:case d:case 1:s=u;break;case l:s=u.render}if(null===ag)throw new Error(\"Expected resolveFamily to be set during hot reload.\");var c=!1,f=!1;if(null!==s){var p=ag(s);void 0!==p&&(n.has(p)?f=!0:t.has(p)&&(1===i?f=!0:c=!0))}null!==og&&(og.has(e)||null!==r&&og.has(r))&&(f=!0),f&&(e._debugNeedsRemount=!0),(f||c)&&Zm(e,1,Ma),null===a||f||hg(a,t,n),null!==o&&hg(o,t,n)}var mg,vg=function(e,t){var n=new Set,r=new Set(t.map((function(e){return e.current})));return gg(e.current,r,n),n};function gg(e,t,n){var r=e.child,a=e.sibling,o=e.tag,i=e.type,u=null;switch(o){case 0:case d:case 1:u=i;break;case l:u=i.render}var s=!1;null!==u&&t.has(u)&&(s=!0),s?function(e,t){if(function(e,t){var n=e,r=!1;for(;;){if(5===n.tag)r=!0,t.add(n.stateNode);else if(null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)return r;for(;null===n.sibling;){if(null===n.return||n.return===e)return r;n=n.return}n.sibling.return=n.return,n=n.sibling}return!1}(e,t))return;var n=e;for(;;){switch(n.tag){case 5:return void t.add(n.stateNode);case 4:case 3:return void t.add(n.stateNode.containerInfo)}if(null===n.return)throw new Error(\"Expected to reach root first.\");n=n.return}}(e,n):null!==r&&gg(r,t,n),null!==a&&gg(a,t,n)}mg=!1;try{var yg=Object.preventExtensions({});new Map([[yg,null]]),new Set([yg])}catch(e){mg=!0}var bg=1;function wg(e,t,n,r){this.tag=e,this.key=n,this.elementType=null,this.type=null,this.stateNode=null,this.return=null,this.child=null,this.sibling=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedProps=null,this.updateQueue=null,this.memoizedState=null,this.dependencies=null,this.mode=r,this.flags=0,this.nextEffect=null,this.firstEffect=null,this.lastEffect=null,this.lanes=0,this.childLanes=0,this.alternate=null,this.actualDuration=Number.NaN,this.actualStartTime=Number.NaN,this.selfBaseDuration=Number.NaN,this.treeBaseDuration=Number.NaN,this.actualDuration=0,this.actualStartTime=-1,this.selfBaseDuration=0,this.treeBaseDuration=0,this._debugID=bg++,this._debugSource=null,this._debugOwner=null,this._debugNeedsRemount=!1,this._debugHookTypes=null,mg||\"function\"!=typeof Object.preventExtensions||Object.preventExtensions(this)}var kg,Sg,xg=function(e,t,n,r){return new wg(e,t,n,r)};function Eg(e){var t=e.prototype;return!(!t||!t.isReactComponent)}function Cg(e,t){var n=e.alternate;null===n?((n=xg(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n._debugID=e._debugID,n._debugSource=e._debugSource,n._debugOwner=e._debugOwner,n._debugHookTypes=e._debugHookTypes,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null,n.actualDuration=0,n.actualStartTime=-1),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue;var r=e.dependencies;switch(n.dependencies=null===r?null:{lanes:r.lanes,firstContext:r.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n.selfBaseDuration=e.selfBaseDuration,n.treeBaseDuration=e.treeBaseDuration,n._debugNeedsRemount=e._debugNeedsRemount,n.tag){case 2:case 0:case d:n.type=lg(e.type);break;case 1:n.type=ug(e.type);break;case l:n.type=sg(e.type)}return n}function Rg(e,t){e.flags&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null;var n=e.alternate;if(null===n)e.childLanes=0,e.lanes=t,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.stateNode=null,e.selfBaseDuration=0,e.treeBaseDuration=0;else{e.childLanes=n.childLanes,e.lanes=n.lanes,e.child=n.child,e.memoizedProps=n.memoizedProps,e.memoizedState=n.memoizedState,e.updateQueue=n.updateQueue,e.type=n.type;var r=n.dependencies;e.dependencies=null===r?null:{lanes:r.lanes,firstContext:r.firstContext},e.selfBaseDuration=n.selfBaseDuration,e.treeBaseDuration=n.treeBaseDuration}return e}function Tg(e,t,n,r,o,d){var f=2,h=e;if(\"function\"==typeof e)Eg(e)?(f=1,h=ug(h)):h=lg(h);else if(\"string\"==typeof e)f=5;else e:switch(e){case X:return _g(n.children,o,d,t);case se:f=8,o|=16;break;case G:f=8,o|=1;break;case Z:return function(e,t,n,r){\"string\"!=typeof e.id&&a('Profiler must specify an \"id\" as a prop');var o=xg(u,e,r,8|t);return o.elementType=Z,o.type=Z,o.lanes=n,o.stateNode={effectDuration:0,passiveEffectDuration:0},o}(n,o,d,t);case ne:return function(e,t,n,r){var a=xg(s,e,r,t);return a.type=ne,a.elementType=ne,a.lanes=n,a}(n,o,d,t);case re:return function(e,t,n,r){var a=xg(p,e,r,t);return a.type=re,a.elementType=re,a.lanes=n,a}(n,o,d,t);case ce:return Dg(n,o,d,t);case de:return function(e,t,n,r){var a=xg(g,e,r,t);return a.type=de,a.elementType=de,a.lanes=n,a}(n,o,d,t);case le:default:if(\"object\"==typeof e&&null!==e)switch(e.$$typeof){case J:f=i;break e;case ee:f=9;break e;case te:f=l,h=sg(h);break e;case ae:f=c;break e;case oe:f=16,h=null;break e;case ie:f=m;break e}var v=\"\";(void 0===e||\"object\"==typeof e&&null!==e&&0===Object.keys(e).length)&&(v+=\" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");var y=r?Ae(r.type):null;throw y&&(v+=\"\\n\\nCheck the render method of `\"+y+\"`.\"),Error(\"Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: \"+(null==e?e:typeof e)+\".\"+v)}var b=xg(f,n,t,o);return b.elementType=e,b.type=h,b.lanes=d,b._debugOwner=r,b}function Pg(e,t,n){var r;r=e._owner;var a=Tg(e.type,e.key,e.props,r,t,n);return a._debugSource=e._source,a._debugOwner=e._owner,a}function _g(e,t,n,r){var a=xg(7,e,r,t);return a.lanes=n,a}function Dg(e,t,n,r){var a=xg(v,e,r,t);return a.type=ce,a.elementType=ce,a.lanes=n,a}function Ig(e,t,n){var r=xg(6,e,null,t);return r.lanes=n,r}function Ng(e,t,n){var r=null!==e.children?e.children:[],a=xg(4,r,e.key,t);return a.lanes=n,a.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},a}function Lg(e,t){return null===e&&(e=xg(2,null,null,0)),e.tag=t.tag,e.key=t.key,e.elementType=t.elementType,e.type=t.type,e.stateNode=t.stateNode,e.return=t.return,e.child=t.child,e.sibling=t.sibling,e.index=t.index,e.ref=t.ref,e.pendingProps=t.pendingProps,e.memoizedProps=t.memoizedProps,e.updateQueue=t.updateQueue,e.memoizedState=t.memoizedState,e.dependencies=t.dependencies,e.mode=t.mode,e.flags=t.flags,e.nextEffect=t.nextEffect,e.firstEffect=t.firstEffect,e.lastEffect=t.lastEffect,e.lanes=t.lanes,e.childLanes=t.childLanes,e.alternate=t.alternate,e.actualDuration=t.actualDuration,e.actualStartTime=t.actualStartTime,e.selfBaseDuration=t.selfBaseDuration,e.treeBaseDuration=t.treeBaseDuration,e._debugID=t._debugID,e._debugSource=t._debugSource,e._debugOwner=t._debugOwner,e._debugNeedsRemount=t._debugNeedsRemount,e._debugHookTypes=t._debugHookTypes,e}function Og(e,t,n){switch(this.tag=t,this.containerInfo=e,this.pendingChildren=null,this.current=null,this.pingCache=null,this.finishedWork=null,this.timeoutHandle=-1,this.context=null,this.pendingContext=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ga(0),this.expirationTimes=Ga(Ma),this.pendingLanes=0,this.suspendedLanes=0,this.pingedLanes=0,this.expiredLanes=0,this.mutableReadLanes=0,this.finishedLanes=0,this.entangledLanes=0,this.entanglements=Ga(0),this.mutableSourceEagerHydrationData=null,this.interactionThreadID=Sa(),this.memoizedInteractions=new Set,this.pendingInteractionMap=new Map,t){case 1:this._debugRootType=\"createBlockingRoot()\";break;case 2:this._debugRootType=\"createRoot()\";break;case 0:this._debugRootType=\"createLegacyRoot()\"}}function zg(e,t,n,r){var a=new Og(e,t,n),o=function(e){var t;return t=2===e?7:1===e?3:0,fs&&(t|=8),xg(3,null,null,t)}(t);return a.current=o,o.stateNode=a,xc(o),a}function Mg(e,t){var n=(0,t._getVersion)(t._source);null==e.mutableSourceEagerHydrationData?e.mutableSourceEagerHydrationData=[t,n]:e.mutableSourceEagerHydrationData.push(t,n)}function Ug(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:K,key:null==r?null:\"\"+r,children:e,containerInfo:t,implementation:n}}function Ag(e,t,n,r){!function(e,t){if(cs&&\"function\"==typeof cs.onScheduleFiberRoot)try{cs.onScheduleFiberRoot(ss,e,t)}catch(e){ds||(ds=!0,a(\"React instrumentation encountered an error: %s\",e))}}(t,e);var o,i=t.current,l=Km();\"undefined\"!=typeof jest&&(o=i,!1===Yv&&void 0===hr&&(2&o.mode||4&o.mode)&&(Yv=!0,a(\"In Concurrent or Sync modes, the \\\"scheduler\\\" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: \\njest.mock('scheduler', () => require('scheduler/unstable_mock'));\\n\\nFor more info, visit https://reactjs.org/link/mock-scheduler\")),qv(i));var u=Xm(i),s=function(e){if(!e)return Qu;var t=mr(e),n=us(t);if(1===t.tag){var r=t.type;if(ts(r))return os(t,r,n)}return n}(n);null===t.context?t.context=s:t.pendingContext=s,je&&null!==We&&!kg&&(kg=!0,a(\"Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\\n\\nCheck the render method of %s.\",Ae(We.type)||\"Unknown\"));var c=Cc(l,u);return c.payload={element:e},null!==(r=void 0===r?null:r)&&(\"function\"!=typeof r&&a(\"render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.\",r),c.callback=r),Rc(i,c),Zm(i,u,l),u}function Fg(e){var t=e.current;if(!t.child)return null;switch(t.child.tag){case 5:default:return t.child.stateNode}}function Wg(e,t){var n,r,a=e.memoizedState;null!==a&&null!==a.dehydrated&&(a.retryLane=(n=a.retryLane,r=t,0!==n&&n<r?n:r))}function jg(e,t){Wg(e,t);var n=e.alternate;n&&Wg(n,t)}function Bg(e){var t=function(e){var t=Or(e);if(!t)return null;for(var n=t;;){if(5===n.tag||6===n.tag)return n;if(n.child&&4!==n.tag)n.child.return=n,n=n.child;else{if(n===t)return null;for(;!n.sibling;){if(!n.return||n.return===t)return null;n=n.return}n.sibling.return=n.return,n=n.sibling}}return null}(e);return null===t?null:t.tag===h?t.stateNode.instance:t.stateNode}kg=!1,Sg={};var Vg=function(e){return!1};var Hg,qg,$g,Qg,Yg,Kg,Xg,Gg,Zg=function(e,t,n){var r=t[n],a=Array.isArray(e)?e.slice():Q({},e);return n+1===t.length?(Array.isArray(a)?a.splice(r,1):delete a[r],a):(a[r]=Zg(e[r],t,n+1),a)},Jg=function(e,t){return Zg(e,t,0)},ey=function(e,t,n,r){var a=t[r],o=Array.isArray(e)?e.slice():Q({},e);r+1===t.length?(o[n[r]]=o[a],Array.isArray(o)?o.splice(a,1):delete o[a]):o[a]=ey(e[a],t,n,r+1);return o},ty=function(e,t,n){if(t.length===n.length){for(var a=0;a<n.length-1;a++)if(t[a]!==n[a])return void r(\"copyWithRename() expects paths to be the same except for the deepest key\");return ey(e,t,n,0)}r(\"copyWithRename() expects paths of the same length\")},ny=function(e,t,n,r){if(n>=t.length)return r;var a=t[n],o=Array.isArray(e)?e.slice():Q({},e);return o[a]=ny(e[a],t,n+1,r),o},ry=function(e,t,n){return ny(e,t,0,n)},ay=function(e,t){for(var n=e.memoizedState;null!==n&&t>0;)n=n.next,t--;return n};function oy(e){var t=zr(e);return null===t?null:t.stateNode}function iy(e){return null}function ly(){return We}function uy(e,t){this._internalRoot=cy(e,2,t)}function sy(e,t,n){this._internalRoot=cy(e,t,n)}function cy(e,t,n){var r,a=null!=n&&!0===n.hydrate,o=(null!=n&&n.hydrationOptions,null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null),i=function(e,t,n,r){return zg(e,t,n)}(e,t,a);r=i.current,e[Cu]=r;e.nodeType;if(nl(8===e.nodeType?e.parentNode:e),o)for(var l=0;l<o.length;l++){Mg(i,o[l])}return i}function dy(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||\" react-mount-point-unstable \"!==e.nodeValue))}Hg=function(e,t,n,r){var a=ay(e,t);if(null!==a){var o=ry(a.memoizedState,n,r);a.memoizedState=o,a.baseState=o,e.memoizedProps=Q({},e.memoizedProps),Zm(e,1,Ma)}},qg=function(e,t,n){var r=ay(e,t);if(null!==r){var a=Jg(r.memoizedState,n);r.memoizedState=a,r.baseState=a,e.memoizedProps=Q({},e.memoizedProps),Zm(e,1,Ma)}},$g=function(e,t,n,r){var a=ay(e,t);if(null!==a){var o=ty(a.memoizedState,n,r);a.memoizedState=o,a.baseState=o,e.memoizedProps=Q({},e.memoizedProps),Zm(e,1,Ma)}},Qg=function(e,t,n){e.pendingProps=ry(e.memoizedProps,t,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),Zm(e,1,Ma)},Yg=function(e,t){e.pendingProps=Jg(e.memoizedProps,t),e.alternate&&(e.alternate.pendingProps=e.pendingProps),Zm(e,1,Ma)},Kg=function(e,t,n){e.pendingProps=ty(e.memoizedProps,t,n),e.alternate&&(e.alternate.pendingProps=e.pendingProps),Zm(e,1,Ma)},Xg=function(e){Zm(e,1,Ma)},Gg=function(e){Vg=e},uy.prototype.render=sy.prototype.render=function(e){var t=this._internalRoot;\"function\"==typeof arguments[1]&&a(\"render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().\");var n=t.containerInfo;if(8!==n.nodeType){var r=Bg(t.current);r&&r.parentNode!==n&&a(\"render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.\")}Ag(e,t,null,null)},uy.prototype.unmount=sy.prototype.unmount=function(){\"function\"==typeof arguments[0]&&a(\"unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().\");var e=this._internalRoot,t=e.containerInfo;Ag(null,e,null,(function(){Pu(t)}))};var fy,py=n.ReactCurrentOwner,hy=!1;function my(e){return e?9===e.nodeType?e.documentElement:e.firstChild:null}function vy(e,t){var n=t||function(e){var t=my(e);return!(!t||1!==t.nodeType||!t.hasAttribute(T))}(e);if(!n)for(var o,i=!1;o=e.lastChild;)!i&&1===o.nodeType&&o.hasAttribute(T)&&(i=!0,a(\"render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.\")),e.removeChild(o);return!n||t||hy||(hy=!0,r(\"render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.\")),function(e,t){return new sy(e,0,t)}(e,n?{hydrate:!0}:void 0)}function gy(e,t,n,r,o){fy(n),function(e,t){null!==e&&\"function\"!=typeof e&&a(\"%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.\",t,e)}(void 0===o?null:o,\"render\");var i,l=n._reactRootContainer;if(l){if(i=l._internalRoot,\"function\"==typeof o){var u=o;o=function(){var e=Fg(i);u.call(e)}}Ag(t,i,e,o)}else{if(l=n._reactRootContainer=vy(n,r),i=l._internalRoot,\"function\"==typeof o){var s=o;o=function(){var e=Fg(i);s.call(e)}}ov((function(){Ag(t,i,e,o)}))}return Fg(i)}fy=function(e){if(e._reactRootContainer&&8!==e.nodeType){var t=Bg(e._reactRootContainer._internalRoot.current);t&&t.parentNode!==e&&a(\"render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.\")}var n=!!e._reactRootContainer,r=my(e);!(!r||!Iu(r))&&!n&&a(\"render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.\"),1===e.nodeType&&e.tagName&&\"BODY\"===e.tagName.toUpperCase()&&a(\"render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.\")},vr=function(e){e.tag===s&&(Zm(e,4,Km()),jg(e,4))},function(e){gr=e}((function(e){if(e.tag===s){var t=Km(),n=Ia;Zm(e,n,t),jg(e,n)}})),function(e){yr=e}((function(e){if(e.tag===s){var t=Km(),n=Xm(e);Zm(e,n,t),jg(e,n)}})),function(e){br=e}((function(e,t){try{return t()}finally{}}));var yy=!1;function by(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(!dy(t))throw Error(\"Target container is not a DOM element.\");return Ug(e,t,null,n)}\"function\"==typeof Map&&null!=Map.prototype&&\"function\"==typeof Map.prototype.forEach&&\"function\"==typeof Set&&null!=Set.prototype&&\"function\"==typeof Set.prototype.clear&&\"function\"==typeof Set.prototype.forEach||a(\"React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills\"),Tn=function(e,t,n){switch(t){case\"input\":return void ft(e,n);case\"textarea\":return void function(e,t){Tt(e,t)}(e,n);case\"select\":return void function(e,t){var n=e,r=t.value;null!=r&&kt(n,!!t.multiple,r,!1)}(e,n)}},Ln=av,On=function(e,t,n,r,a){var o=dm;dm|=4;try{return Fs(Ps,e.bind(null,t,n,r,a))}finally{0===(dm=o)&&(Rm(),Bs())}},zn=function(){0==(49&dm)?(function(){if(null!==Am){var e=Am;Am=null,e.forEach((function(e){!function(e){e.expiredLanes|=24&e.pendingLanes}(e),ev(e,Ms())}))}Bs()}(),Tv()):0!=(dm&sm)&&a(\"unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.\")},Mn=function(e,t){var n=dm;dm|=2;try{return e(t)}finally{0===(dm=n)&&(Rm(),Bs())}};var wy={Events:[Iu,Nu,Lu,In,Nn,Tv,Hv]};if(!function(e){var t=e.findFiberByHostInstance,r=n.ReactCurrentDispatcher;return function(e){if(\"undefined\"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled)return!0;if(!t.supportsFiber)return a(\"The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools\"),!0;try{ss=t.inject(e),cs=t}catch(e){a(\"React instrumentation encountered an error: %s.\",e)}return!0}({bundleType:e.bundleType,version:e.version,rendererPackageName:e.rendererPackageName,rendererConfig:e.rendererConfig,overrideHookState:Hg,overrideHookStateDeletePath:qg,overrideHookStateRenamePath:$g,overrideProps:Qg,overridePropsDeletePath:Yg,overridePropsRenamePath:Kg,setSuspenseHandler:Gg,scheduleUpdate:Xg,currentDispatcherRef:r,findHostInstanceByFiber:oy,findFiberByHostInstance:t||iy,findHostInstancesForRefresh:vg,scheduleRefresh:fg,scheduleRoot:pg,setRefreshHandler:ig,getCurrentFiber:ly})}({findFiberByHostInstance:Du,bundleType:1,version:Hs,rendererPackageName:\"react-dom\"})&&E&&window.top===window.self&&(navigator.userAgent.indexOf(\"Chrome\")>-1&&-1===navigator.userAgent.indexOf(\"Edge\")||navigator.userAgent.indexOf(\"Firefox\")>-1)){var ky=window.location.protocol;/^(https?|file):$/.test(ky)&&console.info(\"%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools\"+(\"file:\"===ky?\"\\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq\":\"\"),\"font-weight:bold\")}e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=wy,e.createPortal=by,e.findDOMNode=function(e){var t=py.current;return null!==t&&null!==t.stateNode&&(t.stateNode._warnedAboutRefsInRender||a(\"%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.\",Ae(t.type)||\"A component\"),t.stateNode._warnedAboutRefsInRender=!0),null==e?null:1===e.nodeType?e:function(e,t){var n=mr(e);if(void 0===n)throw\"function\"==typeof e.render?Error(\"Unable to find node on an unmounted component.\"):Error(\"Argument appears to not be a ReactComponent. Keys: \"+Object.keys(e));var r=zr(n);if(null===r)return null;if(1&r.mode){var o=Ae(n.type)||\"Component\";if(!Sg[o]){Sg[o]=!0;var i=We;try{qe(r),1&n.mode?a(\"%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node\",t,t,o):a(\"%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node\",t,t,o)}finally{i?qe(i):He()}}}return r.stateNode}(e,\"findDOMNode\")},e.flushSync=iv,e.hydrate=function(e,t,n){if(!dy(t))throw Error(\"Target container is not a DOM element.\");return _u(t)&&void 0===t._reactRootContainer&&a(\"You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?\"),gy(null,e,t,!0,n)},e.render=function(e,t,n){if(!dy(t))throw Error(\"Target container is not a DOM element.\");return _u(t)&&void 0===t._reactRootContainer&&a(\"You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?\"),gy(null,e,t,!1,n)},e.unmountComponentAtNode=function(e){if(!dy(e))throw Error(\"unmountComponentAtNode(...): Target container is not a DOM element.\");if(_u(e)&&void 0===e._reactRootContainer&&a(\"You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?\"),e._reactRootContainer){var t=my(e);return t&&!Iu(t)&&a(\"unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.\"),ov((function(){gy(null,null,e,!1,(function(){e._reactRootContainer=null,Pu(e)}))})),!0}var n=my(e),r=!(!n||!Iu(n)),o=1===e.nodeType&&dy(e.parentNode)&&!!e.parentNode._reactRootContainer;return r&&a(\"unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s\",o?\"You may have accidentally passed in a React root node instead of its container.\":\"Instead, have the parent component update its state and rerender in order to remove this component.\"),!1},e.unstable_batchedUpdates=av,e.unstable_createPortal=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;return yy||(yy=!0,r('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the \"unstable_\" prefix.')),by(e,t,n)},e.unstable_renderSubtreeIntoContainer=function(e,t,n,r){return function(e,t,n,r){if(!dy(n))throw Error(\"Target container is not a DOM element.\");if(null==e||void 0===e._reactInternals)throw Error(\"parentComponent must be a valid React Component\");return gy(e,t,n,!1,r)}(e,t,n,r)},e.version=Hs}));\n//# sourceMappingURL=/sm/7b56dc5f2141c442ebf93acf6e1d13c2f68bb301a6041bf349d12c53eca91e0b.map"
          },
          "redirectURL": "",
          "headersSize": -1,
          "bodySize": 0,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "[2a04:4e42:82::485]",
        "startedDateTime": "2023-04-10T17:57:17.000Z",
        "time": 8.886999999958789,
        "timings": {
          "blocked": 2.1220000008825446,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 2.1889999997155973,
          "receive": 4.575999999360647,
          "_blocked_queueing": 2.0820000008825446
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 653,
                "columnNumber": 20
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 633,
                "columnNumber": 11
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 671,
                "columnNumber": 25
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 707,
                "columnNumber": 29
              },
              {
                "functionName": "systemPrototype.instantiate",
                "scriptId": "1360",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js",
                "lineNumber": 84,
                "columnNumber": 23
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 282,
                "columnNumber": 20
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "getOrCreateLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 281,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 338,
                  "columnNumber": 24
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 337,
                    "columnNumber": 9
                  },
                  {
                    "functionName": "",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 334,
                    "columnNumber": 42
                  }
                ],
                "parent": {
                  "description": "Promise.then",
                  "callFrames": [
                    {
                      "functionName": "getOrCreateLoad",
                      "scriptId": "1359",
                      "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                      "lineNumber": 333,
                      "columnNumber": 5
                    },
                    {
                      "functionName": "",
                      "scriptId": "1359",
                      "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                      "lineNumber": 229,
                      "columnNumber": 17
                    }
                  ],
                  "parent": {
                    "description": "Promise.then",
                    "callFrames": [
                      {
                        "functionName": "systemJSPrototype.import",
                        "scriptId": "1359",
                        "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                        "lineNumber": 228,
                        "columnNumber": 5
                      },
                      {
                        "functionName": "systemJSPrototype.import",
                        "scriptId": "1359",
                        "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                        "lineNumber": 774,
                        "columnNumber": 18
                      },
                      {
                        "functionName": "app",
                        "scriptId": "1368",
                        "url": "http://localhost:9000/mma-root-config.js",
                        "lineNumber": 29,
                        "columnNumber": 27
                      },
                      {
                        "functionName": "",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 9744
                      }
                    ],
                    "parent": {
                      "description": "Promise.then",
                      "callFrames": [
                        {
                          "functionName": "",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 9719
                        }
                      ],
                      "parent": {
                        "description": "Promise.then",
                        "callFrames": [
                          {
                            "functionName": "X",
                            "scriptId": "1372",
                            "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                            "lineNumber": 1,
                            "columnNumber": 9594
                          },
                          {
                            "functionName": "",
                            "scriptId": "1372",
                            "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                            "lineNumber": 1,
                            "columnNumber": 17833
                          }
                        ],
                        "parent": {
                          "description": "Promise.then",
                          "callFrames": [
                            {
                              "functionName": "d",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 17808
                            },
                            {
                              "functionName": "Rt",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 17747
                            },
                            {
                              "functionName": "Pt",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 15763
                            },
                            {
                              "functionName": "./src/mma-root-config.ts",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 26,
                              "columnNumber": 63
                            },
                            {
                              "functionName": "__webpack_require__",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 3577,
                              "columnNumber": 32
                            },
                            {
                              "functionName": "",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 4628,
                              "columnNumber": 36
                            },
                            {
                              "functionName": "execute",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 4631,
                              "columnNumber": 11
                            },
                            {
                              "functionName": "doExec",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 468,
                              "columnNumber": 33
                            },
                            {
                              "functionName": "postOrderExec",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 464,
                              "columnNumber": 11
                            },
                            {
                              "functionName": "",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 421,
                              "columnNumber": 13
                            }
                          ],
                          "parent": {
                            "description": "Promise.then",
                            "callFrames": [
                              {
                                "functionName": "topLevelLoad",
                                "scriptId": "1359",
                                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                "lineNumber": 420,
                                "columnNumber": 5
                              },
                              {
                                "functionName": "",
                                "scriptId": "1359",
                                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                "lineNumber": 230,
                                "columnNumber": 23
                              }
                            ],
                            "parent": {
                              "description": "Promise.then",
                              "callFrames": [
                                {
                                  "functionName": "systemJSPrototype.import",
                                  "scriptId": "1359",
                                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                  "lineNumber": 228,
                                  "columnNumber": 5
                                },
                                {
                                  "functionName": "systemJSPrototype.import",
                                  "scriptId": "1359",
                                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                  "lineNumber": 774,
                                  "columnNumber": 18
                                },
                                {
                                  "functionName": "",
                                  "scriptId": "1365",
                                  "url": "http://localhost:9000/",
                                  "lineNumber": 81,
                                  "columnNumber": 17
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "connection": "65305",
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "http://localhost:9002/mma-utils1.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "Host",
              "value": "localhost:9002"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"400a5-0RhnGPpN5PDYkSpgC8OgTIz4+wQ\""
            },
            {
              "name": "Origin",
              "value": "http://localhost:9000"
            },
            {
              "name": "Referer",
              "value": "http://localhost:9000/"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 653,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "Date",
              "value": "Mon, 10 Apr 2023 17:57:17 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"400a3-qztXNOG45zgIfEwNtYg0GllD9bc\""
            },
            {
              "name": "Keep-Alive",
              "value": "timeout=5"
            },
            {
              "name": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 262307,
            "mimeType": "application/javascript",
            "compression": 200029,
            "text": "",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 353,
          "bodySize": 62278,
          "_transferSize": 62631,
          "_error": null
        },
        "serverIPAddress": "[::1]",
        "startedDateTime": "2023-04-10T17:57:17.001Z",
        "time": 26.447999998708838,
        "timings": {
          "blocked": 8.31699999875878,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0.16699999999999993,
          "wait": 9.073000000456116,
          "receive": 8.890999999493943,
          "_blocked_queueing": 7.33599999875878
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 653,
                "columnNumber": 20
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 633,
                "columnNumber": 11
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 671,
                "columnNumber": 25
              },
              {
                "functionName": "systemJSPrototype.instantiate",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 707,
                "columnNumber": 29
              },
              {
                "functionName": "systemPrototype.instantiate",
                "scriptId": "1360",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js",
                "lineNumber": 84,
                "columnNumber": 23
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 282,
                "columnNumber": 20
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "getOrCreateLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 281,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 338,
                  "columnNumber": 24
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 337,
                    "columnNumber": 9
                  },
                  {
                    "functionName": "",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 334,
                    "columnNumber": 42
                  }
                ],
                "parent": {
                  "description": "Promise.then",
                  "callFrames": [
                    {
                      "functionName": "getOrCreateLoad",
                      "scriptId": "1359",
                      "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                      "lineNumber": 333,
                      "columnNumber": 5
                    },
                    {
                      "functionName": "",
                      "scriptId": "1359",
                      "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                      "lineNumber": 229,
                      "columnNumber": 17
                    }
                  ],
                  "parent": {
                    "description": "Promise.then",
                    "callFrames": [
                      {
                        "functionName": "systemJSPrototype.import",
                        "scriptId": "1359",
                        "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                        "lineNumber": 228,
                        "columnNumber": 5
                      },
                      {
                        "functionName": "systemJSPrototype.import",
                        "scriptId": "1359",
                        "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                        "lineNumber": 774,
                        "columnNumber": 18
                      },
                      {
                        "functionName": "app",
                        "scriptId": "1368",
                        "url": "http://localhost:9000/mma-root-config.js",
                        "lineNumber": 29,
                        "columnNumber": 27
                      },
                      {
                        "functionName": "",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 9744
                      }
                    ],
                    "parent": {
                      "description": "Promise.then",
                      "callFrames": [
                        {
                          "functionName": "",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 9719
                        }
                      ],
                      "parent": {
                        "description": "Promise.then",
                        "callFrames": [
                          {
                            "functionName": "X",
                            "scriptId": "1372",
                            "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                            "lineNumber": 1,
                            "columnNumber": 9594
                          },
                          {
                            "functionName": "",
                            "scriptId": "1372",
                            "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                            "lineNumber": 1,
                            "columnNumber": 17833
                          }
                        ],
                        "parent": {
                          "description": "Promise.then",
                          "callFrames": [
                            {
                              "functionName": "d",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 17808
                            },
                            {
                              "functionName": "Rt",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 17747
                            },
                            {
                              "functionName": "Pt",
                              "scriptId": "1372",
                              "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                              "lineNumber": 1,
                              "columnNumber": 15763
                            },
                            {
                              "functionName": "./src/mma-root-config.ts",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 26,
                              "columnNumber": 63
                            },
                            {
                              "functionName": "__webpack_require__",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 3577,
                              "columnNumber": 32
                            },
                            {
                              "functionName": "",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 4628,
                              "columnNumber": 36
                            },
                            {
                              "functionName": "execute",
                              "scriptId": "1368",
                              "url": "http://localhost:9000/mma-root-config.js",
                              "lineNumber": 4631,
                              "columnNumber": 11
                            },
                            {
                              "functionName": "doExec",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 468,
                              "columnNumber": 33
                            },
                            {
                              "functionName": "postOrderExec",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 464,
                              "columnNumber": 11
                            },
                            {
                              "functionName": "",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 421,
                              "columnNumber": 13
                            }
                          ],
                          "parent": {
                            "description": "Promise.then",
                            "callFrames": [
                              {
                                "functionName": "topLevelLoad",
                                "scriptId": "1359",
                                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                "lineNumber": 420,
                                "columnNumber": 5
                              },
                              {
                                "functionName": "",
                                "scriptId": "1359",
                                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                "lineNumber": 230,
                                "columnNumber": 23
                              }
                            ],
                            "parent": {
                              "description": "Promise.then",
                              "callFrames": [
                                {
                                  "functionName": "systemJSPrototype.import",
                                  "scriptId": "1359",
                                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                  "lineNumber": 228,
                                  "columnNumber": 5
                                },
                                {
                                  "functionName": "systemJSPrototype.import",
                                  "scriptId": "1359",
                                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                                  "lineNumber": 774,
                                  "columnNumber": 18
                                },
                                {
                                  "functionName": "",
                                  "scriptId": "1365",
                                  "url": "http://localhost:9000/",
                                  "lineNumber": 81,
                                  "columnNumber": 17
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "_priority": "Low",
        "_resourceType": "script",
        "cache": {},
        "connection": "65377",
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "http://localhost:9003/mma-utils2.js",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept",
              "value": "*/*"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Connection",
              "value": "keep-alive"
            },
            {
              "name": "DNT",
              "value": "1"
            },
            {
              "name": "Host",
              "value": "localhost:9003"
            },
            {
              "name": "If-None-Match",
              "value": "W/\"4a984-3DZ6lRS2PaQqkgAuEom8GFN9Dcw\""
            },
            {
              "name": "Origin",
              "value": "http://localhost:9000"
            },
            {
              "name": "Referer",
              "value": "http://localhost:9000/"
            },
            {
              "name": "Sec-Fetch-Dest",
              "value": "script"
            },
            {
              "name": "Sec-Fetch-Mode",
              "value": "cors"
            },
            {
              "name": "Sec-Fetch-Site",
              "value": "same-site"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "sec-ch-ua",
              "value": "\"Google Chrome\";v=\"111\", \"Not(A:Brand\";v=\"8\", \"Chromium\";v=\"111\""
            },
            {
              "name": "sec-ch-ua-mobile",
              "value": "?0"
            },
            {
              "name": "sec-ch-ua-platform",
              "value": "\"Windows\""
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 653,
          "bodySize": 0
        },
        "response": {
          "status": 200,
          "statusText": "OK",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Accept-Ranges",
              "value": "bytes"
            },
            {
              "name": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "name": "Content-Encoding",
              "value": "gzip"
            },
            {
              "name": "Content-Type",
              "value": "application/javascript; charset=utf-8"
            },
            {
              "name": "Date",
              "value": "Mon, 10 Apr 2023 17:57:17 GMT"
            },
            {
              "name": "ETag",
              "value": "W/\"4a984-3DZ6lRS2PaQqkgAuEom8GFN9Dcw\""
            },
            {
              "name": "Vary",
              "value": "Accept-Encoding"
            },
            {
              "name": "X-Powered-By",
              "value": "Express"
            }
          ],
          "cookies": [],
          "content": {
            "size": 305540,
            "mimeType": "application/javascript",
            "compression": 305583,
            "text": "U3lzdGVtLnJlZ2lzdGVyKFsicmVhY3QiXSwgZnVuY3Rpb24oX19XRUJQQUNLX0RZTkFNSUNfRVhQT1JUX18sIF9fc3lzdGVtX2NvbnRleHRfXykgewoJdmFyIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcmVhY3RfXyA9IHt9OwoJT2JqZWN0LmRlZmluZVByb3BlcnR5KF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcmVhY3RfXywgIl9fZXNNb2R1bGUiLCB7IHZhbHVlOiB0cnVlIH0pOwoJcmV0dXJuIHsKCQlzZXR0ZXJzOiBbCgkJCWZ1bmN0aW9uKG1vZHVsZSkgewoJCQkJT2JqZWN0LmtleXMobW9kdWxlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkgewoJCQkJCV9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcmVhY3RfX1trZXldID0gbW9kdWxlW2tleV07CgkJCQl9KTsKCQkJfQoJCV0sCgkJZXhlY3V0ZTogZnVuY3Rpb24oKSB7CgkJCV9fV0VCUEFDS19EWU5BTUlDX0VYUE9SVF9fKAovKioqKioqLyAoKCkgPT4geyAvLyB3ZWJwYWNrQm9vdHN0cmFwCi8qKioqKiovIAl2YXIgX193ZWJwYWNrX21vZHVsZXNfXyA9ICh7CgovKioqLyAiLi9zcmMvbW1hLXV0aWxzMi50c3giOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL3NyYy9tbWEtdXRpbHMyLnRzeCAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewovKiBoYXJtb255IGV4cG9ydCAqLyAgICJIZWxsb0NvbXBvbmVudCI6ICgpID0+ICgvKiBiaW5kaW5nICovIEhlbGxvQ29tcG9uZW50KSwKLyogaGFybW9ueSBleHBvcnQgKi8gICAiSGVsbG9Db21wb25lbnRWMiI6ICgpID0+ICgvKiBiaW5kaW5nICovIEhlbGxvQ29tcG9uZW50VjIpCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgcmVhY3RfanN4X3J1bnRpbWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0L2pzeC1ydW50aW1lICovICIuLi8uLi8ueWFybi9jYWNoZS9yZWFjdC1ucG0tMTcuMC4yLTk5YmEzN2Q5MzEtYjI1NGNjMTdjZS56aXAvbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIik7CgovLyBBbnl0aGluZyBleHBvcnRlZCBmcm9tIHRoaXMgZmlsZSBpcyBpbXBvcnRhYmxlIGJ5IG90aGVyIGluLWJyb3dzZXIgbW9kdWxlcy4KZnVuY3Rpb24gSGVsbG9Db21wb25lbnQoKSB7CiAgcmV0dXJuIC8qI19fUFVSRV9fKi8oMCxyZWFjdF9qc3hfcnVudGltZV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmpzeCkoImRpdiIsIHsKICAgIGNoaWxkcmVuOiAiSGVsbG8gZnJvbSBIZWxsb0NvbXBvbmVudCIKICB9KTsKfQpmdW5jdGlvbiBIZWxsb0NvbXBvbmVudFYyKCkgewogIHJldHVybiAvKiNfX1BVUkVfXyovKDAscmVhY3RfanN4X3J1bnRpbWVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXy5qc3gpKCJkaXYiLCB7CiAgICBjaGlsZHJlbjogIkhlbGxvIGZyb20gSGVsbG9Db21wb25lbnRWMiIKICB9KTsKfQoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLXZpcnR1YWwtMjAyOGFlMzEyYS8wL2NhY2hlL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC1ucG0tMi4zLjctNWYwMDVjNjkzOS02YTI5NGFhNDUyLnppcC9ub2RlX21vZHVsZXMvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wL2F1dG8tcHVibGljLXBhdGgvMS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLXZpcnR1YWwtMjAyOGFlMzEyYS8wL2NhY2hlL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC1ucG0tMi4zLjctNWYwMDVjNjkzOS02YTI5NGFhNDUyLnppcC9ub2RlX21vZHVsZXMvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wL2F1dG8tcHVibGljLXBhdGgvMS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX191bnVzZWRfd2VicGFja19leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgpjb25zdCBhdXRvUHVibGljUGF0aCA9IChfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2F1dG8tcHVibGljLXBhdGggKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC12aXJ0dWFsLTIwMjhhZTMxMmEvMC9jYWNoZS9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AtbnBtLTIuMy43LTVmMDA1YzY5MzktNmEyOTRhYTQ1Mi56aXAvbm9kZV9tb2R1bGVzL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC9hdXRvLXB1YmxpYy1wYXRoL2F1dG8tcHVibGljLXBhdGguanMiKS5hdXRvUHVibGljUGF0aCk7CgphdXRvUHVibGljUGF0aCgxKTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AtdmlydHVhbC0yMDI4YWUzMTJhLzAvY2FjaGUvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLW5wbS0yLjMuNy01ZjAwNWM2OTM5LTZhMjk0YWE0NTIuemlwL25vZGVfbW9kdWxlcy9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AvYXV0by1wdWJsaWMtcGF0aC9hdXRvLXB1YmxpYy1wYXRoLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AtdmlydHVhbC0yMDI4YWUzMTJhLzAvY2FjaGUvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLW5wbS0yLjMuNy01ZjAwNWM2OTM5LTZhMjk0YWE0NTIuemlwL25vZGVfbW9kdWxlcy9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AvYXV0by1wdWJsaWMtcGF0aC9hdXRvLXB1YmxpYy1wYXRoLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7Cgpjb25zdCByZXNvbHZlRGlyZWN0b3J5ID0gKF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL3B1YmxpYy1wYXRoICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AtdmlydHVhbC0yMDI4YWUzMTJhLzAvY2FjaGUvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLW5wbS0yLjMuNy01ZjAwNWM2OTM5LTZhMjk0YWE0NTIuemlwL25vZGVfbW9kdWxlcy9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AvcHVibGljLXBhdGguanMiKS5yZXNvbHZlRGlyZWN0b3J5KTsKCmV4cG9ydHMuYXV0b1B1YmxpY1BhdGggPSBmdW5jdGlvbiBhdXRvUHVibGljUGF0aChyb290RGlyTGV2ZWwpIHsKICBpZiAoIXJvb3REaXJMZXZlbCkgewogICAgcm9vdERpckxldmVsID0gMTsKICB9CgogIGlmICh0cnVlKSB7CiAgICBpZiAoZmFsc2UpIHt9CgogICAgaWYgKCFfX3dlYnBhY2tfcmVxdWlyZV9fLnkubWV0YSB8fCAhX193ZWJwYWNrX3JlcXVpcmVfXy55Lm1ldGEudXJsKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoIl9fc3lzdGVtX2NvbnRleHRfXyIsIF9fd2VicGFja19yZXF1aXJlX18ueSk7CiAgICAgIHRocm93IEVycm9yKAogICAgICAgICJzeXN0ZW1qcy13ZWJwYWNrLWludGVyb3Agd2FzIHByb3ZpZGVkIGFuIHVua25vd24gU3lzdGVtSlMgY29udGV4dC4gRXhwZWN0ZWQgY29udGV4dC5tZXRhLnVybCwgYnV0IG5vbmUgd2FzIHByb3ZpZGVkIgogICAgICApOwogICAgfQoKICAgIF9fd2VicGFja19yZXF1aXJlX18ucCA9IHJlc29sdmVEaXJlY3RvcnkoCiAgICAgIF9fd2VicGFja19yZXF1aXJlX18ueS5tZXRhLnVybCwKICAgICAgcm9vdERpckxldmVsCiAgICApOwogIH0KfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AtdmlydHVhbC0yMDI4YWUzMTJhLzAvY2FjaGUvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLW5wbS0yLjMuNy01ZjAwNWM2OTM5LTZhMjk0YWE0NTIuemlwL25vZGVfbW9kdWxlcy9zeXN0ZW1qcy13ZWJwYWNrLWludGVyb3AvcHVibGljLXBhdGguanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLXZpcnR1YWwtMjAyOGFlMzEyYS8wL2NhY2hlL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC1ucG0tMi4zLjctNWYwMDVjNjkzOS02YTI5NGFhNDUyLnppcC9ub2RlX21vZHVsZXMvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wL3B1YmxpYy1wYXRoLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCmV4cG9ydHMuc2V0UHVibGljUGF0aCA9IGZ1bmN0aW9uIHNldFB1YmxpY1BhdGgoCiAgc3lzdGVtanNNb2R1bGVOYW1lLAogIHJvb3REaXJlY3RvcnlMZXZlbAopIHsKICBpZiAoIXJvb3REaXJlY3RvcnlMZXZlbCkgewogICAgcm9vdERpcmVjdG9yeUxldmVsID0gMTsKICB9CiAgaWYgKAogICAgdHlwZW9mIHN5c3RlbWpzTW9kdWxlTmFtZSAhPT0gInN0cmluZyIgfHwKICAgIHN5c3RlbWpzTW9kdWxlTmFtZS50cmltKCkubGVuZ3RoID09PSAwCiAgKSB7CiAgICB0aHJvdyBFcnJvcigKICAgICAgInN5c3RlbWpzLXdlYnBhY2staW50ZXJvcDogc2V0UHVibGljUGF0aChzeXN0ZW1qc01vZHVsZU5hbWUpIG11c3QgYmUgY2FsbGVkIHdpdGggYSBub24tZW1wdHkgc3RyaW5nICdzeXN0ZW1qc01vZHVsZU5hbWUnIgogICAgKTsKICB9CgogIGlmICgKICAgIHR5cGVvZiByb290RGlyZWN0b3J5TGV2ZWwgIT09ICJudW1iZXIiIHx8CiAgICByb290RGlyZWN0b3J5TGV2ZWwgPD0gMCB8fAogICAgaXNOYU4ocm9vdERpcmVjdG9yeUxldmVsKSB8fAogICAgIWlzSW50ZWdlcihyb290RGlyZWN0b3J5TGV2ZWwpCiAgKSB7CiAgICB0aHJvdyBFcnJvcigKICAgICAgInN5c3RlbWpzLXdlYnBhY2staW50ZXJvcDogc2V0UHVibGljUGF0aChzeXN0ZW1qc01vZHVsZU5hbWUsIHJvb3REaXJlY3RvcnlMZXZlbCkgbXVzdCBiZSBjYWxsZWQgd2l0aCBhIHBvc2l0aXZlIGludGVnZXIgJ3Jvb3REaXJlY3RvcnlMZXZlbCciCiAgICApOwogIH0KCiAgdmFyIG1vZHVsZVVybDsKICB0cnkgewogICAgbW9kdWxlVXJsID0gd2luZG93LlN5c3RlbS5yZXNvbHZlKHN5c3RlbWpzTW9kdWxlTmFtZSk7CiAgICBpZiAoIW1vZHVsZVVybCkgewogICAgICB0aHJvdyBFcnJvcigpOwogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgdGhyb3cgRXJyb3IoCiAgICAgICJzeXN0ZW1qcy13ZWJwYWNrLWludGVyb3A6IFRoZXJlIGlzIG5vIHN1Y2ggbW9kdWxlICciICsKICAgICAgICBzeXN0ZW1qc01vZHVsZU5hbWUgKwogICAgICAgICInIGluIHRoZSBTeXN0ZW1KUyByZWdpc3RyeS4gRGlkIHlvdSBtaXNzcGVsbCB0aGUgbmFtZSBvZiB5b3VyIG1vZHVsZT8iCiAgICApOwogIH0KCiAgX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gcmVzb2x2ZURpcmVjdG9yeShtb2R1bGVVcmwsIHJvb3REaXJlY3RvcnlMZXZlbCk7Cn07CgpmdW5jdGlvbiByZXNvbHZlRGlyZWN0b3J5KHVybFN0cmluZywgcm9vdERpcmVjdG9yeUxldmVsKSB7CiAgLy8gT3VyIGZyaWVuZCBJRTExIGRvZXNuJ3Qgc3VwcG9ydCBuZXcgVVJMKCkKICAvLyBodHRwczovL2dpdGh1Yi5jb20vc2luZ2xlLXNwYS9zaW5nbGUtc3BhL2lzc3Vlcy82MTIKICAvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9qbG9uZy8yNDI4NTYxCgogIHZhciBhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwogIGEuaHJlZiA9IHVybFN0cmluZzsKCiAgdmFyIHBhdGhuYW1lID0gYS5wYXRobmFtZVswXSA9PT0gIi8iID8gYS5wYXRobmFtZSA6ICIvIiArIGEucGF0aG5hbWU7CiAgdmFyIG51bURpcnNQcm9jZXNzZWQgPSAwLAogICAgaW5kZXggPSBwYXRobmFtZS5sZW5ndGg7CiAgd2hpbGUgKG51bURpcnNQcm9jZXNzZWQgIT09IHJvb3REaXJlY3RvcnlMZXZlbCAmJiBpbmRleCA+PSAwKSB7CiAgICB2YXIgY2hhciA9IHBhdGhuYW1lWy0taW5kZXhdOwogICAgaWYgKGNoYXIgPT09ICIvIikgewogICAgICBudW1EaXJzUHJvY2Vzc2VkKys7CiAgICB9CiAgfQoKICBpZiAobnVtRGlyc1Byb2Nlc3NlZCAhPT0gcm9vdERpcmVjdG9yeUxldmVsKSB7CiAgICB0aHJvdyBFcnJvcigKICAgICAgInN5c3RlbWpzLXdlYnBhY2staW50ZXJvcDogcm9vdERpcmVjdG9yeUxldmVsICgiICsKICAgICAgICByb290RGlyZWN0b3J5TGV2ZWwgKwogICAgICAgICIpIGlzIGdyZWF0ZXIgdGhhbiB0aGUgbnVtYmVyIG9mIGRpcmVjdG9yaWVzICgiICsKICAgICAgICBudW1EaXJzUHJvY2Vzc2VkICsKICAgICAgICAiKSBpbiB0aGUgVVJMIHBhdGggIiArCiAgICAgICAgdXJsU3RyaW5nCiAgICApOwogIH0KCiAgdmFyIGZpbmFsUGF0aCA9IHBhdGhuYW1lLnNsaWNlKDAsIGluZGV4ICsgMSk7CgogIHJldHVybiBhLnByb3RvY29sICsgIi8vIiArIGEuaG9zdCArIGZpbmFsUGF0aDsKfQoKZXhwb3J0cy5yZXNvbHZlRGlyZWN0b3J5ID0gcmVzb2x2ZURpcmVjdG9yeTsKCi8vIGJvcnJvd2VkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3BhcnNoYXAvanMtaXMtaW50ZWdlci9ibG9iL21hc3Rlci9pbmRleC5qcwp2YXIgaXNJbnRlZ2VyID0KICBOdW1iZXIuaXNJbnRlZ2VyIHx8CiAgZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbCkgewogICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICJudW1iZXIiICYmIGlzRmluaXRlKHZhbCkgJiYgTWF0aC5mbG9vcih2YWwpID09PSB2YWw7CiAgfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9jbGllbnRzL1dlYlNvY2tldENsaWVudC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2NsaWVudHMvV2ViU29ja2V0Q2xpZW50LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImRlZmF1bHQiOiAoKSA9PiAoLyogYmluZGluZyAqLyBXZWJTb2NrZXRDbGllbnQpCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi4vdXRpbHMvbG9nLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9sb2cuanMiKTsKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIF90b1Byb3BlcnR5S2V5KGRlc2NyaXB0b3Iua2V5KSwgZGVzY3JpcHRvcik7IH0gfQpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgInByb3RvdHlwZSIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCAic3RyaW5nIik7IHJldHVybiB0eXBlb2Yga2V5ID09PSAic3ltYm9sIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAodHlwZW9mIGlucHV0ICE9PSAib2JqZWN0IiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCAiZGVmYXVsdCIpOyBpZiAodHlwZW9mIHJlcyAhPT0gIm9iamVjdCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuIik7IH0gcmV0dXJuIChoaW50ID09PSAic3RyaW5nIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9Cgp2YXIgV2ViU29ja2V0Q2xpZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAvKioKICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsCiAgICovCiAgZnVuY3Rpb24gV2ViU29ja2V0Q2xpZW50KHVybCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdlYlNvY2tldENsaWVudCk7CiAgICB0aGlzLmNsaWVudCA9IG5ldyBXZWJTb2NrZXQodXJsKTsKICAgIHRoaXMuY2xpZW50Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fLmxvZy5lcnJvcihlcnJvcik7CiAgICB9OwogIH0KCiAgLyoqCiAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGYKICAgKi8KICBfY3JlYXRlQ2xhc3MoV2ViU29ja2V0Q2xpZW50LCBbewogICAga2V5OiAib25PcGVuIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbk9wZW4oZikgewogICAgICB0aGlzLmNsaWVudC5vbm9wZW4gPSBmOwogICAgfQoKICAgIC8qKgogICAgICogQHBhcmFtIHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGYKICAgICAqLwogIH0sIHsKICAgIGtleTogIm9uQ2xvc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2xvc2UoZikgewogICAgICB0aGlzLmNsaWVudC5vbmNsb3NlID0gZjsKICAgIH0KCiAgICAvLyBjYWxsIGYgd2l0aCB0aGUgbWVzc2FnZSBzdHJpbmcgYXMgdGhlIGZpcnN0IGFyZ3VtZW50CiAgICAvKioKICAgICAqIEBwYXJhbSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBmCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJvbk1lc3NhZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uTWVzc2FnZShmKSB7CiAgICAgIHRoaXMuY2xpZW50Lm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgZihlLmRhdGEpOwogICAgICB9OwogICAgfQogIH1dKTsKICByZXR1cm4gV2ViU29ja2V0Q2xpZW50Owp9KCk7CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvaW5kZXguanM/cHJvdG9jb2w9d3MlM0EmaG9zdG5hbWU9bG9jYWxob3N0JnBvcnQ9OTAwMyZwYXRobmFtZT0lMkZ3cyZsb2dnaW5nPWluZm8mb3ZlcmxheT10cnVlJnJlY29ubmVjdD0xMCZob3Q9dHJ1ZSZsaXZlLXJlbG9hZD10cnVlIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2luZGV4LmpzP3Byb3RvY29sPXdzJTNBJmhvc3RuYW1lPWxvY2FsaG9zdCZwb3J0PTkwMDMmcGF0aG5hbWU9JTJGd3MmbG9nZ2luZz1pbmZvJm92ZXJsYXk9dHJ1ZSZyZWNvbm5lY3Q9MTAmaG90PXRydWUmbGl2ZS1yZWxvYWQ9dHJ1ZSAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7CnZhciBfX3Jlc291cmNlUXVlcnkgPSAiP3Byb3RvY29sPXdzJTNBJmhvc3RuYW1lPWxvY2FsaG9zdCZwb3J0PTkwMDMmcGF0aG5hbWU9JTJGd3MmbG9nZ2luZz1pbmZvJm92ZXJsYXk9dHJ1ZSZyZWNvbm5lY3Q9MTAmaG90PXRydWUmbGl2ZS1yZWxvYWQ9dHJ1ZSI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfaG90X2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgd2VicGFjay9ob3QvbG9nLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLXZpcnR1YWwtN2UxODcxNjdkMS8wL2NhY2hlL3dlYnBhY2stbnBtLTUuNzguMC1hZGQ3NjJjOTcyLTQyMTNlNWJjYzIuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2cuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfaG90X2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKHdlYnBhY2tfaG90X2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19zdHJpcEFuc2lfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvc3RyaXBBbnNpLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9zdHJpcEFuc2kuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19wYXJzZVVSTF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlscy9wYXJzZVVSTC5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcGFyc2VVUkwuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9zb2NrZXRfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc29ja2V0LmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9zb2NrZXQuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9vdmVybGF5X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL292ZXJsYXkuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvbG9nLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9sb2cuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19zZW5kTWVzc2FnZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNl9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi91dGlscy9zZW5kTWVzc2FnZS5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc2VuZE1lc3NhZ2UuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19yZWxvYWRBcHBfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvcmVsb2FkQXBwLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9yZWxvYWRBcHAuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19jcmVhdGVTb2NrZXRVUkxfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzhfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvY3JlYXRlU29ja2V0VVJMLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9jcmVhdGVTb2NrZXRVUkwuanMiKTsKZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH0KZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH0KZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBrZXkgPSBfdG9Qcm9wZXJ0eUtleShrZXkpOyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0KZnVuY3Rpb24gX3RvUHJvcGVydHlLZXkoYXJnKSB7IHZhciBrZXkgPSBfdG9QcmltaXRpdmUoYXJnLCAic3RyaW5nIik7IHJldHVybiB0eXBlb2Yga2V5ID09PSAic3ltYm9sIiA/IGtleSA6IFN0cmluZyhrZXkpOyB9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgeyBpZiAodHlwZW9mIGlucHV0ICE9PSAib2JqZWN0IiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0OyB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsgdmFyIHJlcyA9IHByaW0uY2FsbChpbnB1dCwgaGludCB8fCAiZGVmYXVsdCIpOyBpZiAodHlwZW9mIHJlcyAhPT0gIm9iamVjdCIpIHJldHVybiByZXM7IHRocm93IG5ldyBUeXBlRXJyb3IoIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuIik7IH0gcmV0dXJuIChoaW50ID09PSAic3RyaW5nIiA/IFN0cmluZyA6IE51bWJlcikoaW5wdXQpOyB9Ci8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnksIF9fd2VicGFja19oYXNoX18gKi8KLy8vIDxyZWZlcmVuY2UgdHlwZXM9IndlYnBhY2svbW9kdWxlIiAvPgoKCgoKCgoKCgoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IE9wdGlvbnMKICogQHByb3BlcnR5IHtib29sZWFufSBob3QKICogQHByb3BlcnR5IHtib29sZWFufSBsaXZlUmVsb2FkCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gcHJvZ3Jlc3MKICogQHByb3BlcnR5IHtib29sZWFuIHwgeyB3YXJuaW5ncz86IGJvb2xlYW4sIGVycm9ycz86IGJvb2xlYW4sIHJ1bnRpbWVFcnJvcnM/OiBib29sZWFuLCB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lPzogc3RyaW5nIH19IG92ZXJsYXkKICogQHByb3BlcnR5IHtzdHJpbmd9IFtsb2dnaW5nXQogKiBAcHJvcGVydHkge251bWJlcn0gW3JlY29ubmVjdF0KICovCgovKioKICogQHR5cGVkZWYge09iamVjdH0gU3RhdHVzCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNVbmxvYWRpbmcKICogQHByb3BlcnR5IHtzdHJpbmd9IGN1cnJlbnRIYXNoCiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcHJldmlvdXNIYXNoXQogKi8KCi8qKgogKiBAdHlwZSB7U3RhdHVzfQogKi8KdmFyIHN0YXR1cyA9IHsKICBpc1VubG9hZGluZzogZmFsc2UsCiAgLy8gVE9ETyBXb3JrYXJvdW5kIGZvciB3ZWJwYWNrIHY0LCBgX193ZWJwYWNrX2hhc2hfX2AgaXMgbm90IHJlcGxhY2VkIHdpdGhvdXQgSG90TW9kdWxlUmVwbGFjZW1lbnQKICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlCiAgY3VycmVudEhhc2g6ICB0cnVlID8gX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgOiAwCn07CgovKiogQHR5cGUge09wdGlvbnN9ICovCnZhciBvcHRpb25zID0gewogIGhvdDogZmFsc2UsCiAgbGl2ZVJlbG9hZDogZmFsc2UsCiAgcHJvZ3Jlc3M6IGZhbHNlLAogIG92ZXJsYXk6IGZhbHNlCn07CnZhciBwYXJzZWRSZXNvdXJjZVF1ZXJ5ID0gKDAsX3V0aWxzX3BhcnNlVVJMX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19bImRlZmF1bHQiXSkoX19yZXNvdXJjZVF1ZXJ5KTsKdmFyIGVuYWJsZWRGZWF0dXJlcyA9IHsKICAiSG90IE1vZHVsZSBSZXBsYWNlbWVudCI6IGZhbHNlLAogICJMaXZlIFJlbG9hZGluZyI6IGZhbHNlLAogIFByb2dyZXNzOiBmYWxzZSwKICBPdmVybGF5OiBmYWxzZQp9OwppZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5ob3QgPT09ICJ0cnVlIikgewogIG9wdGlvbnMuaG90ID0gdHJ1ZTsKICBlbmFibGVkRmVhdHVyZXNbIkhvdCBNb2R1bGUgUmVwbGFjZW1lbnQiXSA9IHRydWU7Cn0KaWYgKHBhcnNlZFJlc291cmNlUXVlcnlbImxpdmUtcmVsb2FkIl0gPT09ICJ0cnVlIikgewogIG9wdGlvbnMubGl2ZVJlbG9hZCA9IHRydWU7CiAgZW5hYmxlZEZlYXR1cmVzWyJMaXZlIFJlbG9hZGluZyJdID0gdHJ1ZTsKfQppZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5wcm9ncmVzcyA9PT0gInRydWUiKSB7CiAgb3B0aW9ucy5wcm9ncmVzcyA9IHRydWU7CiAgZW5hYmxlZEZlYXR1cmVzLlByb2dyZXNzID0gdHJ1ZTsKfQppZiAocGFyc2VkUmVzb3VyY2VRdWVyeS5vdmVybGF5KSB7CiAgdHJ5IHsKICAgIG9wdGlvbnMub3ZlcmxheSA9IEpTT04ucGFyc2UocGFyc2VkUmVzb3VyY2VRdWVyeS5vdmVybGF5KTsKICB9IGNhdGNoIChlKSB7CiAgICBfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18ubG9nLmVycm9yKCJFcnJvciBwYXJzaW5nIG92ZXJsYXkgb3B0aW9ucyBmcm9tIHJlc291cmNlIHF1ZXJ5OiIsIGUpOwogIH0KCiAgLy8gRmlsbCBpbiBkZWZhdWx0ICJ0cnVlIiBwYXJhbXMgZm9yIHBhcnRpYWxseS1zcGVjaWZpZWQgb2JqZWN0cy4KICBpZiAodHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gIm9iamVjdCIpIHsKICAgIG9wdGlvbnMub3ZlcmxheSA9IF9vYmplY3RTcHJlYWQoewogICAgICBlcnJvcnM6IHRydWUsCiAgICAgIHdhcm5pbmdzOiB0cnVlLAogICAgICBydW50aW1lRXJyb3JzOiB0cnVlCiAgICB9LCBvcHRpb25zLm92ZXJsYXkpOwogIH0KICBlbmFibGVkRmVhdHVyZXMuT3ZlcmxheSA9IHRydWU7Cn0KaWYgKHBhcnNlZFJlc291cmNlUXVlcnkubG9nZ2luZykgewogIG9wdGlvbnMubG9nZ2luZyA9IHBhcnNlZFJlc291cmNlUXVlcnkubG9nZ2luZzsKfQppZiAodHlwZW9mIHBhcnNlZFJlc291cmNlUXVlcnkucmVjb25uZWN0ICE9PSAidW5kZWZpbmVkIikgewogIG9wdGlvbnMucmVjb25uZWN0ID0gTnVtYmVyKHBhcnNlZFJlc291cmNlUXVlcnkucmVjb25uZWN0KTsKfQoKLyoqCiAqIEBwYXJhbSB7c3RyaW5nfSBsZXZlbAogKi8KZnVuY3Rpb24gc2V0QWxsTG9nTGV2ZWwobGV2ZWwpIHsKICAvLyBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIHRoZSBITVIgbG9nZ2VyIG9wZXJhdGUgc2VwYXJhdGVseSBmcm9tIGRldiBzZXJ2ZXIgbG9nZ2VyCiAgd2VicGFja19ob3RfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpLnNldExvZ0xldmVsKGxldmVsID09PSAidmVyYm9zZSIgfHwgbGV2ZWwgPT09ICJsb2ciID8gImluZm8iIDogbGV2ZWwpOwogICgwLF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5zZXRMb2dMZXZlbCkobGV2ZWwpOwp9CmlmIChvcHRpb25zLmxvZ2dpbmcpIHsKICBzZXRBbGxMb2dMZXZlbChvcHRpb25zLmxvZ2dpbmcpOwp9CigwLF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5sb2dFbmFibGVkRmVhdHVyZXMpKGVuYWJsZWRGZWF0dXJlcyk7CnNlbGYuYWRkRXZlbnRMaXN0ZW5lcigiYmVmb3JldW5sb2FkIiwgZnVuY3Rpb24gKCkgewogIHN0YXR1cy5pc1VubG9hZGluZyA9IHRydWU7Cn0pOwp2YXIgb3ZlcmxheSA9IHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiID8gKDAsX292ZXJsYXlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5jcmVhdGVPdmVybGF5KSh0eXBlb2Ygb3B0aW9ucy5vdmVybGF5ID09PSAib2JqZWN0IiA/IHsKICB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lOiBvcHRpb25zLm92ZXJsYXkudHJ1c3RlZFR5cGVzUG9saWN5TmFtZSwKICBjYXRjaFJ1bnRpbWVFcnJvcjogb3B0aW9ucy5vdmVybGF5LnJ1bnRpbWVFcnJvcnMKfSA6IHsKICB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lOiBmYWxzZSwKICBjYXRjaFJ1bnRpbWVFcnJvcjogb3B0aW9ucy5vdmVybGF5Cn0pIDogewogIHNlbmQ6IGZ1bmN0aW9uIHNlbmQoKSB7fQp9Owp2YXIgb25Tb2NrZXRNZXNzYWdlID0gewogIGhvdDogZnVuY3Rpb24gaG90KCkgewogICAgaWYgKHBhcnNlZFJlc291cmNlUXVlcnkuaG90ID09PSAiZmFsc2UiKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIG9wdGlvbnMuaG90ID0gdHJ1ZTsKICB9LAogIGxpdmVSZWxvYWQ6IGZ1bmN0aW9uIGxpdmVSZWxvYWQoKSB7CiAgICBpZiAocGFyc2VkUmVzb3VyY2VRdWVyeVsibGl2ZS1yZWxvYWQiXSA9PT0gImZhbHNlIikgewogICAgICByZXR1cm47CiAgICB9CiAgICBvcHRpb25zLmxpdmVSZWxvYWQgPSB0cnVlOwogIH0sCiAgaW52YWxpZDogZnVuY3Rpb24gaW52YWxpZCgpIHsKICAgIF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5sb2cuaW5mbygiQXBwIHVwZGF0ZWQuIFJlY29tcGlsaW5nLi4uIik7CgogICAgLy8gRml4ZXMgIzEwNDIuIG92ZXJsYXkgZG9lc24ndCBjbGVhciBpZiBlcnJvcnMgYXJlIGZpeGVkIGJ1dCB3YXJuaW5ncyByZW1haW4uCiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7CiAgICAgIG92ZXJsYXkuc2VuZCh7CiAgICAgICAgdHlwZTogIkRJU01JU1MiCiAgICAgIH0pOwogICAgfQogICAgKDAsX3V0aWxzX3NlbmRNZXNzYWdlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bImRlZmF1bHQiXSkoIkludmFsaWQiKTsKICB9LAogIC8qKgogICAqIEBwYXJhbSB7c3RyaW5nfSBoYXNoCiAgICovCiAgaGFzaDogZnVuY3Rpb24gaGFzaChfaGFzaCkgewogICAgc3RhdHVzLnByZXZpb3VzSGFzaCA9IHN0YXR1cy5jdXJyZW50SGFzaDsKICAgIHN0YXR1cy5jdXJyZW50SGFzaCA9IF9oYXNoOwogIH0sCiAgbG9nZ2luZzogc2V0QWxsTG9nTGV2ZWwsCiAgLyoqCiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZQogICAqLwogIG92ZXJsYXk6IGZ1bmN0aW9uIG92ZXJsYXkodmFsdWUpIHsKICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIG9wdGlvbnMub3ZlcmxheSA9IHZhbHVlOwogIH0sCiAgLyoqCiAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlCiAgICovCiAgcmVjb25uZWN0OiBmdW5jdGlvbiByZWNvbm5lY3QodmFsdWUpIHsKICAgIGlmIChwYXJzZWRSZXNvdXJjZVF1ZXJ5LnJlY29ubmVjdCA9PT0gImZhbHNlIikgewogICAgICByZXR1cm47CiAgICB9CiAgICBvcHRpb25zLnJlY29ubmVjdCA9IHZhbHVlOwogIH0sCiAgLyoqCiAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZQogICAqLwogIHByb2dyZXNzOiBmdW5jdGlvbiBwcm9ncmVzcyh2YWx1ZSkgewogICAgb3B0aW9ucy5wcm9ncmVzcyA9IHZhbHVlOwogIH0sCiAgLyoqCiAgICogQHBhcmFtIHt7IHBsdWdpbk5hbWU/OiBzdHJpbmcsIHBlcmNlbnQ6IG51bWJlciwgbXNnOiBzdHJpbmcgfX0gZGF0YQogICAqLwogICJwcm9ncmVzcy11cGRhdGUiOiBmdW5jdGlvbiBwcm9ncmVzc1VwZGF0ZShkYXRhKSB7CiAgICBpZiAob3B0aW9ucy5wcm9ncmVzcykgewogICAgICBfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18ubG9nLmluZm8oIiIuY29uY2F0KGRhdGEucGx1Z2luTmFtZSA/ICJbIi5jb25jYXQoZGF0YS5wbHVnaW5OYW1lLCAiXSAiKSA6ICIiKS5jb25jYXQoZGF0YS5wZXJjZW50LCAiJSAtICIpLmNvbmNhdChkYXRhLm1zZywgIi4iKSk7CiAgICB9CiAgICAoMCxfdXRpbHNfc2VuZE1lc3NhZ2VfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1siZGVmYXVsdCJdKSgiUHJvZ3Jlc3MiLCBkYXRhKTsKICB9LAogICJzdGlsbC1vayI6IGZ1bmN0aW9uIHN0aWxsT2soKSB7CiAgICBfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18ubG9nLmluZm8oIk5vdGhpbmcgY2hhbmdlZC4iKTsKICAgIGlmIChvcHRpb25zLm92ZXJsYXkpIHsKICAgICAgb3ZlcmxheS5zZW5kKHsKICAgICAgICB0eXBlOiAiRElTTUlTUyIKICAgICAgfSk7CiAgICB9CiAgICAoMCxfdXRpbHNfc2VuZE1lc3NhZ2VfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1siZGVmYXVsdCJdKSgiU3RpbGxPayIpOwogIH0sCiAgb2s6IGZ1bmN0aW9uIG9rKCkgewogICAgKDAsX3V0aWxzX3NlbmRNZXNzYWdlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bImRlZmF1bHQiXSkoIk9rIik7CiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7CiAgICAgIG92ZXJsYXkuc2VuZCh7CiAgICAgICAgdHlwZTogIkRJU01JU1MiCiAgICAgIH0pOwogICAgfQogICAgKDAsX3V0aWxzX3JlbG9hZEFwcF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfN19fWyJkZWZhdWx0Il0pKG9wdGlvbnMsIHN0YXR1cyk7CiAgfSwKICAvLyBUT0RPOiByZW1vdmUgaW4gdjUgaW4gZmF2b3Igb2YgJ3N0YXRpYy1jaGFuZ2VkJwogIC8qKgogICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlCiAgICovCiAgImNvbnRlbnQtY2hhbmdlZCI6IGZ1bmN0aW9uIGNvbnRlbnRDaGFuZ2VkKGZpbGUpIHsKICAgIF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5sb2cuaW5mbygiIi5jb25jYXQoZmlsZSA/ICJcIiIuY29uY2F0KGZpbGUsICJcIiIpIDogIkNvbnRlbnQiLCAiIGZyb20gc3RhdGljIGRpcmVjdG9yeSB3YXMgY2hhbmdlZC4gUmVsb2FkaW5nLi4uIikpOwogICAgc2VsZi5sb2NhdGlvbi5yZWxvYWQoKTsKICB9LAogIC8qKgogICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlCiAgICovCiAgInN0YXRpYy1jaGFuZ2VkIjogZnVuY3Rpb24gc3RhdGljQ2hhbmdlZChmaWxlKSB7CiAgICBfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18ubG9nLmluZm8oIiIuY29uY2F0KGZpbGUgPyAiXCIiLmNvbmNhdChmaWxlLCAiXCIiKSA6ICJDb250ZW50IiwgIiBmcm9tIHN0YXRpYyBkaXJlY3Rvcnkgd2FzIGNoYW5nZWQuIFJlbG9hZGluZy4uLiIpKTsKICAgIHNlbGYubG9jYXRpb24ucmVsb2FkKCk7CiAgfSwKICAvKioKICAgKiBAcGFyYW0ge0Vycm9yW119IHdhcm5pbmdzCiAgICogQHBhcmFtIHthbnl9IHBhcmFtcwogICAqLwogIHdhcm5pbmdzOiBmdW5jdGlvbiB3YXJuaW5ncyhfd2FybmluZ3MsIHBhcmFtcykgewogICAgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLmxvZy53YXJuKCJXYXJuaW5ncyB3aGlsZSBjb21waWxpbmcuIik7CiAgICB2YXIgcHJpbnRhYmxlV2FybmluZ3MgPSBfd2FybmluZ3MubWFwKGZ1bmN0aW9uIChlcnJvcikgewogICAgICB2YXIgX2Zvcm1hdFByb2JsZW0gPSAoMCxfb3ZlcmxheV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fLmZvcm1hdFByb2JsZW0pKCJ3YXJuaW5nIiwgZXJyb3IpLAogICAgICAgIGhlYWRlciA9IF9mb3JtYXRQcm9ibGVtLmhlYWRlciwKICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTsKICAgICAgcmV0dXJuICIiLmNvbmNhdChoZWFkZXIsICJcbiIpLmNvbmNhdCgoMCxfdXRpbHNfc3RyaXBBbnNpX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19bImRlZmF1bHQiXSkoYm9keSkpOwogICAgfSk7CiAgICAoMCxfdXRpbHNfc2VuZE1lc3NhZ2VfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzZfX1siZGVmYXVsdCJdKSgiV2FybmluZ3MiLCBwcmludGFibGVXYXJuaW5ncyk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW50YWJsZVdhcm5pbmdzLmxlbmd0aDsgaSsrKSB7CiAgICAgIF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXy5sb2cud2FybihwcmludGFibGVXYXJuaW5nc1tpXSk7CiAgICB9CiAgICB2YXIgbmVlZFNob3dPdmVybGF5Rm9yV2FybmluZ3MgPSB0eXBlb2Ygb3B0aW9ucy5vdmVybGF5ID09PSAiYm9vbGVhbiIgPyBvcHRpb25zLm92ZXJsYXkgOiBvcHRpb25zLm92ZXJsYXkgJiYgb3B0aW9ucy5vdmVybGF5Lndhcm5pbmdzOwogICAgaWYgKG5lZWRTaG93T3ZlcmxheUZvcldhcm5pbmdzKSB7CiAgICAgIG92ZXJsYXkuc2VuZCh7CiAgICAgICAgdHlwZTogIkJVSUxEX0VSUk9SIiwKICAgICAgICBsZXZlbDogIndhcm5pbmciLAogICAgICAgIG1lc3NhZ2VzOiBfd2FybmluZ3MKICAgICAgfSk7CiAgICB9CiAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5wcmV2ZW50UmVsb2FkaW5nKSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgICgwLF91dGlsc19yZWxvYWRBcHBfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzdfX1siZGVmYXVsdCJdKShvcHRpb25zLCBzdGF0dXMpOwogIH0sCiAgLyoqCiAgICogQHBhcmFtIHtFcnJvcltdfSBlcnJvcnMKICAgKi8KICBlcnJvcnM6IGZ1bmN0aW9uIGVycm9ycyhfZXJyb3JzKSB7CiAgICBfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18ubG9nLmVycm9yKCJFcnJvcnMgd2hpbGUgY29tcGlsaW5nLiBSZWxvYWQgcHJldmVudGVkLiIpOwogICAgdmFyIHByaW50YWJsZUVycm9ycyA9IF9lcnJvcnMubWFwKGZ1bmN0aW9uIChlcnJvcikgewogICAgICB2YXIgX2Zvcm1hdFByb2JsZW0yID0gKDAsX292ZXJsYXlfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXy5mb3JtYXRQcm9ibGVtKSgiZXJyb3IiLCBlcnJvciksCiAgICAgICAgaGVhZGVyID0gX2Zvcm1hdFByb2JsZW0yLmhlYWRlciwKICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0yLmJvZHk7CiAgICAgIHJldHVybiAiIi5jb25jYXQoaGVhZGVyLCAiXG4iKS5jb25jYXQoKDAsX3V0aWxzX3N0cmlwQW5zaV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fWyJkZWZhdWx0Il0pKGJvZHkpKTsKICAgIH0pOwogICAgKDAsX3V0aWxzX3NlbmRNZXNzYWdlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bImRlZmF1bHQiXSkoIkVycm9ycyIsIHByaW50YWJsZUVycm9ycyk7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByaW50YWJsZUVycm9ycy5sZW5ndGg7IGkrKykgewogICAgICBfdXRpbHNfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV81X18ubG9nLmVycm9yKHByaW50YWJsZUVycm9yc1tpXSk7CiAgICB9CiAgICB2YXIgbmVlZFNob3dPdmVybGF5Rm9yRXJyb3JzID0gdHlwZW9mIG9wdGlvbnMub3ZlcmxheSA9PT0gImJvb2xlYW4iID8gb3B0aW9ucy5vdmVybGF5IDogb3B0aW9ucy5vdmVybGF5ICYmIG9wdGlvbnMub3ZlcmxheS5lcnJvcnM7CiAgICBpZiAobmVlZFNob3dPdmVybGF5Rm9yRXJyb3JzKSB7CiAgICAgIG92ZXJsYXkuc2VuZCh7CiAgICAgICAgdHlwZTogIkJVSUxEX0VSUk9SIiwKICAgICAgICBsZXZlbDogImVycm9yIiwKICAgICAgICBtZXNzYWdlczogX2Vycm9ycwogICAgICB9KTsKICAgIH0KICB9LAogIC8qKgogICAqIEBwYXJhbSB7RXJyb3J9IGVycm9yCiAgICovCiAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKF9lcnJvcikgewogICAgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLmxvZy5lcnJvcihfZXJyb3IpOwogIH0sCiAgY2xvc2U6IGZ1bmN0aW9uIGNsb3NlKCkgewogICAgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNV9fLmxvZy5pbmZvKCJEaXNjb25uZWN0ZWQhIik7CiAgICBpZiAob3B0aW9ucy5vdmVybGF5KSB7CiAgICAgIG92ZXJsYXkuc2VuZCh7CiAgICAgICAgdHlwZTogIkRJU01JU1MiCiAgICAgIH0pOwogICAgfQogICAgKDAsX3V0aWxzX3NlbmRNZXNzYWdlX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV82X19bImRlZmF1bHQiXSkoIkNsb3NlIik7CiAgfQp9Owp2YXIgc29ja2V0VVJMID0gKDAsX3V0aWxzX2NyZWF0ZVNvY2tldFVSTF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfOF9fWyJkZWZhdWx0Il0pKHBhcnNlZFJlc291cmNlUXVlcnkpOwooMCxfc29ja2V0X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX19bImRlZmF1bHQiXSkoc29ja2V0VVJMLCBvblNvY2tldE1lc3NhZ2UsIG9wdGlvbnMucmVjb25uZWN0KTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvbW9kdWxlcy9sb2dnZXIvaW5kZXguanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7CgovKioqKioqLyAoZnVuY3Rpb24oKSB7IC8vIHdlYnBhY2tCb290c3RyYXAKLyoqKioqKi8gCSJ1c2Ugc3RyaWN0IjsKLyoqKioqKi8gCXZhciBfX3dlYnBhY2tfbW9kdWxlc19fID0gKHsKCi8qKiovICIuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvU3luY0JhaWxIb29rRmFrZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vY2xpZW50LXNyYy9tb2R1bGVzL2xvZ2dlci9TeW5jQmFpbEhvb2tGYWtlLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSkgewoKCgovKioKICogQ2xpZW50IHN0dWIgZm9yIHRhcGFibGUgU3luY0JhaWxIb29rCiAqLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNsaWVudFRhcGFibGVTeW5jQmFpbEhvb2soKSB7CiAgcmV0dXJuIHsKICAgIGNhbGw6IGZ1bmN0aW9uIGNhbGwoKSB7fQogIH07Cn07CgovKioqLyB9KSwKCi8qKiovICIuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL0xvZ2dlci5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSB7CgovKgoJTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAKCUF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmEKKi8KCgoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOwp9CmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsKICBpZiAoIW8pIHJldHVybjsKICBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsKICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7CiAgaWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7CiAgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsKICBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOwp9CmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pICE9PSAidW5kZWZpbmVkIiAmJiBpdGVyWyh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyWyJAQGl0ZXJhdG9yIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7Cn0KZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOwp9CmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7CiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7CiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOwogIHJldHVybiBhcnIyOwp9CmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsKICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7CiAgfQp9CmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsKICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOwogICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOwogICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOwogICAgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBfdG9Qcm9wZXJ0eUtleShkZXNjcmlwdG9yLmtleSksIGRlc2NyaXB0b3IpOwogIH0KfQpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7CiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7CiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOwogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgInByb3RvdHlwZSIsIHsKICAgIHdyaXRhYmxlOiBmYWxzZQogIH0pOwogIHJldHVybiBDb25zdHJ1Y3RvcjsKfQpmdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsKICB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgInN0cmluZyIpOwogIHJldHVybiB0eXBlb2Yga2V5ID09PSAic3ltYm9sIiA/IGtleSA6IFN0cmluZyhrZXkpOwp9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZShpbnB1dCwgaGludCkgewogIGlmICh0eXBlb2YgaW5wdXQgIT09ICJvYmplY3QiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7CiAgdmFyIHByaW0gPSBpbnB1dFsodHlwZW9mIFN5bWJvbCAhPT0gInVuZGVmaW5lZCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkudG9QcmltaXRpdmVdOwogIGlmIChwcmltICE9PSB1bmRlZmluZWQpIHsKICAgIHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgImRlZmF1bHQiKTsKICAgIGlmICh0eXBlb2YgcmVzICE9PSAib2JqZWN0IikgcmV0dXJuIHJlczsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuIik7CiAgfQogIHJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsKfQp2YXIgTG9nVHlwZSA9IE9iamVjdC5mcmVlemUoewogIGVycm9yOiAvKiogQHR5cGUgeyJlcnJvciJ9ICovImVycm9yIiwKICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50cwogIHdhcm46IC8qKiBAdHlwZSB7Indhcm4ifSAqLyJ3YXJuIiwKICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50cwogIGluZm86IC8qKiBAdHlwZSB7ImluZm8ifSAqLyJpbmZvIiwKICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50cwogIGxvZzogLyoqIEB0eXBlIHsibG9nIn0gKi8ibG9nIiwKICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50cwogIGRlYnVnOiAvKiogQHR5cGUgeyJkZWJ1ZyJ9ICovImRlYnVnIiwKICAvLyBtZXNzYWdlLCBjIHN0eWxlIGFyZ3VtZW50cwoKICB0cmFjZTogLyoqIEB0eXBlIHsidHJhY2UifSAqLyJ0cmFjZSIsCiAgLy8gbm8gYXJndW1lbnRzCgogIGdyb3VwOiAvKiogQHR5cGUgeyJncm91cCJ9ICovImdyb3VwIiwKICAvLyBbbGFiZWxdCiAgZ3JvdXBDb2xsYXBzZWQ6IC8qKiBAdHlwZSB7Imdyb3VwQ29sbGFwc2VkIn0gKi8iZ3JvdXBDb2xsYXBzZWQiLAogIC8vIFtsYWJlbF0KICBncm91cEVuZDogLyoqIEB0eXBlIHsiZ3JvdXBFbmQifSAqLyJncm91cEVuZCIsCiAgLy8gW2xhYmVsXQoKICBwcm9maWxlOiAvKiogQHR5cGUgeyJwcm9maWxlIn0gKi8icHJvZmlsZSIsCiAgLy8gW3Byb2ZpbGVOYW1lXQogIHByb2ZpbGVFbmQ6IC8qKiBAdHlwZSB7InByb2ZpbGVFbmQifSAqLyJwcm9maWxlRW5kIiwKICAvLyBbcHJvZmlsZU5hbWVdCgogIHRpbWU6IC8qKiBAdHlwZSB7InRpbWUifSAqLyJ0aW1lIiwKICAvLyBuYW1lLCB0aW1lIGFzIFtzZWNvbmRzLCBuYW5vc2Vjb25kc10KCiAgY2xlYXI6IC8qKiBAdHlwZSB7ImNsZWFyIn0gKi8iY2xlYXIiLAogIC8vIG5vIGFyZ3VtZW50cwogIHN0YXR1czogLyoqIEB0eXBlIHsic3RhdHVzIn0gKi8ic3RhdHVzIiAvLyBtZXNzYWdlLCBhcmd1bWVudHMKfSk7CgpleHBvcnRzLkxvZ1R5cGUgPSBMb2dUeXBlOwoKLyoqIEB0eXBlZGVmIHt0eXBlb2YgTG9nVHlwZVtrZXlvZiB0eXBlb2YgTG9nVHlwZV19IExvZ1R5cGVFbnVtICovCgp2YXIgTE9HX1NZTUJPTCA9ICh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KSgid2VicGFjayBsb2dnZXIgcmF3IGxvZyBtZXRob2QiKTsKdmFyIFRJTUVSU19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gInVuZGVmaW5lZCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoIndlYnBhY2sgbG9nZ2VyIHRpbWVzIik7CnZhciBUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0wgPSAodHlwZW9mIFN5bWJvbCAhPT0gInVuZGVmaW5lZCIgPyBTeW1ib2wgOiBmdW5jdGlvbiAoaSkgeyByZXR1cm4gaTsgfSkoIndlYnBhY2sgbG9nZ2VyIGFnZ3JlZ2F0ZWQgdGltZXMiKTsKdmFyIFdlYnBhY2tMb2dnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIC8qKgogICAqIEBwYXJhbSB7ZnVuY3Rpb24oTG9nVHlwZUVudW0sIGFueVtdPSk6IHZvaWR9IGxvZyBsb2cgZnVuY3Rpb24KICAgKiBAcGFyYW0ge2Z1bmN0aW9uKHN0cmluZyB8IGZ1bmN0aW9uKCk6IHN0cmluZyk6IFdlYnBhY2tMb2dnZXJ9IGdldENoaWxkTG9nZ2VyIGZ1bmN0aW9uIHRvIGNyZWF0ZSBjaGlsZCBsb2dnZXIKICAgKi8KICBmdW5jdGlvbiBXZWJwYWNrTG9nZ2VyKGxvZywgZ2V0Q2hpbGRMb2dnZXIpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBXZWJwYWNrTG9nZ2VyKTsKICAgIHRoaXNbTE9HX1NZTUJPTF0gPSBsb2c7CiAgICB0aGlzLmdldENoaWxkTG9nZ2VyID0gZ2V0Q2hpbGRMb2dnZXI7CiAgfQogIF9jcmVhdGVDbGFzcyhXZWJwYWNrTG9nZ2VyLCBbewogICAga2V5OiAiZXJyb3IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGVycm9yKCkgewogICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgICB9CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5lcnJvciwgYXJncyk7CiAgICB9CiAgfSwgewogICAga2V5OiAid2FybiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gd2FybigpIHsKICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7CiAgICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdOwogICAgICB9CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS53YXJuLCBhcmdzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpbmZvIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpbmZvKCkgewogICAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjMpLCBfa2V5MyA9IDA7IF9rZXkzIDwgX2xlbjM7IF9rZXkzKyspIHsKICAgICAgICBhcmdzW19rZXkzXSA9IGFyZ3VtZW50c1tfa2V5M107CiAgICAgIH0KICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmluZm8sIGFyZ3MpOwogICAgfQogIH0sIHsKICAgIGtleTogImxvZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gbG9nKCkgewogICAgICBmb3IgKHZhciBfbGVuNCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjQpLCBfa2V5NCA9IDA7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHsKICAgICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07CiAgICAgIH0KICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmxvZywgYXJncyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVidWciLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlYnVnKCkgewogICAgICBmb3IgKHZhciBfbGVuNSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjUpLCBfa2V5NSA9IDA7IF9rZXk1IDwgX2xlbjU7IF9rZXk1KyspIHsKICAgICAgICBhcmdzW19rZXk1XSA9IGFyZ3VtZW50c1tfa2V5NV07CiAgICAgIH0KICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmRlYnVnLCBhcmdzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhc3NlcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFzc2VydChhc3NlcnRpb24pIHsKICAgICAgaWYgKCFhc3NlcnRpb24pIHsKICAgICAgICBmb3IgKHZhciBfbGVuNiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjYgPiAxID8gX2xlbjYgLSAxIDogMCksIF9rZXk2ID0gMTsgX2tleTYgPCBfbGVuNjsgX2tleTYrKykgewogICAgICAgICAgYXJnc1tfa2V5NiAtIDFdID0gYXJndW1lbnRzW19rZXk2XTsKICAgICAgICB9CiAgICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmVycm9yLCBhcmdzKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogInRyYWNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0cmFjZSgpIHsKICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLnRyYWNlLCBbIlRyYWNlIl0pOwogICAgfQogIH0sIHsKICAgIGtleTogImNsZWFyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHsKICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmNsZWFyKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzdGF0dXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXR1cygpIHsKICAgICAgZm9yICh2YXIgX2xlbjcgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW43KSwgX2tleTcgPSAwOyBfa2V5NyA8IF9sZW43OyBfa2V5NysrKSB7CiAgICAgICAgYXJnc1tfa2V5N10gPSBhcmd1bWVudHNbX2tleTddOwogICAgICB9CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5zdGF0dXMsIGFyZ3MpOwogICAgfQogIH0sIHsKICAgIGtleTogImdyb3VwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBncm91cCgpIHsKICAgICAgZm9yICh2YXIgX2xlbjggPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW44KSwgX2tleTggPSAwOyBfa2V5OCA8IF9sZW44OyBfa2V5OCsrKSB7CiAgICAgICAgYXJnc1tfa2V5OF0gPSBhcmd1bWVudHNbX2tleThdOwogICAgICB9CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cCwgYXJncyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ3JvdXBDb2xsYXBzZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdyb3VwQ29sbGFwc2VkKCkgewogICAgICBmb3IgKHZhciBfbGVuOSA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjkpLCBfa2V5OSA9IDA7IF9rZXk5IDwgX2xlbjk7IF9rZXk5KyspIHsKICAgICAgICBhcmdzW19rZXk5XSA9IGFyZ3VtZW50c1tfa2V5OV07CiAgICAgIH0KICAgICAgdGhpc1tMT0dfU1lNQk9MXShMb2dUeXBlLmdyb3VwQ29sbGFwc2VkLCBhcmdzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJncm91cEVuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXBFbmQoKSB7CiAgICAgIGZvciAodmFyIF9sZW4xMCA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjEwKSwgX2tleTEwID0gMDsgX2tleTEwIDwgX2xlbjEwOyBfa2V5MTArKykgewogICAgICAgIGFyZ3NbX2tleTEwXSA9IGFyZ3VtZW50c1tfa2V5MTBdOwogICAgICB9CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS5ncm91cEVuZCwgYXJncyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvZmlsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvZmlsZShsYWJlbCkgewogICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUucHJvZmlsZSwgW2xhYmVsXSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvZmlsZUVuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcHJvZmlsZUVuZChsYWJlbCkgewogICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUucHJvZmlsZUVuZCwgW2xhYmVsXSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidGltZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZShsYWJlbCkgewogICAgICB0aGlzW1RJTUVSU19TWU1CT0xdID0gdGhpc1tUSU1FUlNfU1lNQk9MXSB8fCBuZXcgTWFwKCk7CiAgICAgIHRoaXNbVElNRVJTX1NZTUJPTF0uc2V0KGxhYmVsLCBwcm9jZXNzLmhydGltZSgpKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0aW1lTG9nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0aW1lTG9nKGxhYmVsKSB7CiAgICAgIHZhciBwcmV2ID0gdGhpc1tUSU1FUlNfU1lNQk9MXSAmJiB0aGlzW1RJTUVSU19TWU1CT0xdLmdldChsYWJlbCk7CiAgICAgIGlmICghcHJldikgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiTm8gc3VjaCBsYWJlbCAnIi5jb25jYXQobGFiZWwsICInIGZvciBXZWJwYWNrTG9nZ2VyLnRpbWVMb2coKSIpKTsKICAgICAgfQogICAgICB2YXIgdGltZSA9IHByb2Nlc3MuaHJ0aW1lKHByZXYpOwogICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudGltZSwgW2xhYmVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRpbWUpKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidGltZUVuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUVuZChsYWJlbCkgewogICAgICB2YXIgcHJldiA9IHRoaXNbVElNRVJTX1NZTUJPTF0gJiYgdGhpc1tUSU1FUlNfU1lNQk9MXS5nZXQobGFiZWwpOwogICAgICBpZiAoIXByZXYpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIk5vIHN1Y2ggbGFiZWwgJyIuY29uY2F0KGxhYmVsLCAiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lRW5kKCkiKSk7CiAgICAgIH0KICAgICAgdmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZShwcmV2KTsKICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5kZWxldGUobGFiZWwpOwogICAgICB0aGlzW0xPR19TWU1CT0xdKExvZ1R5cGUudGltZSwgW2xhYmVsXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHRpbWUpKSk7CiAgICB9CiAgfSwgewogICAga2V5OiAidGltZUFnZ3JlZ2F0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUFnZ3JlZ2F0ZShsYWJlbCkgewogICAgICB2YXIgcHJldiA9IHRoaXNbVElNRVJTX1NZTUJPTF0gJiYgdGhpc1tUSU1FUlNfU1lNQk9MXS5nZXQobGFiZWwpOwogICAgICBpZiAoIXByZXYpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIk5vIHN1Y2ggbGFiZWwgJyIuY29uY2F0KGxhYmVsLCAiJyBmb3IgV2VicGFja0xvZ2dlci50aW1lQWdncmVnYXRlKCkiKSk7CiAgICAgIH0KICAgICAgdmFyIHRpbWUgPSBwcm9jZXNzLmhydGltZShwcmV2KTsKICAgICAgdGhpc1tUSU1FUlNfU1lNQk9MXS5kZWxldGUobGFiZWwpOwogICAgICB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gPSB0aGlzW1RJTUVSU19BR0dSRUdBVEVTX1NZTUJPTF0gfHwgbmV3IE1hcCgpOwogICAgICB2YXIgY3VycmVudCA9IHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5nZXQobGFiZWwpOwogICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKHRpbWVbMV0gKyBjdXJyZW50WzFdID4gMWU5KSB7CiAgICAgICAgICB0aW1lWzBdICs9IGN1cnJlbnRbMF0gKyAxOwogICAgICAgICAgdGltZVsxXSA9IHRpbWVbMV0gLSAxZTkgKyBjdXJyZW50WzFdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aW1lWzBdICs9IGN1cnJlbnRbMF07CiAgICAgICAgICB0aW1lWzFdICs9IGN1cnJlbnRbMV07CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXS5zZXQobGFiZWwsIHRpbWUpOwogICAgfQogIH0sIHsKICAgIGtleTogInRpbWVBZ2dyZWdhdGVFbmQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHRpbWVBZ2dyZWdhdGVFbmQobGFiZWwpIHsKICAgICAgaWYgKHRoaXNbVElNRVJTX0FHR1JFR0FURVNfU1lNQk9MXSA9PT0gdW5kZWZpbmVkKSByZXR1cm47CiAgICAgIHZhciB0aW1lID0gdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmdldChsYWJlbCk7CiAgICAgIGlmICh0aW1lID09PSB1bmRlZmluZWQpIHJldHVybjsKICAgICAgdGhpc1tUSU1FUlNfQUdHUkVHQVRFU19TWU1CT0xdLmRlbGV0ZShsYWJlbCk7CiAgICAgIHRoaXNbTE9HX1NZTUJPTF0oTG9nVHlwZS50aW1lLCBbbGFiZWxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodGltZSkpKTsKICAgIH0KICB9XSk7CiAgcmV0dXJuIFdlYnBhY2tMb2dnZXI7Cn0oKTsKZXhwb3J0cy5Mb2dnZXIgPSBXZWJwYWNrTG9nZ2VyOwoKLyoqKi8gfSksCgovKioqLyAiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9jcmVhdGVDb25zb2xlTG9nZ2VyLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8xMTI4NV9fKSB7CgovKgoJTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHAKCUF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmEKKi8KCgoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgewogIHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7Cn0KZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkgewogIHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOwp9CmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsKICBpZiAoIW8pIHJldHVybjsKICBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsKICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7CiAgaWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7CiAgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsKICBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOwp9CmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgewogIGlmICh0eXBlb2YgKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiID8gU3ltYm9sIDogZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGk7IH0pICE9PSAidW5kZWZpbmVkIiAmJiBpdGVyWyh0eXBlb2YgU3ltYm9sICE9PSAidW5kZWZpbmVkIiA/IFN5bWJvbCA6IGZ1bmN0aW9uIChpKSB7IHJldHVybiBpOyB9KS5pdGVyYXRvcl0gIT0gbnVsbCB8fCBpdGVyWyJAQGl0ZXJhdG9yIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7Cn0KZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikgewogIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOwp9CmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7CiAgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7CiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldOwogIHJldHVybiBhcnIyOwp9CnZhciBfcmVxdWlyZSA9IF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8xMTI4NV9fKC8qISAuL0xvZ2dlciAqLyAiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9Mb2dnZXIuanMiKSwKICBMb2dUeXBlID0gX3JlcXVpcmUuTG9nVHlwZTsKCi8qKiBAdHlwZWRlZiB7aW1wb3J0KCIuLi8uLi9kZWNsYXJhdGlvbnMvV2VicGFja09wdGlvbnMiKS5GaWx0ZXJJdGVtVHlwZXN9IEZpbHRlckl0ZW1UeXBlcyAqLwovKiogQHR5cGVkZWYge2ltcG9ydCgiLi4vLi4vZGVjbGFyYXRpb25zL1dlYnBhY2tPcHRpb25zIikuRmlsdGVyVHlwZXN9IEZpbHRlclR5cGVzICovCi8qKiBAdHlwZWRlZiB7aW1wb3J0KCIuL0xvZ2dlciIpLkxvZ1R5cGVFbnVtfSBMb2dUeXBlRW51bSAqLwoKLyoqIEB0eXBlZGVmIHtmdW5jdGlvbihzdHJpbmcpOiBib29sZWFufSBGaWx0ZXJGdW5jdGlvbiAqLwoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IExvZ2dlckNvbnNvbGUKICogQHByb3BlcnR5IHtmdW5jdGlvbigpOiB2b2lkfSBjbGVhcgogKiBAcHJvcGVydHkge2Z1bmN0aW9uKCk6IHZvaWR9IHRyYWNlCiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBpbmZvCiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkfSBsb2cKICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IHdhcm4KICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWR9IGVycm9yCiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gZGVidWcKICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBncm91cAogKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGdyb3VwQ29sbGFwc2VkCiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gZ3JvdXBFbmQKICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBzdGF0dXMKICogQHByb3BlcnR5IHsoLi4uYXJnczogYW55W10pID0+IHZvaWQ9fSBwcm9maWxlCiAqIEBwcm9wZXJ0eSB7KC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkPX0gcHJvZmlsZUVuZAogKiBAcHJvcGVydHkgeyguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZD19IGxvZ1RpbWUKICovCgovKioKICogQHR5cGVkZWYge09iamVjdH0gTG9nZ2VyT3B0aW9ucwogKiBAcHJvcGVydHkge2ZhbHNlfHRydWV8Im5vbmUifCJlcnJvciJ8Indhcm4ifCJpbmZvInwibG9nInwidmVyYm9zZSJ9IGxldmVsIGxvZ2xldmVsCiAqIEBwcm9wZXJ0eSB7RmlsdGVyVHlwZXN8Ym9vbGVhbn0gZGVidWcgZmlsdGVyIGZvciBkZWJ1ZyBsb2dnaW5nCiAqIEBwcm9wZXJ0eSB7TG9nZ2VyQ29uc29sZX0gY29uc29sZSB0aGUgY29uc29sZSB0byBsb2cgdG8KICovCgovKioKICogQHBhcmFtIHtGaWx0ZXJJdGVtVHlwZXN9IGl0ZW0gYW4gaW5wdXQgaXRlbQogKiBAcmV0dXJucyB7RmlsdGVyRnVuY3Rpb259IGZpbHRlciBmdW5jdGlvbgogKi8KdmFyIGZpbHRlclRvRnVuY3Rpb24gPSBmdW5jdGlvbiBmaWx0ZXJUb0Z1bmN0aW9uKGl0ZW0pIHsKICBpZiAodHlwZW9mIGl0ZW0gPT09ICJzdHJpbmciKSB7CiAgICB2YXIgcmVnRXhwID0gbmV3IFJlZ0V4cCgiW1xcXFwvXSIuY29uY2F0KGl0ZW0ucmVwbGFjZSgKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZQogICAgL1stW1xde30oKSorPy5cXF4kfF0vZywgIlxcJCYiKSwgIihbXFxcXC9dfCR8IXxcXD8pIikpOwogICAgcmV0dXJuIGZ1bmN0aW9uIChpZGVudCkgewogICAgICByZXR1cm4gcmVnRXhwLnRlc3QoaWRlbnQpOwogICAgfTsKICB9CiAgaWYgKGl0ZW0gJiYgdHlwZW9mIGl0ZW0gPT09ICJvYmplY3QiICYmIHR5cGVvZiBpdGVtLnRlc3QgPT09ICJmdW5jdGlvbiIpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoaWRlbnQpIHsKICAgICAgcmV0dXJuIGl0ZW0udGVzdChpZGVudCk7CiAgICB9OwogIH0KICBpZiAodHlwZW9mIGl0ZW0gPT09ICJmdW5jdGlvbiIpIHsKICAgIHJldHVybiBpdGVtOwogIH0KICBpZiAodHlwZW9mIGl0ZW0gPT09ICJib29sZWFuIikgewogICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGl0ZW07CiAgICB9OwogIH0KfTsKCi8qKgogKiBAZW51bSB7bnVtYmVyfQogKi8KdmFyIExvZ0xldmVsID0gewogIG5vbmU6IDYsCiAgZmFsc2U6IDYsCiAgZXJyb3I6IDUsCiAgd2FybjogNCwKICBpbmZvOiAzLAogIGxvZzogMiwKICB0cnVlOiAyLAogIHZlcmJvc2U6IDEKfTsKCi8qKgogKiBAcGFyYW0ge0xvZ2dlck9wdGlvbnN9IG9wdGlvbnMgb3B0aW9ucyBvYmplY3QKICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgTG9nVHlwZUVudW0sIGFueVtdKTogdm9pZH0gbG9nZ2luZyBmdW5jdGlvbgogKi8KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoX3JlZikgewogIHZhciBfcmVmJGxldmVsID0gX3JlZi5sZXZlbCwKICAgIGxldmVsID0gX3JlZiRsZXZlbCA9PT0gdm9pZCAwID8gImluZm8iIDogX3JlZiRsZXZlbCwKICAgIF9yZWYkZGVidWcgPSBfcmVmLmRlYnVnLAogICAgZGVidWcgPSBfcmVmJGRlYnVnID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkZGVidWcsCiAgICBjb25zb2xlID0gX3JlZi5jb25zb2xlOwogIHZhciBkZWJ1Z0ZpbHRlcnMgPSB0eXBlb2YgZGVidWcgPT09ICJib29sZWFuIiA/IFtmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gZGVidWc7CiAgfV0gOiAvKiogQHR5cGUge0ZpbHRlckl0ZW1UeXBlc1tdfSAqL1tdLmNvbmNhdChkZWJ1ZykubWFwKGZpbHRlclRvRnVuY3Rpb24pOwogIC8qKiBAdHlwZSB7bnVtYmVyfSAqLwogIHZhciBsb2dsZXZlbCA9IExvZ0xldmVsWyIiLmNvbmNhdChsZXZlbCldIHx8IDA7CgogIC8qKgogICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG5hbWUgb2YgdGhlIGxvZ2dlcgogICAqIEBwYXJhbSB7TG9nVHlwZUVudW19IHR5cGUgdHlwZSBvZiB0aGUgbG9nIGVudHJ5CiAgICogQHBhcmFtIHthbnlbXX0gYXJncyBhcmd1bWVudHMgb2YgdGhlIGxvZyBlbnRyeQogICAqIEByZXR1cm5zIHt2b2lkfQogICAqLwogIHZhciBsb2dnZXIgPSBmdW5jdGlvbiBsb2dnZXIobmFtZSwgdHlwZSwgYXJncykgewogICAgdmFyIGxhYmVsZWRBcmdzID0gZnVuY3Rpb24gbGFiZWxlZEFyZ3MoKSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZ3MpKSB7CiAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCAmJiB0eXBlb2YgYXJnc1swXSA9PT0gInN0cmluZyIpIHsKICAgICAgICAgIHJldHVybiBbIlsiLmNvbmNhdChuYW1lLCAiXSAiKS5jb25jYXQoYXJnc1swXSldLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncy5zbGljZSgxKSkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gWyJbIi5jb25jYXQobmFtZSwgIl0iKV0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShhcmdzKSk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfTsKICAgIHZhciBkZWJ1ZyA9IGRlYnVnRmlsdGVycy5zb21lKGZ1bmN0aW9uIChmKSB7CiAgICAgIHJldHVybiBmKG5hbWUpOwogICAgfSk7CiAgICBzd2l0Y2ggKHR5cGUpIHsKICAgICAgY2FzZSBMb2dUeXBlLmRlYnVnOgogICAgICAgIGlmICghZGVidWcpIHJldHVybjsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zCiAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmRlYnVnID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zCiAgICAgICAgICBjb25zb2xlLmRlYnVnLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIExvZ1R5cGUubG9nOgogICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjsKICAgICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIExvZ1R5cGUuaW5mbzoKICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwuaW5mbykgcmV0dXJuOwogICAgICAgIGNvbnNvbGUuaW5mby5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIExvZ1R5cGUud2FybjoKICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwud2FybikgcmV0dXJuOwogICAgICAgIGNvbnNvbGUud2Fybi5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIExvZ1R5cGUuZXJyb3I6CiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmVycm9yKSByZXR1cm47CiAgICAgICAgY29uc29sZS5lcnJvci5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpOwogICAgICAgIGJyZWFrOwogICAgICBjYXNlIExvZ1R5cGUudHJhY2U6CiAgICAgICAgaWYgKCFkZWJ1ZykgcmV0dXJuOwogICAgICAgIGNvbnNvbGUudHJhY2UoKTsKICAgICAgICBicmVhazsKICAgICAgY2FzZSBMb2dUeXBlLmdyb3VwQ29sbGFwc2VkOgogICAgICAgIGlmICghZGVidWcgJiYgbG9nbGV2ZWwgPiBMb2dMZXZlbC5sb2cpIHJldHVybjsKICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwudmVyYm9zZSkgewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucwogICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlLmdyb3VwQ29sbGFwc2VkID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKICAgICAgICAgICAgY29uc29sZS5ncm91cENvbGxhcHNlZC5hcHBseShjb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkobGFiZWxlZEFyZ3MoKSkpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgLy8gZmFsbHMgdGhyb3VnaAogICAgICBjYXNlIExvZ1R5cGUuZ3JvdXA6CiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuOwogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuZ3JvdXAgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKICAgICAgICAgIGNvbnNvbGUuZ3JvdXAuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc29sZS5sb2cuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgTG9nVHlwZS5ncm91cEVuZDoKICAgICAgICBpZiAoIWRlYnVnICYmIGxvZ2xldmVsID4gTG9nTGV2ZWwubG9nKSByZXR1cm47CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucwogICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5ncm91cEVuZCA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucwogICAgICAgICAgY29uc29sZS5ncm91cEVuZCgpOwogICAgICAgIH0KICAgICAgICBicmVhazsKICAgICAgY2FzZSBMb2dUeXBlLnRpbWU6CiAgICAgICAgewogICAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuOwogICAgICAgICAgdmFyIG1zID0gYXJnc1sxXSAqIDEwMDAgKyBhcmdzWzJdIC8gMTAwMDAwMDsKICAgICAgICAgIHZhciBtc2cgPSAiWyIuY29uY2F0KG5hbWUsICJdICIpLmNvbmNhdChhcmdzWzBdLCAiOiAiKS5jb25jYXQobXMsICIgbXMiKTsKICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5sb2dUaW1lID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nVGltZShtc2cpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc29sZS5sb2cobXNnKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgY2FzZSBMb2dUeXBlLnByb2ZpbGU6CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucwogICAgICAgIGlmICh0eXBlb2YgY29uc29sZS5wcm9maWxlID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm9kZS9uby11bnN1cHBvcnRlZC1mZWF0dXJlcy9ub2RlLWJ1aWx0aW5zCiAgICAgICAgICBjb25zb2xlLnByb2ZpbGUuYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgTG9nVHlwZS5wcm9maWxlRW5kOgogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUucHJvZmlsZUVuZCA9PT0gImZ1bmN0aW9uIikgewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vZGUvbm8tdW5zdXBwb3J0ZWQtZmVhdHVyZXMvbm9kZS1idWlsdGlucwogICAgICAgICAgY29uc29sZS5wcm9maWxlRW5kLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIExvZ1R5cGUuY2xlYXI6CiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmxvZykgcmV0dXJuOwogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuY2xlYXIgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMKICAgICAgICAgIGNvbnNvbGUuY2xlYXIoKTsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgTG9nVHlwZS5zdGF0dXM6CiAgICAgICAgaWYgKCFkZWJ1ZyAmJiBsb2dsZXZlbCA+IExvZ0xldmVsLmluZm8pIHJldHVybjsKICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUuc3RhdHVzID09PSAiZnVuY3Rpb24iKSB7CiAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgY29uc29sZS5zdGF0dXMoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGNvbnNvbGUuc3RhdHVzLmFwcGx5KGNvbnNvbGUsIF90b0NvbnN1bWFibGVBcnJheShsYWJlbGVkQXJncygpKSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPT0gMCkgewogICAgICAgICAgICBjb25zb2xlLmluZm8uYXBwbHkoY29uc29sZSwgX3RvQ29uc3VtYWJsZUFycmF5KGxhYmVsZWRBcmdzKCkpKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGRlZmF1bHQ6CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmV4cGVjdGVkIExvZ1R5cGUgIi5jb25jYXQodHlwZSkpOwogICAgfQogIH07CiAgcmV0dXJuIGxvZ2dlcjsKfTsKCi8qKiovIH0pLAoKLyoqKi8gIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2xpYi9sb2dnaW5nL3J1bnRpbWUuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjEzMzRfXykgewoKLyoKCU1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCglBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhCiovCgoKCmZ1bmN0aW9uIF9leHRlbmRzKCkgewogIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgewogICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsKICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7CiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIHRhcmdldDsKICB9OwogIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CnZhciBTeW5jQmFpbEhvb2sgPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjEzMzRfXygvKiEgdGFwYWJsZS9saWIvU3luY0JhaWxIb29rICovICIuL2NsaWVudC1zcmMvbW9kdWxlcy9sb2dnZXIvU3luY0JhaWxIb29rRmFrZS5qcyIpOwp2YXIgX3JlcXVpcmUgPSBfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjEzMzRfXygvKiEgLi9Mb2dnZXIgKi8gIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvTG9nZ2VyLmpzIiksCiAgTG9nZ2VyID0gX3JlcXVpcmUuTG9nZ2VyOwp2YXIgY3JlYXRlQ29uc29sZUxvZ2dlciA9IF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMTMzNF9fKC8qISAuL2NyZWF0ZUNvbnNvbGVMb2dnZXIgKi8gIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svbGliL2xvZ2dpbmcvY3JlYXRlQ29uc29sZUxvZ2dlci5qcyIpOwoKLyoqIEB0eXBlIHtjcmVhdGVDb25zb2xlTG9nZ2VyLkxvZ2dlck9wdGlvbnN9ICovCnZhciBjdXJyZW50RGVmYXVsdExvZ2dlck9wdGlvbnMgPSB7CiAgbGV2ZWw6ICJpbmZvIiwKICBkZWJ1ZzogZmFsc2UsCiAgY29uc29sZTogY29uc29sZQp9Owp2YXIgY3VycmVudERlZmF1bHRMb2dnZXIgPSBjcmVhdGVDb25zb2xlTG9nZ2VyKGN1cnJlbnREZWZhdWx0TG9nZ2VyT3B0aW9ucyk7CgovKioKICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgbG9nZ2VyCiAqIEByZXR1cm5zIHtMb2dnZXJ9IGEgbG9nZ2VyCiAqLwpleHBvcnRzLmdldExvZ2dlciA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgcmV0dXJuIG5ldyBMb2dnZXIoZnVuY3Rpb24gKHR5cGUsIGFyZ3MpIHsKICAgIGlmIChleHBvcnRzLmhvb2tzLmxvZy5jYWxsKG5hbWUsIHR5cGUsIGFyZ3MpID09PSB1bmRlZmluZWQpIHsKICAgICAgY3VycmVudERlZmF1bHRMb2dnZXIobmFtZSwgdHlwZSwgYXJncyk7CiAgICB9CiAgfSwgZnVuY3Rpb24gKGNoaWxkTmFtZSkgewogICAgcmV0dXJuIGV4cG9ydHMuZ2V0TG9nZ2VyKCIiLmNvbmNhdChuYW1lLCAiLyIpLmNvbmNhdChjaGlsZE5hbWUpKTsKICB9KTsKfTsKCi8qKgogKiBAcGFyYW0ge2NyZWF0ZUNvbnNvbGVMb2dnZXIuTG9nZ2VyT3B0aW9uc30gb3B0aW9ucyBuZXcgb3B0aW9ucywgbWVyZ2Ugd2l0aCBvbGQgb3B0aW9ucwogKiBAcmV0dXJucyB7dm9pZH0KICovCmV4cG9ydHMuY29uZmlndXJlRGVmYXVsdExvZ2dlciA9IGZ1bmN0aW9uIChvcHRpb25zKSB7CiAgX2V4dGVuZHMoY3VycmVudERlZmF1bHRMb2dnZXJPcHRpb25zLCBvcHRpb25zKTsKICBjdXJyZW50RGVmYXVsdExvZ2dlciA9IGNyZWF0ZUNvbnNvbGVMb2dnZXIoY3VycmVudERlZmF1bHRMb2dnZXJPcHRpb25zKTsKfTsKZXhwb3J0cy5ob29rcyA9IHsKICBsb2c6IG5ldyBTeW5jQmFpbEhvb2soWyJvcmlnaW4iLCAidHlwZSIsICJhcmdzIl0pCn07CgovKioqLyB9KQoKLyoqKioqKi8gCX0pOwovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqLyAJLy8gVGhlIG1vZHVsZSBjYWNoZQovKioqKioqLyAJdmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9OwovKioqKioqLyAJCi8qKioqKiovIAkvLyBUaGUgcmVxdWlyZSBmdW5jdGlvbgovKioqKioqLyAJZnVuY3Rpb24gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzIzNDYxX18obW9kdWxlSWQpIHsKLyoqKioqKi8gCQkvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGUKLyoqKioqKi8gCQl2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTsKLyoqKioqKi8gCQlpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHsKLyoqKioqKi8gCQkJcmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKQovKioqKioqLyAJCXZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0gewovKioqKioqLyAJCQkvLyBubyBtb2R1bGUuaWQgbmVlZGVkCi8qKioqKiovIAkJCS8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkCi8qKioqKiovIAkJCWV4cG9ydHM6IHt9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCQovKioqKioqLyAJCS8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvbgovKioqKioqLyAJCV9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMzQ2MV9fKTsKLyoqKioqKi8gCQovKioqKioqLyAJCS8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlCi8qKioqKiovIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJfQovKioqKioqLyAJCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKiovIAkvKiB3ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMgKi8KLyoqKioqKi8gCSFmdW5jdGlvbigpIHsKLyoqKioqKi8gCQkvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzCi8qKioqKiovIAkJX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzIzNDYxX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIGRlZmluaXRpb24pIHsKLyoqKioqKi8gCQkJZm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgewovKioqKioqLyAJCQkJaWYoX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzIzNDYxX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX25lc3RlZF93ZWJwYWNrX3JlcXVpcmVfMjM0NjFfXy5vKGV4cG9ydHMsIGtleSkpIHsKLyoqKioqKi8gCQkJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pOwovKioqKioqLyAJCQkJfQovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCX0oKTsKLyoqKioqKi8gCQovKioqKioqLyAJLyogd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCAqLwovKioqKioqLyAJIWZ1bmN0aW9uKCkgewovKioqKioqLyAJCV9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMzQ2MV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9Ci8qKioqKiovIAl9KCk7Ci8qKioqKiovIAkKLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QgKi8KLyoqKioqKi8gCSFmdW5jdGlvbigpIHsKLyoqKioqKi8gCQkvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzCi8qKioqKiovIAkJX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzIzNDYxX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHsKLyoqKioqKi8gCQkJaWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7Ci8qKioqKiovIAkJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTsKLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pOwovKioqKioqLyAJCX07Ci8qKioqKiovIAl9KCk7Ci8qKioqKiovIAkKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KdmFyIF9fd2VicGFja19leHBvcnRzX18gPSB7fTsKLy8gVGhpcyBlbnRyeSBuZWVkIHRvIGJlIHdyYXBwZWQgaW4gYW4gSUlGRSBiZWNhdXNlIGl0IG5lZWQgdG8gYmUgaXNvbGF0ZWQgYWdhaW5zdCBvdGhlciBtb2R1bGVzIGluIHRoZSBjaHVuay4KIWZ1bmN0aW9uKCkgewovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi9jbGllbnQtc3JjL21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCl9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMzQ2MV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fbmVzdGVkX3dlYnBhY2tfcmVxdWlyZV8yMzQ2MV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewovKiBoYXJtb255IGV4cG9ydCAqLyAgICJkZWZhdWx0IjogZnVuY3Rpb24oKSB7IHJldHVybiAvKiByZWV4cG9ydCBkZWZhdWx0IGV4cG9ydCBmcm9tIG5hbWVkIG1vZHVsZSAqLyB3ZWJwYWNrX2xpYl9sb2dnaW5nX3J1bnRpbWVfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXzsgfQovKiBoYXJtb255IGV4cG9ydCAqLyB9KTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIHdlYnBhY2tfbGliX2xvZ2dpbmdfcnVudGltZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX19uZXN0ZWRfd2VicGFja19yZXF1aXJlXzIzNDYxX18oLyohIHdlYnBhY2svbGliL2xvZ2dpbmcvcnVudGltZS5qcyAqLyAiLi9ub2RlX21vZHVsZXMvd2VicGFjay9saWIvbG9nZ2luZy9ydW50aW1lLmpzIik7Cgp9KCk7CnZhciBfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fID0gZXhwb3J0czsKZm9yKHZhciBpIGluIF9fd2VicGFja19leHBvcnRzX18pIF9fd2VicGFja19leHBvcnRfdGFyZ2V0X19baV0gPSBfX3dlYnBhY2tfZXhwb3J0c19fW2ldOwppZihfX3dlYnBhY2tfZXhwb3J0c19fLl9fZXNNb2R1bGUpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0X3RhcmdldF9fLCAiX19lc01vZHVsZSIsIHsgdmFsdWU6IHRydWUgfSk7Ci8qKioqKiovIH0pKCkKOwoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImNyZWF0ZU92ZXJsYXkiOiAoKSA9PiAoLyogYmluZGluZyAqLyBjcmVhdGVPdmVybGF5KSwKLyogaGFybW9ueSBleHBvcnQgKi8gICAiZm9ybWF0UHJvYmxlbSI6ICgpID0+ICgvKiBiaW5kaW5nICovIGZvcm1hdFByb2JsZW0pCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgYW5zaV9odG1sX2NvbW11bml0eV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgYW5zaS1odG1sLWNvbW11bml0eSAqLyAiLi4vLi4vLnlhcm4vY2FjaGUvYW5zaS1odG1sLWNvbW11bml0eS1ucG0tMC4wLjgtNWVhZWY1NWYxYi0wNGM1NjhlODM0LnppcC9ub2RlX21vZHVsZXMvYW5zaS1odG1sLWNvbW11bml0eS9pbmRleC5qcyIpOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgYW5zaV9odG1sX2NvbW11bml0eV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGFuc2lfaHRtbF9jb21tdW5pdHlfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBodG1sX2VudGl0aWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISBodG1sLWVudGl0aWVzICovICIuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9pbmRleC5qcyIpOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgaHRtbF9lbnRpdGllc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfNF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKGh0bWxfZW50aXRpZXNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzRfXyk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfb3ZlcmxheV9ydW50aW1lX2Vycm9yX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL292ZXJsYXkvcnVudGltZS1lcnJvci5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS9ydW50aW1lLWVycm9yLmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfb3ZlcmxheV9zdGF0ZV9tYWNoaW5lX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL292ZXJsYXkvc3RhdGUtbWFjaGluZS5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS9zdGF0ZS1tYWNoaW5lLmpzIik7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfb3ZlcmxheV9zdHlsZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vb3ZlcmxheS9zdHlsZXMuanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvc3R5bGVzLmpzIik7CmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9CmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9CmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9CmZ1bmN0aW9uIF90b1Byb3BlcnR5S2V5KGFyZykgeyB2YXIga2V5ID0gX3RvUHJpbWl0aXZlKGFyZywgInN0cmluZyIpOyByZXR1cm4gdHlwZW9mIGtleSA9PT0gInN5bWJvbCIgPyBrZXkgOiBTdHJpbmcoa2V5KTsgfQpmdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHsgaWYgKHR5cGVvZiBpbnB1dCAhPT0gIm9iamVjdCIgfHwgaW5wdXQgPT09IG51bGwpIHJldHVybiBpbnB1dDsgdmFyIHByaW0gPSBpbnB1dFtTeW1ib2wudG9QcmltaXRpdmVdOyBpZiAocHJpbSAhPT0gdW5kZWZpbmVkKSB7IHZhciByZXMgPSBwcmltLmNhbGwoaW5wdXQsIGhpbnQgfHwgImRlZmF1bHQiKTsgaWYgKHR5cGVvZiByZXMgIT09ICJvYmplY3QiKSByZXR1cm4gcmVzOyB0aHJvdyBuZXcgVHlwZUVycm9yKCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLiIpOyB9IHJldHVybiAoaGludCA9PT0gInN0cmluZyIgPyBTdHJpbmcgOiBOdW1iZXIpKGlucHV0KTsgfQovLyBUaGUgZXJyb3Igb3ZlcmxheSBpcyBpbnNwaXJlZCAoYW5kIG1vc3RseSBjb3BpZWQpIGZyb20gQ3JlYXRlIFJlYWN0IEFwcCAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29raW5jdWJhdG9yL2NyZWF0ZS1yZWFjdC1hcHApCi8vIFRoZXksIGluIHR1cm4sIGdvdCBpbnNwaXJlZCBieSB3ZWJwYWNrLWhvdC1taWRkbGV3YXJlIChodHRwczovL2dpdGh1Yi5jb20vZ2xlbmphbWluL3dlYnBhY2staG90LW1pZGRsZXdhcmUpLgoKCgoKCgp2YXIgY29sb3JzID0gewogIHJlc2V0OiBbInRyYW5zcGFyZW50IiwgInRyYW5zcGFyZW50Il0sCiAgYmxhY2s6ICIxODE4MTgiLAogIHJlZDogIkUzNjA0OSIsCiAgZ3JlZW46ICJCM0NCNzQiLAogIHllbGxvdzogIkZGRDA4MCIsCiAgYmx1ZTogIjdDQUZDMiIsCiAgbWFnZW50YTogIjdGQUNDQSIsCiAgY3lhbjogIkMzQzJFRiIsCiAgbGlnaHRncmV5OiAiRUJFN0UzIiwKICBkYXJrZ3JleTogIjZENzg5MSIKfTsKYW5zaV9odG1sX2NvbW11bml0eV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKS5zZXRDb2xvcnMoY29sb3JzKTsKCi8qKgogKiBAcGFyYW0ge3N0cmluZ30gdHlwZQogKiBAcGFyYW0ge3N0cmluZyAgfCB7IGZpbGU/OiBzdHJpbmcsIG1vZHVsZU5hbWU/OiBzdHJpbmcsIGxvYz86IHN0cmluZywgbWVzc2FnZT86IHN0cmluZzsgc3RhY2s/OiBzdHJpbmdbXSB9fSBpdGVtCiAqIEByZXR1cm5zIHt7IGhlYWRlcjogc3RyaW5nLCBib2R5OiBzdHJpbmcgfX0KICovCmZ1bmN0aW9uIGZvcm1hdFByb2JsZW0odHlwZSwgaXRlbSkgewogIHZhciBoZWFkZXIgPSB0eXBlID09PSAid2FybmluZyIgPyAiV0FSTklORyIgOiAiRVJST1IiOwogIHZhciBib2R5ID0gIiI7CiAgaWYgKHR5cGVvZiBpdGVtID09PSAic3RyaW5nIikgewogICAgYm9keSArPSBpdGVtOwogIH0gZWxzZSB7CiAgICB2YXIgZmlsZSA9IGl0ZW0uZmlsZSB8fCAiIjsKICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeQogICAgdmFyIG1vZHVsZU5hbWUgPSBpdGVtLm1vZHVsZU5hbWUgPyBpdGVtLm1vZHVsZU5hbWUuaW5kZXhPZigiISIpICE9PSAtMSA/ICIiLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUucmVwbGFjZSgvXihcc3xcUykqIS8sICIiKSwgIiAoIikuY29uY2F0KGl0ZW0ubW9kdWxlTmFtZSwgIikiKSA6ICIiLmNvbmNhdChpdGVtLm1vZHVsZU5hbWUpIDogIiI7CiAgICB2YXIgbG9jID0gaXRlbS5sb2M7CiAgICBoZWFkZXIgKz0gIiIuY29uY2F0KG1vZHVsZU5hbWUgfHwgZmlsZSA/ICIgaW4gIi5jb25jYXQobW9kdWxlTmFtZSA/ICIiLmNvbmNhdChtb2R1bGVOYW1lKS5jb25jYXQoZmlsZSA/ICIgKCIuY29uY2F0KGZpbGUsICIpIikgOiAiIikgOiBmaWxlKS5jb25jYXQobG9jID8gIiAiLmNvbmNhdChsb2MpIDogIiIpIDogIiIpOwogICAgYm9keSArPSBpdGVtLm1lc3NhZ2UgfHwgIiI7CiAgfQogIGlmIChBcnJheS5pc0FycmF5KGl0ZW0uc3RhY2spKSB7CiAgICBpdGVtLnN0YWNrLmZvckVhY2goZnVuY3Rpb24gKHN0YWNrKSB7CiAgICAgIGlmICh0eXBlb2Ygc3RhY2sgPT09ICJzdHJpbmciKSB7CiAgICAgICAgYm9keSArPSAiXHJcbiIuY29uY2F0KHN0YWNrKTsKICAgICAgfQogICAgfSk7CiAgfQogIHJldHVybiB7CiAgICBoZWFkZXI6IGhlYWRlciwKICAgIGJvZHk6IGJvZHkKICB9Owp9CgovKioKICogQHR5cGVkZWYge09iamVjdH0gQ3JlYXRlT3ZlcmxheU9wdGlvbnMKICogQHByb3BlcnR5IHtzdHJpbmcgfCBudWxsfSB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lCiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2NhdGNoUnVudGltZUVycm9yXQogKi8KCi8qKgogKgogKiBAcGFyYW0ge0NyZWF0ZU92ZXJsYXlPcHRpb25zfSBvcHRpb25zCiAqLwp2YXIgY3JlYXRlT3ZlcmxheSA9IGZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXkob3B0aW9ucykgewogIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkfSAqLwogIHZhciBpZnJhbWVDb250YWluZXJFbGVtZW50OwogIC8qKiBAdHlwZSB7SFRNTERpdkVsZW1lbnQgfCBudWxsIHwgdW5kZWZpbmVkfSAqLwogIHZhciBjb250YWluZXJFbGVtZW50OwogIC8qKiBAdHlwZSB7QXJyYXk8KGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB2b2lkPn0gKi8KICB2YXIgb25Mb2FkUXVldWUgPSBbXTsKICAvKiogQHR5cGUge1RydXN0ZWRUeXBlUG9saWN5IHwgdW5kZWZpbmVkfSAqLwogIHZhciBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5OwoKICAvKioKICAgKgogICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnQKICAgKiBAcGFyYW0ge0NTU1N0eWxlRGVjbGFyYXRpb259IHN0eWxlCiAgICovCiAgZnVuY3Rpb24gYXBwbHlTdHlsZShlbGVtZW50LCBzdHlsZSkgewogICAgT2JqZWN0LmtleXMoc3R5bGUpLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHsKICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHN0eWxlW3Byb3BdOwogICAgfSk7CiAgfQoKICAvKioKICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bGx9IHRydXN0ZWRUeXBlc1BvbGljeU5hbWUKICAgKi8KICBmdW5jdGlvbiBjcmVhdGVDb250YWluZXIodHJ1c3RlZFR5cGVzUG9saWN5TmFtZSkgewogICAgLy8gRW5hYmxlIFRydXN0ZWQgVHlwZXMgaWYgdGhleSBhcmUgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGJyb3dzZXIuCiAgICBpZiAod2luZG93LnRydXN0ZWRUeXBlcykgewogICAgICBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5ID0gd2luZG93LnRydXN0ZWRUeXBlcy5jcmVhdGVQb2xpY3kodHJ1c3RlZFR5cGVzUG9saWN5TmFtZSB8fCAid2VicGFjay1kZXYtc2VydmVyI292ZXJsYXkiLCB7CiAgICAgICAgY3JlYXRlSFRNTDogZnVuY3Rpb24gY3JlYXRlSFRNTCh2YWx1ZSkgewogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiaWZyYW1lIik7CiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmlkID0gIndlYnBhY2stZGV2LXNlcnZlci1jbGllbnQtb3ZlcmxheSI7CiAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LnNyYyA9ICJhYm91dDpibGFuayI7CiAgICBhcHBseVN0eWxlKGlmcmFtZUNvbnRhaW5lckVsZW1lbnQsIF9vdmVybGF5X3N0eWxlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLmlmcmFtZVN0eWxlKTsKICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICB2YXIgY29udGVudEVsZW1lbnQgPSAvKiogQHR5cGUge0RvY3VtZW50fSAqLwogICAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqLwogICAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgY29udGFpbmVyRWxlbWVudCA9IC8qKiBAdHlwZSB7RG9jdW1lbnR9ICovCiAgICAgIC8qKiBAdHlwZSB7SFRNTElGcmFtZUVsZW1lbnR9ICovCiAgICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQuY29udGVudERvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICBjb250ZW50RWxlbWVudC5pZCA9ICJ3ZWJwYWNrLWRldi1zZXJ2ZXItY2xpZW50LW92ZXJsYXktZGl2IjsKICAgICAgYXBwbHlTdHlsZShjb250ZW50RWxlbWVudCwgX292ZXJsYXlfc3R5bGVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uY29udGFpbmVyU3R5bGUpOwogICAgICB2YXIgaGVhZGVyRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICBoZWFkZXJFbGVtZW50LmlubmVyVGV4dCA9ICJDb21waWxlZCB3aXRoIHByb2JsZW1zOiI7CiAgICAgIGFwcGx5U3R5bGUoaGVhZGVyRWxlbWVudCwgX292ZXJsYXlfc3R5bGVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18uaGVhZGVyU3R5bGUpOwogICAgICB2YXIgY2xvc2VCdXR0b25FbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYnV0dG9uIik7CiAgICAgIGFwcGx5U3R5bGUoY2xvc2VCdXR0b25FbGVtZW50LCBfb3ZlcmxheV9zdHlsZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5kaXNtaXNzQnV0dG9uU3R5bGUpOwogICAgICBjbG9zZUJ1dHRvbkVsZW1lbnQuaW5uZXJUZXh0ID0gIsOXIjsKICAgICAgY2xvc2VCdXR0b25FbGVtZW50LmFyaWFMYWJlbCA9ICJEaXNtaXNzIjsKICAgICAgY2xvc2VCdXR0b25FbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgZnVuY3Rpb24gKCkgewogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2UtYmVmb3JlLWRlZmluZQogICAgICAgIG92ZXJsYXlTZXJ2aWNlLnNlbmQoewogICAgICAgICAgdHlwZTogIkRJU01JU1MiCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICBjb250ZW50RWxlbWVudC5hcHBlbmRDaGlsZChoZWFkZXJFbGVtZW50KTsKICAgICAgY29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvc2VCdXR0b25FbGVtZW50KTsKICAgICAgY29udGVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyRWxlbWVudCk7CgogICAgICAvKiogQHR5cGUge0RvY3VtZW50fSAqLwogICAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqLwogICAgICBpZnJhbWVDb250YWluZXJFbGVtZW50LmNvbnRlbnREb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRlbnRFbGVtZW50KTsKICAgICAgb25Mb2FkUXVldWUuZm9yRWFjaChmdW5jdGlvbiAob25Mb2FkKSB7CiAgICAgICAgb25Mb2FkKCAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50fSAqL2NvbnRlbnRFbGVtZW50KTsKICAgICAgfSk7CiAgICAgIG9uTG9hZFF1ZXVlID0gW107CgogICAgICAvKiogQHR5cGUge0hUTUxJRnJhbWVFbGVtZW50fSAqLwogICAgICBpZnJhbWVDb250YWluZXJFbGVtZW50Lm9ubG9hZCA9IG51bGw7CiAgICB9OwogICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWVDb250YWluZXJFbGVtZW50KTsKICB9CgogIC8qKgogICAqIEBwYXJhbSB7KGVsZW1lbnQ6IEhUTUxEaXZFbGVtZW50KSA9PiB2b2lkfSBjYWxsYmFjawogICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZQogICAqLwogIGZ1bmN0aW9uIGVuc3VyZU92ZXJsYXlFeGlzdHMoY2FsbGJhY2ssIHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpIHsKICAgIGlmIChjb250YWluZXJFbGVtZW50KSB7CiAgICAgIGNvbnRhaW5lckVsZW1lbnQuaW5uZXJIVE1MID0gIiI7CiAgICAgIC8vIEV2ZXJ5dGhpbmcgaXMgcmVhZHksIGNhbGwgdGhlIGNhbGxiYWNrIHJpZ2h0IGF3YXkuCiAgICAgIGNhbGxiYWNrKGNvbnRhaW5lckVsZW1lbnQpOwogICAgICByZXR1cm47CiAgICB9CiAgICBvbkxvYWRRdWV1ZS5wdXNoKGNhbGxiYWNrKTsKICAgIGlmIChpZnJhbWVDb250YWluZXJFbGVtZW50KSB7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGNyZWF0ZUNvbnRhaW5lcih0cnVzdGVkVHlwZXNQb2xpY3lOYW1lKTsKICB9CgogIC8vIFN1Y2Nlc3NmdWwgY29tcGlsYXRpb24uCiAgZnVuY3Rpb24gaGlkZSgpIHsKICAgIGlmICghaWZyYW1lQ29udGFpbmVyRWxlbWVudCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgLy8gQ2xlYW4gdXAgYW5kIHJlc2V0IGludGVybmFsIHN0YXRlLgogICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWVDb250YWluZXJFbGVtZW50KTsKICAgIGlmcmFtZUNvbnRhaW5lckVsZW1lbnQgPSBudWxsOwogICAgY29udGFpbmVyRWxlbWVudCA9IG51bGw7CiAgfQoKICAvLyBDb21waWxhdGlvbiB3aXRoIGVycm9ycyAoZS5nLiBzeW50YXggZXJyb3Igb3IgbWlzc2luZyBtb2R1bGVzKS4KICAvKioKICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZQogICAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nICB8IHsgbW9kdWxlSWRlbnRpZmllcj86IHN0cmluZywgbW9kdWxlTmFtZT86IHN0cmluZywgbG9jPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nIH0+fSBtZXNzYWdlcwogICAqIEBwYXJhbSB7c3RyaW5nIHwgbnVsbH0gdHJ1c3RlZFR5cGVzUG9saWN5TmFtZQogICAqLwogIGZ1bmN0aW9uIHNob3codHlwZSwgbWVzc2FnZXMsIHRydXN0ZWRUeXBlc1BvbGljeU5hbWUpIHsKICAgIGVuc3VyZU92ZXJsYXlFeGlzdHMoZnVuY3Rpb24gKCkgewogICAgICBtZXNzYWdlcy5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlKSB7CiAgICAgICAgdmFyIGVudHJ5RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgIHZhciBtc2dTdHlsZSA9IHR5cGUgPT09ICJ3YXJuaW5nIiA/IF9vdmVybGF5X3N0eWxlc19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfM19fLm1zZ1N0eWxlcy53YXJuaW5nIDogX292ZXJsYXlfc3R5bGVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18ubXNnU3R5bGVzLmVycm9yOwogICAgICAgIGFwcGx5U3R5bGUoZW50cnlFbGVtZW50LCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1zZ1N0eWxlKSwge30sIHsKICAgICAgICAgIHBhZGRpbmc6ICIxcmVtIDFyZW0gMS41cmVtIDFyZW0iCiAgICAgICAgfSkpOwogICAgICAgIHZhciB0eXBlRWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgIHZhciBfZm9ybWF0UHJvYmxlbSA9IGZvcm1hdFByb2JsZW0odHlwZSwgbWVzc2FnZSksCiAgICAgICAgICBoZWFkZXIgPSBfZm9ybWF0UHJvYmxlbS5oZWFkZXIsCiAgICAgICAgICBib2R5ID0gX2Zvcm1hdFByb2JsZW0uYm9keTsKICAgICAgICB0eXBlRWxlbWVudC5pbm5lclRleHQgPSBoZWFkZXI7CiAgICAgICAgYXBwbHlTdHlsZSh0eXBlRWxlbWVudCwgX292ZXJsYXlfc3R5bGVzX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8zX18ubXNnVHlwZVN0eWxlKTsKICAgICAgICBpZiAobWVzc2FnZS5tb2R1bGVJZGVudGlmaWVyKSB7CiAgICAgICAgICBhcHBseVN0eWxlKHR5cGVFbGVtZW50LCB7CiAgICAgICAgICAgIGN1cnNvcjogInBvaW50ZXIiCiAgICAgICAgICB9KTsKICAgICAgICAgIC8vIGVsZW1lbnQuZGF0YXNldCBub3Qgc3VwcG9ydGVkIGluIElFCiAgICAgICAgICB0eXBlRWxlbWVudC5zZXRBdHRyaWJ1dGUoImRhdGEtY2FuLW9wZW4iLCB0cnVlKTsKICAgICAgICAgIHR5cGVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICBmZXRjaCgiL3dlYnBhY2stZGV2LXNlcnZlci9vcGVuLWVkaXRvcj9maWxlTmFtZT0iLmNvbmNhdChtZXNzYWdlLm1vZHVsZUlkZW50aWZpZXIpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy8gTWFrZSBpdCBsb29rIHNpbWlsYXIgdG8gb3VyIHRlcm1pbmFsLgogICAgICAgIHZhciB0ZXh0ID0gYW5zaV9odG1sX2NvbW11bml0eV9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQoKSgoMCxodG1sX2VudGl0aWVzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV80X18uZW5jb2RlKShib2R5KSk7CiAgICAgICAgdmFyIG1lc3NhZ2VUZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgICAgIGFwcGx5U3R5bGUobWVzc2FnZVRleHROb2RlLCBfb3ZlcmxheV9zdHlsZXNfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfXy5tc2dUZXh0U3R5bGUpOwogICAgICAgIG1lc3NhZ2VUZXh0Tm9kZS5pbm5lckhUTUwgPSBvdmVybGF5VHJ1c3RlZFR5cGVzUG9saWN5ID8gb3ZlcmxheVRydXN0ZWRUeXBlc1BvbGljeS5jcmVhdGVIVE1MKHRleHQpIDogdGV4dDsKICAgICAgICBlbnRyeUVsZW1lbnQuYXBwZW5kQ2hpbGQodHlwZUVsZW1lbnQpOwogICAgICAgIGVudHJ5RWxlbWVudC5hcHBlbmRDaGlsZChtZXNzYWdlVGV4dE5vZGUpOwoKICAgICAgICAvKiogQHR5cGUge0hUTUxEaXZFbGVtZW50fSAqLwogICAgICAgIGNvbnRhaW5lckVsZW1lbnQuYXBwZW5kQ2hpbGQoZW50cnlFbGVtZW50KTsKICAgICAgfSk7CiAgICB9LCB0cnVzdGVkVHlwZXNQb2xpY3lOYW1lKTsKICB9CiAgdmFyIG92ZXJsYXlTZXJ2aWNlID0gKDAsX292ZXJsYXlfc3RhdGVfbWFjaGluZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fWyJkZWZhdWx0Il0pKHsKICAgIHNob3dPdmVybGF5OiBmdW5jdGlvbiBzaG93T3ZlcmxheShfcmVmKSB7CiAgICAgIHZhciBfcmVmJGxldmVsID0gX3JlZi5sZXZlbCwKICAgICAgICBsZXZlbCA9IF9yZWYkbGV2ZWwgPT09IHZvaWQgMCA/ICJlcnJvciIgOiBfcmVmJGxldmVsLAogICAgICAgIG1lc3NhZ2VzID0gX3JlZi5tZXNzYWdlczsKICAgICAgcmV0dXJuIHNob3cobGV2ZWwsIG1lc3NhZ2VzLCBvcHRpb25zLnRydXN0ZWRUeXBlc1BvbGljeU5hbWUpOwogICAgfSwKICAgIGhpZGVPdmVybGF5OiBoaWRlCiAgfSk7CiAgaWYgKG9wdGlvbnMuY2F0Y2hSdW50aW1lRXJyb3IpIHsKICAgICgwLF9vdmVybGF5X3J1bnRpbWVfZXJyb3JfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5saXN0ZW5Ub1J1bnRpbWVFcnJvcikoZnVuY3Rpb24gKGVycm9yRXZlbnQpIHsKICAgICAgLy8gZXJyb3IgcHJvcGVydHkgbWF5IGJlIGVtcHR5IGluIG9sZGVyIGJyb3dzZXIgbGlrZSBJRQogICAgICB2YXIgZXJyb3IgPSBlcnJvckV2ZW50LmVycm9yLAogICAgICAgIG1lc3NhZ2UgPSBlcnJvckV2ZW50Lm1lc3NhZ2U7CiAgICAgIGlmICghZXJyb3IgJiYgIW1lc3NhZ2UpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdmFyIGVycm9yT2JqZWN0ID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogbmV3IEVycm9yKGVycm9yIHx8IG1lc3NhZ2UpOwogICAgICBvdmVybGF5U2VydmljZS5zZW5kKHsKICAgICAgICB0eXBlOiAiUlVOVElNRV9FUlJPUiIsCiAgICAgICAgbWVzc2FnZXM6IFt7CiAgICAgICAgICBtZXNzYWdlOiBlcnJvck9iamVjdC5tZXNzYWdlLAogICAgICAgICAgc3RhY2s6ICgwLF9vdmVybGF5X3J1bnRpbWVfZXJyb3JfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5wYXJzZUVycm9yVG9TdGFja3MpKGVycm9yT2JqZWN0KQogICAgICAgIH1dCiAgICAgIH0pOwogICAgfSk7CiAgfQogIHJldHVybiBvdmVybGF5U2VydmljZTsKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5L2ZzbS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvZnNtLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImRlZmF1bHQiOiAoKSA9PiAoX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18pCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQpmdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfQpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGtleSA9IF90b1Byb3BlcnR5S2V5KGtleSk7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfQpmdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHsgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsICJzdHJpbmciKTsgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICJzeW1ib2wiID8ga2V5IDogU3RyaW5nKGtleSk7IH0KZnVuY3Rpb24gX3RvUHJpbWl0aXZlKGlucHV0LCBoaW50KSB7IGlmICh0eXBlb2YgaW5wdXQgIT09ICJvYmplY3QiIHx8IGlucHV0ID09PSBudWxsKSByZXR1cm4gaW5wdXQ7IHZhciBwcmltID0gaW5wdXRbU3ltYm9sLnRvUHJpbWl0aXZlXTsgaWYgKHByaW0gIT09IHVuZGVmaW5lZCkgeyB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8ICJkZWZhdWx0Iik7IGlmICh0eXBlb2YgcmVzICE9PSAib2JqZWN0IikgcmV0dXJuIHJlczsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS4iKTsgfSByZXR1cm4gKGhpbnQgPT09ICJzdHJpbmciID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7IH0KLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IFN0YXRlRGVmaW5pdGlvbnMKICogQHByb3BlcnR5IHt7W2V2ZW50OiBzdHJpbmddOiB7IHRhcmdldDogc3RyaW5nOyBhY3Rpb25zPzogQXJyYXk8c3RyaW5nPiB9fX0gW29uXQogKi8KCi8qKgogKiBAdHlwZWRlZiB7T2JqZWN0fSBPcHRpb25zCiAqIEBwcm9wZXJ0eSB7e1tzdGF0ZTogc3RyaW5nXTogU3RhdGVEZWZpbml0aW9uc319IHN0YXRlcwogKiBAcHJvcGVydHkge29iamVjdH0gY29udGV4dDsKICogQHByb3BlcnR5IHtzdHJpbmd9IGluaXRpYWwKICovCgovKioKICogQHR5cGVkZWYge09iamVjdH0gSW1wbGVtZW50YXRpb24KICogQHByb3BlcnR5IHt7W2FjdGlvbk5hbWU6IHN0cmluZ106IChjdHg6IG9iamVjdCwgZXZlbnQ6IGFueSkgPT4gb2JqZWN0fX0gYWN0aW9ucwogKi8KCi8qKgogKiBBIHNpbXBsaWZpZWQgYGNyZWF0ZU1hY2hpbmVgIGZyb20gYEB4c3RhdGUvZnNtYCB3aXRoIHRoZSBmb2xsb3dpbmcgZGlmZmVyZW5jZXM6CiAqCiAqICAtIHRoZSByZXR1cm5lZCBtYWNoaW5lIGlzIHRlY2huaWNhbGx5IGEgInNlcnZpY2UiLiBObyBgaW50ZXJwcmV0KG1hY2hpbmUpLnN0YXJ0KClgIGlzIG5lZWRlZC4KICogIC0gdGhlIHN0YXRlIGRlZmluaXRpb24gb25seSBzdXBwb3J0IGBvbmAgYW5kIHRhcmdldCBtdXN0IGJlIGRlY2xhcmVkIHdpdGggeyB0YXJnZXQ6ICduZXh0U3RhdGUnLCBhY3Rpb25zOiBbXSB9IGV4cGxpY2l0bHkuCiAqICAtIGV2ZW50IHBhc3NlZCB0byBgc2VuZGAgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBgdHlwZWAgcHJvcGVydHkuCiAqICAtIGFjdGlvbnMgaW1wbGVtZW50YXRpb24gd2lsbCBiZSBbYXNzaWduIGFjdGlvbl0oaHR0cHM6Ly94c3RhdGUuanMub3JnL2RvY3MvZ3VpZGVzL2NvbnRleHQuaHRtbCNhc3NpZ24tYWN0aW9uKSBpZiB5b3UgcmV0dXJuIGFueSB2YWx1ZS4KICogIERvIG5vdCByZXR1cm4gYW55dGhpbmcgaWYgeW91IGp1c3Qgd2FudCB0byBpbnZva2Ugc2lkZSBlZmZlY3QuCiAqCiAqIFRoZSBnb2FsIG9mIHRoaXMgY3VzdG9tIGZ1bmN0aW9uIGlzIHRvIGF2b2lkIGluc3RhbGxpbmcgdGhlIGVudGlyZSBgJ3hzdGF0ZS9mc20nYCBwYWNrYWdlLCB3aGlsZSBlbmFibGluZyBtb2RlbGluZyB1c2luZwogKiBzdGF0ZSBtYWNoaW5lLiBZb3UgY2FuIGNvcHkgdGhlIGZpcnN0IHBhcmFtZXRlciBpbnRvIHRoZSBlZGl0b3IgYXQgaHR0cHM6Ly9zdGF0ZWx5LmFpL3ZpeiB0byB2aXN1YWxpemUgdGhlIHN0YXRlIG1hY2hpbmUuCiAqCiAqIEBwYXJhbSB7T3B0aW9uc30gb3B0aW9ucwogKiBAcGFyYW0ge0ltcGxlbWVudGF0aW9ufSBpbXBsZW1lbnRhdGlvbgogKi8KZnVuY3Rpb24gY3JlYXRlTWFjaGluZShfcmVmLCBfcmVmMikgewogIHZhciBzdGF0ZXMgPSBfcmVmLnN0YXRlcywKICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsCiAgICBpbml0aWFsID0gX3JlZi5pbml0aWFsOwogIHZhciBhY3Rpb25zID0gX3JlZjIuYWN0aW9uczsKICB2YXIgY3VycmVudFN0YXRlID0gaW5pdGlhbDsKICB2YXIgY3VycmVudENvbnRleHQgPSBjb250ZXh0OwogIHJldHVybiB7CiAgICBzZW5kOiBmdW5jdGlvbiBzZW5kKGV2ZW50KSB7CiAgICAgIHZhciBjdXJyZW50U3RhdGVPbiA9IHN0YXRlc1tjdXJyZW50U3RhdGVdLm9uOwogICAgICB2YXIgdHJhbnNpdGlvbkNvbmZpZyA9IGN1cnJlbnRTdGF0ZU9uICYmIGN1cnJlbnRTdGF0ZU9uW2V2ZW50LnR5cGVdOwogICAgICBpZiAodHJhbnNpdGlvbkNvbmZpZykgewogICAgICAgIGN1cnJlbnRTdGF0ZSA9IHRyYW5zaXRpb25Db25maWcudGFyZ2V0OwogICAgICAgIGlmICh0cmFuc2l0aW9uQ29uZmlnLmFjdGlvbnMpIHsKICAgICAgICAgIHRyYW5zaXRpb25Db25maWcuYWN0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChhY3ROYW1lKSB7CiAgICAgICAgICAgIHZhciBhY3Rpb25JbXBsID0gYWN0aW9uc1thY3ROYW1lXTsKICAgICAgICAgICAgdmFyIG5leHRDb250ZXh0VmFsdWUgPSBhY3Rpb25JbXBsICYmIGFjdGlvbkltcGwoY3VycmVudENvbnRleHQsIGV2ZW50KTsKICAgICAgICAgICAgaWYgKG5leHRDb250ZXh0VmFsdWUpIHsKICAgICAgICAgICAgICBjdXJyZW50Q29udGV4dCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY3VycmVudENvbnRleHQpLCBuZXh0Q29udGV4dFZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfTsKfQovKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fID0gKGNyZWF0ZU1hY2hpbmUpOwoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS9ydW50aW1lLWVycm9yLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvcnVudGltZS1lcnJvci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKLyogaGFybW9ueSBleHBvcnQgKi8gICAibGlzdGVuVG9SdW50aW1lRXJyb3IiOiAoKSA9PiAoLyogYmluZGluZyAqLyBsaXN0ZW5Ub1J1bnRpbWVFcnJvciksCi8qIGhhcm1vbnkgZXhwb3J0ICovICAgInBhcnNlRXJyb3JUb1N0YWNrcyI6ICgpID0+ICgvKiBiaW5kaW5nICovIHBhcnNlRXJyb3JUb1N0YWNrcykKLyogaGFybW9ueSBleHBvcnQgKi8gfSk7Ci8qKgogKgogKiBAcGFyYW0ge0Vycm9yfSBlcnJvcgogKi8KZnVuY3Rpb24gcGFyc2VFcnJvclRvU3RhY2tzKGVycm9yKSB7CiAgaWYgKCFlcnJvciB8fCAhKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoInBhcnNlRXJyb3JUb1N0YWNrcyBleHBlY3RzIEVycm9yIG9iamVjdCIpOwogIH0KICBpZiAodHlwZW9mIGVycm9yLnN0YWNrID09PSAic3RyaW5nIikgewogICAgcmV0dXJuIGVycm9yLnN0YWNrLnNwbGl0KCJcbiIpLmZpbHRlcihmdW5jdGlvbiAoc3RhY2spIHsKICAgICAgcmV0dXJuIHN0YWNrICE9PSAiRXJyb3I6ICIuY29uY2F0KGVycm9yLm1lc3NhZ2UpOwogICAgfSk7CiAgfQp9CgovKioKICogQGNhbGxiYWNrIEVycm9yQ2FsbGJhY2sKICogQHBhcmFtIHtFcnJvckV2ZW50fSBlcnJvcgogKiBAcmV0dXJucyB7dm9pZH0KICovCgovKioKICogQHBhcmFtIHtFcnJvckNhbGxiYWNrfSBjYWxsYmFjawogKi8KZnVuY3Rpb24gbGlzdGVuVG9SdW50aW1lRXJyb3IoY2FsbGJhY2spIHsKICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigiZXJyb3IiLCBjYWxsYmFjayk7CiAgcmV0dXJuIGZ1bmN0aW9uIGNsZWFudXAoKSB7CiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigiZXJyb3IiLCBjYWxsYmFjayk7CiAgfTsKfQoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvc3RhdGUtbWFjaGluZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9vdmVybGF5L3N0YXRlLW1hY2hpbmUuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImRlZmF1bHQiOiAoKSA9PiAoX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18pCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX2ZzbV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9mc20uanMgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvZnNtLmpzIik7CgoKLyoqCiAqIEB0eXBlZGVmIHtPYmplY3R9IFNob3dPdmVybGF5RGF0YQogKiBAcHJvcGVydHkgeyd3YXJuaW5nJyB8ICdlcnJvcid9IGxldmVsCiAqIEBwcm9wZXJ0eSB7QXJyYXk8c3RyaW5nICB8IHsgbW9kdWxlSWRlbnRpZmllcj86IHN0cmluZywgbW9kdWxlTmFtZT86IHN0cmluZywgbG9jPzogc3RyaW5nLCBtZXNzYWdlPzogc3RyaW5nIH0+fSBtZXNzYWdlcwogKi8KCi8qKgogKiBAdHlwZWRlZiB7T2JqZWN0fSBDcmVhdGVPdmVybGF5TWFjaGluZU9wdGlvbnMKICogQHByb3BlcnR5IHsoZGF0YTogU2hvd092ZXJsYXlEYXRhKSA9PiB2b2lkfSBzaG93T3ZlcmxheQogKiBAcHJvcGVydHkgeygpID0+IHZvaWR9IGhpZGVPdmVybGF5CiAqLwoKLyoqCiAqIEBwYXJhbSB7Q3JlYXRlT3ZlcmxheU1hY2hpbmVPcHRpb25zfSBvcHRpb25zCiAqLwp2YXIgY3JlYXRlT3ZlcmxheU1hY2hpbmUgPSBmdW5jdGlvbiBjcmVhdGVPdmVybGF5TWFjaGluZShvcHRpb25zKSB7CiAgdmFyIGhpZGVPdmVybGF5ID0gb3B0aW9ucy5oaWRlT3ZlcmxheSwKICAgIHNob3dPdmVybGF5ID0gb3B0aW9ucy5zaG93T3ZlcmxheTsKICB2YXIgb3ZlcmxheU1hY2hpbmUgPSAoMCxfZnNtX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bImRlZmF1bHQiXSkoewogICAgaW5pdGlhbDogImhpZGRlbiIsCiAgICBjb250ZXh0OiB7CiAgICAgIGxldmVsOiAiZXJyb3IiLAogICAgICBtZXNzYWdlczogW10KICAgIH0sCiAgICBzdGF0ZXM6IHsKICAgICAgaGlkZGVuOiB7CiAgICAgICAgb246IHsKICAgICAgICAgIEJVSUxEX0VSUk9SOiB7CiAgICAgICAgICAgIHRhcmdldDogImRpc3BsYXlCdWlsZEVycm9yIiwKICAgICAgICAgICAgYWN0aW9uczogWyJzZXRNZXNzYWdlcyIsICJzaG93T3ZlcmxheSJdCiAgICAgICAgICB9LAogICAgICAgICAgUlVOVElNRV9FUlJPUjogewogICAgICAgICAgICB0YXJnZXQ6ICJkaXNwbGF5UnVudGltZUVycm9yIiwKICAgICAgICAgICAgYWN0aW9uczogWyJzZXRNZXNzYWdlcyIsICJzaG93T3ZlcmxheSJdCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LAogICAgICBkaXNwbGF5QnVpbGRFcnJvcjogewogICAgICAgIG9uOiB7CiAgICAgICAgICBESVNNSVNTOiB7CiAgICAgICAgICAgIHRhcmdldDogImhpZGRlbiIsCiAgICAgICAgICAgIGFjdGlvbnM6IFsiZGlzbWlzc01lc3NhZ2VzIiwgImhpZGVPdmVybGF5Il0KICAgICAgICAgIH0sCiAgICAgICAgICBCVUlMRF9FUlJPUjogewogICAgICAgICAgICB0YXJnZXQ6ICJkaXNwbGF5QnVpbGRFcnJvciIsCiAgICAgICAgICAgIGFjdGlvbnM6IFsiYXBwZW5kTWVzc2FnZXMiLCAic2hvd092ZXJsYXkiXQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwKICAgICAgZGlzcGxheVJ1bnRpbWVFcnJvcjogewogICAgICAgIG9uOiB7CiAgICAgICAgICBESVNNSVNTOiB7CiAgICAgICAgICAgIHRhcmdldDogImhpZGRlbiIsCiAgICAgICAgICAgIGFjdGlvbnM6IFsiZGlzbWlzc01lc3NhZ2VzIiwgImhpZGVPdmVybGF5Il0KICAgICAgICAgIH0sCiAgICAgICAgICBSVU5USU1FX0VSUk9SOiB7CiAgICAgICAgICAgIHRhcmdldDogImRpc3BsYXlSdW50aW1lRXJyb3IiLAogICAgICAgICAgICBhY3Rpb25zOiBbImFwcGVuZE1lc3NhZ2VzIiwgInNob3dPdmVybGF5Il0KICAgICAgICAgIH0sCiAgICAgICAgICBCVUlMRF9FUlJPUjogewogICAgICAgICAgICB0YXJnZXQ6ICJkaXNwbGF5QnVpbGRFcnJvciIsCiAgICAgICAgICAgIGFjdGlvbnM6IFsic2V0TWVzc2FnZXMiLCAic2hvd092ZXJsYXkiXQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQogIH0sIHsKICAgIGFjdGlvbnM6IHsKICAgICAgZGlzbWlzc01lc3NhZ2VzOiBmdW5jdGlvbiBkaXNtaXNzTWVzc2FnZXMoKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIG1lc3NhZ2VzOiBbXSwKICAgICAgICAgIGxldmVsOiAiZXJyb3IiCiAgICAgICAgfTsKICAgICAgfSwKICAgICAgYXBwZW5kTWVzc2FnZXM6IGZ1bmN0aW9uIGFwcGVuZE1lc3NhZ2VzKGNvbnRleHQsIGV2ZW50KSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIG1lc3NhZ2VzOiBjb250ZXh0Lm1lc3NhZ2VzLmNvbmNhdChldmVudC5tZXNzYWdlcyksCiAgICAgICAgICBsZXZlbDogZXZlbnQubGV2ZWwgfHwgY29udGV4dC5sZXZlbAogICAgICAgIH07CiAgICAgIH0sCiAgICAgIHNldE1lc3NhZ2VzOiBmdW5jdGlvbiBzZXRNZXNzYWdlcyhjb250ZXh0LCBldmVudCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICBtZXNzYWdlczogZXZlbnQubWVzc2FnZXMsCiAgICAgICAgICBsZXZlbDogZXZlbnQubGV2ZWwgfHwgY29udGV4dC5sZXZlbAogICAgICAgIH07CiAgICAgIH0sCiAgICAgIGhpZGVPdmVybGF5OiBoaWRlT3ZlcmxheSwKICAgICAgc2hvd092ZXJsYXk6IHNob3dPdmVybGF5CiAgICB9CiAgfSk7CiAgcmV0dXJuIG92ZXJsYXlNYWNoaW5lOwp9OwovKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fID0gKGNyZWF0ZU92ZXJsYXlNYWNoaW5lKTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkvc3R5bGVzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS9zdHlsZXMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKLyogaGFybW9ueSBleHBvcnQgKi8gICAiY29udGFpbmVyU3R5bGUiOiAoKSA9PiAoLyogYmluZGluZyAqLyBjb250YWluZXJTdHlsZSksCi8qIGhhcm1vbnkgZXhwb3J0ICovICAgImRpc21pc3NCdXR0b25TdHlsZSI6ICgpID0+ICgvKiBiaW5kaW5nICovIGRpc21pc3NCdXR0b25TdHlsZSksCi8qIGhhcm1vbnkgZXhwb3J0ICovICAgImhlYWRlclN0eWxlIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gaGVhZGVyU3R5bGUpLAovKiBoYXJtb255IGV4cG9ydCAqLyAgICJpZnJhbWVTdHlsZSI6ICgpID0+ICgvKiBiaW5kaW5nICovIGlmcmFtZVN0eWxlKSwKLyogaGFybW9ueSBleHBvcnQgKi8gICAibXNnU3R5bGVzIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gbXNnU3R5bGVzKSwKLyogaGFybW9ueSBleHBvcnQgKi8gICAibXNnVGV4dFN0eWxlIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gbXNnVGV4dFN0eWxlKSwKLyogaGFybW9ueSBleHBvcnQgKi8gICAibXNnVHlwZVN0eWxlIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gbXNnVHlwZVN0eWxlKQovKiBoYXJtb255IGV4cG9ydCAqLyB9KTsKLy8gc3R5bGVzIGFyZSBpbnNwaXJlZCBieSBgcmVhY3QtZXJyb3Itb3ZlcmxheWAKCnZhciBtc2dTdHlsZXMgPSB7CiAgZXJyb3I6IHsKICAgIGJhY2tncm91bmRDb2xvcjogInJnYmEoMjA2LCAxNywgMzgsIDAuMSkiLAogICAgY29sb3I6ICIjZmNjZmNmIgogIH0sCiAgd2FybmluZzogewogICAgYmFja2dyb3VuZENvbG9yOiAicmdiYSgyNTEsIDI0NSwgMTgwLCAwLjEpIiwKICAgIGNvbG9yOiAiI2ZiZjViNCIKICB9Cn07CnZhciBpZnJhbWVTdHlsZSA9IHsKICBwb3NpdGlvbjogImZpeGVkIiwKICB0b3A6IDAsCiAgbGVmdDogMCwKICByaWdodDogMCwKICBib3R0b206IDAsCiAgd2lkdGg6ICIxMDB2dyIsCiAgaGVpZ2h0OiAiMTAwdmgiLAogIGJvcmRlcjogIm5vbmUiLAogICJ6LWluZGV4IjogOTk5OTk5OTk5OQp9Owp2YXIgY29udGFpbmVyU3R5bGUgPSB7CiAgcG9zaXRpb246ICJmaXhlZCIsCiAgYm94U2l6aW5nOiAiYm9yZGVyLWJveCIsCiAgbGVmdDogMCwKICB0b3A6IDAsCiAgcmlnaHQ6IDAsCiAgYm90dG9tOiAwLAogIHdpZHRoOiAiMTAwdnciLAogIGhlaWdodDogIjEwMHZoIiwKICBmb250U2l6ZTogImxhcmdlIiwKICBwYWRkaW5nOiAiMnJlbSAycmVtIDRyZW0gMnJlbSIsCiAgbGluZUhlaWdodDogIjEuMiIsCiAgd2hpdGVTcGFjZTogInByZS13cmFwIiwKICBvdmVyZmxvdzogImF1dG8iLAogIGJhY2tncm91bmRDb2xvcjogInJnYmEoMCwgMCwgMCwgMC45KSIsCiAgY29sb3I6ICJ3aGl0ZSIKfTsKdmFyIGhlYWRlclN0eWxlID0gewogIGNvbG9yOiAiI2U4M2I0NiIsCiAgZm9udFNpemU6ICIyZW0iLAogIHdoaXRlU3BhY2U6ICJwcmUtd3JhcCIsCiAgZm9udEZhbWlseTogInNhbnMtc2VyaWYiLAogIG1hcmdpbjogIjAgMnJlbSAycmVtIDAiLAogIGZsZXg6ICIwIDAgYXV0byIsCiAgbWF4SGVpZ2h0OiAiNTAlIiwKICBvdmVyZmxvdzogImF1dG8iCn07CnZhciBkaXNtaXNzQnV0dG9uU3R5bGUgPSB7CiAgY29sb3I6ICIjZmZmZmZmIiwKICBsaW5lSGVpZ2h0OiAiMXJlbSIsCiAgZm9udFNpemU6ICIxLjVyZW0iLAogIHBhZGRpbmc6ICIxcmVtIiwKICBjdXJzb3I6ICJwb2ludGVyIiwKICBwb3NpdGlvbjogImFic29sdXRlIiwKICByaWdodDogMCwKICB0b3A6IDAsCiAgYmFja2dyb3VuZENvbG9yOiAidHJhbnNwYXJlbnQiLAogIGJvcmRlcjogIm5vbmUiCn07CnZhciBtc2dUeXBlU3R5bGUgPSB7CiAgY29sb3I6ICIjZTgzYjQ2IiwKICBmb250U2l6ZTogIjEuMmVtIiwKICBtYXJnaW5Cb3R0b206ICIxcmVtIiwKICBmb250RmFtaWx5OiAic2Fucy1zZXJpZiIKfTsKdmFyIG1zZ1RleHRTdHlsZSA9IHsKICBsaW5lSGVpZ2h0OiAiMS41IiwKICBmb250U2l6ZTogIjFyZW0iLAogIGZvbnRGYW1pbHk6ICJNZW5sbywgQ29uc29sYXMsIG1vbm9zcGFjZSIKfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9zb2NrZXQuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvc29ja2V0LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewovKiBoYXJtb255IGV4cG9ydCAqLyAgICJjbGllbnQiOiAoKSA9PiAoLyogYmluZGluZyAqLyBjbGllbnQpLAovKiBoYXJtb255IGV4cG9ydCAqLyAgICJkZWZhdWx0IjogKCkgPT4gKF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fKQovKiBoYXJtb255IGV4cG9ydCAqLyB9KTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9jbGllbnRzX1dlYlNvY2tldENsaWVudF9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9jbGllbnRzL1dlYlNvY2tldENsaWVudC5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMiKTsKLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF91dGlsc19sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vdXRpbHMvbG9nLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9sb2cuanMiKTsKLyogcHJvdmlkZWQgZGVwZW5kZW5jeSAqLyB2YXIgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9jbGllbnRzL1dlYlNvY2tldENsaWVudC5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvY2xpZW50cy9XZWJTb2NrZXRDbGllbnQuanMiKTsKLyogZ2xvYmFsIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fICovCgoKCgovLyB0aGlzIFdlYnNvY2tldENsaWVudCBpcyBoZXJlIGFzIGEgZGVmYXVsdCBmYWxsYmFjaywgaW4gY2FzZSB0aGUgY2xpZW50IGlzIG5vdCBpbmplY3RlZAovKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi8KdmFyIENsaWVudCA9Ci8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeQp0eXBlb2YgX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18gIT09ICJ1bmRlZmluZWQiID8gdHlwZW9mIF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fLmRlZmF1bHQgIT09ICJ1bmRlZmluZWQiID8gX193ZWJwYWNrX2Rldl9zZXJ2ZXJfY2xpZW50X18uZGVmYXVsdCA6IF9fd2VicGFja19kZXZfc2VydmVyX2NsaWVudF9fIDogX2NsaWVudHNfV2ViU29ja2V0Q2xpZW50X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19bImRlZmF1bHQiXTsKLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi8KCnZhciByZXRyaWVzID0gMDsKdmFyIG1heFJldHJpZXMgPSAxMDsKCi8vIEluaXRpYWxpemVkIGNsaWVudCBpcyBleHBvcnRlZCBzbyBleHRlcm5hbCBjb25zdW1lcnMgY2FuIHV0aWxpemUgdGhlIHNhbWUgaW5zdGFuY2UKLy8gSXQgaXMgbXV0YWJsZSB0byBlbmZvcmNlIHNpbmdsZXRvbgovLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW11dGFibGUtZXhwb3J0cwp2YXIgY2xpZW50ID0gbnVsbDsKCi8qKgogKiBAcGFyYW0ge3N0cmluZ30gdXJsCiAqIEBwYXJhbSB7eyBbaGFuZGxlcjogc3RyaW5nXTogKGRhdGE/OiBhbnksIHBhcmFtcz86IGFueSkgPT4gYW55IH19IGhhbmRsZXJzCiAqIEBwYXJhbSB7bnVtYmVyfSBbcmVjb25uZWN0XQogKi8KdmFyIHNvY2tldCA9IGZ1bmN0aW9uIGluaXRTb2NrZXQodXJsLCBoYW5kbGVycywgcmVjb25uZWN0KSB7CiAgY2xpZW50ID0gbmV3IENsaWVudCh1cmwpOwogIGNsaWVudC5vbk9wZW4oZnVuY3Rpb24gKCkgewogICAgcmV0cmllcyA9IDA7CiAgICBpZiAodHlwZW9mIHJlY29ubmVjdCAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgbWF4UmV0cmllcyA9IHJlY29ubmVjdDsKICAgIH0KICB9KTsKICBjbGllbnQub25DbG9zZShmdW5jdGlvbiAoKSB7CiAgICBpZiAocmV0cmllcyA9PT0gMCkgewogICAgICBoYW5kbGVycy5jbG9zZSgpOwogICAgfQoKICAgIC8vIFRyeSB0byByZWNvbm5lY3QuCiAgICBjbGllbnQgPSBudWxsOwoKICAgIC8vIEFmdGVyIDEwIHJldHJpZXMgc3RvcCB0cnlpbmcsIHRvIHByZXZlbnQgbG9nc3BhbS4KICAgIGlmIChyZXRyaWVzIDwgbWF4UmV0cmllcykgewogICAgICAvLyBFeHBvbmVudGlhbGx5IGluY3JlYXNlIHRpbWVvdXQgdG8gcmVjb25uZWN0LgogICAgICAvLyBSZXNwZWN0ZnVsbHkgY29waWVkIGZyb20gdGhlIHBhY2thZ2UgYGdvdGAuCiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXMKICAgICAgdmFyIHJldHJ5SW5NcyA9IDEwMDAgKiBNYXRoLnBvdygyLCByZXRyaWVzKSArIE1hdGgucmFuZG9tKCkgKiAxMDA7CiAgICAgIHJldHJpZXMgKz0gMTsKICAgICAgX3V0aWxzX2xvZ19qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fLmxvZy5pbmZvKCJUcnlpbmcgdG8gcmVjb25uZWN0Li4uIik7CiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIHNvY2tldCh1cmwsIGhhbmRsZXJzLCByZWNvbm5lY3QpOwogICAgICB9LCByZXRyeUluTXMpOwogICAgfQogIH0pOwogIGNsaWVudC5vbk1lc3NhZ2UoCiAgLyoqCiAgICogQHBhcmFtIHthbnl9IGRhdGEKICAgKi8KICBmdW5jdGlvbiAoZGF0YSkgewogICAgdmFyIG1lc3NhZ2UgPSBKU09OLnBhcnNlKGRhdGEpOwogICAgaWYgKGhhbmRsZXJzW21lc3NhZ2UudHlwZV0pIHsKICAgICAgaGFuZGxlcnNbbWVzc2FnZS50eXBlXShtZXNzYWdlLmRhdGEsIG1lc3NhZ2UucGFyYW1zKTsKICAgIH0KICB9KTsKfTsKLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXyA9IChzb2NrZXQpOwoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvY3JlYXRlU29ja2V0VVJMLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2NyZWF0ZVNvY2tldFVSTC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKLyogaGFybW9ueSBleHBvcnQgKi8gICAiZGVmYXVsdCI6ICgpID0+IChfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXykKLyogaGFybW9ueSBleHBvcnQgKi8gfSk7Ci8qKgogKiBAcGFyYW0ge3sgcHJvdG9jb2w/OiBzdHJpbmcsIGF1dGg/OiBzdHJpbmcsIGhvc3RuYW1lPzogc3RyaW5nLCBwb3J0Pzogc3RyaW5nLCBwYXRobmFtZT86IHN0cmluZywgc2VhcmNoPzogc3RyaW5nLCBoYXNoPzogc3RyaW5nLCBzbGFzaGVzPzogYm9vbGVhbiB9fSBvYmpVUkwKICogQHJldHVybnMge3N0cmluZ30KICovCmZ1bmN0aW9uIGZvcm1hdChvYmpVUkwpIHsKICB2YXIgcHJvdG9jb2wgPSBvYmpVUkwucHJvdG9jb2wgfHwgIiI7CiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09ICI6IikgewogICAgcHJvdG9jb2wgKz0gIjoiOwogIH0KICB2YXIgYXV0aCA9IG9ialVSTC5hdXRoIHx8ICIiOwogIGlmIChhdXRoKSB7CiAgICBhdXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgpOwogICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksICI6Iik7CiAgICBhdXRoICs9ICJAIjsKICB9CiAgdmFyIGhvc3QgPSAiIjsKICBpZiAob2JqVVJMLmhvc3RuYW1lKSB7CiAgICBob3N0ID0gYXV0aCArIChvYmpVUkwuaG9zdG5hbWUuaW5kZXhPZigiOiIpID09PSAtMSA/IG9ialVSTC5ob3N0bmFtZSA6ICJbIi5jb25jYXQob2JqVVJMLmhvc3RuYW1lLCAiXSIpKTsKICAgIGlmIChvYmpVUkwucG9ydCkgewogICAgICBob3N0ICs9ICI6Ii5jb25jYXQob2JqVVJMLnBvcnQpOwogICAgfQogIH0KICB2YXIgcGF0aG5hbWUgPSBvYmpVUkwucGF0aG5hbWUgfHwgIiI7CiAgaWYgKG9ialVSTC5zbGFzaGVzKSB7CiAgICBob3N0ID0gIi8vIi5jb25jYXQoaG9zdCB8fCAiIik7CiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAiLyIpIHsKICAgICAgcGF0aG5hbWUgPSAiLyIuY29uY2F0KHBhdGhuYW1lKTsKICAgIH0KICB9IGVsc2UgaWYgKCFob3N0KSB7CiAgICBob3N0ID0gIiI7CiAgfQogIHZhciBzZWFyY2ggPSBvYmpVUkwuc2VhcmNoIHx8ICIiOwogIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gIj8iKSB7CiAgICBzZWFyY2ggPSAiPyIuY29uY2F0KHNlYXJjaCk7CiAgfQogIHZhciBoYXNoID0gb2JqVVJMLmhhc2ggfHwgIiI7CiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICIjIikgewogICAgaGFzaCA9ICIjIi5jb25jYXQoaGFzaCk7CiAgfQogIHBhdGhuYW1lID0gcGF0aG5hbWUucmVwbGFjZSgvWz8jXS9nLAogIC8qKgogICAqIEBwYXJhbSB7c3RyaW5nfSBtYXRjaAogICAqIEByZXR1cm5zIHtzdHJpbmd9CiAgICovCiAgZnVuY3Rpb24gKG1hdGNoKSB7CiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTsKICB9KTsKICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgiIyIsICIlMjMiKTsKICByZXR1cm4gIiIuY29uY2F0KHByb3RvY29sKS5jb25jYXQoaG9zdCkuY29uY2F0KHBhdGhuYW1lKS5jb25jYXQoc2VhcmNoKS5jb25jYXQoaGFzaCk7Cn0KCi8qKgogKiBAcGFyYW0ge1VSTCAmIHsgZnJvbUN1cnJlbnRTY3JpcHQ/OiBib29sZWFuIH19IHBhcnNlZFVSTAogKiBAcmV0dXJucyB7c3RyaW5nfQogKi8KZnVuY3Rpb24gY3JlYXRlU29ja2V0VVJMKHBhcnNlZFVSTCkgewogIHZhciBob3N0bmFtZSA9IHBhcnNlZFVSTC5ob3N0bmFtZTsKCiAgLy8gTm9kZS5qcyBtb2R1bGUgcGFyc2VzIGl0IGFzIGA6OmAKICAvLyBgbmV3IFVSTCh1cmxTdHJpbmcsIFtiYXNlVVJMU3RyaW5nXSlgIHBhcnNlcyBpdCBhcyAnWzo6XScKICB2YXIgaXNJbkFkZHJBbnkgPSBob3N0bmFtZSA9PT0gIjAuMC4wLjAiIHx8IGhvc3RuYW1lID09PSAiOjoiIHx8IGhvc3RuYW1lID09PSAiWzo6XSI7CgogIC8vIHdoeSBkbyB3ZSBuZWVkIHRoaXMgY2hlY2s/CiAgLy8gaG9zdG5hbWUgbi9hIGZvciBmaWxlIHByb3RvY29sIChleGFtcGxlLCB3aGVuIHVzaW5nIGVsZWN0cm9uLCBpb25pYykKICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2stZGV2LXNlcnZlci9wdWxsLzM4NAogIGlmIChpc0luQWRkckFueSAmJiBzZWxmLmxvY2F0aW9uLmhvc3RuYW1lICYmIHNlbGYubG9jYXRpb24ucHJvdG9jb2wuaW5kZXhPZigiaHR0cCIpID09PSAwKSB7CiAgICBob3N0bmFtZSA9IHNlbGYubG9jYXRpb24uaG9zdG5hbWU7CiAgfQogIHZhciBzb2NrZXRVUkxQcm90b2NvbCA9IHBhcnNlZFVSTC5wcm90b2NvbCB8fCBzZWxmLmxvY2F0aW9uLnByb3RvY29sOwoKICAvLyBXaGVuIGh0dHBzIGlzIHVzZWQgaW4gdGhlIGFwcCwgc2VjdXJlIHdlYiBzb2NrZXRzIGFyZSBhbHdheXMgbmVjZXNzYXJ5IGJlY2F1c2UgdGhlIGJyb3dzZXIgZG9lc24ndCBhY2NlcHQgbm9uLXNlY3VyZSB3ZWIgc29ja2V0cy4KICBpZiAoc29ja2V0VVJMUHJvdG9jb2wgPT09ICJhdXRvOiIgfHwgaG9zdG5hbWUgJiYgaXNJbkFkZHJBbnkgJiYgc2VsZi5sb2NhdGlvbi5wcm90b2NvbCA9PT0gImh0dHBzOiIpIHsKICAgIHNvY2tldFVSTFByb3RvY29sID0gc2VsZi5sb2NhdGlvbi5wcm90b2NvbDsKICB9CiAgc29ja2V0VVJMUHJvdG9jb2wgPSBzb2NrZXRVUkxQcm90b2NvbC5yZXBsYWNlKC9eKD86aHR0cHwuKy1leHRlbnNpb258ZmlsZSkvaSwgIndzIik7CiAgdmFyIHNvY2tldFVSTEF1dGggPSAiIjsKCiAgLy8gYG5ldyBVUkwodXJsU3RyaW5nLCBbYmFzZVVSTHN0cmluZ10pYCBkb2Vzbid0IGhhdmUgYGF1dGhgIHByb3BlcnR5CiAgLy8gUGFyc2UgYXV0aGVudGljYXRpb24gY3JlZGVudGlhbHMgaW4gY2FzZSB3ZSBuZWVkIHRoZW0KICBpZiAocGFyc2VkVVJMLnVzZXJuYW1lKSB7CiAgICBzb2NrZXRVUkxBdXRoID0gcGFyc2VkVVJMLnVzZXJuYW1lOwoKICAgIC8vIFNpbmNlIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb24gZG9lcyBub3QgYWxsb3cgZW1wdHkgdXNlcm5hbWUsCiAgICAvLyB3ZSBvbmx5IGluY2x1ZGUgcGFzc3dvcmQgaWYgdGhlIHVzZXJuYW1lIGlzIG5vdCBlbXB0eS4KICAgIGlmIChwYXJzZWRVUkwucGFzc3dvcmQpIHsKICAgICAgLy8gUmVzdWx0OiA8dXNlcm5hbWU+OjxwYXNzd29yZD4KICAgICAgc29ja2V0VVJMQXV0aCA9IHNvY2tldFVSTEF1dGguY29uY2F0KCI6IiwgcGFyc2VkVVJMLnBhc3N3b3JkKTsKICAgIH0KICB9CgogIC8vIEluIGNhc2UgdGhlIGhvc3QgaXMgYSByYXcgSVB2NiBhZGRyZXNzLCBpdCBjYW4gYmUgZW5jbG9zZWQgaW4KICAvLyB0aGUgYnJhY2tldHMgYXMgdGhlIGJyYWNrZXRzIGFyZSBuZWVkZWQgaW4gdGhlIGZpbmFsIFVSTCBzdHJpbmcuCiAgLy8gTmVlZCB0byByZW1vdmUgdGhvc2UgYXMgdXJsLmZvcm1hdCBibGluZGx5IGFkZHMgaXRzIG93biBzZXQgb2YgYnJhY2tldHMKICAvLyBpZiB0aGUgaG9zdCBzdHJpbmcgY29udGFpbnMgY29sb25zLiBUaGF0IHdvdWxkIGxlYWQgdG8gbm9uLXdvcmtpbmcKICAvLyBkb3VibGUgYnJhY2tldHMgKGUuZy4gW1s6Ol1dKSBob3N0CiAgLy8KICAvLyBBbGwgb2YgdGhlc2Ugd2ViIHNvY2tldCB1cmwgcGFyYW1zIGFyZSBvcHRpb25hbGx5IHBhc3NlZCBpbiB0aHJvdWdoIHJlc291cmNlUXVlcnksCiAgLy8gc28gd2UgbmVlZCB0byBmYWxsIGJhY2sgdG8gdGhlIGRlZmF1bHQgaWYgdGhleSBhcmUgbm90IHByb3ZpZGVkCiAgdmFyIHNvY2tldFVSTEhvc3RuYW1lID0gKGhvc3RuYW1lIHx8IHNlbGYubG9jYXRpb24uaG9zdG5hbWUgfHwgImxvY2FsaG9zdCIpLnJlcGxhY2UoL15cWyguKilcXSQvLCAiJDEiKTsKICB2YXIgc29ja2V0VVJMUG9ydCA9IHBhcnNlZFVSTC5wb3J0OwogIGlmICghc29ja2V0VVJMUG9ydCB8fCBzb2NrZXRVUkxQb3J0ID09PSAiMCIpIHsKICAgIHNvY2tldFVSTFBvcnQgPSBzZWxmLmxvY2F0aW9uLnBvcnQ7CiAgfQoKICAvLyBJZiBwYXRoIGlzIHByb3ZpZGVkIGl0J2xsIGJlIHBhc3NlZCBpbiB2aWEgdGhlIHJlc291cmNlUXVlcnkgYXMgYQogIC8vIHF1ZXJ5IHBhcmFtIHNvIGl0IGhhcyB0byBiZSBwYXJzZWQgb3V0IG9mIHRoZSBxdWVyeXN0cmluZyBpbiBvcmRlciBmb3IgdGhlCiAgLy8gY2xpZW50IHRvIG9wZW4gdGhlIHNvY2tldCB0byB0aGUgY29ycmVjdCBsb2NhdGlvbi4KICB2YXIgc29ja2V0VVJMUGF0aG5hbWUgPSAiL3dzIjsKICBpZiAocGFyc2VkVVJMLnBhdGhuYW1lICYmICFwYXJzZWRVUkwuZnJvbUN1cnJlbnRTY3JpcHQpIHsKICAgIHNvY2tldFVSTFBhdGhuYW1lID0gcGFyc2VkVVJMLnBhdGhuYW1lOwogIH0KICByZXR1cm4gZm9ybWF0KHsKICAgIHByb3RvY29sOiBzb2NrZXRVUkxQcm90b2NvbCwKICAgIGF1dGg6IHNvY2tldFVSTEF1dGgsCiAgICBob3N0bmFtZTogc29ja2V0VVJMSG9zdG5hbWUsCiAgICBwb3J0OiBzb2NrZXRVUkxQb3J0LAogICAgcGF0aG5hbWU6IHNvY2tldFVSTFBhdGhuYW1lLAogICAgc2xhc2hlczogdHJ1ZQogIH0pOwp9Ci8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18gPSAoY3JlYXRlU29ja2V0VVJMKTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2dldEN1cnJlbnRTY3JpcHRTb3VyY2UuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgoX191bnVzZWRfd2VicGFja19tb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCiJ1c2Ugc3RyaWN0IjsKX193ZWJwYWNrX3JlcXVpcmVfXy5yKF9fd2VicGFja19leHBvcnRzX18pOwovKiBoYXJtb255IGV4cG9ydCAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgewovKiBoYXJtb255IGV4cG9ydCAqLyAgICJkZWZhdWx0IjogKCkgPT4gKF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fKQovKiBoYXJtb255IGV4cG9ydCAqLyB9KTsKLyoqCiAqIEByZXR1cm5zIHtzdHJpbmd9CiAqLwpmdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0U291cmNlKCkgewogIC8vIGBkb2N1bWVudC5jdXJyZW50U2NyaXB0YCBpcyB0aGUgbW9zdCBhY2N1cmF0ZSB3YXkgdG8gZmluZCB0aGUgY3VycmVudCBzY3JpcHQsCiAgLy8gYnV0IGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWxsIGJyb3dzZXJzLgogIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7CiAgICByZXR1cm4gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5nZXRBdHRyaWJ1dGUoInNyYyIpOwogIH0KCiAgLy8gRmFsbGJhY2sgdG8gZ2V0dGluZyBhbGwgc2NyaXB0cyBydW5uaW5nIGluIHRoZSBkb2N1bWVudC4KICB2YXIgc2NyaXB0RWxlbWVudHMgPSBkb2N1bWVudC5zY3JpcHRzIHx8IFtdOwogIHZhciBzY3JpcHRFbGVtZW50c1dpdGhTcmMgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyLmNhbGwoc2NyaXB0RWxlbWVudHMsIGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoInNyYyIpOwogIH0pOwogIGlmIChzY3JpcHRFbGVtZW50c1dpdGhTcmMubGVuZ3RoID4gMCkgewogICAgdmFyIGN1cnJlbnRTY3JpcHQgPSBzY3JpcHRFbGVtZW50c1dpdGhTcmNbc2NyaXB0RWxlbWVudHNXaXRoU3JjLmxlbmd0aCAtIDFdOwogICAgcmV0dXJuIGN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKCJzcmMiKTsKICB9CgogIC8vIEZhaWwgYXMgdGhlcmUgd2FzIG5vIHNjcmlwdCB0byB1c2UuCiAgdGhyb3cgbmV3IEVycm9yKCJbd2VicGFjay1kZXYtc2VydmVyXSBGYWlsZWQgdG8gZ2V0IGN1cnJlbnQgc2NyaXB0IHNvdXJjZS4iKTsKfQovKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fID0gKGdldEN1cnJlbnRTY3JpcHRTb3VyY2UpOwoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvbG9nLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL2xvZy5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKLyogaGFybW9ueSBleHBvcnQgKi8gICAibG9nIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gbG9nKSwKLyogaGFybW9ueSBleHBvcnQgKi8gICAibG9nRW5hYmxlZEZlYXR1cmVzIjogKCkgPT4gKC8qIGJpbmRpbmcgKi8gbG9nRW5hYmxlZEZlYXR1cmVzKSwKLyogaGFybW9ueSBleHBvcnQgKi8gICAic2V0TG9nTGV2ZWwiOiAoKSA9PiAoLyogYmluZGluZyAqLyBzZXRMb2dMZXZlbCkKLyogaGFybW9ueSBleHBvcnQgKi8gfSk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfbW9kdWxlc19sb2dnZXJfaW5kZXhfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4uL21vZHVsZXMvbG9nZ2VyL2luZGV4LmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9tb2R1bGVzL2xvZ2dlci9pbmRleC5qcyIpOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX21vZHVsZXNfbG9nZ2VyX2luZGV4X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9fX3dlYnBhY2tfcmVxdWlyZV9fLm4oX21vZHVsZXNfbG9nZ2VyX2luZGV4X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18pOwoKdmFyIG5hbWUgPSAid2VicGFjay1kZXYtc2VydmVyIjsKLy8gZGVmYXVsdCBsZXZlbCBpcyBzZXQgb24gdGhlIGNsaWVudCBzaWRlLCBzbyBpdCBkb2VzIG5vdCBuZWVkCi8vIHRvIGJlIHNldCBieSB0aGUgQ0xJIG9yIEFQSQp2YXIgZGVmYXVsdExldmVsID0gImluZm8iOwoKLy8gb3B0aW9ucyBuZXcgb3B0aW9ucywgbWVyZ2Ugd2l0aCBvbGQgb3B0aW9ucwovKioKICogQHBhcmFtIHtmYWxzZSB8IHRydWUgfCAibm9uZSIgfCAiZXJyb3IiIHwgIndhcm4iIHwgImluZm8iIHwgImxvZyIgfCAidmVyYm9zZSJ9IGxldmVsCiAqIEByZXR1cm5zIHt2b2lkfQogKi8KZnVuY3Rpb24gc2V0TG9nTGV2ZWwobGV2ZWwpIHsKICBfbW9kdWxlc19sb2dnZXJfaW5kZXhfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkuY29uZmlndXJlRGVmYXVsdExvZ2dlcih7CiAgICBsZXZlbDogbGV2ZWwKICB9KTsKfQpzZXRMb2dMZXZlbChkZWZhdWx0TGV2ZWwpOwp2YXIgbG9nID0gX21vZHVsZXNfbG9nZ2VyX2luZGV4X2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19fZGVmYXVsdCgpLmdldExvZ2dlcihuYW1lKTsKdmFyIGxvZ0VuYWJsZWRGZWF0dXJlcyA9IGZ1bmN0aW9uIGxvZ0VuYWJsZWRGZWF0dXJlcyhmZWF0dXJlcykgewogIHZhciBlbmFibGVkRmVhdHVyZXMgPSBPYmplY3Qua2V5cyhmZWF0dXJlcyk7CiAgaWYgKCFmZWF0dXJlcyB8fCBlbmFibGVkRmVhdHVyZXMubGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm47CiAgfQogIHZhciBsb2dTdHJpbmcgPSAiU2VydmVyIHN0YXJ0ZWQ6IjsKCiAgLy8gU2VydmVyIHN0YXJ0ZWQ6IEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgZW5hYmxlZCwgTGl2ZSBSZWxvYWRpbmcgZW5hYmxlZCwgT3ZlcmxheSBkaXNhYmxlZC4KICBmb3IgKHZhciBpID0gMDsgaSA8IGVuYWJsZWRGZWF0dXJlcy5sZW5ndGg7IGkrKykgewogICAgdmFyIGtleSA9IGVuYWJsZWRGZWF0dXJlc1tpXTsKICAgIGxvZ1N0cmluZyArPSAiICIuY29uY2F0KGtleSwgIiAiKS5jb25jYXQoZmVhdHVyZXNba2V5XSA/ICJlbmFibGVkIiA6ICJkaXNhYmxlZCIsICIsIik7CiAgfQogIC8vIHJlcGxhY2UgbGFzdCBjb21tYSB3aXRoIGEgcGVyaW9kCiAgbG9nU3RyaW5nID0gbG9nU3RyaW5nLnNsaWNlKDAsIC0xKS5jb25jYXQoIi4iKTsKICBsb2cuaW5mbyhsb2dTdHJpbmcpOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3BhcnNlVVJMLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvcGFyc2VVUkwuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKLyogaGFybW9ueSBleHBvcnQgKi8gICAiZGVmYXVsdCI6ICgpID0+IChfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXykKLyogaGFybW9ueSBleHBvcnQgKi8gfSk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfZ2V0Q3VycmVudFNjcmlwdFNvdXJjZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9nZXRDdXJyZW50U2NyaXB0U291cmNlLmpzICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9nZXRDdXJyZW50U2NyaXB0U291cmNlLmpzIik7CgoKLyoqCiAqIEBwYXJhbSB7c3RyaW5nfSByZXNvdXJjZVF1ZXJ5CiAqIEByZXR1cm5zIHt7IFtrZXk6IHN0cmluZ106IHN0cmluZyB8IGJvb2xlYW4gfX0KICovCmZ1bmN0aW9uIHBhcnNlVVJMKHJlc291cmNlUXVlcnkpIHsKICAvKiogQHR5cGUge3sgW2tleTogc3RyaW5nXTogc3RyaW5nIH19ICovCiAgdmFyIG9wdGlvbnMgPSB7fTsKICBpZiAodHlwZW9mIHJlc291cmNlUXVlcnkgPT09ICJzdHJpbmciICYmIHJlc291cmNlUXVlcnkgIT09ICIiKSB7CiAgICB2YXIgc2VhcmNoUGFyYW1zID0gcmVzb3VyY2VRdWVyeS5zbGljZSgxKS5zcGxpdCgiJiIpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWFyY2hQYXJhbXMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIHBhaXIgPSBzZWFyY2hQYXJhbXNbaV0uc3BsaXQoIj0iKTsKICAgICAgb3B0aW9uc1twYWlyWzBdXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTsKICAgIH0KICB9IGVsc2UgewogICAgLy8gRWxzZSwgZ2V0IHRoZSB1cmwgZnJvbSB0aGUgPHNjcmlwdD4gdGhpcyBmaWxlIHdhcyBjYWxsZWQgd2l0aC4KICAgIHZhciBzY3JpcHRTb3VyY2UgPSAoMCxfZ2V0Q3VycmVudFNjcmlwdFNvdXJjZV9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fWyJkZWZhdWx0Il0pKCk7CiAgICB2YXIgc2NyaXB0U291cmNlVVJMOwogICAgdHJ5IHsKICAgICAgLy8gVGhlIHBsYWNlaG9sZGVyIGBiYXNlVVJMYCB3aXRoIGB3aW5kb3cubG9jYXRpb24uaHJlZmAsCiAgICAgIC8vIGlzIHRvIGFsbG93IHBhcnNpbmcgb2YgcGF0aC1yZWxhdGl2ZSBvciBwcm90b2NvbC1yZWxhdGl2ZSBVUkxzLAogICAgICAvLyBhbmQgd2lsbCBoYXZlIG5vIGVmZmVjdCBpZiBgc2NyaXB0U291cmNlYCBpcyBhIGZ1bGx5IHZhbGlkIFVSTC4KICAgICAgc2NyaXB0U291cmNlVVJMID0gbmV3IFVSTChzY3JpcHRTb3VyY2UsIHNlbGYubG9jYXRpb24uaHJlZik7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAvLyBVUkwgcGFyc2luZyBmYWlsZWQsIGRvIG5vdGhpbmcuCiAgICAgIC8vIFdlIHdpbGwgc3RpbGwgcHJvY2VlZCB0byBzZWUgaWYgd2UgY2FuIHJlY292ZXIgdXNpbmcgYHJlc291cmNlUXVlcnlgCiAgICB9CiAgICBpZiAoc2NyaXB0U291cmNlVVJMKSB7CiAgICAgIG9wdGlvbnMgPSBzY3JpcHRTb3VyY2VVUkw7CiAgICAgIG9wdGlvbnMuZnJvbUN1cnJlbnRTY3JpcHQgPSB0cnVlOwogICAgfQogIH0KICByZXR1cm4gb3B0aW9uczsKfQovKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fID0gKHBhcnNlVVJMKTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3JlbG9hZEFwcC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLWRldi1zZXJ2ZXItdmlydHVhbC0zNTRhMzVjZDMwLzAvY2FjaGUvd2VicGFjay1kZXYtc2VydmVyLW5wbS00LjEzLjItNzJjYzU0NGE4NC05YmY1NzNhYmYwLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC91dGlscy9yZWxvYWRBcHAuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwpfX3dlYnBhY2tfcmVxdWlyZV9fLnIoX193ZWJwYWNrX2V4cG9ydHNfXyk7Ci8qIGhhcm1vbnkgZXhwb3J0ICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCB7Ci8qIGhhcm1vbnkgZXhwb3J0ICovICAgImRlZmF1bHQiOiAoKSA9PiAoX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18pCi8qIGhhcm1vbnkgZXhwb3J0ICovIH0pOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgd2VicGFja19ob3RfZW1pdHRlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgd2VicGFjay9ob3QvZW1pdHRlci5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLTdlMTg3MTY3ZDEvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvZW1pdHRlci5qcyIpOwovKiBoYXJtb255IGltcG9ydCAqLyB2YXIgd2VicGFja19ob3RfZW1pdHRlcl9qc19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQgPSAvKiNfX1BVUkVfXyovX193ZWJwYWNrX3JlcXVpcmVfXy5uKHdlYnBhY2tfaG90X2VtaXR0ZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfXyk7Ci8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2xvZy5qcyAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvbG9nLmpzIik7CgoKCi8qKiBAdHlwZWRlZiB7aW1wb3J0KCIuLi9pbmRleCIpLk9wdGlvbnN9IE9wdGlvbnMKLyoqIEB0eXBlZGVmIHtpbXBvcnQoIi4uL2luZGV4IikuU3RhdHVzfSBTdGF0dXMKCi8qKgogKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnMKICogQHBhcmFtIHtTdGF0dXN9IHN0YXR1cwogKi8KZnVuY3Rpb24gcmVsb2FkQXBwKF9yZWYsIHN0YXR1cykgewogIHZhciBob3QgPSBfcmVmLmhvdCwKICAgIGxpdmVSZWxvYWQgPSBfcmVmLmxpdmVSZWxvYWQ7CiAgaWYgKHN0YXR1cy5pc1VubG9hZGluZykgewogICAgcmV0dXJuOwogIH0KICB2YXIgY3VycmVudEhhc2ggPSBzdGF0dXMuY3VycmVudEhhc2gsCiAgICBwcmV2aW91c0hhc2ggPSBzdGF0dXMucHJldmlvdXNIYXNoOwogIHZhciBpc0luaXRpYWwgPSBjdXJyZW50SGFzaC5pbmRleE9mKCAvKiogQHR5cGUge3N0cmluZ30gKi9wcmV2aW91c0hhc2gpID49IDA7CiAgaWYgKGlzSW5pdGlhbCkgewogICAgcmV0dXJuOwogIH0KCiAgLyoqCiAgICogQHBhcmFtIHtXaW5kb3d9IHJvb3RXaW5kb3cKICAgKiBAcGFyYW0ge251bWJlcn0gaW50ZXJ2YWxJZAogICAqLwogIGZ1bmN0aW9uIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpIHsKICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJZCk7CiAgICBfbG9nX2pzX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX18ubG9nLmluZm8oIkFwcCB1cGRhdGVkLiBSZWxvYWRpbmcuLi4iKTsKICAgIHJvb3RXaW5kb3cubG9jYXRpb24ucmVsb2FkKCk7CiAgfQogIHZhciBzZWFyY2ggPSBzZWxmLmxvY2F0aW9uLnNlYXJjaC50b0xvd2VyQ2FzZSgpOwogIHZhciBhbGxvd1RvSG90ID0gc2VhcmNoLmluZGV4T2YoIndlYnBhY2stZGV2LXNlcnZlci1ob3Q9ZmFsc2UiKSA9PT0gLTE7CiAgdmFyIGFsbG93VG9MaXZlUmVsb2FkID0gc2VhcmNoLmluZGV4T2YoIndlYnBhY2stZGV2LXNlcnZlci1saXZlLXJlbG9hZD1mYWxzZSIpID09PSAtMTsKICBpZiAoaG90ICYmIGFsbG93VG9Ib3QpIHsKICAgIF9sb2dfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfXy5sb2cuaW5mbygiQXBwIGhvdCB1cGRhdGUuLi4iKTsKICAgIHdlYnBhY2tfaG90X2VtaXR0ZXJfanNfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX19kZWZhdWx0KCkuZW1pdCgid2VicGFja0hvdFVwZGF0ZSIsIHN0YXR1cy5jdXJyZW50SGFzaCk7CiAgICBpZiAodHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiICYmIHNlbGYud2luZG93KSB7CiAgICAgIC8vIGJyb2FkY2FzdCB1cGRhdGUgdG8gd2luZG93CiAgICAgIHNlbGYucG9zdE1lc3NhZ2UoIndlYnBhY2tIb3RVcGRhdGUiLmNvbmNhdChzdGF0dXMuY3VycmVudEhhc2gpLCAiKiIpOwogICAgfQogIH0KICAvLyBhbGxvdyByZWZyZXNoaW5nIHRoZSBwYWdlIG9ubHkgaWYgbGl2ZVJlbG9hZCBpc24ndCBkaXNhYmxlZAogIGVsc2UgaWYgKGxpdmVSZWxvYWQgJiYgYWxsb3dUb0xpdmVSZWxvYWQpIHsKICAgIHZhciByb290V2luZG93ID0gc2VsZjsKCiAgICAvLyB1c2UgcGFyZW50IHdpbmRvdyBmb3IgcmVsb2FkIChpbiBjYXNlIHdlJ3JlIGluIGFuIGlmcmFtZSB3aXRoIG5vIHZhbGlkIHNyYykKICAgIHZhciBpbnRlcnZhbElkID0gc2VsZi5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgIGlmIChyb290V2luZG93LmxvY2F0aW9uLnByb3RvY29sICE9PSAiYWJvdXQ6IikgewogICAgICAgIC8vIHJlbG9hZCBpbW1lZGlhdGVseSBpZiBwcm90b2NvbCBpcyB2YWxpZAogICAgICAgIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpOwogICAgICB9IGVsc2UgewogICAgICAgIHJvb3RXaW5kb3cgPSByb290V2luZG93LnBhcmVudDsKICAgICAgICBpZiAocm9vdFdpbmRvdy5wYXJlbnQgPT09IHJvb3RXaW5kb3cpIHsKICAgICAgICAgIC8vIGlmIHBhcmVudCBlcXVhbHMgY3VycmVudCB3aW5kb3cgd2UndmUgcmVhY2hlZCB0aGUgcm9vdCB3aGljaCB3b3VsZCBjb250aW51ZSBmb3JldmVyLCBzbyB0cmlnZ2VyIGEgcmVsb2FkIGFueXdheXMKICAgICAgICAgIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CiAgfQp9Ci8qIGhhcm1vbnkgZGVmYXVsdCBleHBvcnQgKi8gY29uc3QgX19XRUJQQUNLX0RFRkFVTFRfRVhQT1JUX18gPSAocmVsb2FkQXBwKTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3NlbmRNZXNzYWdlLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc2VuZE1lc3NhZ2UuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKLyogaGFybW9ueSBleHBvcnQgKi8gICAiZGVmYXVsdCI6ICgpID0+IChfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXykKLyogaGFybW9ueSBleHBvcnQgKi8gfSk7Ci8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnkgV29ya2VyR2xvYmFsU2NvcGUgKi8KCi8vIFNlbmQgbWVzc2FnZXMgdG8gdGhlIG91dHNpZGUsIHNvIHBsdWdpbnMgY2FuIGNvbnN1bWUgaXQuCi8qKgogKiBAcGFyYW0ge3N0cmluZ30gdHlwZQogKiBAcGFyYW0ge2FueX0gW2RhdGFdCiAqLwpmdW5jdGlvbiBzZW5kTXNnKHR5cGUsIGRhdGEpIHsKICBpZiAodHlwZW9mIHNlbGYgIT09ICJ1bmRlZmluZWQiICYmICh0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgPT09ICJ1bmRlZmluZWQiIHx8ICEoc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlKSkpIHsKICAgIHNlbGYucG9zdE1lc3NhZ2UoewogICAgICB0eXBlOiAid2VicGFjayIuY29uY2F0KHR5cGUpLAogICAgICBkYXRhOiBkYXRhCiAgICB9LCAiKiIpOwogIH0KfQovKiBoYXJtb255IGRlZmF1bHQgZXhwb3J0ICovIGNvbnN0IF9fV0VCUEFDS19ERUZBVUxUX0VYUE9SVF9fID0gKHNlbmRNc2cpOwoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay1kZXYtc2VydmVyLXZpcnR1YWwtMzU0YTM1Y2QzMC8wL2NhY2hlL3dlYnBhY2stZGV2LXNlcnZlci1ucG0tNC4xMy4yLTcyY2M1NDRhODQtOWJmNTczYWJmMC56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvdXRpbHMvc3RyaXBBbnNpLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L3V0aWxzL3N0cmlwQW5zaS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Cl9fd2VicGFja19yZXF1aXJlX18ucihfX3dlYnBhY2tfZXhwb3J0c19fKTsKLyogaGFybW9ueSBleHBvcnQgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIHsKLyogaGFybW9ueSBleHBvcnQgKi8gICAiZGVmYXVsdCI6ICgpID0+IChfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXykKLyogaGFybW9ueSBleHBvcnQgKi8gfSk7CnZhciBhbnNpUmVnZXggPSBuZXcgUmVnRXhwKFsiW1xcdTAwMUJcXHUwMDlCXVtbXFxdKCkjOz9dKig/Oig/Oig/Oig/OjtbLWEtekEtWlxcZFxcLyMmLjo9PyVAfl9dKykqfFthLXpBLVpcXGRdKyg/OjtbLWEtekEtWlxcZFxcLyMmLjo9PyVAfl9dKikqKT9cXHUwMDA3KSIsICIoPzooPzpcXGR7MSw0fSg/OjtcXGR7MCw0fSkqKT9bXFxkQS1QUi1UWmNmLW5xLXV5PT48fl0pKSJdLmpvaW4oInwiKSwgImciKTsKCi8qKgogKgogKiBTdHJpcCBbQU5TSSBlc2NhcGUgY29kZXNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0FOU0lfZXNjYXBlX2NvZGUpIGZyb20gYSBzdHJpbmcuCiAqIEFkYXB0ZWQgZnJvbSBjb2RlIG9yaWdpbmFsbHkgcmVsZWFzZWQgYnkgU2luZHJlIFNvcmh1cwogKiBMaWNlbnNlZCB0aGUgTUlUIExpY2Vuc2UKICoKICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZwogKiBAcmV0dXJuIHtzdHJpbmd9CiAqLwpmdW5jdGlvbiBzdHJpcEFuc2koc3RyaW5nKSB7CiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICJzdHJpbmciKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCJFeHBlY3RlZCBhIGBzdHJpbmdgLCBnb3QgYCIuY29uY2F0KHR5cGVvZiBzdHJpbmcsICJgIikpOwogIH0KICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoYW5zaVJlZ2V4LCAiIik7Cn0KLyogaGFybW9ueSBkZWZhdWx0IGV4cG9ydCAqLyBjb25zdCBfX1dFQlBBQ0tfREVGQVVMVF9FWFBPUlRfXyA9IChzdHJpcEFuc2kpOwoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLTdlMTg3MTY3ZDEvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvZGV2LXNlcnZlci5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLTdlMTg3MTY3ZDEvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvZGV2LXNlcnZlci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKLyoKCU1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwCglBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhCiovCi8qIGdsb2JhbHMgX193ZWJwYWNrX2hhc2hfXyAqLwppZiAodHJ1ZSkgewoJdmFyIGxhc3RIYXNoOwoJdmFyIHVwVG9EYXRlID0gZnVuY3Rpb24gdXBUb0RhdGUoKSB7CgkJcmV0dXJuIGxhc3RIYXNoLmluZGV4T2YoX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkpID49IDA7Cgl9OwoJdmFyIGxvZyA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbG9nICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLXZpcnR1YWwtN2UxODcxNjdkMS8wL2NhY2hlL3dlYnBhY2stbnBtLTUuNzguMC1hZGQ3NjJjOTcyLTQyMTNlNWJjYzIuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2cuanMiKTsKCXZhciBjaGVjayA9IGZ1bmN0aW9uIGNoZWNrKCkgewoJCW1vZHVsZS5ob3QKCQkJLmNoZWNrKHRydWUpCgkJCS50aGVuKGZ1bmN0aW9uICh1cGRhdGVkTW9kdWxlcykgewoJCQkJaWYgKCF1cGRhdGVkTW9kdWxlcykgewoJCQkJCWxvZygKCQkJCQkJIndhcm5pbmciLAoJCQkJCQkiW0hNUl0gQ2Fubm90IGZpbmQgdXBkYXRlLiAiICsKCQkJCQkJCSh0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIgoJCQkJCQkJCT8gIk5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCEiCgkJCQkJCQkJOiAiUGxlYXNlIHJlbG9hZCBtYW51YWxseSEiKQoJCQkJCSk7CgkJCQkJbG9nKAoJCQkJCQkid2FybmluZyIsCgkJCQkJCSJbSE1SXSAoUHJvYmFibHkgYmVjYXVzZSBvZiByZXN0YXJ0aW5nIHRoZSB3ZWJwYWNrLWRldi1zZXJ2ZXIpIgoJCQkJCSk7CgkJCQkJaWYgKHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiKSB7CgkJCQkJCXdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKCQkJCQl9CgkJCQkJcmV0dXJuOwoJCQkJfQoKCQkJCWlmICghdXBUb0RhdGUoKSkgewoJCQkJCWNoZWNrKCk7CgkJCQl9CgoJCQkJX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9sb2ctYXBwbHktcmVzdWx0ICovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLXZpcnR1YWwtN2UxODcxNjdkMS8wL2NhY2hlL3dlYnBhY2stbnBtLTUuNzguMC1hZGQ3NjJjOTcyLTQyMTNlNWJjYzIuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2ctYXBwbHktcmVzdWx0LmpzIikodXBkYXRlZE1vZHVsZXMsIHVwZGF0ZWRNb2R1bGVzKTsKCgkJCQlpZiAodXBUb0RhdGUoKSkgewoJCQkJCWxvZygiaW5mbyIsICJbSE1SXSBBcHAgaXMgdXAgdG8gZGF0ZS4iKTsKCQkJCX0KCQkJfSkKCQkJLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsKCQkJCXZhciBzdGF0dXMgPSBtb2R1bGUuaG90LnN0YXR1cygpOwoJCQkJaWYgKFsiYWJvcnQiLCAiZmFpbCJdLmluZGV4T2Yoc3RhdHVzKSA+PSAwKSB7CgkJCQkJbG9nKAoJCQkJCQkid2FybmluZyIsCgkJCQkJCSJbSE1SXSBDYW5ub3QgYXBwbHkgdXBkYXRlLiAiICsKCQkJCQkJCSh0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIgoJCQkJCQkJCT8gIk5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCEiCgkJCQkJCQkJOiAiUGxlYXNlIHJlbG9hZCBtYW51YWxseSEiKQoJCQkJCSk7CgkJCQkJbG9nKCJ3YXJuaW5nIiwgIltITVJdICIgKyBsb2cuZm9ybWF0RXJyb3IoZXJyKSk7CgkJCQkJaWYgKHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiKSB7CgkJCQkJCXdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKCQkJCQl9CgkJCQl9IGVsc2UgewoJCQkJCWxvZygid2FybmluZyIsICJbSE1SXSBVcGRhdGUgZmFpbGVkOiAiICsgbG9nLmZvcm1hdEVycm9yKGVycikpOwoJCQkJfQoJCQl9KTsKCX07Cgl2YXIgaG90RW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vZW1pdHRlciAqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLTdlMTg3MTY3ZDEvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvZW1pdHRlci5qcyIpOwoJaG90RW1pdHRlci5vbigid2VicGFja0hvdFVwZGF0ZSIsIGZ1bmN0aW9uIChjdXJyZW50SGFzaCkgewoJCWxhc3RIYXNoID0gY3VycmVudEhhc2g7CgkJaWYgKCF1cFRvRGF0ZSgpICYmIG1vZHVsZS5ob3Quc3RhdHVzKCkgPT09ICJpZGxlIikgewoJCQlsb2coImluZm8iLCAiW0hNUl0gQ2hlY2tpbmcgZm9yIHVwZGF0ZXMgb24gdGhlIHNlcnZlci4uLiIpOwoJCQljaGVjaygpOwoJCX0KCX0pOwoJbG9nKCJpbmZvIiwgIltITVJdIFdhaXRpbmcgZm9yIHVwZGF0ZSBzaWduYWwgZnJvbSBXRFMuLi4iKTsKfSBlbHNlIHt9CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLTdlMTg3MTY3ZDEvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvZW1pdHRlci5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLTdlMTg3MTY3ZDEvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvZW1pdHRlci5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKdmFyIEV2ZW50RW1pdHRlciA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIGV2ZW50cyAqLyAiLi4vLi4vLnlhcm4vY2FjaGUvZXZlbnRzLW5wbS0zLjMuMC1jMjgwYmM3ZTQ4LWY2ZjQ4N2FkMjEuemlwL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIik7Cm1vZHVsZS5leHBvcnRzID0gbmV3IEV2ZW50RW1pdHRlcigpOwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stdmlydHVhbC03ZTE4NzE2N2QxLzAvY2FjaGUvd2VicGFjay1ucG0tNS43OC4wLWFkZDc2MmM5NzItNDIxM2U1YmNjMi56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy1hcHBseS1yZXN1bHQuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stdmlydHVhbC03ZTE4NzE2N2QxLzAvY2FjaGUvd2VicGFjay1ucG0tNS43OC4wLWFkZDc2MmM5NzItNDIxM2U1YmNjMi56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy1hcHBseS1yZXN1bHQuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlLCBfX3VudXNlZF93ZWJwYWNrX2V4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pID0+IHsKCi8qCglNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocAoJQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYQoqLwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cGRhdGVkTW9kdWxlcywgcmVuZXdlZE1vZHVsZXMpIHsKCXZhciB1bmFjY2VwdGVkTW9kdWxlcyA9IHVwZGF0ZWRNb2R1bGVzLmZpbHRlcihmdW5jdGlvbiAobW9kdWxlSWQpIHsKCQlyZXR1cm4gcmVuZXdlZE1vZHVsZXMgJiYgcmVuZXdlZE1vZHVsZXMuaW5kZXhPZihtb2R1bGVJZCkgPCAwOwoJfSk7Cgl2YXIgbG9nID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9sb2cgKi8gIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stdmlydHVhbC03ZTE4NzE2N2QxLzAvY2FjaGUvd2VicGFjay1ucG0tNS43OC4wLWFkZDc2MmM5NzItNDIxM2U1YmNjMi56aXAvbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L2xvZy5qcyIpOwoKCWlmICh1bmFjY2VwdGVkTW9kdWxlcy5sZW5ndGggPiAwKSB7CgkJbG9nKAoJCQkid2FybmluZyIsCgkJCSJbSE1SXSBUaGUgZm9sbG93aW5nIG1vZHVsZXMgY291bGRuJ3QgYmUgaG90IHVwZGF0ZWQ6IChUaGV5IHdvdWxkIG5lZWQgYSBmdWxsIHJlbG9hZCEpIgoJCSk7CgkJdW5hY2NlcHRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbiAobW9kdWxlSWQpIHsKCQkJbG9nKCJ3YXJuaW5nIiwgIltITVJdICAtICIgKyBtb2R1bGVJZCk7CgkJfSk7Cgl9CgoJaWYgKCFyZW5ld2VkTW9kdWxlcyB8fCByZW5ld2VkTW9kdWxlcy5sZW5ndGggPT09IDApIHsKCQlsb2coImluZm8iLCAiW0hNUl0gTm90aGluZyBob3QgdXBkYXRlZC4iKTsKCX0gZWxzZSB7CgkJbG9nKCJpbmZvIiwgIltITVJdIFVwZGF0ZWQgbW9kdWxlczoiKTsKCQlyZW5ld2VkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uIChtb2R1bGVJZCkgewoJCQlpZiAodHlwZW9mIG1vZHVsZUlkID09PSAic3RyaW5nIiAmJiBtb2R1bGVJZC5pbmRleE9mKCIhIikgIT09IC0xKSB7CgkJCQl2YXIgcGFydHMgPSBtb2R1bGVJZC5zcGxpdCgiISIpOwoJCQkJbG9nLmdyb3VwQ29sbGFwc2VkKCJpbmZvIiwgIltITVJdICAtICIgKyBwYXJ0cy5wb3AoKSk7CgkJCQlsb2coImluZm8iLCAiW0hNUl0gIC0gIiArIG1vZHVsZUlkKTsKCQkJCWxvZy5ncm91cEVuZCgiaW5mbyIpOwoJCQl9IGVsc2UgewoJCQkJbG9nKCJpbmZvIiwgIltITVJdICAtICIgKyBtb2R1bGVJZCk7CgkJCX0KCQl9KTsKCQl2YXIgbnVtYmVySWRzID0gcmVuZXdlZE1vZHVsZXMuZXZlcnkoZnVuY3Rpb24gKG1vZHVsZUlkKSB7CgkJCXJldHVybiB0eXBlb2YgbW9kdWxlSWQgPT09ICJudW1iZXIiOwoJCX0pOwoJCWlmIChudW1iZXJJZHMpCgkJCWxvZygKCQkJCSJpbmZvIiwKCQkJCSdbSE1SXSBDb25zaWRlciB1c2luZyB0aGUgb3B0aW1pemF0aW9uLm1vZHVsZUlkczogIm5hbWVkIiBmb3IgbW9kdWxlIG5hbWVzLicKCQkJKTsKCX0KfTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9fX3ZpcnR1YWxfXy93ZWJwYWNrLXZpcnR1YWwtN2UxODcxNjdkMS8wL2NhY2hlL3dlYnBhY2stbnBtLTUuNzguMC1hZGQ3NjJjOTcyLTQyMTNlNWJjYzIuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2cuanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLTdlMTg3MTY3ZDEvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7Cgp2YXIgbG9nTGV2ZWwgPSAiaW5mbyI7CgpmdW5jdGlvbiBkdW1teSgpIHt9CgpmdW5jdGlvbiBzaG91bGRMb2cobGV2ZWwpIHsKCXZhciBzaG91bGRMb2cgPQoJCShsb2dMZXZlbCA9PT0gImluZm8iICYmIGxldmVsID09PSAiaW5mbyIpIHx8CgkJKFsiaW5mbyIsICJ3YXJuaW5nIl0uaW5kZXhPZihsb2dMZXZlbCkgPj0gMCAmJiBsZXZlbCA9PT0gIndhcm5pbmciKSB8fAoJCShbImluZm8iLCAid2FybmluZyIsICJlcnJvciJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09ICJlcnJvciIpOwoJcmV0dXJuIHNob3VsZExvZzsKfQoKZnVuY3Rpb24gbG9nR3JvdXAobG9nRm4pIHsKCXJldHVybiBmdW5jdGlvbiAobGV2ZWwsIG1zZykgewoJCWlmIChzaG91bGRMb2cobGV2ZWwpKSB7CgkJCWxvZ0ZuKG1zZyk7CgkJfQoJfTsKfQoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGV2ZWwsIG1zZykgewoJaWYgKHNob3VsZExvZyhsZXZlbCkpIHsKCQlpZiAobGV2ZWwgPT09ICJpbmZvIikgewoJCQljb25zb2xlLmxvZyhtc2cpOwoJCX0gZWxzZSBpZiAobGV2ZWwgPT09ICJ3YXJuaW5nIikgewoJCQljb25zb2xlLndhcm4obXNnKTsKCQl9IGVsc2UgaWYgKGxldmVsID09PSAiZXJyb3IiKSB7CgkJCWNvbnNvbGUuZXJyb3IobXNnKTsKCQl9Cgl9Cn07CgovKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMgKi8KdmFyIGdyb3VwID0gY29uc29sZS5ncm91cCB8fCBkdW1teTsKdmFyIGdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZCB8fCBkdW1teTsKdmFyIGdyb3VwRW5kID0gY29uc29sZS5ncm91cEVuZCB8fCBkdW1teTsKLyogZXNsaW50LWVuYWJsZSBub2RlL25vLXVuc3VwcG9ydGVkLWZlYXR1cmVzL25vZGUtYnVpbHRpbnMgKi8KCm1vZHVsZS5leHBvcnRzLmdyb3VwID0gbG9nR3JvdXAoZ3JvdXApOwoKbW9kdWxlLmV4cG9ydHMuZ3JvdXBDb2xsYXBzZWQgPSBsb2dHcm91cChncm91cENvbGxhcHNlZCk7Cgptb2R1bGUuZXhwb3J0cy5ncm91cEVuZCA9IGxvZ0dyb3VwKGdyb3VwRW5kKTsKCm1vZHVsZS5leHBvcnRzLnNldExvZ0xldmVsID0gZnVuY3Rpb24gKGxldmVsKSB7Cglsb2dMZXZlbCA9IGxldmVsOwp9OwoKbW9kdWxlLmV4cG9ydHMuZm9ybWF0RXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7Cgl2YXIgbWVzc2FnZSA9IGVyci5tZXNzYWdlOwoJdmFyIHN0YWNrID0gZXJyLnN0YWNrOwoJaWYgKCFzdGFjaykgewoJCXJldHVybiBtZXNzYWdlOwoJfSBlbHNlIGlmIChzdGFjay5pbmRleE9mKG1lc3NhZ2UpIDwgMCkgewoJCXJldHVybiBtZXNzYWdlICsgIlxuIiArIHN0YWNrOwoJfSBlbHNlIHsKCQlyZXR1cm4gc3RhY2s7Cgl9Cn07CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vY2FjaGUvYW5zaS1odG1sLWNvbW11bml0eS1ucG0tMC4wLjgtNWVhZWY1NWYxYi0wNGM1NjhlODM0LnppcC9ub2RlX21vZHVsZXMvYW5zaS1odG1sLWNvbW11bml0eS9pbmRleC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vY2FjaGUvYW5zaS1odG1sLWNvbW11bml0eS1ucG0tMC4wLjgtNWVhZWY1NWYxYi0wNGM1NjhlODM0LnppcC9ub2RlX21vZHVsZXMvYW5zaS1odG1sLWNvbW11bml0eS9pbmRleC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUpID0+IHsKCiJ1c2Ugc3RyaWN0IjsKCgptb2R1bGUuZXhwb3J0cyA9IGFuc2lIVE1MCgovLyBSZWZlcmVuY2UgdG8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9hbnNpLXJlZ2V4CnZhciBfcmVnQU5TSSA9IC8oPzooPzpcdTAwMWJcWyl8XHUwMDliKSg/Oig/OlswLTldezEsM30pPyg/Oig/OjtbMC05XXswLDN9KSopP1tBLU18Zi1tXSl8XHUwMDFiW0EtTV0vCgp2YXIgX2RlZkNvbG9ycyA9IHsKICByZXNldDogWydmZmYnLCAnMDAwJ10sIC8vIFtGT1JFR1JPVURfQ09MT1IsIEJBQ0tHUk9VTkRfQ09MT1JdCiAgYmxhY2s6ICcwMDAnLAogIHJlZDogJ2ZmMDAwMCcsCiAgZ3JlZW46ICcyMDk4MDUnLAogIHllbGxvdzogJ2U4YmYwMycsCiAgYmx1ZTogJzAwMDBmZicsCiAgbWFnZW50YTogJ2ZmMDBmZicsCiAgY3lhbjogJzAwZmZlZScsCiAgbGlnaHRncmV5OiAnZjBmMGYwJywKICBkYXJrZ3JleTogJzg4OCcKfQp2YXIgX3N0eWxlcyA9IHsKICAzMDogJ2JsYWNrJywKICAzMTogJ3JlZCcsCiAgMzI6ICdncmVlbicsCiAgMzM6ICd5ZWxsb3cnLAogIDM0OiAnYmx1ZScsCiAgMzU6ICdtYWdlbnRhJywKICAzNjogJ2N5YW4nLAogIDM3OiAnbGlnaHRncmV5Jwp9CnZhciBfb3BlblRhZ3MgPSB7CiAgJzEnOiAnZm9udC13ZWlnaHQ6Ym9sZCcsIC8vIGJvbGQKICAnMic6ICdvcGFjaXR5OjAuNScsIC8vIGRpbQogICczJzogJzxpPicsIC8vIGl0YWxpYwogICc0JzogJzx1PicsIC8vIHVuZGVyc2NvcmUKICAnOCc6ICdkaXNwbGF5Om5vbmUnLCAvLyBoaWRkZW4KICAnOSc6ICc8ZGVsPicgLy8gZGVsZXRlCn0KdmFyIF9jbG9zZVRhZ3MgPSB7CiAgJzIzJzogJzwvaT4nLCAvLyByZXNldCBpdGFsaWMKICAnMjQnOiAnPC91PicsIC8vIHJlc2V0IHVuZGVyc2NvcmUKICAnMjknOiAnPC9kZWw+JyAvLyByZXNldCBkZWxldGUKfQoKO1swLCAyMSwgMjIsIDI3LCAyOCwgMzksIDQ5XS5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7CiAgX2Nsb3NlVGFnc1tuXSA9ICc8L3NwYW4+Jwp9KQoKLyoqCiAqIENvbnZlcnRzIHRleHQgd2l0aCBBTlNJIGNvbG9yIGNvZGVzIHRvIEhUTUwgbWFya3VwLgogKiBAcGFyYW0ge1N0cmluZ30gdGV4dAogKiBAcmV0dXJucyB7Kn0KICovCmZ1bmN0aW9uIGFuc2lIVE1MICh0ZXh0KSB7CiAgLy8gUmV0dXJucyB0aGUgdGV4dCBpZiB0aGUgc3RyaW5nIGhhcyBubyBBTlNJIGVzY2FwZSBjb2RlLgogIGlmICghX3JlZ0FOU0kudGVzdCh0ZXh0KSkgewogICAgcmV0dXJuIHRleHQKICB9CgogIC8vIENhY2hlIG9wZW5lZCBzZXF1ZW5jZS4KICB2YXIgYW5zaUNvZGVzID0gW10KICAvLyBSZXBsYWNlIHdpdGggbWFya3VwLgogIHZhciByZXQgPSB0ZXh0LnJlcGxhY2UoL1wwMzNcWyhcZCspbS9nLCBmdW5jdGlvbiAobWF0Y2gsIHNlcSkgewogICAgdmFyIG90ID0gX29wZW5UYWdzW3NlcV0KICAgIGlmIChvdCkgewogICAgICAvLyBJZiBjdXJyZW50IHNlcXVlbmNlIGhhcyBiZWVuIG9wZW5lZCwgY2xvc2UgaXQuCiAgICAgIGlmICghIX5hbnNpQ29kZXMuaW5kZXhPZihzZXEpKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0CiAgICAgICAgYW5zaUNvZGVzLnBvcCgpCiAgICAgICAgcmV0dXJuICc8L3NwYW4+JwogICAgICB9CiAgICAgIC8vIE9wZW4gdGFnLgogICAgICBhbnNpQ29kZXMucHVzaChzZXEpCiAgICAgIHJldHVybiBvdFswXSA9PT0gJzwnID8gb3QgOiAnPHNwYW4gc3R5bGU9IicgKyBvdCArICc7Ij4nCiAgICB9CgogICAgdmFyIGN0ID0gX2Nsb3NlVGFnc1tzZXFdCiAgICBpZiAoY3QpIHsKICAgICAgLy8gUG9wIHNlcXVlbmNlCiAgICAgIGFuc2lDb2Rlcy5wb3AoKQogICAgICByZXR1cm4gY3QKICAgIH0KICAgIHJldHVybiAnJwogIH0pCgogIC8vIE1ha2Ugc3VyZSB0YWdzIGFyZSBjbG9zZWQuCiAgdmFyIGwgPSBhbnNpQ29kZXMubGVuZ3RoCiAgOyhsID4gMCkgJiYgKHJldCArPSBBcnJheShsICsgMSkuam9pbignPC9zcGFuPicpKQoKICByZXR1cm4gcmV0Cn0KCi8qKgogKiBDdXN0b21pemUgY29sb3JzLgogKiBAcGFyYW0ge09iamVjdH0gY29sb3JzIHJlZmVyZW5jZSB0byBfZGVmQ29sb3JzCiAqLwphbnNpSFRNTC5zZXRDb2xvcnMgPSBmdW5jdGlvbiAoY29sb3JzKSB7CiAgaWYgKHR5cGVvZiBjb2xvcnMgIT09ICdvYmplY3QnKSB7CiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bjb2xvcnNgIHBhcmFtZXRlciBtdXN0IGJlIGFuIE9iamVjdC4nKQogIH0KCiAgdmFyIF9maW5hbENvbG9ycyA9IHt9CiAgZm9yICh2YXIga2V5IGluIF9kZWZDb2xvcnMpIHsKICAgIHZhciBoZXggPSBjb2xvcnMuaGFzT3duUHJvcGVydHkoa2V5KSA/IGNvbG9yc1trZXldIDogbnVsbAogICAgaWYgKCFoZXgpIHsKICAgICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBfZGVmQ29sb3JzW2tleV0KICAgICAgY29udGludWUKICAgIH0KICAgIGlmICgncmVzZXQnID09PSBrZXkpIHsKICAgICAgaWYgKHR5cGVvZiBoZXggPT09ICdzdHJpbmcnKSB7CiAgICAgICAgaGV4ID0gW2hleF0KICAgICAgfQogICAgICBpZiAoIUFycmF5LmlzQXJyYXkoaGV4KSB8fCBoZXgubGVuZ3RoID09PSAwIHx8IGhleC5zb21lKGZ1bmN0aW9uIChoKSB7CiAgICAgICAgcmV0dXJuIHR5cGVvZiBoICE9PSAnc3RyaW5nJwogICAgICB9KSkgewogICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHZhbHVlIG9mIGAnICsga2V5ICsgJ2AgcHJvcGVydHkgbXVzdCBiZSBhbiBBcnJheSBhbmQgZWFjaCBpdGVtIGNvdWxkIG9ubHkgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKQogICAgICB9CiAgICAgIHZhciBkZWZIZXhDb2xvciA9IF9kZWZDb2xvcnNba2V5XQogICAgICBpZiAoIWhleFswXSkgewogICAgICAgIGhleFswXSA9IGRlZkhleENvbG9yWzBdCiAgICAgIH0KICAgICAgaWYgKGhleC5sZW5ndGggPT09IDEgfHwgIWhleFsxXSkgewogICAgICAgIGhleCA9IFtoZXhbMF1dCiAgICAgICAgaGV4LnB1c2goZGVmSGV4Q29sb3JbMV0pCiAgICAgIH0KCiAgICAgIGhleCA9IGhleC5zbGljZSgwLCAyKQogICAgfSBlbHNlIGlmICh0eXBlb2YgaGV4ICE9PSAnc3RyaW5nJykgewogICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBvZiBgJyArIGtleSArICdgIHByb3BlcnR5IG11c3QgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKQogICAgfQogICAgX2ZpbmFsQ29sb3JzW2tleV0gPSBoZXgKICB9CiAgX3NldFRhZ3MoX2ZpbmFsQ29sb3JzKQp9CgovKioKICogUmVzZXQgY29sb3JzLgogKi8KYW5zaUhUTUwucmVzZXQgPSBmdW5jdGlvbiAoKSB7CiAgX3NldFRhZ3MoX2RlZkNvbG9ycykKfQoKLyoqCiAqIEV4cG9zZSB0YWdzLCBpbmNsdWRpbmcgb3BlbiBhbmQgY2xvc2UuCiAqIEB0eXBlIHtPYmplY3R9CiAqLwphbnNpSFRNTC50YWdzID0ge30KCmlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ29wZW4nLCB7CiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9vcGVuVGFncyB9CiAgfSkKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ2Nsb3NlJywgewogICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfY2xvc2VUYWdzIH0KICB9KQp9IGVsc2UgewogIGFuc2lIVE1MLnRhZ3Mub3BlbiA9IF9vcGVuVGFncwogIGFuc2lIVE1MLnRhZ3MuY2xvc2UgPSBfY2xvc2VUYWdzCn0KCmZ1bmN0aW9uIF9zZXRUYWdzIChjb2xvcnMpIHsKICAvLyByZXNldCBhbGwKICBfb3BlblRhZ3NbJzAnXSA9ICdmb250LXdlaWdodDpub3JtYWw7b3BhY2l0eToxO2NvbG9yOiMnICsgY29sb3JzLnJlc2V0WzBdICsgJztiYWNrZ3JvdW5kOiMnICsgY29sb3JzLnJlc2V0WzFdCiAgLy8gaW52ZXJzZQogIF9vcGVuVGFnc1snNyddID0gJ2NvbG9yOiMnICsgY29sb3JzLnJlc2V0WzFdICsgJztiYWNrZ3JvdW5kOiMnICsgY29sb3JzLnJlc2V0WzBdCiAgLy8gZGFyayBncmV5CiAgX29wZW5UYWdzWyc5MCddID0gJ2NvbG9yOiMnICsgY29sb3JzLmRhcmtncmV5CgogIGZvciAodmFyIGNvZGUgaW4gX3N0eWxlcykgewogICAgdmFyIGNvbG9yID0gX3N0eWxlc1tjb2RlXQogICAgdmFyIG9yaUNvbG9yID0gY29sb3JzW2NvbG9yXSB8fCAnMDAwJwogICAgX29wZW5UYWdzW2NvZGVdID0gJ2NvbG9yOiMnICsgb3JpQ29sb3IKICAgIGNvZGUgPSBwYXJzZUludChjb2RlKQogICAgX29wZW5UYWdzWyhjb2RlICsgMTApLnRvU3RyaW5nKCldID0gJ2JhY2tncm91bmQ6IycgKyBvcmlDb2xvcgogIH0KfQoKYW5zaUhUTUwucmVzZXQoKQoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL2NhY2hlL2V2ZW50cy1ucG0tMy4zLjAtYzI4MGJjN2U0OC1mNmY0ODdhZDIxLnppcC9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9jYWNoZS9ldmVudHMtbnBtLTMuMy4wLWMyODBiYzdlNDgtZjZmNDg3YWQyMS56aXAvbm9kZV9tb2R1bGVzL2V2ZW50cy9ldmVudHMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUpID0+IHsKCiJ1c2Ugc3RyaWN0IjsKLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuCi8vCi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhCi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUKLy8gIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZwovLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsCi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQKLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlCi8vIGZvbGxvd2luZyBjb25kaXRpb25zOgovLwovLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZAovLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KLy8KLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MKLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRgovLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOCi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLAovLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IKLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRQovLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKCgp2YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsCnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nCiAgPyBSLmFwcGx5CiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykgewogICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpOwogIH0KCnZhciBSZWZsZWN0T3duS2V5cwppZiAoUiAmJiB0eXBlb2YgUi5vd25LZXlzID09PSAnZnVuY3Rpb24nKSB7CiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXMKfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7CiAgUmVmbGVjdE93bktleXMgPSBmdW5jdGlvbiBSZWZsZWN0T3duS2V5cyh0YXJnZXQpIHsKICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpCiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTsKICB9Owp9IGVsc2UgewogIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7CiAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGFyZ2V0KTsKICB9Owp9CgpmdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykgewogIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpOwp9Cgp2YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHsKICByZXR1cm4gdmFsdWUgIT09IHZhbHVlOwp9CgpmdW5jdGlvbiBFdmVudEVtaXR0ZXIoKSB7CiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTsKfQptb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjsKbW9kdWxlLmV4cG9ydHMub25jZSA9IG9uY2U7CgovLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLngKRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjsKCkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDsKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwOwpFdmVudEVtaXR0ZXIucHJvdG90eXBlLl9tYXhMaXN0ZW5lcnMgPSB1bmRlZmluZWQ7CgovLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmUKLy8gYWRkZWQgdG8gaXQuIFRoaXMgaXMgYSB1c2VmdWwgZGVmYXVsdCB3aGljaCBoZWxwcyBmaW5kaW5nIG1lbW9yeSBsZWFrcy4KdmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDsKCmZ1bmN0aW9uIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpIHsKICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgImxpc3RlbmVyIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7CiAgfQp9CgpPYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24oKSB7CiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVyczsKICB9LAogIHNldDogZnVuY3Rpb24oYXJnKSB7CiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7CiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgImRlZmF1bHRNYXhMaXN0ZW5lcnMiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpOwogICAgfQogICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZzsKICB9Cn0pOwoKRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHsKCiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8CiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHsKICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7CiAgfQoKICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkOwp9OwoKLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzCi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLnNldE1heExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldE1heExpc3RlbmVycyhuKSB7CiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiAibiIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpOwogIH0KICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSBuOwogIHJldHVybiB0aGlzOwp9OwoKZnVuY3Rpb24gX2dldE1heExpc3RlbmVycyh0aGF0KSB7CiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKQogICAgcmV0dXJuIEV2ZW50RW1pdHRlci5kZWZhdWx0TWF4TGlzdGVuZXJzOwogIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7Cn0KCkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkgewogIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7CiAgdmFyIGFyZ3MgPSBbXTsKICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7CiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7CgogIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7CiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKQogICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkKTsKICBlbHNlIGlmICghZG9FcnJvcikKICAgIHJldHVybiBmYWxzZTsKCiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LgogIGlmIChkb0Vycm9yKSB7CiAgICB2YXIgZXI7CiAgICBpZiAoYXJncy5sZW5ndGggPiAwKQogICAgICBlciA9IGFyZ3NbMF07CiAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikgewogICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3cKICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi4KICAgICAgdGhyb3cgZXI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50CiAgICB9CiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyCiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmhhbmRsZWQgZXJyb3IuJyArIChlciA/ICcgKCcgKyBlci5tZXNzYWdlICsgJyknIDogJycpKTsKICAgIGVyci5jb250ZXh0ID0gZXI7CiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50CiAgfQoKICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTsKCiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZCkKICAgIHJldHVybiBmYWxzZTsKCiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7CiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7CiAgfSBlbHNlIHsKICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDsKICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKQogICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTsKICB9CgogIHJldHVybiB0cnVlOwp9OwoKZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHsKICB2YXIgbTsKICB2YXIgZXZlbnRzOwogIHZhciBleGlzdGluZzsKCiAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7CgogIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzOwogIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkgewogICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7CiAgfSBlbHNlIHsKICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09ICJuZXdMaXN0ZW5lciIhIEJlZm9yZQogICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgIm5ld0xpc3RlbmVyIi4KICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkgewogICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLAogICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpOwoKICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZQogICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0CiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzOwogICAgfQogICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07CiAgfQoKICBpZiAoZXhpc3RpbmcgPT09IHVuZGVmaW5lZCkgewogICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuCiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyOwogICAgKyt0YXJnZXQuX2V2ZW50c0NvdW50OwogIH0gZWxzZSB7CiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIC8vIEFkZGluZyB0aGUgc2Vjb25kIGVsZW1lbnQsIG5lZWQgdG8gY2hhbmdlIHRvIGFycmF5LgogICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9CiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07CiAgICAgIC8vIElmIHdlJ3ZlIGFscmVhZHkgZ290IGFuIGFycmF5LCBqdXN0IGFwcGVuZC4KICAgIH0gZWxzZSBpZiAocHJlcGVuZCkgewogICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTsKICAgIH0gZWxzZSB7CiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpOwogICAgfQoKICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrCiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpOwogICAgaWYgKG0gPiAwICYmIGV4aXN0aW5nLmxlbmd0aCA+IG0gJiYgIWV4aXN0aW5nLndhcm5lZCkgewogICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlOwogICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZwogICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgKICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZGVkLiBVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byAnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTsKICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7CiAgICAgIHcuZW1pdHRlciA9IHRhcmdldDsKICAgICAgdy50eXBlID0gdHlwZTsKICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDsKICAgICAgUHJvY2Vzc0VtaXRXYXJuaW5nKHcpOwogICAgfQogIH0KCiAgcmV0dXJuIHRhcmdldDsKfQoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7CiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9CiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHsKICAgICAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgdHJ1ZSk7CiAgICB9OwoKZnVuY3Rpb24gb25jZVdyYXBwZXIoKSB7CiAgaWYgKCF0aGlzLmZpcmVkKSB7CiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTsKICAgIHRoaXMuZmlyZWQgPSB0cnVlOwogICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApCiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpOwogICAgcmV0dXJuIHRoaXMubGlzdGVuZXIuYXBwbHkodGhpcy50YXJnZXQsIGFyZ3VtZW50cyk7CiAgfQp9CgpmdW5jdGlvbiBfb25jZVdyYXAodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lcikgewogIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9OwogIHZhciB3cmFwcGVkID0gb25jZVdyYXBwZXIuYmluZChzdGF0ZSk7CiAgd3JhcHBlZC5saXN0ZW5lciA9IGxpc3RlbmVyOwogIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7CiAgcmV0dXJuIHdyYXBwZWQ7Cn0KCkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHsKICBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKTsKICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpOwogIHJldHVybiB0aGlzOwp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID0KICAgIGZ1bmN0aW9uIHByZXBlbmRPbmNlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHsKICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7CiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpOwogICAgICByZXR1cm4gdGhpczsKICAgIH07CgovLyBFbWl0cyBhICdyZW1vdmVMaXN0ZW5lcicgZXZlbnQgaWYgYW5kIG9ubHkgaWYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkLgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID0KICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7CiAgICAgIHZhciBsaXN0LCBldmVudHMsIHBvc2l0aW9uLCBpLCBvcmlnaW5hbExpc3RlbmVyOwoKICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7CgogICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7CiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkKICAgICAgICByZXR1cm4gdGhpczsKCiAgICAgIGxpc3QgPSBldmVudHNbdHlwZV07CiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpCiAgICAgICAgcmV0dXJuIHRoaXM7CgogICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHsKICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkKICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgICAgZWxzZSB7CiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcikKICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbGlzdCAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHBvc2l0aW9uID0gLTE7CgogICAgICAgIGZvciAoaSA9IGxpc3QubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikgewogICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjsKICAgICAgICAgICAgcG9zaXRpb24gPSBpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGlmIChwb3NpdGlvbiA8IDApCiAgICAgICAgICByZXR1cm4gdGhpczsKCiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKQogICAgICAgICAgbGlzdC5zaGlmdCgpOwogICAgICAgIGVsc2UgewogICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTsKICAgICAgICB9CgogICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSkKICAgICAgICAgIGV2ZW50c1t0eXBlXSA9IGxpc3RbMF07CgogICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZCkKICAgICAgICAgIHRoaXMuZW1pdCgncmVtb3ZlTGlzdGVuZXInLCB0eXBlLCBvcmlnaW5hbExpc3RlbmVyIHx8IGxpc3RlbmVyKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXM7CiAgICB9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vZmYgPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyOwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPQogICAgZnVuY3Rpb24gcmVtb3ZlQWxsTGlzdGVuZXJzKHR5cGUpIHsKICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpOwoKICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzOwogICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpCiAgICAgICAgcmV0dXJuIHRoaXM7CgogICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0CiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwOwogICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKQogICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgICAgICAgZWxzZQogICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpczsKICAgICAgfQoKICAgICAgLy8gZW1pdCByZW1vdmVMaXN0ZW5lciBmb3IgYWxsIGxpc3RlbmVycyBvbiBhbGwgZXZlbnRzCiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpOwogICAgICAgIHZhciBrZXk7CiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHsKICAgICAgICAgIGtleSA9IGtleXNbaV07CiAgICAgICAgICBpZiAoa2V5ID09PSAncmVtb3ZlTGlzdGVuZXInKSBjb250aW51ZTsKICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7CiAgICAgICAgfQogICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCdyZW1vdmVMaXN0ZW5lcicpOwogICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwOwogICAgICAgIHJldHVybiB0aGlzOwogICAgICB9CgogICAgICBsaXN0ZW5lcnMgPSBldmVudHNbdHlwZV07CgogICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzKTsKICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkgewogICAgICAgIC8vIExJRk8gb3JkZXIKICAgICAgICBmb3IgKGkgPSBsaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHsKICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzOwogICAgfTsKCmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHsKICB2YXIgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7CgogIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkKICAgIHJldHVybiBbXTsKCiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07CiAgaWYgKGV2bGlzdGVuZXIgPT09IHVuZGVmaW5lZCkKICAgIHJldHVybiBbXTsKCiAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKQogICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdOwoKICByZXR1cm4gdW53cmFwID8KICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpOwp9CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7CiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7Cn07CgpFdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7CiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgZmFsc2UpOwp9OwoKRXZlbnRFbWl0dGVyLmxpc3RlbmVyQ291bnQgPSBmdW5jdGlvbihlbWl0dGVyLCB0eXBlKSB7CiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHsKICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7CiAgfSBlbHNlIHsKICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7CiAgfQp9OwoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDsKZnVuY3Rpb24gbGlzdGVuZXJDb3VudCh0eXBlKSB7CiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50czsKCiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKSB7CiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTsKCiAgICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHsKICAgICAgcmV0dXJuIDE7CiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkgewogICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7CiAgICB9CiAgfQoKICByZXR1cm4gMDsKfQoKRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHsKICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdOwp9OwoKZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHsKICB2YXIgY29weSA9IG5ldyBBcnJheShuKTsKICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkKICAgIGNvcHlbaV0gPSBhcnJbaV07CiAgcmV0dXJuIGNvcHk7Cn0KCmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkgewogIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKykKICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdOwogIGxpc3QucG9wKCk7Cn0KCmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHsKICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpOwogIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7CiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldOwogIH0KICByZXR1cm4gcmV0Owp9CgpmdW5jdGlvbiBvbmNlKGVtaXR0ZXIsIG5hbWUpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgZnVuY3Rpb24gZXJyb3JMaXN0ZW5lcihlcnIpIHsKICAgICAgZW1pdHRlci5yZW1vdmVMaXN0ZW5lcihuYW1lLCByZXNvbHZlcik7CiAgICAgIHJlamVjdChlcnIpOwogICAgfQoKICAgIGZ1bmN0aW9uIHJlc29sdmVyKCkgewogICAgICBpZiAodHlwZW9mIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICBlbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIGVycm9yTGlzdGVuZXIpOwogICAgICB9CiAgICAgIHJlc29sdmUoW10uc2xpY2UuY2FsbChhcmd1bWVudHMpKTsKICAgIH07CgogICAgZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIHJlc29sdmVyLCB7IG9uY2U6IHRydWUgfSk7CiAgICBpZiAobmFtZSAhPT0gJ2Vycm9yJykgewogICAgICBhZGRFcnJvckhhbmRsZXJJZkV2ZW50RW1pdHRlcihlbWl0dGVyLCBlcnJvckxpc3RlbmVyLCB7IG9uY2U6IHRydWUgfSk7CiAgICB9CiAgfSk7Cn0KCmZ1bmN0aW9uIGFkZEVycm9ySGFuZGxlcklmRXZlbnRFbWl0dGVyKGVtaXR0ZXIsIGhhbmRsZXIsIGZsYWdzKSB7CiAgaWYgKHR5cGVvZiBlbWl0dGVyLm9uID09PSAnZnVuY3Rpb24nKSB7CiAgICBldmVudFRhcmdldEFnbm9zdGljQWRkTGlzdGVuZXIoZW1pdHRlciwgJ2Vycm9yJywgaGFuZGxlciwgZmxhZ3MpOwogIH0KfQoKZnVuY3Rpb24gZXZlbnRUYXJnZXRBZ25vc3RpY0FkZExpc3RlbmVyKGVtaXR0ZXIsIG5hbWUsIGxpc3RlbmVyLCBmbGFncykgewogIGlmICh0eXBlb2YgZW1pdHRlci5vbiA9PT0gJ2Z1bmN0aW9uJykgewogICAgaWYgKGZsYWdzLm9uY2UpIHsKICAgICAgZW1pdHRlci5vbmNlKG5hbWUsIGxpc3RlbmVyKTsKICAgIH0gZWxzZSB7CiAgICAgIGVtaXR0ZXIub24obmFtZSwgbGlzdGVuZXIpOwogICAgfQogIH0gZWxzZSBpZiAodHlwZW9mIGVtaXR0ZXIuYWRkRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykgewogICAgLy8gRXZlbnRUYXJnZXQgZG9lcyBub3QgaGF2ZSBgZXJyb3JgIGV2ZW50IHNlbWFudGljcyBsaWtlIE5vZGUKICAgIC8vIEV2ZW50RW1pdHRlcnMsIHdlIGRvIG5vdCBsaXN0ZW4gZm9yIGBlcnJvcmAgZXZlbnRzIGhlcmUuCiAgICBlbWl0dGVyLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZnVuY3Rpb24gd3JhcExpc3RlbmVyKGFyZykgewogICAgICAvLyBJRSBkb2VzIG5vdCBoYXZlIGJ1aWx0aW4gYHsgb25jZTogdHJ1ZSB9YCBzdXBwb3J0IHNvIHdlCiAgICAgIC8vIGhhdmUgdG8gZG8gaXQgbWFudWFsbHkuCiAgICAgIGlmIChmbGFncy5vbmNlKSB7CiAgICAgICAgZW1pdHRlci5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIHdyYXBMaXN0ZW5lcik7CiAgICAgIH0KICAgICAgbGlzdGVuZXIoYXJnKTsKICAgIH0pOwogIH0gZWxzZSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgImVtaXR0ZXIiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBFdmVudEVtaXR0ZXIuIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBlbWl0dGVyKTsKICB9Cn0KCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9pbmRleC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL2NhY2hlL2h0bWwtZW50aXRpZXMtbnBtLTIuMy4zLWUwYWFjNjU2YWYtOTI1MjE1MDFkYS56aXAvbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2luZGV4LmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKGZ1bmN0aW9uKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7CiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkgewogICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykgewogICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldOwogICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpCiAgICAgICAgICAgICAgICB0W3BdID0gc1twXTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHQ7CiAgICB9OwogICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn07Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsICh7IHZhbHVlOiB0cnVlIH0pKTsKdmFyIG5hbWVkX3JlZmVyZW5jZXNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vbmFtZWQtcmVmZXJlbmNlcyAqLyAiLi4vLi4vLnlhcm4vY2FjaGUvaHRtbC1lbnRpdGllcy1ucG0tMi4zLjMtZTBhYWM2NTZhZi05MjUyMTUwMWRhLnppcC9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvbmFtZWQtcmVmZXJlbmNlcy5qcyIpOwp2YXIgbnVtZXJpY191bmljb2RlX21hcF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygvKiEgLi9udW1lcmljLXVuaWNvZGUtbWFwICovICIuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9udW1lcmljLXVuaWNvZGUtbWFwLmpzIik7CnZhciBzdXJyb2dhdGVfcGFpcnNfMSA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIC4vc3Vycm9nYXRlLXBhaXJzICovICIuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9zdXJyb2dhdGUtcGFpcnMuanMiKTsKdmFyIGFsbE5hbWVkUmVmZXJlbmNlcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBuYW1lZF9yZWZlcmVuY2VzXzEubmFtZWRSZWZlcmVuY2VzKSwgeyBhbGw6IG5hbWVkX3JlZmVyZW5jZXNfMS5uYW1lZFJlZmVyZW5jZXMuaHRtbDUgfSk7CnZhciBlbmNvZGVSZWdFeHBzID0gewogICAgc3BlY2lhbENoYXJzOiAvWzw+JyImXS9nLAogICAgbm9uQXNjaWk6IC8oPzpbPD4nIiZcdTAwODAtXHVEN0ZGXHVFMDAwLVx1RkZGRl18W1x1RDgwMC1cdURCRkZdW1x1REMwMC1cdURGRkZdfFtcdUQ4MDAtXHVEQkZGXSg/IVtcdURDMDAtXHVERkZGXSl8KD86W15cdUQ4MDAtXHVEQkZGXXxeKVtcdURDMDAtXHVERkZGXSkvZywKICAgIG5vbkFzY2lpUHJpbnRhYmxlOiAvKD86Wzw+JyImXHgwMS1ceDA4XHgxMS1ceDE1XHgxNy1ceDFGXHg3Zi1cdUQ3RkZcdUUwMDAtXHVGRkZGXXxbXHVEODAwLVx1REJGRl1bXHVEQzAwLVx1REZGRl18W1x1RDgwMC1cdURCRkZdKD8hW1x1REMwMC1cdURGRkZdKXwoPzpbXlx1RDgwMC1cdURCRkZdfF4pW1x1REMwMC1cdURGRkZdKS9nLAogICAgZXh0ZW5zaXZlOiAvKD86W1x4MDEtXHgwY1x4MGUtXHgxZlx4MjEtXHgyY1x4MmUtXHgyZlx4M2EtXHg0MFx4NWItXHg2MFx4N2ItXHg3ZFx4N2YtXHVEN0ZGXHVFMDAwLVx1RkZGRl18W1x1RDgwMC1cdURCRkZdW1x1REMwMC1cdURGRkZdfFtcdUQ4MDAtXHVEQkZGXSg/IVtcdURDMDAtXHVERkZGXSl8KD86W15cdUQ4MDAtXHVEQkZGXXxeKVtcdURDMDAtXHVERkZGXSkvZwp9Owp2YXIgZGVmYXVsdEVuY29kZU9wdGlvbnMgPSB7CiAgICBtb2RlOiAnc3BlY2lhbENoYXJzJywKICAgIGxldmVsOiAnYWxsJywKICAgIG51bWVyaWM6ICdkZWNpbWFsJwp9OwovKiogRW5jb2RlcyBhbGwgdGhlIG5lY2Vzc2FyeSAoc3BlY2lmaWVkIGJ5IGBsZXZlbGApIGNoYXJhY3RlcnMgaW4gdGhlIHRleHQgKi8KZnVuY3Rpb24gZW5jb2RlKHRleHQsIF9hKSB7CiAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8gZGVmYXVsdEVuY29kZU9wdGlvbnMgOiBfYSwgX2MgPSBfYi5tb2RlLCBtb2RlID0gX2MgPT09IHZvaWQgMCA/ICdzcGVjaWFsQ2hhcnMnIDogX2MsIF9kID0gX2IubnVtZXJpYywgbnVtZXJpYyA9IF9kID09PSB2b2lkIDAgPyAnZGVjaW1hbCcgOiBfZCwgX2UgPSBfYi5sZXZlbCwgbGV2ZWwgPSBfZSA9PT0gdm9pZCAwID8gJ2FsbCcgOiBfZTsKICAgIGlmICghdGV4dCkgewogICAgICAgIHJldHVybiAnJzsKICAgIH0KICAgIHZhciBlbmNvZGVSZWdFeHAgPSBlbmNvZGVSZWdFeHBzW21vZGVdOwogICAgdmFyIHJlZmVyZW5jZXMgPSBhbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmNoYXJhY3RlcnM7CiAgICB2YXIgaXNIZXggPSBudW1lcmljID09PSAnaGV4YWRlY2ltYWwnOwogICAgZW5jb2RlUmVnRXhwLmxhc3RJbmRleCA9IDA7CiAgICB2YXIgX2IgPSBlbmNvZGVSZWdFeHAuZXhlYyh0ZXh0KTsKICAgIHZhciBfYzsKICAgIGlmIChfYikgewogICAgICAgIF9jID0gJyc7CiAgICAgICAgdmFyIF9kID0gMDsKICAgICAgICBkbyB7CiAgICAgICAgICAgIGlmIChfZCAhPT0gX2IuaW5kZXgpIHsKICAgICAgICAgICAgICAgIF9jICs9IHRleHQuc3Vic3RyaW5nKF9kLCBfYi5pbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIF9lID0gX2JbMF07CiAgICAgICAgICAgIHZhciByZXN1bHRfMSA9IHJlZmVyZW5jZXNbX2VdOwogICAgICAgICAgICBpZiAoIXJlc3VsdF8xKSB7CiAgICAgICAgICAgICAgICB2YXIgY29kZV8xID0gX2UubGVuZ3RoID4gMSA/IHN1cnJvZ2F0ZV9wYWlyc18xLmdldENvZGVQb2ludChfZSwgMCkgOiBfZS5jaGFyQ29kZUF0KDApOwogICAgICAgICAgICAgICAgcmVzdWx0XzEgPSAoaXNIZXggPyAnJiN4JyArIGNvZGVfMS50b1N0cmluZygxNikgOiAnJiMnICsgY29kZV8xKSArICc7JzsKICAgICAgICAgICAgfQogICAgICAgICAgICBfYyArPSByZXN1bHRfMTsKICAgICAgICAgICAgX2QgPSBfYi5pbmRleCArIF9lLmxlbmd0aDsKICAgICAgICB9IHdoaWxlICgoX2IgPSBlbmNvZGVSZWdFeHAuZXhlYyh0ZXh0KSkpOwogICAgICAgIGlmIChfZCAhPT0gdGV4dC5sZW5ndGgpIHsKICAgICAgICAgICAgX2MgKz0gdGV4dC5zdWJzdHJpbmcoX2QpOwogICAgICAgIH0KICAgIH0KICAgIGVsc2UgewogICAgICAgIF9jID0KICAgICAgICAgICAgdGV4dDsKICAgIH0KICAgIHJldHVybiBfYzsKfQpleHBvcnRzLmVuY29kZSA9IGVuY29kZTsKdmFyIGRlZmF1bHREZWNvZGVPcHRpb25zID0gewogICAgc2NvcGU6ICdib2R5JywKICAgIGxldmVsOiAnYWxsJwp9Owp2YXIgc3RyaWN0ID0gLyYoPzojXGQrfCNbeFhdW1xkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTsvZzsKdmFyIGF0dHJpYnV0ZSA9IC8mKD86I1xkK3wjW3hYXVtcZGEtZkEtRl0rfFswLTlhLXpBLVpdKylbOz1dPy9nOwp2YXIgYmFzZURlY29kZVJlZ0V4cHMgPSB7CiAgICB4bWw6IHsKICAgICAgICBzdHJpY3Q6IHN0cmljdCwKICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSwKICAgICAgICBib2R5OiBuYW1lZF9yZWZlcmVuY2VzXzEuYm9keVJlZ0V4cHMueG1sCiAgICB9LAogICAgaHRtbDQ6IHsKICAgICAgICBzdHJpY3Q6IHN0cmljdCwKICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSwKICAgICAgICBib2R5OiBuYW1lZF9yZWZlcmVuY2VzXzEuYm9keVJlZ0V4cHMuaHRtbDQKICAgIH0sCiAgICBodG1sNTogewogICAgICAgIHN0cmljdDogc3RyaWN0LAogICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLAogICAgICAgIGJvZHk6IG5hbWVkX3JlZmVyZW5jZXNfMS5ib2R5UmVnRXhwcy5odG1sNQogICAgfQp9Owp2YXIgZGVjb2RlUmVnRXhwcyA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBiYXNlRGVjb2RlUmVnRXhwcyksIHsgYWxsOiBiYXNlRGVjb2RlUmVnRXhwcy5odG1sNSB9KTsKdmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7CnZhciBvdXRPZkJvdW5kc0NoYXIgPSBmcm9tQ2hhckNvZGUoNjU1MzMpOwp2YXIgZGVmYXVsdERlY29kZUVudGl0eU9wdGlvbnMgPSB7CiAgICBsZXZlbDogJ2FsbCcKfTsKLyoqIERlY29kZXMgYSBzaW5nbGUgZW50aXR5ICovCmZ1bmN0aW9uIGRlY29kZUVudGl0eShlbnRpdHksIF9hKSB7CiAgICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IGRlZmF1bHREZWNvZGVFbnRpdHlPcHRpb25zIDogX2EpLmxldmVsLCBsZXZlbCA9IF9iID09PSB2b2lkIDAgPyAnYWxsJyA6IF9iOwogICAgaWYgKCFlbnRpdHkpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICB9CiAgICB2YXIgX2IgPSBlbnRpdHk7CiAgICB2YXIgZGVjb2RlRW50aXR5TGFzdENoYXJfMSA9IGVudGl0eVtlbnRpdHkubGVuZ3RoIC0gMV07CiAgICBpZiAoZmFsc2UpIHt9CiAgICBlbHNlIGlmIChmYWxzZSkge30KICAgIGVsc2UgewogICAgICAgIHZhciBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xID0gYWxsTmFtZWRSZWZlcmVuY2VzW2xldmVsXS5lbnRpdGllc1tlbnRpdHldOwogICAgICAgIGlmIChkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8xKSB7CiAgICAgICAgICAgIF9iID0gZGVjb2RlUmVzdWx0QnlSZWZlcmVuY2VfMTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoZW50aXR5WzBdID09PSAnJicgJiYgZW50aXR5WzFdID09PSAnIycpIHsKICAgICAgICAgICAgdmFyIGRlY29kZVNlY29uZENoYXJfMSA9IGVudGl0eVsyXTsKICAgICAgICAgICAgdmFyIGRlY29kZUNvZGVfMSA9IGRlY29kZVNlY29uZENoYXJfMSA9PSAneCcgfHwgZGVjb2RlU2Vjb25kQ2hhcl8xID09ICdYJwogICAgICAgICAgICAgICAgPyBwYXJzZUludChlbnRpdHkuc3Vic3RyKDMpLCAxNikKICAgICAgICAgICAgICAgIDogcGFyc2VJbnQoZW50aXR5LnN1YnN0cigyKSk7CiAgICAgICAgICAgIF9iID0KICAgICAgICAgICAgICAgIGRlY29kZUNvZGVfMSA+PSAweDEwZmZmZgogICAgICAgICAgICAgICAgICAgID8gb3V0T2ZCb3VuZHNDaGFyCiAgICAgICAgICAgICAgICAgICAgOiBkZWNvZGVDb2RlXzEgPiA2NTUzNQogICAgICAgICAgICAgICAgICAgICAgICA/IHN1cnJvZ2F0ZV9wYWlyc18xLmZyb21Db2RlUG9pbnQoZGVjb2RlQ29kZV8xKQogICAgICAgICAgICAgICAgICAgICAgICA6IGZyb21DaGFyQ29kZShudW1lcmljX3VuaWNvZGVfbWFwXzEubnVtZXJpY1VuaWNvZGVNYXBbZGVjb2RlQ29kZV8xXSB8fCBkZWNvZGVDb2RlXzEpOwogICAgICAgIH0KICAgIH0KICAgIHJldHVybiBfYjsKfQpleHBvcnRzLmRlY29kZUVudGl0eSA9IGRlY29kZUVudGl0eTsKLyoqIERlY29kZXMgYWxsIGVudGl0aWVzIGluIHRoZSB0ZXh0ICovCmZ1bmN0aW9uIGRlY29kZSh0ZXh0LCBfYSkgewogICAgdmFyIGRlY29kZVNlY29uZENoYXJfMSA9IF9hID09PSB2b2lkIDAgPyBkZWZhdWx0RGVjb2RlT3B0aW9ucyA6IF9hLCBkZWNvZGVDb2RlXzEgPSBkZWNvZGVTZWNvbmRDaGFyXzEubGV2ZWwsIGxldmVsID0gZGVjb2RlQ29kZV8xID09PSB2b2lkIDAgPyAnYWxsJyA6IGRlY29kZUNvZGVfMSwgX2IgPSBkZWNvZGVTZWNvbmRDaGFyXzEuc2NvcGUsIHNjb3BlID0gX2IgPT09IHZvaWQgMCA/IGxldmVsID09PSAneG1sJyA/ICdzdHJpY3QnIDogJ2JvZHknIDogX2I7CiAgICBpZiAoIXRleHQpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICB9CiAgICB2YXIgZGVjb2RlUmVnRXhwID0gZGVjb2RlUmVnRXhwc1tsZXZlbF1bc2NvcGVdOwogICAgdmFyIHJlZmVyZW5jZXMgPSBhbGxOYW1lZFJlZmVyZW5jZXNbbGV2ZWxdLmVudGl0aWVzOwogICAgdmFyIGlzQXR0cmlidXRlID0gc2NvcGUgPT09ICdhdHRyaWJ1dGUnOwogICAgdmFyIGlzU3RyaWN0ID0gc2NvcGUgPT09ICdzdHJpY3QnOwogICAgZGVjb2RlUmVnRXhwLmxhc3RJbmRleCA9IDA7CiAgICB2YXIgcmVwbGFjZU1hdGNoXzEgPSBkZWNvZGVSZWdFeHAuZXhlYyh0ZXh0KTsKICAgIHZhciByZXBsYWNlUmVzdWx0XzE7CiAgICBpZiAocmVwbGFjZU1hdGNoXzEpIHsKICAgICAgICByZXBsYWNlUmVzdWx0XzEgPSAnJzsKICAgICAgICB2YXIgcmVwbGFjZUxhc3RJbmRleF8xID0gMDsKICAgICAgICBkbyB7CiAgICAgICAgICAgIGlmIChyZXBsYWNlTGFzdEluZGV4XzEgIT09IHJlcGxhY2VNYXRjaF8xLmluZGV4KSB7CiAgICAgICAgICAgICAgICByZXBsYWNlUmVzdWx0XzEgKz0gdGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleF8xLCByZXBsYWNlTWF0Y2hfMS5pbmRleCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJlcGxhY2VJbnB1dF8xID0gcmVwbGFjZU1hdGNoXzFbMF07CiAgICAgICAgICAgIHZhciBkZWNvZGVSZXN1bHRfMSA9IHJlcGxhY2VJbnB1dF8xOwogICAgICAgICAgICB2YXIgZGVjb2RlRW50aXR5TGFzdENoYXJfMiA9IHJlcGxhY2VJbnB1dF8xW3JlcGxhY2VJbnB1dF8xLmxlbmd0aCAtIDFdOwogICAgICAgICAgICBpZiAoaXNBdHRyaWJ1dGUKICAgICAgICAgICAgICAgICYmIGRlY29kZUVudGl0eUxhc3RDaGFyXzIgPT09ICc9JykgewogICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSByZXBsYWNlSW5wdXRfMTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChpc1N0cmljdAogICAgICAgICAgICAgICAgJiYgZGVjb2RlRW50aXR5TGFzdENoYXJfMiAhPT0gJzsnKSB7CiAgICAgICAgICAgICAgICBkZWNvZGVSZXN1bHRfMSA9IHJlcGxhY2VJbnB1dF8xOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgdmFyIGRlY29kZVJlc3VsdEJ5UmVmZXJlbmNlXzIgPSByZWZlcmVuY2VzW3JlcGxhY2VJbnB1dF8xXTsKICAgICAgICAgICAgICAgIGlmIChkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yKSB7CiAgICAgICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPSBkZWNvZGVSZXN1bHRCeVJlZmVyZW5jZV8yOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAocmVwbGFjZUlucHV0XzFbMF0gPT09ICcmJyAmJiByZXBsYWNlSW5wdXRfMVsxXSA9PT0gJyMnKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGRlY29kZVNlY29uZENoYXJfMiA9IHJlcGxhY2VJbnB1dF8xWzJdOwogICAgICAgICAgICAgICAgICAgIHZhciBkZWNvZGVDb2RlXzIgPSBkZWNvZGVTZWNvbmRDaGFyXzIgPT0gJ3gnIHx8IGRlY29kZVNlY29uZENoYXJfMiA9PSAnWCcKICAgICAgICAgICAgICAgICAgICAgICAgPyBwYXJzZUludChyZXBsYWNlSW5wdXRfMS5zdWJzdHIoMyksIDE2KQogICAgICAgICAgICAgICAgICAgICAgICA6IHBhcnNlSW50KHJlcGxhY2VJbnB1dF8xLnN1YnN0cigyKSk7CiAgICAgICAgICAgICAgICAgICAgZGVjb2RlUmVzdWx0XzEgPQogICAgICAgICAgICAgICAgICAgICAgICBkZWNvZGVDb2RlXzIgPj0gMHgxMGZmZmYKICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gb3V0T2ZCb3VuZHNDaGFyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGRlY29kZUNvZGVfMiA+IDY1NTM1CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBzdXJyb2dhdGVfcGFpcnNfMS5mcm9tQ29kZVBvaW50KGRlY29kZUNvZGVfMikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGZyb21DaGFyQ29kZShudW1lcmljX3VuaWNvZGVfbWFwXzEubnVtZXJpY1VuaWNvZGVNYXBbZGVjb2RlQ29kZV8yXSB8fCBkZWNvZGVDb2RlXzIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJlcGxhY2VSZXN1bHRfMSArPSBkZWNvZGVSZXN1bHRfMTsKICAgICAgICAgICAgcmVwbGFjZUxhc3RJbmRleF8xID0gcmVwbGFjZU1hdGNoXzEuaW5kZXggKyByZXBsYWNlSW5wdXRfMS5sZW5ndGg7CiAgICAgICAgfSB3aGlsZSAoKHJlcGxhY2VNYXRjaF8xID0gZGVjb2RlUmVnRXhwLmV4ZWModGV4dCkpKTsKICAgICAgICBpZiAocmVwbGFjZUxhc3RJbmRleF8xICE9PSB0ZXh0Lmxlbmd0aCkgewogICAgICAgICAgICByZXBsYWNlUmVzdWx0XzEgKz0gdGV4dC5zdWJzdHJpbmcocmVwbGFjZUxhc3RJbmRleF8xKTsKICAgICAgICB9CiAgICB9CiAgICBlbHNlIHsKICAgICAgICByZXBsYWNlUmVzdWx0XzEgPQogICAgICAgICAgICB0ZXh0OwogICAgfQogICAgcmV0dXJuIHJlcGxhY2VSZXN1bHRfMTsKfQpleHBvcnRzLmRlY29kZSA9IGRlY29kZTsKCgovKioqLyB9KSwKCi8qKiovICIuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9uYW1lZC1yZWZlcmVuY2VzLmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9uYW1lZC1yZWZlcmVuY2VzLmpzICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzKSA9PiB7CgoidXNlIHN0cmljdCI7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsICh7dmFsdWU6dHJ1ZX0pKTtleHBvcnRzLmJvZHlSZWdFeHBzPXt4bWw6LyYoPzojXGQrfCNbeFhdW1xkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2csaHRtbDQ6LyYoPzpuYnNwfGlleGNsfGNlbnR8cG91bmR8Y3VycmVufHllbnxicnZiYXJ8c2VjdHx1bWx8Y29weXxvcmRmfGxhcXVvfG5vdHxzaHl8cmVnfG1hY3J8ZGVnfHBsdXNtbnxzdXAyfHN1cDN8YWN1dGV8bWljcm98cGFyYXxtaWRkb3R8Y2VkaWx8c3VwMXxvcmRtfHJhcXVvfGZyYWMxNHxmcmFjMTJ8ZnJhYzM0fGlxdWVzdHxBZ3JhdmV8QWFjdXRlfEFjaXJjfEF0aWxkZXxBdW1sfEFyaW5nfEFFbGlnfENjZWRpbHxFZ3JhdmV8RWFjdXRlfEVjaXJjfEV1bWx8SWdyYXZlfElhY3V0ZXxJY2lyY3xJdW1sfEVUSHxOdGlsZGV8T2dyYXZlfE9hY3V0ZXxPY2lyY3xPdGlsZGV8T3VtbHx0aW1lc3xPc2xhc2h8VWdyYXZlfFVhY3V0ZXxVY2lyY3xVdW1sfFlhY3V0ZXxUSE9STnxzemxpZ3xhZ3JhdmV8YWFjdXRlfGFjaXJjfGF0aWxkZXxhdW1sfGFyaW5nfGFlbGlnfGNjZWRpbHxlZ3JhdmV8ZWFjdXRlfGVjaXJjfGV1bWx8aWdyYXZlfGlhY3V0ZXxpY2lyY3xpdW1sfGV0aHxudGlsZGV8b2dyYXZlfG9hY3V0ZXxvY2lyY3xvdGlsZGV8b3VtbHxkaXZpZGV8b3NsYXNofHVncmF2ZXx1YWN1dGV8dWNpcmN8dXVtbHx5YWN1dGV8dGhvcm58eXVtbHxxdW90fGFtcHxsdHxndHwjXGQrfCNbeFhdW1xkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2csaHRtbDU6LyYoPzpBRWxpZ3xBTVB8QWFjdXRlfEFjaXJjfEFncmF2ZXxBcmluZ3xBdGlsZGV8QXVtbHxDT1BZfENjZWRpbHxFVEh8RWFjdXRlfEVjaXJjfEVncmF2ZXxFdW1sfEdUfElhY3V0ZXxJY2lyY3xJZ3JhdmV8SXVtbHxMVHxOdGlsZGV8T2FjdXRlfE9jaXJjfE9ncmF2ZXxPc2xhc2h8T3RpbGRlfE91bWx8UVVPVHxSRUd8VEhPUk58VWFjdXRlfFVjaXJjfFVncmF2ZXxVdW1sfFlhY3V0ZXxhYWN1dGV8YWNpcmN8YWN1dGV8YWVsaWd8YWdyYXZlfGFtcHxhcmluZ3xhdGlsZGV8YXVtbHxicnZiYXJ8Y2NlZGlsfGNlZGlsfGNlbnR8Y29weXxjdXJyZW58ZGVnfGRpdmlkZXxlYWN1dGV8ZWNpcmN8ZWdyYXZlfGV0aHxldW1sfGZyYWMxMnxmcmFjMTR8ZnJhYzM0fGd0fGlhY3V0ZXxpY2lyY3xpZXhjbHxpZ3JhdmV8aXF1ZXN0fGl1bWx8bGFxdW98bHR8bWFjcnxtaWNyb3xtaWRkb3R8bmJzcHxub3R8bnRpbGRlfG9hY3V0ZXxvY2lyY3xvZ3JhdmV8b3JkZnxvcmRtfG9zbGFzaHxvdGlsZGV8b3VtbHxwYXJhfHBsdXNtbnxwb3VuZHxxdW90fHJhcXVvfHJlZ3xzZWN0fHNoeXxzdXAxfHN1cDJ8c3VwM3xzemxpZ3x0aG9ybnx0aW1lc3x1YWN1dGV8dWNpcmN8dWdyYXZlfHVtbHx1dW1sfHlhY3V0ZXx5ZW58eXVtbHwjXGQrfCNbeFhdW1xkYS1mQS1GXSt8WzAtOWEtekEtWl0rKTs/L2d9O2V4cG9ydHMubmFtZWRSZWZlcmVuY2VzPXt4bWw6e2VudGl0aWVzOnsiJmx0OyI6IjwiLCImZ3Q7IjoiPiIsIiZxdW90OyI6JyInLCImYXBvczsiOiInIiwiJmFtcDsiOiImIn0sY2hhcmFjdGVyczp7IjwiOiImbHQ7IiwiPiI6IiZndDsiLCciJzoiJnF1b3Q7IiwiJyI6IiZhcG9zOyIsIiYiOiImYW1wOyJ9fSxodG1sNDp7ZW50aXRpZXM6eyImYXBvczsiOiInIiwiJm5ic3AiOiLCoCIsIiZuYnNwOyI6IsKgIiwiJmlleGNsIjoiwqEiLCImaWV4Y2w7IjoiwqEiLCImY2VudCI6IsKiIiwiJmNlbnQ7IjoiwqIiLCImcG91bmQiOiLCoyIsIiZwb3VuZDsiOiLCoyIsIiZjdXJyZW4iOiLCpCIsIiZjdXJyZW47IjoiwqQiLCImeWVuIjoiwqUiLCImeWVuOyI6IsKlIiwiJmJydmJhciI6IsKmIiwiJmJydmJhcjsiOiLCpiIsIiZzZWN0IjoiwqciLCImc2VjdDsiOiLCpyIsIiZ1bWwiOiLCqCIsIiZ1bWw7IjoiwqgiLCImY29weSI6IsKpIiwiJmNvcHk7IjoiwqkiLCImb3JkZiI6IsKqIiwiJm9yZGY7IjoiwqoiLCImbGFxdW8iOiLCqyIsIiZsYXF1bzsiOiLCqyIsIiZub3QiOiLCrCIsIiZub3Q7IjoiwqwiLCImc2h5Ijoiwq0iLCImc2h5OyI6IsKtIiwiJnJlZyI6IsKuIiwiJnJlZzsiOiLCriIsIiZtYWNyIjoiwq8iLCImbWFjcjsiOiLCryIsIiZkZWciOiLCsCIsIiZkZWc7IjoiwrAiLCImcGx1c21uIjoiwrEiLCImcGx1c21uOyI6IsKxIiwiJnN1cDIiOiLCsiIsIiZzdXAyOyI6IsKyIiwiJnN1cDMiOiLCsyIsIiZzdXAzOyI6IsKzIiwiJmFjdXRlIjoiwrQiLCImYWN1dGU7IjoiwrQiLCImbWljcm8iOiLCtSIsIiZtaWNybzsiOiLCtSIsIiZwYXJhIjoiwrYiLCImcGFyYTsiOiLCtiIsIiZtaWRkb3QiOiLCtyIsIiZtaWRkb3Q7IjoiwrciLCImY2VkaWwiOiLCuCIsIiZjZWRpbDsiOiLCuCIsIiZzdXAxIjoiwrkiLCImc3VwMTsiOiLCuSIsIiZvcmRtIjoiwroiLCImb3JkbTsiOiLCuiIsIiZyYXF1byI6IsK7IiwiJnJhcXVvOyI6IsK7IiwiJmZyYWMxNCI6IsK8IiwiJmZyYWMxNDsiOiLCvCIsIiZmcmFjMTIiOiLCvSIsIiZmcmFjMTI7Ijoiwr0iLCImZnJhYzM0Ijoiwr4iLCImZnJhYzM0OyI6IsK+IiwiJmlxdWVzdCI6IsK/IiwiJmlxdWVzdDsiOiLCvyIsIiZBZ3JhdmUiOiLDgCIsIiZBZ3JhdmU7Ijoiw4AiLCImQWFjdXRlIjoiw4EiLCImQWFjdXRlOyI6IsOBIiwiJkFjaXJjIjoiw4IiLCImQWNpcmM7Ijoiw4IiLCImQXRpbGRlIjoiw4MiLCImQXRpbGRlOyI6IsODIiwiJkF1bWwiOiLDhCIsIiZBdW1sOyI6IsOEIiwiJkFyaW5nIjoiw4UiLCImQXJpbmc7Ijoiw4UiLCImQUVsaWciOiLDhiIsIiZBRWxpZzsiOiLDhiIsIiZDY2VkaWwiOiLDhyIsIiZDY2VkaWw7Ijoiw4ciLCImRWdyYXZlIjoiw4giLCImRWdyYXZlOyI6IsOIIiwiJkVhY3V0ZSI6IsOJIiwiJkVhY3V0ZTsiOiLDiSIsIiZFY2lyYyI6IsOKIiwiJkVjaXJjOyI6IsOKIiwiJkV1bWwiOiLDiyIsIiZFdW1sOyI6IsOLIiwiJklncmF2ZSI6IsOMIiwiJklncmF2ZTsiOiLDjCIsIiZJYWN1dGUiOiLDjSIsIiZJYWN1dGU7Ijoiw40iLCImSWNpcmMiOiLDjiIsIiZJY2lyYzsiOiLDjiIsIiZJdW1sIjoiw48iLCImSXVtbDsiOiLDjyIsIiZFVEgiOiLDkCIsIiZFVEg7Ijoiw5AiLCImTnRpbGRlIjoiw5EiLCImTnRpbGRlOyI6IsORIiwiJk9ncmF2ZSI6IsOSIiwiJk9ncmF2ZTsiOiLDkiIsIiZPYWN1dGUiOiLDkyIsIiZPYWN1dGU7Ijoiw5MiLCImT2NpcmMiOiLDlCIsIiZPY2lyYzsiOiLDlCIsIiZPdGlsZGUiOiLDlSIsIiZPdGlsZGU7Ijoiw5UiLCImT3VtbCI6IsOWIiwiJk91bWw7Ijoiw5YiLCImdGltZXMiOiLDlyIsIiZ0aW1lczsiOiLDlyIsIiZPc2xhc2giOiLDmCIsIiZPc2xhc2g7Ijoiw5giLCImVWdyYXZlIjoiw5kiLCImVWdyYXZlOyI6IsOZIiwiJlVhY3V0ZSI6IsOaIiwiJlVhY3V0ZTsiOiLDmiIsIiZVY2lyYyI6IsObIiwiJlVjaXJjOyI6IsObIiwiJlV1bWwiOiLDnCIsIiZVdW1sOyI6IsOcIiwiJllhY3V0ZSI6IsOdIiwiJllhY3V0ZTsiOiLDnSIsIiZUSE9STiI6IsOeIiwiJlRIT1JOOyI6IsOeIiwiJnN6bGlnIjoiw58iLCImc3psaWc7Ijoiw58iLCImYWdyYXZlIjoiw6AiLCImYWdyYXZlOyI6IsOgIiwiJmFhY3V0ZSI6IsOhIiwiJmFhY3V0ZTsiOiLDoSIsIiZhY2lyYyI6IsOiIiwiJmFjaXJjOyI6IsOiIiwiJmF0aWxkZSI6IsOjIiwiJmF0aWxkZTsiOiLDoyIsIiZhdW1sIjoiw6QiLCImYXVtbDsiOiLDpCIsIiZhcmluZyI6IsOlIiwiJmFyaW5nOyI6IsOlIiwiJmFlbGlnIjoiw6YiLCImYWVsaWc7Ijoiw6YiLCImY2NlZGlsIjoiw6ciLCImY2NlZGlsOyI6IsOnIiwiJmVncmF2ZSI6IsOoIiwiJmVncmF2ZTsiOiLDqCIsIiZlYWN1dGUiOiLDqSIsIiZlYWN1dGU7Ijoiw6kiLCImZWNpcmMiOiLDqiIsIiZlY2lyYzsiOiLDqiIsIiZldW1sIjoiw6siLCImZXVtbDsiOiLDqyIsIiZpZ3JhdmUiOiLDrCIsIiZpZ3JhdmU7Ijoiw6wiLCImaWFjdXRlIjoiw60iLCImaWFjdXRlOyI6IsOtIiwiJmljaXJjIjoiw64iLCImaWNpcmM7Ijoiw64iLCImaXVtbCI6IsOvIiwiJml1bWw7Ijoiw68iLCImZXRoIjoiw7AiLCImZXRoOyI6IsOwIiwiJm50aWxkZSI6IsOxIiwiJm50aWxkZTsiOiLDsSIsIiZvZ3JhdmUiOiLDsiIsIiZvZ3JhdmU7Ijoiw7IiLCImb2FjdXRlIjoiw7MiLCImb2FjdXRlOyI6IsOzIiwiJm9jaXJjIjoiw7QiLCImb2NpcmM7Ijoiw7QiLCImb3RpbGRlIjoiw7UiLCImb3RpbGRlOyI6IsO1IiwiJm91bWwiOiLDtiIsIiZvdW1sOyI6IsO2IiwiJmRpdmlkZSI6IsO3IiwiJmRpdmlkZTsiOiLDtyIsIiZvc2xhc2giOiLDuCIsIiZvc2xhc2g7Ijoiw7giLCImdWdyYXZlIjoiw7kiLCImdWdyYXZlOyI6IsO5IiwiJnVhY3V0ZSI6IsO6IiwiJnVhY3V0ZTsiOiLDuiIsIiZ1Y2lyYyI6IsO7IiwiJnVjaXJjOyI6IsO7IiwiJnV1bWwiOiLDvCIsIiZ1dW1sOyI6IsO8IiwiJnlhY3V0ZSI6IsO9IiwiJnlhY3V0ZTsiOiLDvSIsIiZ0aG9ybiI6IsO+IiwiJnRob3JuOyI6IsO+IiwiJnl1bWwiOiLDvyIsIiZ5dW1sOyI6IsO/IiwiJnF1b3QiOiciJywiJnF1b3Q7IjonIicsIiZhbXAiOiImIiwiJmFtcDsiOiImIiwiJmx0IjoiPCIsIiZsdDsiOiI8IiwiJmd0IjoiPiIsIiZndDsiOiI+IiwiJk9FbGlnOyI6IsWSIiwiJm9lbGlnOyI6IsWTIiwiJlNjYXJvbjsiOiLFoCIsIiZzY2Fyb247IjoixaEiLCImWXVtbDsiOiLFuCIsIiZjaXJjOyI6IsuGIiwiJnRpbGRlOyI6IsucIiwiJmVuc3A7Ijoi4oCCIiwiJmVtc3A7Ijoi4oCDIiwiJnRoaW5zcDsiOiLigIkiLCImenduajsiOiLigIwiLCImendqOyI6IuKAjSIsIiZscm07Ijoi4oCOIiwiJnJsbTsiOiLigI8iLCImbmRhc2g7Ijoi4oCTIiwiJm1kYXNoOyI6IuKAlCIsIiZsc3F1bzsiOiLigJgiLCImcnNxdW87Ijoi4oCZIiwiJnNicXVvOyI6IuKAmiIsIiZsZHF1bzsiOiLigJwiLCImcmRxdW87Ijoi4oCdIiwiJmJkcXVvOyI6IuKAniIsIiZkYWdnZXI7Ijoi4oCgIiwiJkRhZ2dlcjsiOiLigKEiLCImcGVybWlsOyI6IuKAsCIsIiZsc2FxdW87Ijoi4oC5IiwiJnJzYXF1bzsiOiLigLoiLCImZXVybzsiOiLigqwiLCImZm5vZjsiOiLGkiIsIiZBbHBoYTsiOiLOkSIsIiZCZXRhOyI6Is6SIiwiJkdhbW1hOyI6Is6TIiwiJkRlbHRhOyI6Is6UIiwiJkVwc2lsb247IjoizpUiLCImWmV0YTsiOiLOliIsIiZFdGE7IjoizpciLCImVGhldGE7IjoizpgiLCImSW90YTsiOiLOmSIsIiZLYXBwYTsiOiLOmiIsIiZMYW1iZGE7IjoizpsiLCImTXU7IjoizpwiLCImTnU7Ijoizp0iLCImWGk7Ijoizp4iLCImT21pY3JvbjsiOiLOnyIsIiZQaTsiOiLOoCIsIiZSaG87IjoizqEiLCImU2lnbWE7IjoizqMiLCImVGF1OyI6Is6kIiwiJlVwc2lsb247IjoizqUiLCImUGhpOyI6Is6mIiwiJkNoaTsiOiLOpyIsIiZQc2k7IjoizqgiLCImT21lZ2E7IjoizqkiLCImYWxwaGE7IjoizrEiLCImYmV0YTsiOiLOsiIsIiZnYW1tYTsiOiLOsyIsIiZkZWx0YTsiOiLOtCIsIiZlcHNpbG9uOyI6Is61IiwiJnpldGE7IjoizrYiLCImZXRhOyI6Is63IiwiJnRoZXRhOyI6Is64IiwiJmlvdGE7IjoizrkiLCIma2FwcGE7IjoizroiLCImbGFtYmRhOyI6Is67IiwiJm11OyI6Is68IiwiJm51OyI6Is69IiwiJnhpOyI6Is6+IiwiJm9taWNyb247Ijoizr8iLCImcGk7Ijoiz4AiLCImcmhvOyI6Is+BIiwiJnNpZ21hZjsiOiLPgiIsIiZzaWdtYTsiOiLPgyIsIiZ0YXU7Ijoiz4QiLCImdXBzaWxvbjsiOiLPhSIsIiZwaGk7Ijoiz4YiLCImY2hpOyI6Is+HIiwiJnBzaTsiOiLPiCIsIiZvbWVnYTsiOiLPiSIsIiZ0aGV0YXN5bTsiOiLPkSIsIiZ1cHNpaDsiOiLPkiIsIiZwaXY7Ijoiz5YiLCImYnVsbDsiOiLigKIiLCImaGVsbGlwOyI6IuKApiIsIiZwcmltZTsiOiLigLIiLCImUHJpbWU7Ijoi4oCzIiwiJm9saW5lOyI6IuKAviIsIiZmcmFzbDsiOiLigYQiLCImd2VpZXJwOyI6IuKEmCIsIiZpbWFnZTsiOiLihJEiLCImcmVhbDsiOiLihJwiLCImdHJhZGU7Ijoi4oSiIiwiJmFsZWZzeW07Ijoi4oS1IiwiJmxhcnI7Ijoi4oaQIiwiJnVhcnI7Ijoi4oaRIiwiJnJhcnI7Ijoi4oaSIiwiJmRhcnI7Ijoi4oaTIiwiJmhhcnI7Ijoi4oaUIiwiJmNyYXJyOyI6IuKGtSIsIiZsQXJyOyI6IuKHkCIsIiZ1QXJyOyI6IuKHkSIsIiZyQXJyOyI6IuKHkiIsIiZkQXJyOyI6IuKHkyIsIiZoQXJyOyI6IuKHlCIsIiZmb3JhbGw7Ijoi4oiAIiwiJnBhcnQ7Ijoi4oiCIiwiJmV4aXN0OyI6IuKIgyIsIiZlbXB0eTsiOiLiiIUiLCImbmFibGE7Ijoi4oiHIiwiJmlzaW47Ijoi4oiIIiwiJm5vdGluOyI6IuKIiSIsIiZuaTsiOiLiiIsiLCImcHJvZDsiOiLiiI8iLCImc3VtOyI6IuKIkSIsIiZtaW51czsiOiLiiJIiLCImbG93YXN0OyI6IuKIlyIsIiZyYWRpYzsiOiLiiJoiLCImcHJvcDsiOiLiiJ0iLCImaW5maW47Ijoi4oieIiwiJmFuZzsiOiLiiKAiLCImYW5kOyI6IuKIpyIsIiZvcjsiOiLiiKgiLCImY2FwOyI6IuKIqSIsIiZjdXA7Ijoi4oiqIiwiJmludDsiOiLiiKsiLCImdGhlcmU0OyI6IuKItCIsIiZzaW07Ijoi4oi8IiwiJmNvbmc7Ijoi4omFIiwiJmFzeW1wOyI6IuKJiCIsIiZuZTsiOiLiiaAiLCImZXF1aXY7Ijoi4omhIiwiJmxlOyI6IuKJpCIsIiZnZTsiOiLiiaUiLCImc3ViOyI6IuKKgiIsIiZzdXA7Ijoi4oqDIiwiJm5zdWI7Ijoi4oqEIiwiJnN1YmU7Ijoi4oqGIiwiJnN1cGU7Ijoi4oqHIiwiJm9wbHVzOyI6IuKKlSIsIiZvdGltZXM7Ijoi4oqXIiwiJnBlcnA7Ijoi4oqlIiwiJnNkb3Q7Ijoi4ouFIiwiJmxjZWlsOyI6IuKMiCIsIiZyY2VpbDsiOiLijIkiLCImbGZsb29yOyI6IuKMiiIsIiZyZmxvb3I7Ijoi4oyLIiwiJmxhbmc7Ijoi4oypIiwiJnJhbmc7Ijoi4oyqIiwiJmxvejsiOiLil4oiLCImc3BhZGVzOyI6IuKZoCIsIiZjbHViczsiOiLimaMiLCImaGVhcnRzOyI6IuKZpSIsIiZkaWFtczsiOiLimaYifSxjaGFyYWN0ZXJzOnsiJyI6IiZhcG9zOyIsIsKgIjoiJm5ic3A7IiwiwqEiOiImaWV4Y2w7IiwiwqIiOiImY2VudDsiLCLCoyI6IiZwb3VuZDsiLCLCpCI6IiZjdXJyZW47IiwiwqUiOiImeWVuOyIsIsKmIjoiJmJydmJhcjsiLCLCpyI6IiZzZWN0OyIsIsKoIjoiJnVtbDsiLCLCqSI6IiZjb3B5OyIsIsKqIjoiJm9yZGY7IiwiwqsiOiImbGFxdW87IiwiwqwiOiImbm90OyIsIsKtIjoiJnNoeTsiLCLCriI6IiZyZWc7Iiwiwq8iOiImbWFjcjsiLCLCsCI6IiZkZWc7IiwiwrEiOiImcGx1c21uOyIsIsKyIjoiJnN1cDI7IiwiwrMiOiImc3VwMzsiLCLCtCI6IiZhY3V0ZTsiLCLCtSI6IiZtaWNybzsiLCLCtiI6IiZwYXJhOyIsIsK3IjoiJm1pZGRvdDsiLCLCuCI6IiZjZWRpbDsiLCLCuSI6IiZzdXAxOyIsIsK6IjoiJm9yZG07IiwiwrsiOiImcmFxdW87IiwiwrwiOiImZnJhYzE0OyIsIsK9IjoiJmZyYWMxMjsiLCLCviI6IiZmcmFjMzQ7Iiwiwr8iOiImaXF1ZXN0OyIsIsOAIjoiJkFncmF2ZTsiLCLDgSI6IiZBYWN1dGU7Iiwiw4IiOiImQWNpcmM7Iiwiw4MiOiImQXRpbGRlOyIsIsOEIjoiJkF1bWw7Iiwiw4UiOiImQXJpbmc7Iiwiw4YiOiImQUVsaWc7Iiwiw4ciOiImQ2NlZGlsOyIsIsOIIjoiJkVncmF2ZTsiLCLDiSI6IiZFYWN1dGU7Iiwiw4oiOiImRWNpcmM7Iiwiw4siOiImRXVtbDsiLCLDjCI6IiZJZ3JhdmU7Iiwiw40iOiImSWFjdXRlOyIsIsOOIjoiJkljaXJjOyIsIsOPIjoiJkl1bWw7Iiwiw5AiOiImRVRIOyIsIsORIjoiJk50aWxkZTsiLCLDkiI6IiZPZ3JhdmU7Iiwiw5MiOiImT2FjdXRlOyIsIsOUIjoiJk9jaXJjOyIsIsOVIjoiJk90aWxkZTsiLCLDliI6IiZPdW1sOyIsIsOXIjoiJnRpbWVzOyIsIsOYIjoiJk9zbGFzaDsiLCLDmSI6IiZVZ3JhdmU7Iiwiw5oiOiImVWFjdXRlOyIsIsObIjoiJlVjaXJjOyIsIsOcIjoiJlV1bWw7Iiwiw50iOiImWWFjdXRlOyIsIsOeIjoiJlRIT1JOOyIsIsOfIjoiJnN6bGlnOyIsIsOgIjoiJmFncmF2ZTsiLCLDoSI6IiZhYWN1dGU7Iiwiw6IiOiImYWNpcmM7Iiwiw6MiOiImYXRpbGRlOyIsIsOkIjoiJmF1bWw7Iiwiw6UiOiImYXJpbmc7Iiwiw6YiOiImYWVsaWc7Iiwiw6ciOiImY2NlZGlsOyIsIsOoIjoiJmVncmF2ZTsiLCLDqSI6IiZlYWN1dGU7Iiwiw6oiOiImZWNpcmM7Iiwiw6siOiImZXVtbDsiLCLDrCI6IiZpZ3JhdmU7Iiwiw60iOiImaWFjdXRlOyIsIsOuIjoiJmljaXJjOyIsIsOvIjoiJml1bWw7Iiwiw7AiOiImZXRoOyIsIsOxIjoiJm50aWxkZTsiLCLDsiI6IiZvZ3JhdmU7Iiwiw7MiOiImb2FjdXRlOyIsIsO0IjoiJm9jaXJjOyIsIsO1IjoiJm90aWxkZTsiLCLDtiI6IiZvdW1sOyIsIsO3IjoiJmRpdmlkZTsiLCLDuCI6IiZvc2xhc2g7Iiwiw7kiOiImdWdyYXZlOyIsIsO6IjoiJnVhY3V0ZTsiLCLDuyI6IiZ1Y2lyYzsiLCLDvCI6IiZ1dW1sOyIsIsO9IjoiJnlhY3V0ZTsiLCLDviI6IiZ0aG9ybjsiLCLDvyI6IiZ5dW1sOyIsJyInOiImcXVvdDsiLCImIjoiJmFtcDsiLCI8IjoiJmx0OyIsIj4iOiImZ3Q7IiwixZIiOiImT0VsaWc7IiwixZMiOiImb2VsaWc7IiwixaAiOiImU2Nhcm9uOyIsIsWhIjoiJnNjYXJvbjsiLCLFuCI6IiZZdW1sOyIsIsuGIjoiJmNpcmM7Iiwiy5wiOiImdGlsZGU7Iiwi4oCCIjoiJmVuc3A7Iiwi4oCDIjoiJmVtc3A7Iiwi4oCJIjoiJnRoaW5zcDsiLCLigIwiOiImenduajsiLCLigI0iOiImendqOyIsIuKAjiI6IiZscm07Iiwi4oCPIjoiJnJsbTsiLCLigJMiOiImbmRhc2g7Iiwi4oCUIjoiJm1kYXNoOyIsIuKAmCI6IiZsc3F1bzsiLCLigJkiOiImcnNxdW87Iiwi4oCaIjoiJnNicXVvOyIsIuKAnCI6IiZsZHF1bzsiLCLigJ0iOiImcmRxdW87Iiwi4oCeIjoiJmJkcXVvOyIsIuKAoCI6IiZkYWdnZXI7Iiwi4oChIjoiJkRhZ2dlcjsiLCLigLAiOiImcGVybWlsOyIsIuKAuSI6IiZsc2FxdW87Iiwi4oC6IjoiJnJzYXF1bzsiLCLigqwiOiImZXVybzsiLCLGkiI6IiZmbm9mOyIsIs6RIjoiJkFscGhhOyIsIs6SIjoiJkJldGE7IiwizpMiOiImR2FtbWE7IiwizpQiOiImRGVsdGE7IiwizpUiOiImRXBzaWxvbjsiLCLOliI6IiZaZXRhOyIsIs6XIjoiJkV0YTsiLCLOmCI6IiZUaGV0YTsiLCLOmSI6IiZJb3RhOyIsIs6aIjoiJkthcHBhOyIsIs6bIjoiJkxhbWJkYTsiLCLOnCI6IiZNdTsiLCLOnSI6IiZOdTsiLCLOniI6IiZYaTsiLCLOnyI6IiZPbWljcm9uOyIsIs6gIjoiJlBpOyIsIs6hIjoiJlJobzsiLCLOoyI6IiZTaWdtYTsiLCLOpCI6IiZUYXU7IiwizqUiOiImVXBzaWxvbjsiLCLOpiI6IiZQaGk7IiwizqciOiImQ2hpOyIsIs6oIjoiJlBzaTsiLCLOqSI6IiZPbWVnYTsiLCLOsSI6IiZhbHBoYTsiLCLOsiI6IiZiZXRhOyIsIs6zIjoiJmdhbW1hOyIsIs60IjoiJmRlbHRhOyIsIs61IjoiJmVwc2lsb247IiwizrYiOiImemV0YTsiLCLOtyI6IiZldGE7IiwizrgiOiImdGhldGE7IiwizrkiOiImaW90YTsiLCLOuiI6IiZrYXBwYTsiLCLOuyI6IiZsYW1iZGE7IiwizrwiOiImbXU7Iiwizr0iOiImbnU7Iiwizr4iOiImeGk7Iiwizr8iOiImb21pY3JvbjsiLCLPgCI6IiZwaTsiLCLPgSI6IiZyaG87Iiwiz4IiOiImc2lnbWFmOyIsIs+DIjoiJnNpZ21hOyIsIs+EIjoiJnRhdTsiLCLPhSI6IiZ1cHNpbG9uOyIsIs+GIjoiJnBoaTsiLCLPhyI6IiZjaGk7Iiwiz4giOiImcHNpOyIsIs+JIjoiJm9tZWdhOyIsIs+RIjoiJnRoZXRhc3ltOyIsIs+SIjoiJnVwc2loOyIsIs+WIjoiJnBpdjsiLCLigKIiOiImYnVsbDsiLCLigKYiOiImaGVsbGlwOyIsIuKAsiI6IiZwcmltZTsiLCLigLMiOiImUHJpbWU7Iiwi4oC+IjoiJm9saW5lOyIsIuKBhCI6IiZmcmFzbDsiLCLihJgiOiImd2VpZXJwOyIsIuKEkSI6IiZpbWFnZTsiLCLihJwiOiImcmVhbDsiLCLihKIiOiImdHJhZGU7Iiwi4oS1IjoiJmFsZWZzeW07Iiwi4oaQIjoiJmxhcnI7Iiwi4oaRIjoiJnVhcnI7Iiwi4oaSIjoiJnJhcnI7Iiwi4oaTIjoiJmRhcnI7Iiwi4oaUIjoiJmhhcnI7Iiwi4oa1IjoiJmNyYXJyOyIsIuKHkCI6IiZsQXJyOyIsIuKHkSI6IiZ1QXJyOyIsIuKHkiI6IiZyQXJyOyIsIuKHkyI6IiZkQXJyOyIsIuKHlCI6IiZoQXJyOyIsIuKIgCI6IiZmb3JhbGw7Iiwi4oiCIjoiJnBhcnQ7Iiwi4oiDIjoiJmV4aXN0OyIsIuKIhSI6IiZlbXB0eTsiLCLiiIciOiImbmFibGE7Iiwi4oiIIjoiJmlzaW47Iiwi4oiJIjoiJm5vdGluOyIsIuKIiyI6IiZuaTsiLCLiiI8iOiImcHJvZDsiLCLiiJEiOiImc3VtOyIsIuKIkiI6IiZtaW51czsiLCLiiJciOiImbG93YXN0OyIsIuKImiI6IiZyYWRpYzsiLCLiiJ0iOiImcHJvcDsiLCLiiJ4iOiImaW5maW47Iiwi4oigIjoiJmFuZzsiLCLiiKciOiImYW5kOyIsIuKIqCI6IiZvcjsiLCLiiKkiOiImY2FwOyIsIuKIqiI6IiZjdXA7Iiwi4oirIjoiJmludDsiLCLiiLQiOiImdGhlcmU0OyIsIuKIvCI6IiZzaW07Iiwi4omFIjoiJmNvbmc7Iiwi4omIIjoiJmFzeW1wOyIsIuKJoCI6IiZuZTsiLCLiiaEiOiImZXF1aXY7Iiwi4omkIjoiJmxlOyIsIuKJpSI6IiZnZTsiLCLiioIiOiImc3ViOyIsIuKKgyI6IiZzdXA7Iiwi4oqEIjoiJm5zdWI7Iiwi4oqGIjoiJnN1YmU7Iiwi4oqHIjoiJnN1cGU7Iiwi4oqVIjoiJm9wbHVzOyIsIuKKlyI6IiZvdGltZXM7Iiwi4oqlIjoiJnBlcnA7Iiwi4ouFIjoiJnNkb3Q7Iiwi4oyIIjoiJmxjZWlsOyIsIuKMiSI6IiZyY2VpbDsiLCLijIoiOiImbGZsb29yOyIsIuKMiyI6IiZyZmxvb3I7Iiwi4oypIjoiJmxhbmc7Iiwi4oyqIjoiJnJhbmc7Iiwi4peKIjoiJmxvejsiLCLimaAiOiImc3BhZGVzOyIsIuKZoyI6IiZjbHViczsiLCLimaUiOiImaGVhcnRzOyIsIuKZpiI6IiZkaWFtczsifX0saHRtbDU6e2VudGl0aWVzOnsiJkFFbGlnIjoiw4YiLCImQUVsaWc7Ijoiw4YiLCImQU1QIjoiJiIsIiZBTVA7IjoiJiIsIiZBYWN1dGUiOiLDgSIsIiZBYWN1dGU7Ijoiw4EiLCImQWJyZXZlOyI6IsSCIiwiJkFjaXJjIjoiw4IiLCImQWNpcmM7Ijoiw4IiLCImQWN5OyI6ItCQIiwiJkFmcjsiOiLwnZSEIiwiJkFncmF2ZSI6IsOAIiwiJkFncmF2ZTsiOiLDgCIsIiZBbHBoYTsiOiLOkSIsIiZBbWFjcjsiOiLEgCIsIiZBbmQ7Ijoi4qmTIiwiJkFvZ29uOyI6IsSEIiwiJkFvcGY7Ijoi8J2UuCIsIiZBcHBseUZ1bmN0aW9uOyI6IuKBoSIsIiZBcmluZyI6IsOFIiwiJkFyaW5nOyI6IsOFIiwiJkFzY3I7Ijoi8J2SnCIsIiZBc3NpZ247Ijoi4omUIiwiJkF0aWxkZSI6IsODIiwiJkF0aWxkZTsiOiLDgyIsIiZBdW1sIjoiw4QiLCImQXVtbDsiOiLDhCIsIiZCYWNrc2xhc2g7Ijoi4oiWIiwiJkJhcnY7Ijoi4qunIiwiJkJhcndlZDsiOiLijIYiLCImQmN5OyI6ItCRIiwiJkJlY2F1c2U7Ijoi4oi1IiwiJkJlcm5vdWxsaXM7Ijoi4oSsIiwiJkJldGE7IjoizpIiLCImQmZyOyI6IvCdlIUiLCImQm9wZjsiOiLwnZS5IiwiJkJyZXZlOyI6IsuYIiwiJkJzY3I7Ijoi4oSsIiwiJkJ1bXBlcTsiOiLiiY4iLCImQ0hjeTsiOiLQpyIsIiZDT1BZIjoiwqkiLCImQ09QWTsiOiLCqSIsIiZDYWN1dGU7IjoixIYiLCImQ2FwOyI6IuKLkiIsIiZDYXBpdGFsRGlmZmVyZW50aWFsRDsiOiLihYUiLCImQ2F5bGV5czsiOiLihK0iLCImQ2Nhcm9uOyI6IsSMIiwiJkNjZWRpbCI6IsOHIiwiJkNjZWRpbDsiOiLDhyIsIiZDY2lyYzsiOiLEiCIsIiZDY29uaW50OyI6IuKIsCIsIiZDZG90OyI6IsSKIiwiJkNlZGlsbGE7IjoiwrgiLCImQ2VudGVyRG90OyI6IsK3IiwiJkNmcjsiOiLihK0iLCImQ2hpOyI6Is6nIiwiJkNpcmNsZURvdDsiOiLiipkiLCImQ2lyY2xlTWludXM7Ijoi4oqWIiwiJkNpcmNsZVBsdXM7Ijoi4oqVIiwiJkNpcmNsZVRpbWVzOyI6IuKKlyIsIiZDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7Ijoi4oiyIiwiJkNsb3NlQ3VybHlEb3VibGVRdW90ZTsiOiLigJ0iLCImQ2xvc2VDdXJseVF1b3RlOyI6IuKAmSIsIiZDb2xvbjsiOiLiiLciLCImQ29sb25lOyI6IuKptCIsIiZDb25ncnVlbnQ7Ijoi4omhIiwiJkNvbmludDsiOiLiiK8iLCImQ29udG91ckludGVncmFsOyI6IuKIriIsIiZDb3BmOyI6IuKEgiIsIiZDb3Byb2R1Y3Q7Ijoi4oiQIiwiJkNvdW50ZXJDbG9ja3dpc2VDb250b3VySW50ZWdyYWw7Ijoi4oizIiwiJkNyb3NzOyI6IuKoryIsIiZDc2NyOyI6IvCdkp4iLCImQ3VwOyI6IuKLkyIsIiZDdXBDYXA7Ijoi4omNIiwiJkREOyI6IuKFhSIsIiZERG90cmFoZDsiOiLipJEiLCImREpjeTsiOiLQgiIsIiZEU2N5OyI6ItCFIiwiJkRaY3k7Ijoi0I8iLCImRGFnZ2VyOyI6IuKAoSIsIiZEYXJyOyI6IuKGoSIsIiZEYXNodjsiOiLiq6QiLCImRGNhcm9uOyI6IsSOIiwiJkRjeTsiOiLQlCIsIiZEZWw7Ijoi4oiHIiwiJkRlbHRhOyI6Is6UIiwiJkRmcjsiOiLwnZSHIiwiJkRpYWNyaXRpY2FsQWN1dGU7IjoiwrQiLCImRGlhY3JpdGljYWxEb3Q7Ijoiy5kiLCImRGlhY3JpdGljYWxEb3VibGVBY3V0ZTsiOiLLnSIsIiZEaWFjcml0aWNhbEdyYXZlOyI6ImAiLCImRGlhY3JpdGljYWxUaWxkZTsiOiLLnCIsIiZEaWFtb25kOyI6IuKLhCIsIiZEaWZmZXJlbnRpYWxEOyI6IuKFhiIsIiZEb3BmOyI6IvCdlLsiLCImRG90OyI6IsKoIiwiJkRvdERvdDsiOiLig5wiLCImRG90RXF1YWw7Ijoi4omQIiwiJkRvdWJsZUNvbnRvdXJJbnRlZ3JhbDsiOiLiiK8iLCImRG91YmxlRG90OyI6IsKoIiwiJkRvdWJsZURvd25BcnJvdzsiOiLih5MiLCImRG91YmxlTGVmdEFycm93OyI6IuKHkCIsIiZEb3VibGVMZWZ0UmlnaHRBcnJvdzsiOiLih5QiLCImRG91YmxlTGVmdFRlZTsiOiLiq6QiLCImRG91YmxlTG9uZ0xlZnRBcnJvdzsiOiLin7giLCImRG91YmxlTG9uZ0xlZnRSaWdodEFycm93OyI6IuKfuiIsIiZEb3VibGVMb25nUmlnaHRBcnJvdzsiOiLin7kiLCImRG91YmxlUmlnaHRBcnJvdzsiOiLih5IiLCImRG91YmxlUmlnaHRUZWU7Ijoi4oqoIiwiJkRvdWJsZVVwQXJyb3c7Ijoi4oeRIiwiJkRvdWJsZVVwRG93bkFycm93OyI6IuKHlSIsIiZEb3VibGVWZXJ0aWNhbEJhcjsiOiLiiKUiLCImRG93bkFycm93OyI6IuKGkyIsIiZEb3duQXJyb3dCYXI7Ijoi4qSTIiwiJkRvd25BcnJvd1VwQXJyb3c7Ijoi4oe1IiwiJkRvd25CcmV2ZTsiOiLMkSIsIiZEb3duTGVmdFJpZ2h0VmVjdG9yOyI6IuKlkCIsIiZEb3duTGVmdFRlZVZlY3RvcjsiOiLipZ4iLCImRG93bkxlZnRWZWN0b3I7Ijoi4oa9IiwiJkRvd25MZWZ0VmVjdG9yQmFyOyI6IuKlliIsIiZEb3duUmlnaHRUZWVWZWN0b3I7Ijoi4qWfIiwiJkRvd25SaWdodFZlY3RvcjsiOiLih4EiLCImRG93blJpZ2h0VmVjdG9yQmFyOyI6IuKllyIsIiZEb3duVGVlOyI6IuKKpCIsIiZEb3duVGVlQXJyb3c7Ijoi4oanIiwiJkRvd25hcnJvdzsiOiLih5MiLCImRHNjcjsiOiLwnZKfIiwiJkRzdHJvazsiOiLEkCIsIiZFTkc7IjoixYoiLCImRVRIIjoiw5AiLCImRVRIOyI6IsOQIiwiJkVhY3V0ZSI6IsOJIiwiJkVhY3V0ZTsiOiLDiSIsIiZFY2Fyb247IjoixJoiLCImRWNpcmMiOiLDiiIsIiZFY2lyYzsiOiLDiiIsIiZFY3k7Ijoi0K0iLCImRWRvdDsiOiLEliIsIiZFZnI7Ijoi8J2UiCIsIiZFZ3JhdmUiOiLDiCIsIiZFZ3JhdmU7Ijoiw4giLCImRWxlbWVudDsiOiLiiIgiLCImRW1hY3I7IjoixJIiLCImRW1wdHlTbWFsbFNxdWFyZTsiOiLil7siLCImRW1wdHlWZXJ5U21hbGxTcXVhcmU7Ijoi4parIiwiJkVvZ29uOyI6IsSYIiwiJkVvcGY7Ijoi8J2UvCIsIiZFcHNpbG9uOyI6Is6VIiwiJkVxdWFsOyI6IuKptSIsIiZFcXVhbFRpbGRlOyI6IuKJgiIsIiZFcXVpbGlicml1bTsiOiLih4wiLCImRXNjcjsiOiLihLAiLCImRXNpbTsiOiLiqbMiLCImRXRhOyI6Is6XIiwiJkV1bWwiOiLDiyIsIiZFdW1sOyI6IsOLIiwiJkV4aXN0czsiOiLiiIMiLCImRXhwb25lbnRpYWxFOyI6IuKFhyIsIiZGY3k7Ijoi0KQiLCImRmZyOyI6IvCdlIkiLCImRmlsbGVkU21hbGxTcXVhcmU7Ijoi4pe8IiwiJkZpbGxlZFZlcnlTbWFsbFNxdWFyZTsiOiLilqoiLCImRm9wZjsiOiLwnZS9IiwiJkZvckFsbDsiOiLiiIAiLCImRm91cmllcnRyZjsiOiLihLEiLCImRnNjcjsiOiLihLEiLCImR0pjeTsiOiLQgyIsIiZHVCI6Ij4iLCImR1Q7IjoiPiIsIiZHYW1tYTsiOiLOkyIsIiZHYW1tYWQ7Ijoiz5wiLCImR2JyZXZlOyI6IsSeIiwiJkdjZWRpbDsiOiLEoiIsIiZHY2lyYzsiOiLEnCIsIiZHY3k7Ijoi0JMiLCImR2RvdDsiOiLEoCIsIiZHZnI7Ijoi8J2UiiIsIiZHZzsiOiLii5kiLCImR29wZjsiOiLwnZS+IiwiJkdyZWF0ZXJFcXVhbDsiOiLiiaUiLCImR3JlYXRlckVxdWFsTGVzczsiOiLii5siLCImR3JlYXRlckZ1bGxFcXVhbDsiOiLiiaciLCImR3JlYXRlckdyZWF0ZXI7Ijoi4qqiIiwiJkdyZWF0ZXJMZXNzOyI6IuKJtyIsIiZHcmVhdGVyU2xhbnRFcXVhbDsiOiLiqb4iLCImR3JlYXRlclRpbGRlOyI6IuKJsyIsIiZHc2NyOyI6IvCdkqIiLCImR3Q7Ijoi4omrIiwiJkhBUkRjeTsiOiLQqiIsIiZIYWNlazsiOiLLhyIsIiZIYXQ7IjoiXiIsIiZIY2lyYzsiOiLEpCIsIiZIZnI7Ijoi4oSMIiwiJkhpbGJlcnRTcGFjZTsiOiLihIsiLCImSG9wZjsiOiLihI0iLCImSG9yaXpvbnRhbExpbmU7Ijoi4pSAIiwiJkhzY3I7Ijoi4oSLIiwiJkhzdHJvazsiOiLEpiIsIiZIdW1wRG93bkh1bXA7Ijoi4omOIiwiJkh1bXBFcXVhbDsiOiLiiY8iLCImSUVjeTsiOiLQlSIsIiZJSmxpZzsiOiLEsiIsIiZJT2N5OyI6ItCBIiwiJklhY3V0ZSI6IsONIiwiJklhY3V0ZTsiOiLDjSIsIiZJY2lyYyI6IsOOIiwiJkljaXJjOyI6IsOOIiwiJkljeTsiOiLQmCIsIiZJZG90OyI6IsSwIiwiJklmcjsiOiLihJEiLCImSWdyYXZlIjoiw4wiLCImSWdyYXZlOyI6IsOMIiwiJkltOyI6IuKEkSIsIiZJbWFjcjsiOiLEqiIsIiZJbWFnaW5hcnlJOyI6IuKFiCIsIiZJbXBsaWVzOyI6IuKHkiIsIiZJbnQ7Ijoi4oisIiwiJkludGVncmFsOyI6IuKIqyIsIiZJbnRlcnNlY3Rpb247Ijoi4ouCIiwiJkludmlzaWJsZUNvbW1hOyI6IuKBoyIsIiZJbnZpc2libGVUaW1lczsiOiLigaIiLCImSW9nb247IjoixK4iLCImSW9wZjsiOiLwnZWAIiwiJklvdGE7IjoizpkiLCImSXNjcjsiOiLihJAiLCImSXRpbGRlOyI6IsSoIiwiJkl1a2N5OyI6ItCGIiwiJkl1bWwiOiLDjyIsIiZJdW1sOyI6IsOPIiwiJkpjaXJjOyI6IsS0IiwiJkpjeTsiOiLQmSIsIiZKZnI7Ijoi8J2UjSIsIiZKb3BmOyI6IvCdlYEiLCImSnNjcjsiOiLwnZKlIiwiJkpzZXJjeTsiOiLQiCIsIiZKdWtjeTsiOiLQhCIsIiZLSGN5OyI6ItClIiwiJktKY3k7Ijoi0IwiLCImS2FwcGE7IjoizpoiLCImS2NlZGlsOyI6IsS2IiwiJktjeTsiOiLQmiIsIiZLZnI7Ijoi8J2UjiIsIiZLb3BmOyI6IvCdlYIiLCImS3NjcjsiOiLwnZKmIiwiJkxKY3k7Ijoi0IkiLCImTFQiOiI8IiwiJkxUOyI6IjwiLCImTGFjdXRlOyI6IsS5IiwiJkxhbWJkYTsiOiLOmyIsIiZMYW5nOyI6IuKfqiIsIiZMYXBsYWNldHJmOyI6IuKEkiIsIiZMYXJyOyI6IuKGniIsIiZMY2Fyb247IjoixL0iLCImTGNlZGlsOyI6IsS7IiwiJkxjeTsiOiLQmyIsIiZMZWZ0QW5nbGVCcmFja2V0OyI6IuKfqCIsIiZMZWZ0QXJyb3c7Ijoi4oaQIiwiJkxlZnRBcnJvd0JhcjsiOiLih6QiLCImTGVmdEFycm93UmlnaHRBcnJvdzsiOiLih4YiLCImTGVmdENlaWxpbmc7Ijoi4oyIIiwiJkxlZnREb3VibGVCcmFja2V0OyI6IuKfpiIsIiZMZWZ0RG93blRlZVZlY3RvcjsiOiLipaEiLCImTGVmdERvd25WZWN0b3I7Ijoi4oeDIiwiJkxlZnREb3duVmVjdG9yQmFyOyI6IuKlmSIsIiZMZWZ0Rmxvb3I7Ijoi4oyKIiwiJkxlZnRSaWdodEFycm93OyI6IuKGlCIsIiZMZWZ0UmlnaHRWZWN0b3I7Ijoi4qWOIiwiJkxlZnRUZWU7Ijoi4oqjIiwiJkxlZnRUZWVBcnJvdzsiOiLihqQiLCImTGVmdFRlZVZlY3RvcjsiOiLipZoiLCImTGVmdFRyaWFuZ2xlOyI6IuKKsiIsIiZMZWZ0VHJpYW5nbGVCYXI7Ijoi4qePIiwiJkxlZnRUcmlhbmdsZUVxdWFsOyI6IuKKtCIsIiZMZWZ0VXBEb3duVmVjdG9yOyI6IuKlkSIsIiZMZWZ0VXBUZWVWZWN0b3I7Ijoi4qWgIiwiJkxlZnRVcFZlY3RvcjsiOiLihr8iLCImTGVmdFVwVmVjdG9yQmFyOyI6IuKlmCIsIiZMZWZ0VmVjdG9yOyI6IuKGvCIsIiZMZWZ0VmVjdG9yQmFyOyI6IuKlkiIsIiZMZWZ0YXJyb3c7Ijoi4oeQIiwiJkxlZnRyaWdodGFycm93OyI6IuKHlCIsIiZMZXNzRXF1YWxHcmVhdGVyOyI6IuKLmiIsIiZMZXNzRnVsbEVxdWFsOyI6IuKJpiIsIiZMZXNzR3JlYXRlcjsiOiLiibYiLCImTGVzc0xlc3M7Ijoi4qqhIiwiJkxlc3NTbGFudEVxdWFsOyI6IuKpvSIsIiZMZXNzVGlsZGU7Ijoi4omyIiwiJkxmcjsiOiLwnZSPIiwiJkxsOyI6IuKLmCIsIiZMbGVmdGFycm93OyI6IuKHmiIsIiZMbWlkb3Q7IjoixL8iLCImTG9uZ0xlZnRBcnJvdzsiOiLin7UiLCImTG9uZ0xlZnRSaWdodEFycm93OyI6IuKftyIsIiZMb25nUmlnaHRBcnJvdzsiOiLin7YiLCImTG9uZ2xlZnRhcnJvdzsiOiLin7giLCImTG9uZ2xlZnRyaWdodGFycm93OyI6IuKfuiIsIiZMb25ncmlnaHRhcnJvdzsiOiLin7kiLCImTG9wZjsiOiLwnZWDIiwiJkxvd2VyTGVmdEFycm93OyI6IuKGmSIsIiZMb3dlclJpZ2h0QXJyb3c7Ijoi4oaYIiwiJkxzY3I7Ijoi4oSSIiwiJkxzaDsiOiLihrAiLCImTHN0cm9rOyI6IsWBIiwiJkx0OyI6IuKJqiIsIiZNYXA7Ijoi4qSFIiwiJk1jeTsiOiLQnCIsIiZNZWRpdW1TcGFjZTsiOiLigZ8iLCImTWVsbGludHJmOyI6IuKEsyIsIiZNZnI7Ijoi8J2UkCIsIiZNaW51c1BsdXM7Ijoi4oiTIiwiJk1vcGY7Ijoi8J2VhCIsIiZNc2NyOyI6IuKEsyIsIiZNdTsiOiLOnCIsIiZOSmN5OyI6ItCKIiwiJk5hY3V0ZTsiOiLFgyIsIiZOY2Fyb247IjoixYciLCImTmNlZGlsOyI6IsWFIiwiJk5jeTsiOiLQnSIsIiZOZWdhdGl2ZU1lZGl1bVNwYWNlOyI6IuKAiyIsIiZOZWdhdGl2ZVRoaWNrU3BhY2U7Ijoi4oCLIiwiJk5lZ2F0aXZlVGhpblNwYWNlOyI6IuKAiyIsIiZOZWdhdGl2ZVZlcnlUaGluU3BhY2U7Ijoi4oCLIiwiJk5lc3RlZEdyZWF0ZXJHcmVhdGVyOyI6IuKJqyIsIiZOZXN0ZWRMZXNzTGVzczsiOiLiiaoiLCImTmV3TGluZTsiOiJcbiIsIiZOZnI7Ijoi8J2UkSIsIiZOb0JyZWFrOyI6IuKBoCIsIiZOb25CcmVha2luZ1NwYWNlOyI6IsKgIiwiJk5vcGY7Ijoi4oSVIiwiJk5vdDsiOiLiq6wiLCImTm90Q29uZ3J1ZW50OyI6IuKJoiIsIiZOb3RDdXBDYXA7Ijoi4omtIiwiJk5vdERvdWJsZVZlcnRpY2FsQmFyOyI6IuKIpiIsIiZOb3RFbGVtZW50OyI6IuKIiSIsIiZOb3RFcXVhbDsiOiLiiaAiLCImTm90RXF1YWxUaWxkZTsiOiLiiYLMuCIsIiZOb3RFeGlzdHM7Ijoi4oiEIiwiJk5vdEdyZWF0ZXI7Ijoi4omvIiwiJk5vdEdyZWF0ZXJFcXVhbDsiOiLiibEiLCImTm90R3JlYXRlckZ1bGxFcXVhbDsiOiLiiafMuCIsIiZOb3RHcmVhdGVyR3JlYXRlcjsiOiLiiavMuCIsIiZOb3RHcmVhdGVyTGVzczsiOiLiibkiLCImTm90R3JlYXRlclNsYW50RXF1YWw7Ijoi4qm+zLgiLCImTm90R3JlYXRlclRpbGRlOyI6IuKJtSIsIiZOb3RIdW1wRG93bkh1bXA7Ijoi4omOzLgiLCImTm90SHVtcEVxdWFsOyI6IuKJj8y4IiwiJk5vdExlZnRUcmlhbmdsZTsiOiLii6oiLCImTm90TGVmdFRyaWFuZ2xlQmFyOyI6IuKnj8y4IiwiJk5vdExlZnRUcmlhbmdsZUVxdWFsOyI6IuKLrCIsIiZOb3RMZXNzOyI6IuKJriIsIiZOb3RMZXNzRXF1YWw7Ijoi4omwIiwiJk5vdExlc3NHcmVhdGVyOyI6IuKJuCIsIiZOb3RMZXNzTGVzczsiOiLiiarMuCIsIiZOb3RMZXNzU2xhbnRFcXVhbDsiOiLiqb3MuCIsIiZOb3RMZXNzVGlsZGU7Ijoi4om0IiwiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyOyI6IuKqosy4IiwiJk5vdE5lc3RlZExlc3NMZXNzOyI6IuKqocy4IiwiJk5vdFByZWNlZGVzOyI6IuKKgCIsIiZOb3RQcmVjZWRlc0VxdWFsOyI6IuKqr8y4IiwiJk5vdFByZWNlZGVzU2xhbnRFcXVhbDsiOiLii6AiLCImTm90UmV2ZXJzZUVsZW1lbnQ7Ijoi4oiMIiwiJk5vdFJpZ2h0VHJpYW5nbGU7Ijoi4ourIiwiJk5vdFJpZ2h0VHJpYW5nbGVCYXI7Ijoi4qeQzLgiLCImTm90UmlnaHRUcmlhbmdsZUVxdWFsOyI6IuKLrSIsIiZOb3RTcXVhcmVTdWJzZXQ7Ijoi4oqPzLgiLCImTm90U3F1YXJlU3Vic2V0RXF1YWw7Ijoi4ouiIiwiJk5vdFNxdWFyZVN1cGVyc2V0OyI6IuKKkMy4IiwiJk5vdFNxdWFyZVN1cGVyc2V0RXF1YWw7Ijoi4oujIiwiJk5vdFN1YnNldDsiOiLiioLig5IiLCImTm90U3Vic2V0RXF1YWw7Ijoi4oqIIiwiJk5vdFN1Y2NlZWRzOyI6IuKKgSIsIiZOb3RTdWNjZWVkc0VxdWFsOyI6IuKqsMy4IiwiJk5vdFN1Y2NlZWRzU2xhbnRFcXVhbDsiOiLii6EiLCImTm90U3VjY2VlZHNUaWxkZTsiOiLiib/MuCIsIiZOb3RTdXBlcnNldDsiOiLiioPig5IiLCImTm90U3VwZXJzZXRFcXVhbDsiOiLiiokiLCImTm90VGlsZGU7Ijoi4omBIiwiJk5vdFRpbGRlRXF1YWw7Ijoi4omEIiwiJk5vdFRpbGRlRnVsbEVxdWFsOyI6IuKJhyIsIiZOb3RUaWxkZVRpbGRlOyI6IuKJiSIsIiZOb3RWZXJ0aWNhbEJhcjsiOiLiiKQiLCImTnNjcjsiOiLwnZKpIiwiJk50aWxkZSI6IsORIiwiJk50aWxkZTsiOiLDkSIsIiZOdTsiOiLOnSIsIiZPRWxpZzsiOiLFkiIsIiZPYWN1dGUiOiLDkyIsIiZPYWN1dGU7Ijoiw5MiLCImT2NpcmMiOiLDlCIsIiZPY2lyYzsiOiLDlCIsIiZPY3k7Ijoi0J4iLCImT2RibGFjOyI6IsWQIiwiJk9mcjsiOiLwnZSSIiwiJk9ncmF2ZSI6IsOSIiwiJk9ncmF2ZTsiOiLDkiIsIiZPbWFjcjsiOiLFjCIsIiZPbWVnYTsiOiLOqSIsIiZPbWljcm9uOyI6Is6fIiwiJk9vcGY7Ijoi8J2VhiIsIiZPcGVuQ3VybHlEb3VibGVRdW90ZTsiOiLigJwiLCImT3BlbkN1cmx5UXVvdGU7Ijoi4oCYIiwiJk9yOyI6IuKplCIsIiZPc2NyOyI6IvCdkqoiLCImT3NsYXNoIjoiw5giLCImT3NsYXNoOyI6IsOYIiwiJk90aWxkZSI6IsOVIiwiJk90aWxkZTsiOiLDlSIsIiZPdGltZXM7Ijoi4qi3IiwiJk91bWwiOiLDliIsIiZPdW1sOyI6IsOWIiwiJk92ZXJCYXI7Ijoi4oC+IiwiJk92ZXJCcmFjZTsiOiLij54iLCImT3ZlckJyYWNrZXQ7Ijoi4o60IiwiJk92ZXJQYXJlbnRoZXNpczsiOiLij5wiLCImUGFydGlhbEQ7Ijoi4oiCIiwiJlBjeTsiOiLQnyIsIiZQZnI7Ijoi8J2UkyIsIiZQaGk7IjoizqYiLCImUGk7IjoizqAiLCImUGx1c01pbnVzOyI6IsKxIiwiJlBvaW5jYXJlcGxhbmU7Ijoi4oSMIiwiJlBvcGY7Ijoi4oSZIiwiJlByOyI6IuKquyIsIiZQcmVjZWRlczsiOiLiiboiLCImUHJlY2VkZXNFcXVhbDsiOiLiqq8iLCImUHJlY2VkZXNTbGFudEVxdWFsOyI6IuKJvCIsIiZQcmVjZWRlc1RpbGRlOyI6IuKJviIsIiZQcmltZTsiOiLigLMiLCImUHJvZHVjdDsiOiLiiI8iLCImUHJvcG9ydGlvbjsiOiLiiLciLCImUHJvcG9ydGlvbmFsOyI6IuKInSIsIiZQc2NyOyI6IvCdkqsiLCImUHNpOyI6Is6oIiwiJlFVT1QiOiciJywiJlFVT1Q7IjonIicsIiZRZnI7Ijoi8J2UlCIsIiZRb3BmOyI6IuKEmiIsIiZRc2NyOyI6IvCdkqwiLCImUkJhcnI7Ijoi4qSQIiwiJlJFRyI6IsKuIiwiJlJFRzsiOiLCriIsIiZSYWN1dGU7IjoixZQiLCImUmFuZzsiOiLin6siLCImUmFycjsiOiLihqAiLCImUmFycnRsOyI6IuKkliIsIiZSY2Fyb247IjoixZgiLCImUmNlZGlsOyI6IsWWIiwiJlJjeTsiOiLQoCIsIiZSZTsiOiLihJwiLCImUmV2ZXJzZUVsZW1lbnQ7Ijoi4oiLIiwiJlJldmVyc2VFcXVpbGlicml1bTsiOiLih4siLCImUmV2ZXJzZVVwRXF1aWxpYnJpdW07Ijoi4qWvIiwiJlJmcjsiOiLihJwiLCImUmhvOyI6Is6hIiwiJlJpZ2h0QW5nbGVCcmFja2V0OyI6IuKfqSIsIiZSaWdodEFycm93OyI6IuKGkiIsIiZSaWdodEFycm93QmFyOyI6IuKHpSIsIiZSaWdodEFycm93TGVmdEFycm93OyI6IuKHhCIsIiZSaWdodENlaWxpbmc7Ijoi4oyJIiwiJlJpZ2h0RG91YmxlQnJhY2tldDsiOiLin6ciLCImUmlnaHREb3duVGVlVmVjdG9yOyI6IuKlnSIsIiZSaWdodERvd25WZWN0b3I7Ijoi4oeCIiwiJlJpZ2h0RG93blZlY3RvckJhcjsiOiLipZUiLCImUmlnaHRGbG9vcjsiOiLijIsiLCImUmlnaHRUZWU7Ijoi4oqiIiwiJlJpZ2h0VGVlQXJyb3c7Ijoi4oamIiwiJlJpZ2h0VGVlVmVjdG9yOyI6IuKlmyIsIiZSaWdodFRyaWFuZ2xlOyI6IuKKsyIsIiZSaWdodFRyaWFuZ2xlQmFyOyI6IuKnkCIsIiZSaWdodFRyaWFuZ2xlRXF1YWw7Ijoi4oq1IiwiJlJpZ2h0VXBEb3duVmVjdG9yOyI6IuKljyIsIiZSaWdodFVwVGVlVmVjdG9yOyI6IuKlnCIsIiZSaWdodFVwVmVjdG9yOyI6IuKGviIsIiZSaWdodFVwVmVjdG9yQmFyOyI6IuKllCIsIiZSaWdodFZlY3RvcjsiOiLih4AiLCImUmlnaHRWZWN0b3JCYXI7Ijoi4qWTIiwiJlJpZ2h0YXJyb3c7Ijoi4oeSIiwiJlJvcGY7Ijoi4oSdIiwiJlJvdW5kSW1wbGllczsiOiLipbAiLCImUnJpZ2h0YXJyb3c7Ijoi4oebIiwiJlJzY3I7Ijoi4oSbIiwiJlJzaDsiOiLihrEiLCImUnVsZURlbGF5ZWQ7Ijoi4qe0IiwiJlNIQ0hjeTsiOiLQqSIsIiZTSGN5OyI6ItCoIiwiJlNPRlRjeTsiOiLQrCIsIiZTYWN1dGU7IjoixZoiLCImU2M7Ijoi4qq8IiwiJlNjYXJvbjsiOiLFoCIsIiZTY2VkaWw7IjoixZ4iLCImU2NpcmM7IjoixZwiLCImU2N5OyI6ItChIiwiJlNmcjsiOiLwnZSWIiwiJlNob3J0RG93bkFycm93OyI6IuKGkyIsIiZTaG9ydExlZnRBcnJvdzsiOiLihpAiLCImU2hvcnRSaWdodEFycm93OyI6IuKGkiIsIiZTaG9ydFVwQXJyb3c7Ijoi4oaRIiwiJlNpZ21hOyI6Is6jIiwiJlNtYWxsQ2lyY2xlOyI6IuKImCIsIiZTb3BmOyI6IvCdlYoiLCImU3FydDsiOiLiiJoiLCImU3F1YXJlOyI6IuKWoSIsIiZTcXVhcmVJbnRlcnNlY3Rpb247Ijoi4oqTIiwiJlNxdWFyZVN1YnNldDsiOiLiio8iLCImU3F1YXJlU3Vic2V0RXF1YWw7Ijoi4oqRIiwiJlNxdWFyZVN1cGVyc2V0OyI6IuKKkCIsIiZTcXVhcmVTdXBlcnNldEVxdWFsOyI6IuKKkiIsIiZTcXVhcmVVbmlvbjsiOiLiipQiLCImU3NjcjsiOiLwnZKuIiwiJlN0YXI7Ijoi4ouGIiwiJlN1YjsiOiLii5AiLCImU3Vic2V0OyI6IuKLkCIsIiZTdWJzZXRFcXVhbDsiOiLiioYiLCImU3VjY2VlZHM7Ijoi4om7IiwiJlN1Y2NlZWRzRXF1YWw7Ijoi4qqwIiwiJlN1Y2NlZWRzU2xhbnRFcXVhbDsiOiLiib0iLCImU3VjY2VlZHNUaWxkZTsiOiLiib8iLCImU3VjaFRoYXQ7Ijoi4oiLIiwiJlN1bTsiOiLiiJEiLCImU3VwOyI6IuKLkSIsIiZTdXBlcnNldDsiOiLiioMiLCImU3VwZXJzZXRFcXVhbDsiOiLiiociLCImU3Vwc2V0OyI6IuKLkSIsIiZUSE9STiI6IsOeIiwiJlRIT1JOOyI6IsOeIiwiJlRSQURFOyI6IuKEoiIsIiZUU0hjeTsiOiLQiyIsIiZUU2N5OyI6ItCmIiwiJlRhYjsiOiJcdCIsIiZUYXU7IjoizqQiLCImVGNhcm9uOyI6IsWkIiwiJlRjZWRpbDsiOiLFoiIsIiZUY3k7Ijoi0KIiLCImVGZyOyI6IvCdlJciLCImVGhlcmVmb3JlOyI6IuKItCIsIiZUaGV0YTsiOiLOmCIsIiZUaGlja1NwYWNlOyI6IuKBn+KAiiIsIiZUaGluU3BhY2U7Ijoi4oCJIiwiJlRpbGRlOyI6IuKIvCIsIiZUaWxkZUVxdWFsOyI6IuKJgyIsIiZUaWxkZUZ1bGxFcXVhbDsiOiLiiYUiLCImVGlsZGVUaWxkZTsiOiLiiYgiLCImVG9wZjsiOiLwnZWLIiwiJlRyaXBsZURvdDsiOiLig5siLCImVHNjcjsiOiLwnZKvIiwiJlRzdHJvazsiOiLFpiIsIiZVYWN1dGUiOiLDmiIsIiZVYWN1dGU7Ijoiw5oiLCImVWFycjsiOiLihp8iLCImVWFycm9jaXI7Ijoi4qWJIiwiJlVicmN5OyI6ItCOIiwiJlVicmV2ZTsiOiLFrCIsIiZVY2lyYyI6IsObIiwiJlVjaXJjOyI6IsObIiwiJlVjeTsiOiLQoyIsIiZVZGJsYWM7IjoixbAiLCImVWZyOyI6IvCdlJgiLCImVWdyYXZlIjoiw5kiLCImVWdyYXZlOyI6IsOZIiwiJlVtYWNyOyI6IsWqIiwiJlVuZGVyQmFyOyI6Il8iLCImVW5kZXJCcmFjZTsiOiLij58iLCImVW5kZXJCcmFja2V0OyI6IuKOtSIsIiZVbmRlclBhcmVudGhlc2lzOyI6IuKPnSIsIiZVbmlvbjsiOiLii4MiLCImVW5pb25QbHVzOyI6IuKKjiIsIiZVb2dvbjsiOiLFsiIsIiZVb3BmOyI6IvCdlYwiLCImVXBBcnJvdzsiOiLihpEiLCImVXBBcnJvd0JhcjsiOiLipJIiLCImVXBBcnJvd0Rvd25BcnJvdzsiOiLih4UiLCImVXBEb3duQXJyb3c7Ijoi4oaVIiwiJlVwRXF1aWxpYnJpdW07Ijoi4qWuIiwiJlVwVGVlOyI6IuKKpSIsIiZVcFRlZUFycm93OyI6IuKGpSIsIiZVcGFycm93OyI6IuKHkSIsIiZVcGRvd25hcnJvdzsiOiLih5UiLCImVXBwZXJMZWZ0QXJyb3c7Ijoi4oaWIiwiJlVwcGVyUmlnaHRBcnJvdzsiOiLihpciLCImVXBzaTsiOiLPkiIsIiZVcHNpbG9uOyI6Is6lIiwiJlVyaW5nOyI6IsWuIiwiJlVzY3I7Ijoi8J2SsCIsIiZVdGlsZGU7IjoixagiLCImVXVtbCI6IsOcIiwiJlV1bWw7Ijoiw5wiLCImVkRhc2g7Ijoi4oqrIiwiJlZiYXI7Ijoi4qurIiwiJlZjeTsiOiLQkiIsIiZWZGFzaDsiOiLiiqkiLCImVmRhc2hsOyI6IuKrpiIsIiZWZWU7Ijoi4ouBIiwiJlZlcmJhcjsiOiLigJYiLCImVmVydDsiOiLigJYiLCImVmVydGljYWxCYXI7Ijoi4oijIiwiJlZlcnRpY2FsTGluZTsiOiJ8IiwiJlZlcnRpY2FsU2VwYXJhdG9yOyI6IuKdmCIsIiZWZXJ0aWNhbFRpbGRlOyI6IuKJgCIsIiZWZXJ5VGhpblNwYWNlOyI6IuKAiiIsIiZWZnI7Ijoi8J2UmSIsIiZWb3BmOyI6IvCdlY0iLCImVnNjcjsiOiLwnZKxIiwiJlZ2ZGFzaDsiOiLiiqoiLCImV2NpcmM7IjoixbQiLCImV2VkZ2U7Ijoi4ouAIiwiJldmcjsiOiLwnZSaIiwiJldvcGY7Ijoi8J2VjiIsIiZXc2NyOyI6IvCdkrIiLCImWGZyOyI6IvCdlJsiLCImWGk7Ijoizp4iLCImWG9wZjsiOiLwnZWPIiwiJlhzY3I7Ijoi8J2SsyIsIiZZQWN5OyI6ItCvIiwiJllJY3k7Ijoi0IciLCImWVVjeTsiOiLQriIsIiZZYWN1dGUiOiLDnSIsIiZZYWN1dGU7Ijoiw50iLCImWWNpcmM7IjoixbYiLCImWWN5OyI6ItCrIiwiJllmcjsiOiLwnZScIiwiJllvcGY7Ijoi8J2VkCIsIiZZc2NyOyI6IvCdkrQiLCImWXVtbDsiOiLFuCIsIiZaSGN5OyI6ItCWIiwiJlphY3V0ZTsiOiLFuSIsIiZaY2Fyb247Ijoixb0iLCImWmN5OyI6ItCXIiwiJlpkb3Q7IjoixbsiLCImWmVyb1dpZHRoU3BhY2U7Ijoi4oCLIiwiJlpldGE7IjoizpYiLCImWmZyOyI6IuKEqCIsIiZab3BmOyI6IuKEpCIsIiZac2NyOyI6IvCdkrUiLCImYWFjdXRlIjoiw6EiLCImYWFjdXRlOyI6IsOhIiwiJmFicmV2ZTsiOiLEgyIsIiZhYzsiOiLiiL4iLCImYWNFOyI6IuKIvsyzIiwiJmFjZDsiOiLiiL8iLCImYWNpcmMiOiLDoiIsIiZhY2lyYzsiOiLDoiIsIiZhY3V0ZSI6IsK0IiwiJmFjdXRlOyI6IsK0IiwiJmFjeTsiOiLQsCIsIiZhZWxpZyI6IsOmIiwiJmFlbGlnOyI6IsOmIiwiJmFmOyI6IuKBoSIsIiZhZnI7Ijoi8J2UniIsIiZhZ3JhdmUiOiLDoCIsIiZhZ3JhdmU7Ijoiw6AiLCImYWxlZnN5bTsiOiLihLUiLCImYWxlcGg7Ijoi4oS1IiwiJmFscGhhOyI6Is6xIiwiJmFtYWNyOyI6IsSBIiwiJmFtYWxnOyI6IuKovyIsIiZhbXAiOiImIiwiJmFtcDsiOiImIiwiJmFuZDsiOiLiiKciLCImYW5kYW5kOyI6IuKplSIsIiZhbmRkOyI6IuKpnCIsIiZhbmRzbG9wZTsiOiLiqZgiLCImYW5kdjsiOiLiqZoiLCImYW5nOyI6IuKIoCIsIiZhbmdlOyI6IuKmpCIsIiZhbmdsZTsiOiLiiKAiLCImYW5nbXNkOyI6IuKIoSIsIiZhbmdtc2RhYTsiOiLipqgiLCImYW5nbXNkYWI7Ijoi4qapIiwiJmFuZ21zZGFjOyI6IuKmqiIsIiZhbmdtc2RhZDsiOiLipqsiLCImYW5nbXNkYWU7Ijoi4qasIiwiJmFuZ21zZGFmOyI6IuKmrSIsIiZhbmdtc2RhZzsiOiLipq4iLCImYW5nbXNkYWg7Ijoi4qavIiwiJmFuZ3J0OyI6IuKInyIsIiZhbmdydHZiOyI6IuKKviIsIiZhbmdydHZiZDsiOiLipp0iLCImYW5nc3BoOyI6IuKIoiIsIiZhbmdzdDsiOiLDhSIsIiZhbmd6YXJyOyI6IuKNvCIsIiZhb2dvbjsiOiLEhSIsIiZhb3BmOyI6IvCdlZIiLCImYXA7Ijoi4omIIiwiJmFwRTsiOiLiqbAiLCImYXBhY2lyOyI6IuKpryIsIiZhcGU7Ijoi4omKIiwiJmFwaWQ7Ijoi4omLIiwiJmFwb3M7IjoiJyIsIiZhcHByb3g7Ijoi4omIIiwiJmFwcHJveGVxOyI6IuKJiiIsIiZhcmluZyI6IsOlIiwiJmFyaW5nOyI6IsOlIiwiJmFzY3I7Ijoi8J2StiIsIiZhc3Q7IjoiKiIsIiZhc3ltcDsiOiLiiYgiLCImYXN5bXBlcTsiOiLiiY0iLCImYXRpbGRlIjoiw6MiLCImYXRpbGRlOyI6IsOjIiwiJmF1bWwiOiLDpCIsIiZhdW1sOyI6IsOkIiwiJmF3Y29uaW50OyI6IuKIsyIsIiZhd2ludDsiOiLiqJEiLCImYk5vdDsiOiLiq60iLCImYmFja2Nvbmc7Ijoi4omMIiwiJmJhY2tlcHNpbG9uOyI6Is+2IiwiJmJhY2twcmltZTsiOiLigLUiLCImYmFja3NpbTsiOiLiiL0iLCImYmFja3NpbWVxOyI6IuKLjSIsIiZiYXJ2ZWU7Ijoi4oq9IiwiJmJhcndlZDsiOiLijIUiLCImYmFyd2VkZ2U7Ijoi4oyFIiwiJmJicms7Ijoi4o61IiwiJmJicmt0YnJrOyI6IuKOtiIsIiZiY29uZzsiOiLiiYwiLCImYmN5OyI6ItCxIiwiJmJkcXVvOyI6IuKAniIsIiZiZWNhdXM7Ijoi4oi1IiwiJmJlY2F1c2U7Ijoi4oi1IiwiJmJlbXB0eXY7Ijoi4qawIiwiJmJlcHNpOyI6Is+2IiwiJmJlcm5vdTsiOiLihKwiLCImYmV0YTsiOiLOsiIsIiZiZXRoOyI6IuKEtiIsIiZiZXR3ZWVuOyI6IuKJrCIsIiZiZnI7Ijoi8J2UnyIsIiZiaWdjYXA7Ijoi4ouCIiwiJmJpZ2NpcmM7Ijoi4pevIiwiJmJpZ2N1cDsiOiLii4MiLCImYmlnb2RvdDsiOiLiqIAiLCImYmlnb3BsdXM7Ijoi4qiBIiwiJmJpZ290aW1lczsiOiLiqIIiLCImYmlnc3FjdXA7Ijoi4qiGIiwiJmJpZ3N0YXI7Ijoi4piFIiwiJmJpZ3RyaWFuZ2xlZG93bjsiOiLilr0iLCImYmlndHJpYW5nbGV1cDsiOiLilrMiLCImYmlndXBsdXM7Ijoi4qiEIiwiJmJpZ3ZlZTsiOiLii4EiLCImYmlnd2VkZ2U7Ijoi4ouAIiwiJmJrYXJvdzsiOiLipI0iLCImYmxhY2tsb3plbmdlOyI6IuKnqyIsIiZibGFja3NxdWFyZTsiOiLilqoiLCImYmxhY2t0cmlhbmdsZTsiOiLilrQiLCImYmxhY2t0cmlhbmdsZWRvd247Ijoi4pa+IiwiJmJsYWNrdHJpYW5nbGVsZWZ0OyI6IuKXgiIsIiZibGFja3RyaWFuZ2xlcmlnaHQ7Ijoi4pa4IiwiJmJsYW5rOyI6IuKQoyIsIiZibGsxMjsiOiLilpIiLCImYmxrMTQ7Ijoi4paRIiwiJmJsazM0OyI6IuKWkyIsIiZibG9jazsiOiLilogiLCImYm5lOyI6Ij3ig6UiLCImYm5lcXVpdjsiOiLiiaHig6UiLCImYm5vdDsiOiLijJAiLCImYm9wZjsiOiLwnZWTIiwiJmJvdDsiOiLiiqUiLCImYm90dG9tOyI6IuKKpSIsIiZib3d0aWU7Ijoi4ouIIiwiJmJveERMOyI6IuKVlyIsIiZib3hEUjsiOiLilZQiLCImYm94RGw7Ijoi4pWWIiwiJmJveERyOyI6IuKVkyIsIiZib3hIOyI6IuKVkCIsIiZib3hIRDsiOiLilaYiLCImYm94SFU7Ijoi4pWpIiwiJmJveEhkOyI6IuKVpCIsIiZib3hIdTsiOiLilaciLCImYm94VUw7Ijoi4pWdIiwiJmJveFVSOyI6IuKVmiIsIiZib3hVbDsiOiLilZwiLCImYm94VXI7Ijoi4pWZIiwiJmJveFY7Ijoi4pWRIiwiJmJveFZIOyI6IuKVrCIsIiZib3hWTDsiOiLilaMiLCImYm94VlI7Ijoi4pWgIiwiJmJveFZoOyI6IuKVqyIsIiZib3hWbDsiOiLilaIiLCImYm94VnI7Ijoi4pWfIiwiJmJveGJveDsiOiLip4kiLCImYm94ZEw7Ijoi4pWVIiwiJmJveGRSOyI6IuKVkiIsIiZib3hkbDsiOiLilJAiLCImYm94ZHI7Ijoi4pSMIiwiJmJveGg7Ijoi4pSAIiwiJmJveGhEOyI6IuKVpSIsIiZib3hoVTsiOiLilagiLCImYm94aGQ7Ijoi4pSsIiwiJmJveGh1OyI6IuKUtCIsIiZib3htaW51czsiOiLiip8iLCImYm94cGx1czsiOiLiip4iLCImYm94dGltZXM7Ijoi4oqgIiwiJmJveHVMOyI6IuKVmyIsIiZib3h1UjsiOiLilZgiLCImYm94dWw7Ijoi4pSYIiwiJmJveHVyOyI6IuKUlCIsIiZib3h2OyI6IuKUgiIsIiZib3h2SDsiOiLilaoiLCImYm94dkw7Ijoi4pWhIiwiJmJveHZSOyI6IuKVniIsIiZib3h2aDsiOiLilLwiLCImYm94dmw7Ijoi4pSkIiwiJmJveHZyOyI6IuKUnCIsIiZicHJpbWU7Ijoi4oC1IiwiJmJyZXZlOyI6IsuYIiwiJmJydmJhciI6IsKmIiwiJmJydmJhcjsiOiLCpiIsIiZic2NyOyI6IvCdkrciLCImYnNlbWk7Ijoi4oGPIiwiJmJzaW07Ijoi4oi9IiwiJmJzaW1lOyI6IuKLjSIsIiZic29sOyI6IlxcIiwiJmJzb2xiOyI6IuKnhSIsIiZic29saHN1YjsiOiLin4giLCImYnVsbDsiOiLigKIiLCImYnVsbGV0OyI6IuKAoiIsIiZidW1wOyI6IuKJjiIsIiZidW1wRTsiOiLiqq4iLCImYnVtcGU7Ijoi4omPIiwiJmJ1bXBlcTsiOiLiiY8iLCImY2FjdXRlOyI6IsSHIiwiJmNhcDsiOiLiiKkiLCImY2FwYW5kOyI6IuKphCIsIiZjYXBicmN1cDsiOiLiqYkiLCImY2FwY2FwOyI6IuKpiyIsIiZjYXBjdXA7Ijoi4qmHIiwiJmNhcGRvdDsiOiLiqYAiLCImY2FwczsiOiLiiKnvuIAiLCImY2FyZXQ7Ijoi4oGBIiwiJmNhcm9uOyI6IsuHIiwiJmNjYXBzOyI6IuKpjSIsIiZjY2Fyb247IjoixI0iLCImY2NlZGlsIjoiw6ciLCImY2NlZGlsOyI6IsOnIiwiJmNjaXJjOyI6IsSJIiwiJmNjdXBzOyI6IuKpjCIsIiZjY3Vwc3NtOyI6IuKpkCIsIiZjZG90OyI6IsSLIiwiJmNlZGlsIjoiwrgiLCImY2VkaWw7IjoiwrgiLCImY2VtcHR5djsiOiLiprIiLCImY2VudCI6IsKiIiwiJmNlbnQ7IjoiwqIiLCImY2VudGVyZG90OyI6IsK3IiwiJmNmcjsiOiLwnZSgIiwiJmNoY3k7Ijoi0YciLCImY2hlY2s7Ijoi4pyTIiwiJmNoZWNrbWFyazsiOiLinJMiLCImY2hpOyI6Is+HIiwiJmNpcjsiOiLil4siLCImY2lyRTsiOiLip4MiLCImY2lyYzsiOiLLhiIsIiZjaXJjZXE7Ijoi4omXIiwiJmNpcmNsZWFycm93bGVmdDsiOiLihroiLCImY2lyY2xlYXJyb3dyaWdodDsiOiLihrsiLCImY2lyY2xlZFI7Ijoiwq4iLCImY2lyY2xlZFM7Ijoi4pOIIiwiJmNpcmNsZWRhc3Q7Ijoi4oqbIiwiJmNpcmNsZWRjaXJjOyI6IuKKmiIsIiZjaXJjbGVkZGFzaDsiOiLiip0iLCImY2lyZTsiOiLiiZciLCImY2lyZm5pbnQ7Ijoi4qiQIiwiJmNpcm1pZDsiOiLiq68iLCImY2lyc2NpcjsiOiLip4IiLCImY2x1YnM7Ijoi4pmjIiwiJmNsdWJzdWl0OyI6IuKZoyIsIiZjb2xvbjsiOiI6IiwiJmNvbG9uZTsiOiLiiZQiLCImY29sb25lcTsiOiLiiZQiLCImY29tbWE7IjoiLCIsIiZjb21tYXQ7IjoiQCIsIiZjb21wOyI6IuKIgSIsIiZjb21wZm47Ijoi4oiYIiwiJmNvbXBsZW1lbnQ7Ijoi4oiBIiwiJmNvbXBsZXhlczsiOiLihIIiLCImY29uZzsiOiLiiYUiLCImY29uZ2RvdDsiOiLiqa0iLCImY29uaW50OyI6IuKIriIsIiZjb3BmOyI6IvCdlZQiLCImY29wcm9kOyI6IuKIkCIsIiZjb3B5IjoiwqkiLCImY29weTsiOiLCqSIsIiZjb3B5c3I7Ijoi4oSXIiwiJmNyYXJyOyI6IuKGtSIsIiZjcm9zczsiOiLinJciLCImY3NjcjsiOiLwnZK4IiwiJmNzdWI7Ijoi4quPIiwiJmNzdWJlOyI6IuKrkSIsIiZjc3VwOyI6IuKrkCIsIiZjc3VwZTsiOiLiq5IiLCImY3Rkb3Q7Ijoi4ouvIiwiJmN1ZGFycmw7Ijoi4qS4IiwiJmN1ZGFycnI7Ijoi4qS1IiwiJmN1ZXByOyI6IuKLniIsIiZjdWVzYzsiOiLii58iLCImY3VsYXJyOyI6IuKGtiIsIiZjdWxhcnJwOyI6IuKkvSIsIiZjdXA7Ijoi4oiqIiwiJmN1cGJyY2FwOyI6IuKpiCIsIiZjdXBjYXA7Ijoi4qmGIiwiJmN1cGN1cDsiOiLiqYoiLCImY3VwZG90OyI6IuKKjSIsIiZjdXBvcjsiOiLiqYUiLCImY3VwczsiOiLiiKrvuIAiLCImY3VyYXJyOyI6IuKGtyIsIiZjdXJhcnJtOyI6IuKkvCIsIiZjdXJseWVxcHJlYzsiOiLii54iLCImY3VybHllcXN1Y2M7Ijoi4oufIiwiJmN1cmx5dmVlOyI6IuKLjiIsIiZjdXJseXdlZGdlOyI6IuKLjyIsIiZjdXJyZW4iOiLCpCIsIiZjdXJyZW47IjoiwqQiLCImY3VydmVhcnJvd2xlZnQ7Ijoi4oa2IiwiJmN1cnZlYXJyb3dyaWdodDsiOiLihrciLCImY3V2ZWU7Ijoi4ouOIiwiJmN1d2VkOyI6IuKLjyIsIiZjd2NvbmludDsiOiLiiLIiLCImY3dpbnQ7Ijoi4oixIiwiJmN5bGN0eTsiOiLijK0iLCImZEFycjsiOiLih5MiLCImZEhhcjsiOiLipaUiLCImZGFnZ2VyOyI6IuKAoCIsIiZkYWxldGg7Ijoi4oS4IiwiJmRhcnI7Ijoi4oaTIiwiJmRhc2g7Ijoi4oCQIiwiJmRhc2h2OyI6IuKKoyIsIiZkYmthcm93OyI6IuKkjyIsIiZkYmxhYzsiOiLLnSIsIiZkY2Fyb247IjoixI8iLCImZGN5OyI6ItC0IiwiJmRkOyI6IuKFhiIsIiZkZGFnZ2VyOyI6IuKAoSIsIiZkZGFycjsiOiLih4oiLCImZGRvdHNlcTsiOiLiqbciLCImZGVnIjoiwrAiLCImZGVnOyI6IsKwIiwiJmRlbHRhOyI6Is60IiwiJmRlbXB0eXY7Ijoi4qaxIiwiJmRmaXNodDsiOiLipb8iLCImZGZyOyI6IvCdlKEiLCImZGhhcmw7Ijoi4oeDIiwiJmRoYXJyOyI6IuKHgiIsIiZkaWFtOyI6IuKLhCIsIiZkaWFtb25kOyI6IuKLhCIsIiZkaWFtb25kc3VpdDsiOiLimaYiLCImZGlhbXM7Ijoi4pmmIiwiJmRpZTsiOiLCqCIsIiZkaWdhbW1hOyI6Is+dIiwiJmRpc2luOyI6IuKLsiIsIiZkaXY7Ijoiw7ciLCImZGl2aWRlIjoiw7ciLCImZGl2aWRlOyI6IsO3IiwiJmRpdmlkZW9udGltZXM7Ijoi4ouHIiwiJmRpdm9ueDsiOiLii4ciLCImZGpjeTsiOiLRkiIsIiZkbGNvcm47Ijoi4oyeIiwiJmRsY3JvcDsiOiLijI0iLCImZG9sbGFyOyI6IiQiLCImZG9wZjsiOiLwnZWVIiwiJmRvdDsiOiLLmSIsIiZkb3RlcTsiOiLiiZAiLCImZG90ZXFkb3Q7Ijoi4omRIiwiJmRvdG1pbnVzOyI6IuKIuCIsIiZkb3RwbHVzOyI6IuKIlCIsIiZkb3RzcXVhcmU7Ijoi4oqhIiwiJmRvdWJsZWJhcndlZGdlOyI6IuKMhiIsIiZkb3duYXJyb3c7Ijoi4oaTIiwiJmRvd25kb3duYXJyb3dzOyI6IuKHiiIsIiZkb3duaGFycG9vbmxlZnQ7Ijoi4oeDIiwiJmRvd25oYXJwb29ucmlnaHQ7Ijoi4oeCIiwiJmRyYmthcm93OyI6IuKkkCIsIiZkcmNvcm47Ijoi4oyfIiwiJmRyY3JvcDsiOiLijIwiLCImZHNjcjsiOiLwnZK5IiwiJmRzY3k7Ijoi0ZUiLCImZHNvbDsiOiLip7YiLCImZHN0cm9rOyI6IsSRIiwiJmR0ZG90OyI6IuKLsSIsIiZkdHJpOyI6IuKWvyIsIiZkdHJpZjsiOiLilr4iLCImZHVhcnI7Ijoi4oe1IiwiJmR1aGFyOyI6IuKlryIsIiZkd2FuZ2xlOyI6IuKmpiIsIiZkemN5OyI6ItGfIiwiJmR6aWdyYXJyOyI6IuKfvyIsIiZlRERvdDsiOiLiqbciLCImZURvdDsiOiLiiZEiLCImZWFjdXRlIjoiw6kiLCImZWFjdXRlOyI6IsOpIiwiJmVhc3RlcjsiOiLiqa4iLCImZWNhcm9uOyI6IsSbIiwiJmVjaXI7Ijoi4omWIiwiJmVjaXJjIjoiw6oiLCImZWNpcmM7Ijoiw6oiLCImZWNvbG9uOyI6IuKJlSIsIiZlY3k7Ijoi0Y0iLCImZWRvdDsiOiLElyIsIiZlZTsiOiLihYciLCImZWZEb3Q7Ijoi4omSIiwiJmVmcjsiOiLwnZSiIiwiJmVnOyI6IuKqmiIsIiZlZ3JhdmUiOiLDqCIsIiZlZ3JhdmU7Ijoiw6giLCImZWdzOyI6IuKqliIsIiZlZ3Nkb3Q7Ijoi4qqYIiwiJmVsOyI6IuKqmSIsIiZlbGludGVyczsiOiLij6ciLCImZWxsOyI6IuKEkyIsIiZlbHM7Ijoi4qqVIiwiJmVsc2RvdDsiOiLiqpciLCImZW1hY3I7IjoixJMiLCImZW1wdHk7Ijoi4oiFIiwiJmVtcHR5c2V0OyI6IuKIhSIsIiZlbXB0eXY7Ijoi4oiFIiwiJmVtc3AxMzsiOiLigIQiLCImZW1zcDE0OyI6IuKAhSIsIiZlbXNwOyI6IuKAgyIsIiZlbmc7IjoixYsiLCImZW5zcDsiOiLigIIiLCImZW9nb247IjoixJkiLCImZW9wZjsiOiLwnZWWIiwiJmVwYXI7Ijoi4ouVIiwiJmVwYXJzbDsiOiLip6MiLCImZXBsdXM7Ijoi4qmxIiwiJmVwc2k7IjoizrUiLCImZXBzaWxvbjsiOiLOtSIsIiZlcHNpdjsiOiLPtSIsIiZlcWNpcmM7Ijoi4omWIiwiJmVxY29sb247Ijoi4omVIiwiJmVxc2ltOyI6IuKJgiIsIiZlcXNsYW50Z3RyOyI6IuKqliIsIiZlcXNsYW50bGVzczsiOiLiqpUiLCImZXF1YWxzOyI6Ij0iLCImZXF1ZXN0OyI6IuKJnyIsIiZlcXVpdjsiOiLiiaEiLCImZXF1aXZERDsiOiLiqbgiLCImZXF2cGFyc2w7Ijoi4qelIiwiJmVyRG90OyI6IuKJkyIsIiZlcmFycjsiOiLipbEiLCImZXNjcjsiOiLihK8iLCImZXNkb3Q7Ijoi4omQIiwiJmVzaW07Ijoi4omCIiwiJmV0YTsiOiLOtyIsIiZldGgiOiLDsCIsIiZldGg7Ijoiw7AiLCImZXVtbCI6IsOrIiwiJmV1bWw7Ijoiw6siLCImZXVybzsiOiLigqwiLCImZXhjbDsiOiIhIiwiJmV4aXN0OyI6IuKIgyIsIiZleHBlY3RhdGlvbjsiOiLihLAiLCImZXhwb25lbnRpYWxlOyI6IuKFhyIsIiZmYWxsaW5nZG90c2VxOyI6IuKJkiIsIiZmY3k7Ijoi0YQiLCImZmVtYWxlOyI6IuKZgCIsIiZmZmlsaWc7Ijoi76yDIiwiJmZmbGlnOyI6Iu+sgCIsIiZmZmxsaWc7Ijoi76yEIiwiJmZmcjsiOiLwnZSjIiwiJmZpbGlnOyI6Iu+sgSIsIiZmamxpZzsiOiJmaiIsIiZmbGF0OyI6IuKZrSIsIiZmbGxpZzsiOiLvrIIiLCImZmx0bnM7Ijoi4paxIiwiJmZub2Y7IjoixpIiLCImZm9wZjsiOiLwnZWXIiwiJmZvcmFsbDsiOiLiiIAiLCImZm9yazsiOiLii5QiLCImZm9ya3Y7Ijoi4quZIiwiJmZwYXJ0aW50OyI6IuKojSIsIiZmcmFjMTIiOiLCvSIsIiZmcmFjMTI7Ijoiwr0iLCImZnJhYzEzOyI6IuKFkyIsIiZmcmFjMTQiOiLCvCIsIiZmcmFjMTQ7IjoiwrwiLCImZnJhYzE1OyI6IuKFlSIsIiZmcmFjMTY7Ijoi4oWZIiwiJmZyYWMxODsiOiLihZsiLCImZnJhYzIzOyI6IuKFlCIsIiZmcmFjMjU7Ijoi4oWWIiwiJmZyYWMzNCI6IsK+IiwiJmZyYWMzNDsiOiLCviIsIiZmcmFjMzU7Ijoi4oWXIiwiJmZyYWMzODsiOiLihZwiLCImZnJhYzQ1OyI6IuKFmCIsIiZmcmFjNTY7Ijoi4oWaIiwiJmZyYWM1ODsiOiLihZ0iLCImZnJhYzc4OyI6IuKFniIsIiZmcmFzbDsiOiLigYQiLCImZnJvd247Ijoi4oyiIiwiJmZzY3I7Ijoi8J2SuyIsIiZnRTsiOiLiiaciLCImZ0VsOyI6IuKqjCIsIiZnYWN1dGU7Ijoix7UiLCImZ2FtbWE7IjoizrMiLCImZ2FtbWFkOyI6Is+dIiwiJmdhcDsiOiLiqoYiLCImZ2JyZXZlOyI6IsSfIiwiJmdjaXJjOyI6IsSdIiwiJmdjeTsiOiLQsyIsIiZnZG90OyI6IsShIiwiJmdlOyI6IuKJpSIsIiZnZWw7Ijoi4oubIiwiJmdlcTsiOiLiiaUiLCImZ2VxcTsiOiLiiaciLCImZ2Vxc2xhbnQ7Ijoi4qm+IiwiJmdlczsiOiLiqb4iLCImZ2VzY2M7Ijoi4qqpIiwiJmdlc2RvdDsiOiLiqoAiLCImZ2VzZG90bzsiOiLiqoIiLCImZ2VzZG90b2w7Ijoi4qqEIiwiJmdlc2w7Ijoi4oub77iAIiwiJmdlc2xlczsiOiLiqpQiLCImZ2ZyOyI6IvCdlKQiLCImZ2c7Ijoi4omrIiwiJmdnZzsiOiLii5kiLCImZ2ltZWw7Ijoi4oS3IiwiJmdqY3k7Ijoi0ZMiLCImZ2w7Ijoi4om3IiwiJmdsRTsiOiLiqpIiLCImZ2xhOyI6IuKqpSIsIiZnbGo7Ijoi4qqkIiwiJmduRTsiOiLiiakiLCImZ25hcDsiOiLiqooiLCImZ25hcHByb3g7Ijoi4qqKIiwiJmduZTsiOiLiqogiLCImZ25lcTsiOiLiqogiLCImZ25lcXE7Ijoi4ompIiwiJmduc2ltOyI6IuKLpyIsIiZnb3BmOyI6IvCdlZgiLCImZ3JhdmU7IjoiYCIsIiZnc2NyOyI6IuKEiiIsIiZnc2ltOyI6IuKJsyIsIiZnc2ltZTsiOiLiqo4iLCImZ3NpbWw7Ijoi4qqQIiwiJmd0IjoiPiIsIiZndDsiOiI+IiwiJmd0Y2M7Ijoi4qqnIiwiJmd0Y2lyOyI6IuKpuiIsIiZndGRvdDsiOiLii5ciLCImZ3RsUGFyOyI6IuKmlSIsIiZndHF1ZXN0OyI6IuKpvCIsIiZndHJhcHByb3g7Ijoi4qqGIiwiJmd0cmFycjsiOiLipbgiLCImZ3RyZG90OyI6IuKLlyIsIiZndHJlcWxlc3M7Ijoi4oubIiwiJmd0cmVxcWxlc3M7Ijoi4qqMIiwiJmd0cmxlc3M7Ijoi4om3IiwiJmd0cnNpbTsiOiLiibMiLCImZ3ZlcnRuZXFxOyI6IuKJqe+4gCIsIiZndm5FOyI6IuKJqe+4gCIsIiZoQXJyOyI6IuKHlCIsIiZoYWlyc3A7Ijoi4oCKIiwiJmhhbGY7Ijoiwr0iLCImaGFtaWx0OyI6IuKEiyIsIiZoYXJkY3k7Ijoi0YoiLCImaGFycjsiOiLihpQiLCImaGFycmNpcjsiOiLipYgiLCImaGFycnc7Ijoi4oatIiwiJmhiYXI7Ijoi4oSPIiwiJmhjaXJjOyI6IsSlIiwiJmhlYXJ0czsiOiLimaUiLCImaGVhcnRzdWl0OyI6IuKZpSIsIiZoZWxsaXA7Ijoi4oCmIiwiJmhlcmNvbjsiOiLiirkiLCImaGZyOyI6IvCdlKUiLCImaGtzZWFyb3c7Ijoi4qSlIiwiJmhrc3dhcm93OyI6IuKkpiIsIiZob2FycjsiOiLih78iLCImaG9tdGh0OyI6IuKIuyIsIiZob29rbGVmdGFycm93OyI6IuKGqSIsIiZob29rcmlnaHRhcnJvdzsiOiLihqoiLCImaG9wZjsiOiLwnZWZIiwiJmhvcmJhcjsiOiLigJUiLCImaHNjcjsiOiLwnZK9IiwiJmhzbGFzaDsiOiLihI8iLCImaHN0cm9rOyI6IsSnIiwiJmh5YnVsbDsiOiLigYMiLCImaHlwaGVuOyI6IuKAkCIsIiZpYWN1dGUiOiLDrSIsIiZpYWN1dGU7Ijoiw60iLCImaWM7Ijoi4oGjIiwiJmljaXJjIjoiw64iLCImaWNpcmM7Ijoiw64iLCImaWN5OyI6ItC4IiwiJmllY3k7Ijoi0LUiLCImaWV4Y2wiOiLCoSIsIiZpZXhjbDsiOiLCoSIsIiZpZmY7Ijoi4oeUIiwiJmlmcjsiOiLwnZSmIiwiJmlncmF2ZSI6IsOsIiwiJmlncmF2ZTsiOiLDrCIsIiZpaTsiOiLihYgiLCImaWlpaW50OyI6IuKojCIsIiZpaWludDsiOiLiiK0iLCImaWluZmluOyI6IuKnnCIsIiZpaW90YTsiOiLihKkiLCImaWpsaWc7IjoixLMiLCImaW1hY3I7IjoixKsiLCImaW1hZ2U7Ijoi4oSRIiwiJmltYWdsaW5lOyI6IuKEkCIsIiZpbWFncGFydDsiOiLihJEiLCImaW1hdGg7IjoixLEiLCImaW1vZjsiOiLiirciLCImaW1wZWQ7IjoixrUiLCImaW47Ijoi4oiIIiwiJmluY2FyZTsiOiLihIUiLCImaW5maW47Ijoi4oieIiwiJmluZmludGllOyI6IuKnnSIsIiZpbm9kb3Q7IjoixLEiLCImaW50OyI6IuKIqyIsIiZpbnRjYWw7Ijoi4oq6IiwiJmludGVnZXJzOyI6IuKEpCIsIiZpbnRlcmNhbDsiOiLiiroiLCImaW50bGFyaGs7Ijoi4qiXIiwiJmludHByb2Q7Ijoi4qi8IiwiJmlvY3k7Ijoi0ZEiLCImaW9nb247IjoixK8iLCImaW9wZjsiOiLwnZWaIiwiJmlvdGE7IjoizrkiLCImaXByb2Q7Ijoi4qi8IiwiJmlxdWVzdCI6IsK/IiwiJmlxdWVzdDsiOiLCvyIsIiZpc2NyOyI6IvCdkr4iLCImaXNpbjsiOiLiiIgiLCImaXNpbkU7Ijoi4ou5IiwiJmlzaW5kb3Q7Ijoi4ou1IiwiJmlzaW5zOyI6IuKLtCIsIiZpc2luc3Y7Ijoi4ouzIiwiJmlzaW52OyI6IuKIiCIsIiZpdDsiOiLigaIiLCImaXRpbGRlOyI6IsSpIiwiJml1a2N5OyI6ItGWIiwiJml1bWwiOiLDryIsIiZpdW1sOyI6IsOvIiwiJmpjaXJjOyI6IsS1IiwiJmpjeTsiOiLQuSIsIiZqZnI7Ijoi8J2UpyIsIiZqbWF0aDsiOiLItyIsIiZqb3BmOyI6IvCdlZsiLCImanNjcjsiOiLwnZK/IiwiJmpzZXJjeTsiOiLRmCIsIiZqdWtjeTsiOiLRlCIsIiZrYXBwYTsiOiLOuiIsIiZrYXBwYXY7Ijoiz7AiLCIma2NlZGlsOyI6IsS3IiwiJmtjeTsiOiLQuiIsIiZrZnI7Ijoi8J2UqCIsIiZrZ3JlZW47IjoixLgiLCIma2hjeTsiOiLRhSIsIiZramN5OyI6ItGcIiwiJmtvcGY7Ijoi8J2VnCIsIiZrc2NyOyI6IvCdk4AiLCImbEFhcnI7Ijoi4oeaIiwiJmxBcnI7Ijoi4oeQIiwiJmxBdGFpbDsiOiLipJsiLCImbEJhcnI7Ijoi4qSOIiwiJmxFOyI6IuKJpiIsIiZsRWc7Ijoi4qqLIiwiJmxIYXI7Ijoi4qWiIiwiJmxhY3V0ZTsiOiLEuiIsIiZsYWVtcHR5djsiOiLiprQiLCImbGFncmFuOyI6IuKEkiIsIiZsYW1iZGE7IjoizrsiLCImbGFuZzsiOiLin6giLCImbGFuZ2Q7Ijoi4qaRIiwiJmxhbmdsZTsiOiLin6giLCImbGFwOyI6IuKqhSIsIiZsYXF1byI6IsKrIiwiJmxhcXVvOyI6IsKrIiwiJmxhcnI7Ijoi4oaQIiwiJmxhcnJiOyI6IuKHpCIsIiZsYXJyYmZzOyI6IuKknyIsIiZsYXJyZnM7Ijoi4qSdIiwiJmxhcnJoazsiOiLihqkiLCImbGFycmxwOyI6IuKGqyIsIiZsYXJycGw7Ijoi4qS5IiwiJmxhcnJzaW07Ijoi4qWzIiwiJmxhcnJ0bDsiOiLihqIiLCImbGF0OyI6IuKqqyIsIiZsYXRhaWw7Ijoi4qSZIiwiJmxhdGU7Ijoi4qqtIiwiJmxhdGVzOyI6IuKqre+4gCIsIiZsYmFycjsiOiLipIwiLCImbGJicms7Ijoi4p2yIiwiJmxicmFjZTsiOiJ7IiwiJmxicmFjazsiOiJbIiwiJmxicmtlOyI6IuKmiyIsIiZsYnJrc2xkOyI6IuKmjyIsIiZsYnJrc2x1OyI6IuKmjSIsIiZsY2Fyb247IjoixL4iLCImbGNlZGlsOyI6IsS8IiwiJmxjZWlsOyI6IuKMiCIsIiZsY3ViOyI6InsiLCImbGN5OyI6ItC7IiwiJmxkY2E7Ijoi4qS2IiwiJmxkcXVvOyI6IuKAnCIsIiZsZHF1b3I7Ijoi4oCeIiwiJmxkcmRoYXI7Ijoi4qWnIiwiJmxkcnVzaGFyOyI6IuKliyIsIiZsZHNoOyI6IuKGsiIsIiZsZTsiOiLiiaQiLCImbGVmdGFycm93OyI6IuKGkCIsIiZsZWZ0YXJyb3d0YWlsOyI6IuKGoiIsIiZsZWZ0aGFycG9vbmRvd247Ijoi4oa9IiwiJmxlZnRoYXJwb29udXA7Ijoi4oa8IiwiJmxlZnRsZWZ0YXJyb3dzOyI6IuKHhyIsIiZsZWZ0cmlnaHRhcnJvdzsiOiLihpQiLCImbGVmdHJpZ2h0YXJyb3dzOyI6IuKHhiIsIiZsZWZ0cmlnaHRoYXJwb29uczsiOiLih4siLCImbGVmdHJpZ2h0c3F1aWdhcnJvdzsiOiLihq0iLCImbGVmdHRocmVldGltZXM7Ijoi4ouLIiwiJmxlZzsiOiLii5oiLCImbGVxOyI6IuKJpCIsIiZsZXFxOyI6IuKJpiIsIiZsZXFzbGFudDsiOiLiqb0iLCImbGVzOyI6IuKpvSIsIiZsZXNjYzsiOiLiqqgiLCImbGVzZG90OyI6IuKpvyIsIiZsZXNkb3RvOyI6IuKqgSIsIiZsZXNkb3RvcjsiOiLiqoMiLCImbGVzZzsiOiLii5rvuIAiLCImbGVzZ2VzOyI6IuKqkyIsIiZsZXNzYXBwcm94OyI6IuKqhSIsIiZsZXNzZG90OyI6IuKLliIsIiZsZXNzZXFndHI7Ijoi4ouaIiwiJmxlc3NlcXFndHI7Ijoi4qqLIiwiJmxlc3NndHI7Ijoi4om2IiwiJmxlc3NzaW07Ijoi4omyIiwiJmxmaXNodDsiOiLipbwiLCImbGZsb29yOyI6IuKMiiIsIiZsZnI7Ijoi8J2UqSIsIiZsZzsiOiLiibYiLCImbGdFOyI6IuKqkSIsIiZsaGFyZDsiOiLihr0iLCImbGhhcnU7Ijoi4oa8IiwiJmxoYXJ1bDsiOiLipaoiLCImbGhibGs7Ijoi4paEIiwiJmxqY3k7Ijoi0ZkiLCImbGw7Ijoi4omqIiwiJmxsYXJyOyI6IuKHhyIsIiZsbGNvcm5lcjsiOiLijJ4iLCImbGxoYXJkOyI6IuKlqyIsIiZsbHRyaTsiOiLil7oiLCImbG1pZG90OyI6IsWAIiwiJmxtb3VzdDsiOiLijrAiLCImbG1vdXN0YWNoZTsiOiLijrAiLCImbG5FOyI6IuKJqCIsIiZsbmFwOyI6IuKqiSIsIiZsbmFwcHJveDsiOiLiqokiLCImbG5lOyI6IuKqhyIsIiZsbmVxOyI6IuKqhyIsIiZsbmVxcTsiOiLiiagiLCImbG5zaW07Ijoi4oumIiwiJmxvYW5nOyI6IuKfrCIsIiZsb2FycjsiOiLih70iLCImbG9icms7Ijoi4p+mIiwiJmxvbmdsZWZ0YXJyb3c7Ijoi4p+1IiwiJmxvbmdsZWZ0cmlnaHRhcnJvdzsiOiLin7ciLCImbG9uZ21hcHN0bzsiOiLin7wiLCImbG9uZ3JpZ2h0YXJyb3c7Ijoi4p+2IiwiJmxvb3BhcnJvd2xlZnQ7Ijoi4oarIiwiJmxvb3BhcnJvd3JpZ2h0OyI6IuKGrCIsIiZsb3BhcjsiOiLipoUiLCImbG9wZjsiOiLwnZWdIiwiJmxvcGx1czsiOiLiqK0iLCImbG90aW1lczsiOiLiqLQiLCImbG93YXN0OyI6IuKIlyIsIiZsb3diYXI7IjoiXyIsIiZsb3o7Ijoi4peKIiwiJmxvemVuZ2U7Ijoi4peKIiwiJmxvemY7Ijoi4qerIiwiJmxwYXI7IjoiKCIsIiZscGFybHQ7Ijoi4qaTIiwiJmxyYXJyOyI6IuKHhiIsIiZscmNvcm5lcjsiOiLijJ8iLCImbHJoYXI7Ijoi4oeLIiwiJmxyaGFyZDsiOiLipa0iLCImbHJtOyI6IuKAjiIsIiZscnRyaTsiOiLiir8iLCImbHNhcXVvOyI6IuKAuSIsIiZsc2NyOyI6IvCdk4EiLCImbHNoOyI6IuKGsCIsIiZsc2ltOyI6IuKJsiIsIiZsc2ltZTsiOiLiqo0iLCImbHNpbWc7Ijoi4qqPIiwiJmxzcWI7IjoiWyIsIiZsc3F1bzsiOiLigJgiLCImbHNxdW9yOyI6IuKAmiIsIiZsc3Ryb2s7IjoixYIiLCImbHQiOiI8IiwiJmx0OyI6IjwiLCImbHRjYzsiOiLiqqYiLCImbHRjaXI7Ijoi4qm5IiwiJmx0ZG90OyI6IuKLliIsIiZsdGhyZWU7Ijoi4ouLIiwiJmx0aW1lczsiOiLii4kiLCImbHRsYXJyOyI6IuKltiIsIiZsdHF1ZXN0OyI6IuKpuyIsIiZsdHJQYXI7Ijoi4qaWIiwiJmx0cmk7Ijoi4peDIiwiJmx0cmllOyI6IuKKtCIsIiZsdHJpZjsiOiLil4IiLCImbHVyZHNoYXI7Ijoi4qWKIiwiJmx1cnVoYXI7Ijoi4qWmIiwiJmx2ZXJ0bmVxcTsiOiLiiajvuIAiLCImbHZuRTsiOiLiiajvuIAiLCImbUREb3Q7Ijoi4oi6IiwiJm1hY3IiOiLCryIsIiZtYWNyOyI6IsKvIiwiJm1hbGU7Ijoi4pmCIiwiJm1hbHQ7Ijoi4pygIiwiJm1hbHRlc2U7Ijoi4pygIiwiJm1hcDsiOiLihqYiLCImbWFwc3RvOyI6IuKGpiIsIiZtYXBzdG9kb3duOyI6IuKGpyIsIiZtYXBzdG9sZWZ0OyI6IuKGpCIsIiZtYXBzdG91cDsiOiLihqUiLCImbWFya2VyOyI6IuKWriIsIiZtY29tbWE7Ijoi4qipIiwiJm1jeTsiOiLQvCIsIiZtZGFzaDsiOiLigJQiLCImbWVhc3VyZWRhbmdsZTsiOiLiiKEiLCImbWZyOyI6IvCdlKoiLCImbWhvOyI6IuKEpyIsIiZtaWNybyI6IsK1IiwiJm1pY3JvOyI6IsK1IiwiJm1pZDsiOiLiiKMiLCImbWlkYXN0OyI6IioiLCImbWlkY2lyOyI6IuKrsCIsIiZtaWRkb3QiOiLCtyIsIiZtaWRkb3Q7IjoiwrciLCImbWludXM7Ijoi4oiSIiwiJm1pbnVzYjsiOiLiip8iLCImbWludXNkOyI6IuKIuCIsIiZtaW51c2R1OyI6IuKoqiIsIiZtbGNwOyI6IuKrmyIsIiZtbGRyOyI6IuKApiIsIiZtbnBsdXM7Ijoi4oiTIiwiJm1vZGVsczsiOiLiiqciLCImbW9wZjsiOiLwnZWeIiwiJm1wOyI6IuKIkyIsIiZtc2NyOyI6IvCdk4IiLCImbXN0cG9zOyI6IuKIviIsIiZtdTsiOiLOvCIsIiZtdWx0aW1hcDsiOiLiirgiLCImbXVtYXA7Ijoi4oq4IiwiJm5HZzsiOiLii5nMuCIsIiZuR3Q7Ijoi4omr4oOSIiwiJm5HdHY7Ijoi4omrzLgiLCImbkxlZnRhcnJvdzsiOiLih40iLCImbkxlZnRyaWdodGFycm93OyI6IuKHjiIsIiZuTGw7Ijoi4ouYzLgiLCImbkx0OyI6IuKJquKDkiIsIiZuTHR2OyI6IuKJqsy4IiwiJm5SaWdodGFycm93OyI6IuKHjyIsIiZuVkRhc2g7Ijoi4oqvIiwiJm5WZGFzaDsiOiLiiq4iLCImbmFibGE7Ijoi4oiHIiwiJm5hY3V0ZTsiOiLFhCIsIiZuYW5nOyI6IuKIoOKDkiIsIiZuYXA7Ijoi4omJIiwiJm5hcEU7Ijoi4qmwzLgiLCImbmFwaWQ7Ijoi4omLzLgiLCImbmFwb3M7IjoixYkiLCImbmFwcHJveDsiOiLiiYkiLCImbmF0dXI7Ijoi4pmuIiwiJm5hdHVyYWw7Ijoi4pmuIiwiJm5hdHVyYWxzOyI6IuKElSIsIiZuYnNwIjoiwqAiLCImbmJzcDsiOiLCoCIsIiZuYnVtcDsiOiLiiY7MuCIsIiZuYnVtcGU7Ijoi4omPzLgiLCImbmNhcDsiOiLiqYMiLCImbmNhcm9uOyI6IsWIIiwiJm5jZWRpbDsiOiLFhiIsIiZuY29uZzsiOiLiiYciLCImbmNvbmdkb3Q7Ijoi4qmtzLgiLCImbmN1cDsiOiLiqYIiLCImbmN5OyI6ItC9IiwiJm5kYXNoOyI6IuKAkyIsIiZuZTsiOiLiiaAiLCImbmVBcnI7Ijoi4oeXIiwiJm5lYXJoazsiOiLipKQiLCImbmVhcnI7Ijoi4oaXIiwiJm5lYXJyb3c7Ijoi4oaXIiwiJm5lZG90OyI6IuKJkMy4IiwiJm5lcXVpdjsiOiLiiaIiLCImbmVzZWFyOyI6IuKkqCIsIiZuZXNpbTsiOiLiiYLMuCIsIiZuZXhpc3Q7Ijoi4oiEIiwiJm5leGlzdHM7Ijoi4oiEIiwiJm5mcjsiOiLwnZSrIiwiJm5nRTsiOiLiiafMuCIsIiZuZ2U7Ijoi4omxIiwiJm5nZXE7Ijoi4omxIiwiJm5nZXFxOyI6IuKJp8y4IiwiJm5nZXFzbGFudDsiOiLiqb7MuCIsIiZuZ2VzOyI6IuKpvsy4IiwiJm5nc2ltOyI6IuKJtSIsIiZuZ3Q7Ijoi4omvIiwiJm5ndHI7Ijoi4omvIiwiJm5oQXJyOyI6IuKHjiIsIiZuaGFycjsiOiLihq4iLCImbmhwYXI7Ijoi4quyIiwiJm5pOyI6IuKIiyIsIiZuaXM7Ijoi4ou8IiwiJm5pc2Q7Ijoi4ou6IiwiJm5pdjsiOiLiiIsiLCImbmpjeTsiOiLRmiIsIiZubEFycjsiOiLih40iLCImbmxFOyI6IuKJpsy4IiwiJm5sYXJyOyI6IuKGmiIsIiZubGRyOyI6IuKApSIsIiZubGU7Ijoi4omwIiwiJm5sZWZ0YXJyb3c7Ijoi4oaaIiwiJm5sZWZ0cmlnaHRhcnJvdzsiOiLihq4iLCImbmxlcTsiOiLiibAiLCImbmxlcXE7Ijoi4ommzLgiLCImbmxlcXNsYW50OyI6IuKpvcy4IiwiJm5sZXM7Ijoi4qm9zLgiLCImbmxlc3M7Ijoi4omuIiwiJm5sc2ltOyI6IuKJtCIsIiZubHQ7Ijoi4omuIiwiJm5sdHJpOyI6IuKLqiIsIiZubHRyaWU7Ijoi4ousIiwiJm5taWQ7Ijoi4oikIiwiJm5vcGY7Ijoi8J2VnyIsIiZub3QiOiLCrCIsIiZub3Q7IjoiwqwiLCImbm90aW47Ijoi4oiJIiwiJm5vdGluRTsiOiLii7nMuCIsIiZub3RpbmRvdDsiOiLii7XMuCIsIiZub3RpbnZhOyI6IuKIiSIsIiZub3RpbnZiOyI6IuKLtyIsIiZub3RpbnZjOyI6IuKLtiIsIiZub3RuaTsiOiLiiIwiLCImbm90bml2YTsiOiLiiIwiLCImbm90bml2YjsiOiLii74iLCImbm90bml2YzsiOiLii70iLCImbnBhcjsiOiLiiKYiLCImbnBhcmFsbGVsOyI6IuKIpiIsIiZucGFyc2w7Ijoi4qu94oOlIiwiJm5wYXJ0OyI6IuKIgsy4IiwiJm5wb2xpbnQ7Ijoi4qiUIiwiJm5wcjsiOiLiioAiLCImbnByY3VlOyI6IuKLoCIsIiZucHJlOyI6IuKqr8y4IiwiJm5wcmVjOyI6IuKKgCIsIiZucHJlY2VxOyI6IuKqr8y4IiwiJm5yQXJyOyI6IuKHjyIsIiZucmFycjsiOiLihpsiLCImbnJhcnJjOyI6IuKks8y4IiwiJm5yYXJydzsiOiLihp3MuCIsIiZucmlnaHRhcnJvdzsiOiLihpsiLCImbnJ0cmk7Ijoi4ourIiwiJm5ydHJpZTsiOiLii60iLCImbnNjOyI6IuKKgSIsIiZuc2NjdWU7Ijoi4ouhIiwiJm5zY2U7Ijoi4qqwzLgiLCImbnNjcjsiOiLwnZODIiwiJm5zaG9ydG1pZDsiOiLiiKQiLCImbnNob3J0cGFyYWxsZWw7Ijoi4oimIiwiJm5zaW07Ijoi4omBIiwiJm5zaW1lOyI6IuKJhCIsIiZuc2ltZXE7Ijoi4omEIiwiJm5zbWlkOyI6IuKIpCIsIiZuc3BhcjsiOiLiiKYiLCImbnNxc3ViZTsiOiLii6IiLCImbnNxc3VwZTsiOiLii6MiLCImbnN1YjsiOiLiioQiLCImbnN1YkU7Ijoi4quFzLgiLCImbnN1YmU7Ijoi4oqIIiwiJm5zdWJzZXQ7Ijoi4oqC4oOSIiwiJm5zdWJzZXRlcTsiOiLiiogiLCImbnN1YnNldGVxcTsiOiLiq4XMuCIsIiZuc3VjYzsiOiLiioEiLCImbnN1Y2NlcTsiOiLiqrDMuCIsIiZuc3VwOyI6IuKKhSIsIiZuc3VwRTsiOiLiq4bMuCIsIiZuc3VwZTsiOiLiiokiLCImbnN1cHNldDsiOiLiioPig5IiLCImbnN1cHNldGVxOyI6IuKKiSIsIiZuc3Vwc2V0ZXFxOyI6IuKrhsy4IiwiJm50Z2w7Ijoi4om5IiwiJm50aWxkZSI6IsOxIiwiJm50aWxkZTsiOiLDsSIsIiZudGxnOyI6IuKJuCIsIiZudHJpYW5nbGVsZWZ0OyI6IuKLqiIsIiZudHJpYW5nbGVsZWZ0ZXE7Ijoi4ousIiwiJm50cmlhbmdsZXJpZ2h0OyI6IuKLqyIsIiZudHJpYW5nbGVyaWdodGVxOyI6IuKLrSIsIiZudTsiOiLOvSIsIiZudW07IjoiIyIsIiZudW1lcm87Ijoi4oSWIiwiJm51bXNwOyI6IuKAhyIsIiZudkRhc2g7Ijoi4oqtIiwiJm52SGFycjsiOiLipIQiLCImbnZhcDsiOiLiiY3ig5IiLCImbnZkYXNoOyI6IuKKrCIsIiZudmdlOyI6IuKJpeKDkiIsIiZudmd0OyI6Ij7ig5IiLCImbnZpbmZpbjsiOiLip54iLCImbnZsQXJyOyI6IuKkgiIsIiZudmxlOyI6IuKJpOKDkiIsIiZudmx0OyI6Ijzig5IiLCImbnZsdHJpZTsiOiLiirTig5IiLCImbnZyQXJyOyI6IuKkgyIsIiZudnJ0cmllOyI6IuKKteKDkiIsIiZudnNpbTsiOiLiiLzig5IiLCImbndBcnI7Ijoi4oeWIiwiJm53YXJoazsiOiLipKMiLCImbndhcnI7Ijoi4oaWIiwiJm53YXJyb3c7Ijoi4oaWIiwiJm53bmVhcjsiOiLipKciLCImb1M7Ijoi4pOIIiwiJm9hY3V0ZSI6IsOzIiwiJm9hY3V0ZTsiOiLDsyIsIiZvYXN0OyI6IuKKmyIsIiZvY2lyOyI6IuKKmiIsIiZvY2lyYyI6IsO0IiwiJm9jaXJjOyI6IsO0IiwiJm9jeTsiOiLQviIsIiZvZGFzaDsiOiLiip0iLCImb2RibGFjOyI6IsWRIiwiJm9kaXY7Ijoi4qi4IiwiJm9kb3Q7Ijoi4oqZIiwiJm9kc29sZDsiOiLiprwiLCImb2VsaWc7IjoixZMiLCImb2ZjaXI7Ijoi4qa/IiwiJm9mcjsiOiLwnZSsIiwiJm9nb247Ijoiy5siLCImb2dyYXZlIjoiw7IiLCImb2dyYXZlOyI6IsOyIiwiJm9ndDsiOiLip4EiLCImb2hiYXI7Ijoi4qa1IiwiJm9obTsiOiLOqSIsIiZvaW50OyI6IuKIriIsIiZvbGFycjsiOiLihroiLCImb2xjaXI7Ijoi4qa+IiwiJm9sY3Jvc3M7Ijoi4qa7IiwiJm9saW5lOyI6IuKAviIsIiZvbHQ7Ijoi4qeAIiwiJm9tYWNyOyI6IsWNIiwiJm9tZWdhOyI6Is+JIiwiJm9taWNyb247Ijoizr8iLCImb21pZDsiOiLiprYiLCImb21pbnVzOyI6IuKKliIsIiZvb3BmOyI6IvCdlaAiLCImb3BhcjsiOiLiprciLCImb3BlcnA7Ijoi4qa5IiwiJm9wbHVzOyI6IuKKlSIsIiZvcjsiOiLiiKgiLCImb3JhcnI7Ijoi4oa7IiwiJm9yZDsiOiLiqZ0iLCImb3JkZXI7Ijoi4oS0IiwiJm9yZGVyb2Y7Ijoi4oS0IiwiJm9yZGYiOiLCqiIsIiZvcmRmOyI6IsKqIiwiJm9yZG0iOiLCuiIsIiZvcmRtOyI6IsK6IiwiJm9yaWdvZjsiOiLiirYiLCImb3JvcjsiOiLiqZYiLCImb3JzbG9wZTsiOiLiqZciLCImb3J2OyI6IuKpmyIsIiZvc2NyOyI6IuKEtCIsIiZvc2xhc2giOiLDuCIsIiZvc2xhc2g7Ijoiw7giLCImb3NvbDsiOiLiipgiLCImb3RpbGRlIjoiw7UiLCImb3RpbGRlOyI6IsO1IiwiJm90aW1lczsiOiLiipciLCImb3RpbWVzYXM7Ijoi4qi2IiwiJm91bWwiOiLDtiIsIiZvdW1sOyI6IsO2IiwiJm92YmFyOyI6IuKMvSIsIiZwYXI7Ijoi4oilIiwiJnBhcmEiOiLCtiIsIiZwYXJhOyI6IsK2IiwiJnBhcmFsbGVsOyI6IuKIpSIsIiZwYXJzaW07Ijoi4quzIiwiJnBhcnNsOyI6IuKrvSIsIiZwYXJ0OyI6IuKIgiIsIiZwY3k7Ijoi0L8iLCImcGVyY250OyI6IiUiLCImcGVyaW9kOyI6Ii4iLCImcGVybWlsOyI6IuKAsCIsIiZwZXJwOyI6IuKKpSIsIiZwZXJ0ZW5rOyI6IuKAsSIsIiZwZnI7Ijoi8J2UrSIsIiZwaGk7Ijoiz4YiLCImcGhpdjsiOiLPlSIsIiZwaG1tYXQ7Ijoi4oSzIiwiJnBob25lOyI6IuKYjiIsIiZwaTsiOiLPgCIsIiZwaXRjaGZvcms7Ijoi4ouUIiwiJnBpdjsiOiLPliIsIiZwbGFuY2s7Ijoi4oSPIiwiJnBsYW5ja2g7Ijoi4oSOIiwiJnBsYW5rdjsiOiLihI8iLCImcGx1czsiOiIrIiwiJnBsdXNhY2lyOyI6IuKooyIsIiZwbHVzYjsiOiLiip4iLCImcGx1c2NpcjsiOiLiqKIiLCImcGx1c2RvOyI6IuKIlCIsIiZwbHVzZHU7Ijoi4qilIiwiJnBsdXNlOyI6IuKpsiIsIiZwbHVzbW4iOiLCsSIsIiZwbHVzbW47IjoiwrEiLCImcGx1c3NpbTsiOiLiqKYiLCImcGx1c3R3bzsiOiLiqKciLCImcG07IjoiwrEiLCImcG9pbnRpbnQ7Ijoi4qiVIiwiJnBvcGY7Ijoi8J2VoSIsIiZwb3VuZCI6IsKjIiwiJnBvdW5kOyI6IsKjIiwiJnByOyI6IuKJuiIsIiZwckU7Ijoi4qqzIiwiJnByYXA7Ijoi4qq3IiwiJnByY3VlOyI6IuKJvCIsIiZwcmU7Ijoi4qqvIiwiJnByZWM7Ijoi4om6IiwiJnByZWNhcHByb3g7Ijoi4qq3IiwiJnByZWNjdXJseWVxOyI6IuKJvCIsIiZwcmVjZXE7Ijoi4qqvIiwiJnByZWNuYXBwcm94OyI6IuKquSIsIiZwcmVjbmVxcTsiOiLiqrUiLCImcHJlY25zaW07Ijoi4ouoIiwiJnByZWNzaW07Ijoi4om+IiwiJnByaW1lOyI6IuKAsiIsIiZwcmltZXM7Ijoi4oSZIiwiJnBybkU7Ijoi4qq1IiwiJnBybmFwOyI6IuKquSIsIiZwcm5zaW07Ijoi4ouoIiwiJnByb2Q7Ijoi4oiPIiwiJnByb2ZhbGFyOyI6IuKMriIsIiZwcm9mbGluZTsiOiLijJIiLCImcHJvZnN1cmY7Ijoi4oyTIiwiJnByb3A7Ijoi4oidIiwiJnByb3B0bzsiOiLiiJ0iLCImcHJzaW07Ijoi4om+IiwiJnBydXJlbDsiOiLiirAiLCImcHNjcjsiOiLwnZOFIiwiJnBzaTsiOiLPiCIsIiZwdW5jc3A7Ijoi4oCIIiwiJnFmcjsiOiLwnZSuIiwiJnFpbnQ7Ijoi4qiMIiwiJnFvcGY7Ijoi8J2VoiIsIiZxcHJpbWU7Ijoi4oGXIiwiJnFzY3I7Ijoi8J2ThiIsIiZxdWF0ZXJuaW9uczsiOiLihI0iLCImcXVhdGludDsiOiLiqJYiLCImcXVlc3Q7IjoiPyIsIiZxdWVzdGVxOyI6IuKJnyIsIiZxdW90IjonIicsIiZxdW90OyI6JyInLCImckFhcnI7Ijoi4oebIiwiJnJBcnI7Ijoi4oeSIiwiJnJBdGFpbDsiOiLipJwiLCImckJhcnI7Ijoi4qSPIiwiJnJIYXI7Ijoi4qWkIiwiJnJhY2U7Ijoi4oi9zLEiLCImcmFjdXRlOyI6IsWVIiwiJnJhZGljOyI6IuKImiIsIiZyYWVtcHR5djsiOiLiprMiLCImcmFuZzsiOiLin6kiLCImcmFuZ2Q7Ijoi4qaSIiwiJnJhbmdlOyI6IuKmpSIsIiZyYW5nbGU7Ijoi4p+pIiwiJnJhcXVvIjoiwrsiLCImcmFxdW87IjoiwrsiLCImcmFycjsiOiLihpIiLCImcmFycmFwOyI6IuKltSIsIiZyYXJyYjsiOiLih6UiLCImcmFycmJmczsiOiLipKAiLCImcmFycmM7Ijoi4qSzIiwiJnJhcnJmczsiOiLipJ4iLCImcmFycmhrOyI6IuKGqiIsIiZyYXJybHA7Ijoi4oasIiwiJnJhcnJwbDsiOiLipYUiLCImcmFycnNpbTsiOiLipbQiLCImcmFycnRsOyI6IuKGoyIsIiZyYXJydzsiOiLihp0iLCImcmF0YWlsOyI6IuKkmiIsIiZyYXRpbzsiOiLiiLYiLCImcmF0aW9uYWxzOyI6IuKEmiIsIiZyYmFycjsiOiLipI0iLCImcmJicms7Ijoi4p2zIiwiJnJicmFjZTsiOiJ9IiwiJnJicmFjazsiOiJdIiwiJnJicmtlOyI6IuKmjCIsIiZyYnJrc2xkOyI6IuKmjiIsIiZyYnJrc2x1OyI6IuKmkCIsIiZyY2Fyb247IjoixZkiLCImcmNlZGlsOyI6IsWXIiwiJnJjZWlsOyI6IuKMiSIsIiZyY3ViOyI6In0iLCImcmN5OyI6ItGAIiwiJnJkY2E7Ijoi4qS3IiwiJnJkbGRoYXI7Ijoi4qWpIiwiJnJkcXVvOyI6IuKAnSIsIiZyZHF1b3I7Ijoi4oCdIiwiJnJkc2g7Ijoi4oazIiwiJnJlYWw7Ijoi4oScIiwiJnJlYWxpbmU7Ijoi4oSbIiwiJnJlYWxwYXJ0OyI6IuKEnCIsIiZyZWFsczsiOiLihJ0iLCImcmVjdDsiOiLilq0iLCImcmVnIjoiwq4iLCImcmVnOyI6IsKuIiwiJnJmaXNodDsiOiLipb0iLCImcmZsb29yOyI6IuKMiyIsIiZyZnI7Ijoi8J2UryIsIiZyaGFyZDsiOiLih4EiLCImcmhhcnU7Ijoi4oeAIiwiJnJoYXJ1bDsiOiLipawiLCImcmhvOyI6Is+BIiwiJnJob3Y7Ijoiz7EiLCImcmlnaHRhcnJvdzsiOiLihpIiLCImcmlnaHRhcnJvd3RhaWw7Ijoi4oajIiwiJnJpZ2h0aGFycG9vbmRvd247Ijoi4oeBIiwiJnJpZ2h0aGFycG9vbnVwOyI6IuKHgCIsIiZyaWdodGxlZnRhcnJvd3M7Ijoi4oeEIiwiJnJpZ2h0bGVmdGhhcnBvb25zOyI6IuKHjCIsIiZyaWdodHJpZ2h0YXJyb3dzOyI6IuKHiSIsIiZyaWdodHNxdWlnYXJyb3c7Ijoi4oadIiwiJnJpZ2h0dGhyZWV0aW1lczsiOiLii4wiLCImcmluZzsiOiLLmiIsIiZyaXNpbmdkb3RzZXE7Ijoi4omTIiwiJnJsYXJyOyI6IuKHhCIsIiZybGhhcjsiOiLih4wiLCImcmxtOyI6IuKAjyIsIiZybW91c3Q7Ijoi4o6xIiwiJnJtb3VzdGFjaGU7Ijoi4o6xIiwiJnJubWlkOyI6IuKrriIsIiZyb2FuZzsiOiLin60iLCImcm9hcnI7Ijoi4oe+IiwiJnJvYnJrOyI6IuKfpyIsIiZyb3BhcjsiOiLipoYiLCImcm9wZjsiOiLwnZWjIiwiJnJvcGx1czsiOiLiqK4iLCImcm90aW1lczsiOiLiqLUiLCImcnBhcjsiOiIpIiwiJnJwYXJndDsiOiLippQiLCImcnBwb2xpbnQ7Ijoi4qiSIiwiJnJyYXJyOyI6IuKHiSIsIiZyc2FxdW87Ijoi4oC6IiwiJnJzY3I7Ijoi8J2ThyIsIiZyc2g7Ijoi4oaxIiwiJnJzcWI7IjoiXSIsIiZyc3F1bzsiOiLigJkiLCImcnNxdW9yOyI6IuKAmSIsIiZydGhyZWU7Ijoi4ouMIiwiJnJ0aW1lczsiOiLii4oiLCImcnRyaTsiOiLilrkiLCImcnRyaWU7Ijoi4oq1IiwiJnJ0cmlmOyI6IuKWuCIsIiZydHJpbHRyaTsiOiLip44iLCImcnVsdWhhcjsiOiLipagiLCImcng7Ijoi4oSeIiwiJnNhY3V0ZTsiOiLFmyIsIiZzYnF1bzsiOiLigJoiLCImc2M7Ijoi4om7IiwiJnNjRTsiOiLiqrQiLCImc2NhcDsiOiLiqrgiLCImc2Nhcm9uOyI6IsWhIiwiJnNjY3VlOyI6IuKJvSIsIiZzY2U7Ijoi4qqwIiwiJnNjZWRpbDsiOiLFnyIsIiZzY2lyYzsiOiLFnSIsIiZzY25FOyI6IuKqtiIsIiZzY25hcDsiOiLiqroiLCImc2Nuc2ltOyI6IuKLqSIsIiZzY3BvbGludDsiOiLiqJMiLCImc2NzaW07Ijoi4om/IiwiJnNjeTsiOiLRgSIsIiZzZG90OyI6IuKLhSIsIiZzZG90YjsiOiLiiqEiLCImc2RvdGU7Ijoi4qmmIiwiJnNlQXJyOyI6IuKHmCIsIiZzZWFyaGs7Ijoi4qSlIiwiJnNlYXJyOyI6IuKGmCIsIiZzZWFycm93OyI6IuKGmCIsIiZzZWN0IjoiwqciLCImc2VjdDsiOiLCpyIsIiZzZW1pOyI6IjsiLCImc2Vzd2FyOyI6IuKkqSIsIiZzZXRtaW51czsiOiLiiJYiLCImc2V0bW47Ijoi4oiWIiwiJnNleHQ7Ijoi4py2IiwiJnNmcjsiOiLwnZSwIiwiJnNmcm93bjsiOiLijKIiLCImc2hhcnA7Ijoi4pmvIiwiJnNoY2hjeTsiOiLRiSIsIiZzaGN5OyI6ItGIIiwiJnNob3J0bWlkOyI6IuKIoyIsIiZzaG9ydHBhcmFsbGVsOyI6IuKIpSIsIiZzaHkiOiLCrSIsIiZzaHk7Ijoiwq0iLCImc2lnbWE7Ijoiz4MiLCImc2lnbWFmOyI6Is+CIiwiJnNpZ21hdjsiOiLPgiIsIiZzaW07Ijoi4oi8IiwiJnNpbWRvdDsiOiLiqaoiLCImc2ltZTsiOiLiiYMiLCImc2ltZXE7Ijoi4omDIiwiJnNpbWc7Ijoi4qqeIiwiJnNpbWdFOyI6IuKqoCIsIiZzaW1sOyI6IuKqnSIsIiZzaW1sRTsiOiLiqp8iLCImc2ltbmU7Ijoi4omGIiwiJnNpbXBsdXM7Ijoi4qikIiwiJnNpbXJhcnI7Ijoi4qWyIiwiJnNsYXJyOyI6IuKGkCIsIiZzbWFsbHNldG1pbnVzOyI6IuKIliIsIiZzbWFzaHA7Ijoi4qizIiwiJnNtZXBhcnNsOyI6IuKnpCIsIiZzbWlkOyI6IuKIoyIsIiZzbWlsZTsiOiLijKMiLCImc210OyI6IuKqqiIsIiZzbXRlOyI6IuKqrCIsIiZzbXRlczsiOiLiqqzvuIAiLCImc29mdGN5OyI6ItGMIiwiJnNvbDsiOiIvIiwiJnNvbGI7Ijoi4qeEIiwiJnNvbGJhcjsiOiLijL8iLCImc29wZjsiOiLwnZWkIiwiJnNwYWRlczsiOiLimaAiLCImc3BhZGVzdWl0OyI6IuKZoCIsIiZzcGFyOyI6IuKIpSIsIiZzcWNhcDsiOiLiipMiLCImc3FjYXBzOyI6IuKKk++4gCIsIiZzcWN1cDsiOiLiipQiLCImc3FjdXBzOyI6IuKKlO+4gCIsIiZzcXN1YjsiOiLiio8iLCImc3FzdWJlOyI6IuKKkSIsIiZzcXN1YnNldDsiOiLiio8iLCImc3FzdWJzZXRlcTsiOiLiipEiLCImc3FzdXA7Ijoi4oqQIiwiJnNxc3VwZTsiOiLiipIiLCImc3FzdXBzZXQ7Ijoi4oqQIiwiJnNxc3Vwc2V0ZXE7Ijoi4oqSIiwiJnNxdTsiOiLilqEiLCImc3F1YXJlOyI6IuKWoSIsIiZzcXVhcmY7Ijoi4paqIiwiJnNxdWY7Ijoi4paqIiwiJnNyYXJyOyI6IuKGkiIsIiZzc2NyOyI6IvCdk4giLCImc3NldG1uOyI6IuKIliIsIiZzc21pbGU7Ijoi4oyjIiwiJnNzdGFyZjsiOiLii4YiLCImc3RhcjsiOiLimIYiLCImc3RhcmY7Ijoi4piFIiwiJnN0cmFpZ2h0ZXBzaWxvbjsiOiLPtSIsIiZzdHJhaWdodHBoaTsiOiLPlSIsIiZzdHJuczsiOiLCryIsIiZzdWI7Ijoi4oqCIiwiJnN1YkU7Ijoi4quFIiwiJnN1YmRvdDsiOiLiqr0iLCImc3ViZTsiOiLiioYiLCImc3ViZWRvdDsiOiLiq4MiLCImc3VibXVsdDsiOiLiq4EiLCImc3VibkU7Ijoi4quLIiwiJnN1Ym5lOyI6IuKKiiIsIiZzdWJwbHVzOyI6IuKqvyIsIiZzdWJyYXJyOyI6IuKluSIsIiZzdWJzZXQ7Ijoi4oqCIiwiJnN1YnNldGVxOyI6IuKKhiIsIiZzdWJzZXRlcXE7Ijoi4quFIiwiJnN1YnNldG5lcTsiOiLiiooiLCImc3Vic2V0bmVxcTsiOiLiq4siLCImc3Vic2ltOyI6IuKrhyIsIiZzdWJzdWI7Ijoi4quVIiwiJnN1YnN1cDsiOiLiq5MiLCImc3VjYzsiOiLiibsiLCImc3VjY2FwcHJveDsiOiLiqrgiLCImc3VjY2N1cmx5ZXE7Ijoi4om9IiwiJnN1Y2NlcTsiOiLiqrAiLCImc3VjY25hcHByb3g7Ijoi4qq6IiwiJnN1Y2NuZXFxOyI6IuKqtiIsIiZzdWNjbnNpbTsiOiLii6kiLCImc3VjY3NpbTsiOiLiib8iLCImc3VtOyI6IuKIkSIsIiZzdW5nOyI6IuKZqiIsIiZzdXAxIjoiwrkiLCImc3VwMTsiOiLCuSIsIiZzdXAyIjoiwrIiLCImc3VwMjsiOiLCsiIsIiZzdXAzIjoiwrMiLCImc3VwMzsiOiLCsyIsIiZzdXA7Ijoi4oqDIiwiJnN1cEU7Ijoi4quGIiwiJnN1cGRvdDsiOiLiqr4iLCImc3VwZHN1YjsiOiLiq5giLCImc3VwZTsiOiLiiociLCImc3VwZWRvdDsiOiLiq4QiLCImc3VwaHNvbDsiOiLin4kiLCImc3VwaHN1YjsiOiLiq5ciLCImc3VwbGFycjsiOiLipbsiLCImc3VwbXVsdDsiOiLiq4IiLCImc3VwbkU7Ijoi4quMIiwiJnN1cG5lOyI6IuKKiyIsIiZzdXBwbHVzOyI6IuKrgCIsIiZzdXBzZXQ7Ijoi4oqDIiwiJnN1cHNldGVxOyI6IuKKhyIsIiZzdXBzZXRlcXE7Ijoi4quGIiwiJnN1cHNldG5lcTsiOiLiiosiLCImc3Vwc2V0bmVxcTsiOiLiq4wiLCImc3Vwc2ltOyI6IuKriCIsIiZzdXBzdWI7Ijoi4quUIiwiJnN1cHN1cDsiOiLiq5YiLCImc3dBcnI7Ijoi4oeZIiwiJnN3YXJoazsiOiLipKYiLCImc3dhcnI7Ijoi4oaZIiwiJnN3YXJyb3c7Ijoi4oaZIiwiJnN3bndhcjsiOiLipKoiLCImc3psaWciOiLDnyIsIiZzemxpZzsiOiLDnyIsIiZ0YXJnZXQ7Ijoi4oyWIiwiJnRhdTsiOiLPhCIsIiZ0YnJrOyI6IuKOtCIsIiZ0Y2Fyb247IjoixaUiLCImdGNlZGlsOyI6IsWjIiwiJnRjeTsiOiLRgiIsIiZ0ZG90OyI6IuKDmyIsIiZ0ZWxyZWM7Ijoi4oyVIiwiJnRmcjsiOiLwnZSxIiwiJnRoZXJlNDsiOiLiiLQiLCImdGhlcmVmb3JlOyI6IuKItCIsIiZ0aGV0YTsiOiLOuCIsIiZ0aGV0YXN5bTsiOiLPkSIsIiZ0aGV0YXY7Ijoiz5EiLCImdGhpY2thcHByb3g7Ijoi4omIIiwiJnRoaWNrc2ltOyI6IuKIvCIsIiZ0aGluc3A7Ijoi4oCJIiwiJnRoa2FwOyI6IuKJiCIsIiZ0aGtzaW07Ijoi4oi8IiwiJnRob3JuIjoiw74iLCImdGhvcm47Ijoiw74iLCImdGlsZGU7Ijoiy5wiLCImdGltZXMiOiLDlyIsIiZ0aW1lczsiOiLDlyIsIiZ0aW1lc2I7Ijoi4oqgIiwiJnRpbWVzYmFyOyI6IuKosSIsIiZ0aW1lc2Q7Ijoi4qiwIiwiJnRpbnQ7Ijoi4oitIiwiJnRvZWE7Ijoi4qSoIiwiJnRvcDsiOiLiiqQiLCImdG9wYm90OyI6IuKMtiIsIiZ0b3BjaXI7Ijoi4quxIiwiJnRvcGY7Ijoi8J2VpSIsIiZ0b3Bmb3JrOyI6IuKrmiIsIiZ0b3NhOyI6IuKkqSIsIiZ0cHJpbWU7Ijoi4oC0IiwiJnRyYWRlOyI6IuKEoiIsIiZ0cmlhbmdsZTsiOiLilrUiLCImdHJpYW5nbGVkb3duOyI6IuKWvyIsIiZ0cmlhbmdsZWxlZnQ7Ijoi4peDIiwiJnRyaWFuZ2xlbGVmdGVxOyI6IuKKtCIsIiZ0cmlhbmdsZXE7Ijoi4omcIiwiJnRyaWFuZ2xlcmlnaHQ7Ijoi4pa5IiwiJnRyaWFuZ2xlcmlnaHRlcTsiOiLiirUiLCImdHJpZG90OyI6IuKXrCIsIiZ0cmllOyI6IuKJnCIsIiZ0cmltaW51czsiOiLiqLoiLCImdHJpcGx1czsiOiLiqLkiLCImdHJpc2I7Ijoi4qeNIiwiJnRyaXRpbWU7Ijoi4qi7IiwiJnRycGV6aXVtOyI6IuKPoiIsIiZ0c2NyOyI6IvCdk4kiLCImdHNjeTsiOiLRhiIsIiZ0c2hjeTsiOiLRmyIsIiZ0c3Ryb2s7IjoixaciLCImdHdpeHQ7Ijoi4omsIiwiJnR3b2hlYWRsZWZ0YXJyb3c7Ijoi4oaeIiwiJnR3b2hlYWRyaWdodGFycm93OyI6IuKGoCIsIiZ1QXJyOyI6IuKHkSIsIiZ1SGFyOyI6IuKloyIsIiZ1YWN1dGUiOiLDuiIsIiZ1YWN1dGU7Ijoiw7oiLCImdWFycjsiOiLihpEiLCImdWJyY3k7Ijoi0Z4iLCImdWJyZXZlOyI6IsWtIiwiJnVjaXJjIjoiw7siLCImdWNpcmM7Ijoiw7siLCImdWN5OyI6ItGDIiwiJnVkYXJyOyI6IuKHhSIsIiZ1ZGJsYWM7IjoixbEiLCImdWRoYXI7Ijoi4qWuIiwiJnVmaXNodDsiOiLipb4iLCImdWZyOyI6IvCdlLIiLCImdWdyYXZlIjoiw7kiLCImdWdyYXZlOyI6IsO5IiwiJnVoYXJsOyI6IuKGvyIsIiZ1aGFycjsiOiLihr4iLCImdWhibGs7Ijoi4paAIiwiJnVsY29ybjsiOiLijJwiLCImdWxjb3JuZXI7Ijoi4oycIiwiJnVsY3JvcDsiOiLijI8iLCImdWx0cmk7Ijoi4pe4IiwiJnVtYWNyOyI6IsWrIiwiJnVtbCI6IsKoIiwiJnVtbDsiOiLCqCIsIiZ1b2dvbjsiOiLFsyIsIiZ1b3BmOyI6IvCdlaYiLCImdXBhcnJvdzsiOiLihpEiLCImdXBkb3duYXJyb3c7Ijoi4oaVIiwiJnVwaGFycG9vbmxlZnQ7Ijoi4oa/IiwiJnVwaGFycG9vbnJpZ2h0OyI6IuKGviIsIiZ1cGx1czsiOiLiio4iLCImdXBzaTsiOiLPhSIsIiZ1cHNpaDsiOiLPkiIsIiZ1cHNpbG9uOyI6Is+FIiwiJnVwdXBhcnJvd3M7Ijoi4oeIIiwiJnVyY29ybjsiOiLijJ0iLCImdXJjb3JuZXI7Ijoi4oydIiwiJnVyY3JvcDsiOiLijI4iLCImdXJpbmc7Ijoixa8iLCImdXJ0cmk7Ijoi4pe5IiwiJnVzY3I7Ijoi8J2TiiIsIiZ1dGRvdDsiOiLii7AiLCImdXRpbGRlOyI6IsWpIiwiJnV0cmk7Ijoi4pa1IiwiJnV0cmlmOyI6IuKWtCIsIiZ1dWFycjsiOiLih4giLCImdXVtbCI6IsO8IiwiJnV1bWw7Ijoiw7wiLCImdXdhbmdsZTsiOiLipqciLCImdkFycjsiOiLih5UiLCImdkJhcjsiOiLiq6giLCImdkJhcnY7Ijoi4qupIiwiJnZEYXNoOyI6IuKKqCIsIiZ2YW5ncnQ7Ijoi4qacIiwiJnZhcmVwc2lsb247Ijoiz7UiLCImdmFya2FwcGE7Ijoiz7AiLCImdmFybm90aGluZzsiOiLiiIUiLCImdmFycGhpOyI6Is+VIiwiJnZhcnBpOyI6Is+WIiwiJnZhcnByb3B0bzsiOiLiiJ0iLCImdmFycjsiOiLihpUiLCImdmFycmhvOyI6Is+xIiwiJnZhcnNpZ21hOyI6Is+CIiwiJnZhcnN1YnNldG5lcTsiOiLiiorvuIAiLCImdmFyc3Vic2V0bmVxcTsiOiLiq4vvuIAiLCImdmFyc3Vwc2V0bmVxOyI6IuKKi++4gCIsIiZ2YXJzdXBzZXRuZXFxOyI6IuKrjO+4gCIsIiZ2YXJ0aGV0YTsiOiLPkSIsIiZ2YXJ0cmlhbmdsZWxlZnQ7Ijoi4oqyIiwiJnZhcnRyaWFuZ2xlcmlnaHQ7Ijoi4oqzIiwiJnZjeTsiOiLQsiIsIiZ2ZGFzaDsiOiLiiqIiLCImdmVlOyI6IuKIqCIsIiZ2ZWViYXI7Ijoi4oq7IiwiJnZlZWVxOyI6IuKJmiIsIiZ2ZWxsaXA7Ijoi4ouuIiwiJnZlcmJhcjsiOiJ8IiwiJnZlcnQ7IjoifCIsIiZ2ZnI7Ijoi8J2UsyIsIiZ2bHRyaTsiOiLiirIiLCImdm5zdWI7Ijoi4oqC4oOSIiwiJnZuc3VwOyI6IuKKg+KDkiIsIiZ2b3BmOyI6IvCdlaciLCImdnByb3A7Ijoi4oidIiwiJnZydHJpOyI6IuKKsyIsIiZ2c2NyOyI6IvCdk4siLCImdnN1Ym5FOyI6IuKri++4gCIsIiZ2c3VibmU7Ijoi4oqK77iAIiwiJnZzdXBuRTsiOiLiq4zvuIAiLCImdnN1cG5lOyI6IuKKi++4gCIsIiZ2emlnemFnOyI6IuKmmiIsIiZ3Y2lyYzsiOiLFtSIsIiZ3ZWRiYXI7Ijoi4qmfIiwiJndlZGdlOyI6IuKIpyIsIiZ3ZWRnZXE7Ijoi4omZIiwiJndlaWVycDsiOiLihJgiLCImd2ZyOyI6IvCdlLQiLCImd29wZjsiOiLwnZWoIiwiJndwOyI6IuKEmCIsIiZ3cjsiOiLiiYAiLCImd3JlYXRoOyI6IuKJgCIsIiZ3c2NyOyI6IvCdk4wiLCImeGNhcDsiOiLii4IiLCImeGNpcmM7Ijoi4pevIiwiJnhjdXA7Ijoi4ouDIiwiJnhkdHJpOyI6IuKWvSIsIiZ4ZnI7Ijoi8J2UtSIsIiZ4aEFycjsiOiLin7oiLCImeGhhcnI7Ijoi4p+3IiwiJnhpOyI6Is6+IiwiJnhsQXJyOyI6IuKfuCIsIiZ4bGFycjsiOiLin7UiLCImeG1hcDsiOiLin7wiLCImeG5pczsiOiLii7siLCImeG9kb3Q7Ijoi4qiAIiwiJnhvcGY7Ijoi8J2VqSIsIiZ4b3BsdXM7Ijoi4qiBIiwiJnhvdGltZTsiOiLiqIIiLCImeHJBcnI7Ijoi4p+5IiwiJnhyYXJyOyI6IuKftiIsIiZ4c2NyOyI6IvCdk40iLCImeHNxY3VwOyI6IuKohiIsIiZ4dXBsdXM7Ijoi4qiEIiwiJnh1dHJpOyI6IuKWsyIsIiZ4dmVlOyI6IuKLgSIsIiZ4d2VkZ2U7Ijoi4ouAIiwiJnlhY3V0ZSI6IsO9IiwiJnlhY3V0ZTsiOiLDvSIsIiZ5YWN5OyI6ItGPIiwiJnljaXJjOyI6IsW3IiwiJnljeTsiOiLRiyIsIiZ5ZW4iOiLCpSIsIiZ5ZW47IjoiwqUiLCImeWZyOyI6IvCdlLYiLCImeWljeTsiOiLRlyIsIiZ5b3BmOyI6IvCdlaoiLCImeXNjcjsiOiLwnZOOIiwiJnl1Y3k7Ijoi0Y4iLCImeXVtbCI6IsO/IiwiJnl1bWw7Ijoiw78iLCImemFjdXRlOyI6IsW6IiwiJnpjYXJvbjsiOiLFviIsIiZ6Y3k7Ijoi0LciLCImemRvdDsiOiLFvCIsIiZ6ZWV0cmY7Ijoi4oSoIiwiJnpldGE7IjoizrYiLCImemZyOyI6IvCdlLciLCImemhjeTsiOiLQtiIsIiZ6aWdyYXJyOyI6IuKHnSIsIiZ6b3BmOyI6IvCdlasiLCImenNjcjsiOiLwnZOPIiwiJnp3ajsiOiLigI0iLCImenduajsiOiLigIwifSxjaGFyYWN0ZXJzOnsiw4YiOiImQUVsaWc7IiwiJiI6IiZhbXA7Iiwiw4EiOiImQWFjdXRlOyIsIsSCIjoiJkFicmV2ZTsiLCLDgiI6IiZBY2lyYzsiLCLQkCI6IiZBY3k7Iiwi8J2UhCI6IiZBZnI7Iiwiw4AiOiImQWdyYXZlOyIsIs6RIjoiJkFscGhhOyIsIsSAIjoiJkFtYWNyOyIsIuKpkyI6IiZBbmQ7IiwixIQiOiImQW9nb247Iiwi8J2UuCI6IiZBb3BmOyIsIuKBoSI6IiZhZjsiLCLDhSI6IiZhbmdzdDsiLCLwnZKcIjoiJkFzY3I7Iiwi4omUIjoiJmNvbG9uZXE7Iiwiw4MiOiImQXRpbGRlOyIsIsOEIjoiJkF1bWw7Iiwi4oiWIjoiJnNzZXRtbjsiLCLiq6ciOiImQmFydjsiLCLijIYiOiImZG91YmxlYmFyd2VkZ2U7Iiwi0JEiOiImQmN5OyIsIuKItSI6IiZiZWNhdXNlOyIsIuKErCI6IiZiZXJub3U7IiwizpIiOiImQmV0YTsiLCLwnZSFIjoiJkJmcjsiLCLwnZS5IjoiJkJvcGY7Iiwiy5giOiImYnJldmU7Iiwi4omOIjoiJmJ1bXA7Iiwi0KciOiImQ0hjeTsiLCLCqSI6IiZjb3B5OyIsIsSGIjoiJkNhY3V0ZTsiLCLii5IiOiImQ2FwOyIsIuKFhSI6IiZERDsiLCLihK0iOiImQ2ZyOyIsIsSMIjoiJkNjYXJvbjsiLCLDhyI6IiZDY2VkaWw7IiwixIgiOiImQ2NpcmM7Iiwi4oiwIjoiJkNjb25pbnQ7IiwixIoiOiImQ2RvdDsiLCLCuCI6IiZjZWRpbDsiLCLCtyI6IiZtaWRkb3Q7IiwizqciOiImQ2hpOyIsIuKKmSI6IiZvZG90OyIsIuKKliI6IiZvbWludXM7Iiwi4oqVIjoiJm9wbHVzOyIsIuKKlyI6IiZvdGltZXM7Iiwi4oiyIjoiJmN3Y29uaW50OyIsIuKAnSI6IiZyZHF1b3I7Iiwi4oCZIjoiJnJzcXVvcjsiLCLiiLciOiImUHJvcG9ydGlvbjsiLCLiqbQiOiImQ29sb25lOyIsIuKJoSI6IiZlcXVpdjsiLCLiiK8iOiImRG91YmxlQ29udG91ckludGVncmFsOyIsIuKIriI6IiZvaW50OyIsIuKEgiI6IiZjb21wbGV4ZXM7Iiwi4oiQIjoiJmNvcHJvZDsiLCLiiLMiOiImYXdjb25pbnQ7Iiwi4qivIjoiJkNyb3NzOyIsIvCdkp4iOiImQ3NjcjsiLCLii5MiOiImQ3VwOyIsIuKJjSI6IiZhc3ltcGVxOyIsIuKkkSI6IiZERG90cmFoZDsiLCLQgiI6IiZESmN5OyIsItCFIjoiJkRTY3k7Iiwi0I8iOiImRFpjeTsiLCLigKEiOiImZGRhZ2dlcjsiLCLihqEiOiImRGFycjsiLCLiq6QiOiImRG91YmxlTGVmdFRlZTsiLCLEjiI6IiZEY2Fyb247Iiwi0JQiOiImRGN5OyIsIuKIhyI6IiZuYWJsYTsiLCLOlCI6IiZEZWx0YTsiLCLwnZSHIjoiJkRmcjsiLCLCtCI6IiZhY3V0ZTsiLCLLmSI6IiZkb3Q7Iiwiy50iOiImZGJsYWM7IiwiYCI6IiZncmF2ZTsiLCLLnCI6IiZ0aWxkZTsiLCLii4QiOiImZGlhbW9uZDsiLCLihYYiOiImZGQ7Iiwi8J2UuyI6IiZEb3BmOyIsIsKoIjoiJnVtbDsiLCLig5wiOiImRG90RG90OyIsIuKJkCI6IiZlc2RvdDsiLCLih5MiOiImZEFycjsiLCLih5AiOiImbEFycjsiLCLih5QiOiImaWZmOyIsIuKfuCI6IiZ4bEFycjsiLCLin7oiOiImeGhBcnI7Iiwi4p+5IjoiJnhyQXJyOyIsIuKHkiI6IiZyQXJyOyIsIuKKqCI6IiZ2RGFzaDsiLCLih5EiOiImdUFycjsiLCLih5UiOiImdkFycjsiLCLiiKUiOiImc3BhcjsiLCLihpMiOiImZG93bmFycm93OyIsIuKkkyI6IiZEb3duQXJyb3dCYXI7Iiwi4oe1IjoiJmR1YXJyOyIsIsyRIjoiJkRvd25CcmV2ZTsiLCLipZAiOiImRG93bkxlZnRSaWdodFZlY3RvcjsiLCLipZ4iOiImRG93bkxlZnRUZWVWZWN0b3I7Iiwi4oa9IjoiJmxoYXJkOyIsIuKlliI6IiZEb3duTGVmdFZlY3RvckJhcjsiLCLipZ8iOiImRG93blJpZ2h0VGVlVmVjdG9yOyIsIuKHgSI6IiZyaWdodGhhcnBvb25kb3duOyIsIuKllyI6IiZEb3duUmlnaHRWZWN0b3JCYXI7Iiwi4oqkIjoiJnRvcDsiLCLihqciOiImbWFwc3RvZG93bjsiLCLwnZKfIjoiJkRzY3I7IiwixJAiOiImRHN0cm9rOyIsIsWKIjoiJkVORzsiLCLDkCI6IiZFVEg7Iiwiw4kiOiImRWFjdXRlOyIsIsSaIjoiJkVjYXJvbjsiLCLDiiI6IiZFY2lyYzsiLCLQrSI6IiZFY3k7IiwixJYiOiImRWRvdDsiLCLwnZSIIjoiJkVmcjsiLCLDiCI6IiZFZ3JhdmU7Iiwi4oiIIjoiJmlzaW52OyIsIsSSIjoiJkVtYWNyOyIsIuKXuyI6IiZFbXB0eVNtYWxsU3F1YXJlOyIsIuKWqyI6IiZFbXB0eVZlcnlTbWFsbFNxdWFyZTsiLCLEmCI6IiZFb2dvbjsiLCLwnZS8IjoiJkVvcGY7IiwizpUiOiImRXBzaWxvbjsiLCLiqbUiOiImRXF1YWw7Iiwi4omCIjoiJmVzaW07Iiwi4oeMIjoiJnJsaGFyOyIsIuKEsCI6IiZleHBlY3RhdGlvbjsiLCLiqbMiOiImRXNpbTsiLCLOlyI6IiZFdGE7Iiwiw4siOiImRXVtbDsiLCLiiIMiOiImZXhpc3Q7Iiwi4oWHIjoiJmV4cG9uZW50aWFsZTsiLCLQpCI6IiZGY3k7Iiwi8J2UiSI6IiZGZnI7Iiwi4pe8IjoiJkZpbGxlZFNtYWxsU3F1YXJlOyIsIuKWqiI6IiZzcXVmOyIsIvCdlL0iOiImRm9wZjsiLCLiiIAiOiImZm9yYWxsOyIsIuKEsSI6IiZGc2NyOyIsItCDIjoiJkdKY3k7IiwiPiI6IiZndDsiLCLOkyI6IiZHYW1tYTsiLCLPnCI6IiZHYW1tYWQ7IiwixJ4iOiImR2JyZXZlOyIsIsSiIjoiJkdjZWRpbDsiLCLEnCI6IiZHY2lyYzsiLCLQkyI6IiZHY3k7IiwixKAiOiImR2RvdDsiLCLwnZSKIjoiJkdmcjsiLCLii5kiOiImZ2dnOyIsIvCdlL4iOiImR29wZjsiLCLiiaUiOiImZ2VxOyIsIuKLmyI6IiZndHJlcWxlc3M7Iiwi4omnIjoiJmdlcXE7Iiwi4qqiIjoiJkdyZWF0ZXJHcmVhdGVyOyIsIuKJtyI6IiZndHJsZXNzOyIsIuKpviI6IiZnZXM7Iiwi4omzIjoiJmd0cnNpbTsiLCLwnZKiIjoiJkdzY3I7Iiwi4omrIjoiJmdnOyIsItCqIjoiJkhBUkRjeTsiLCLLhyI6IiZjYXJvbjsiLCJeIjoiJkhhdDsiLCLEpCI6IiZIY2lyYzsiLCLihIwiOiImUG9pbmNhcmVwbGFuZTsiLCLihIsiOiImaGFtaWx0OyIsIuKEjSI6IiZxdWF0ZXJuaW9uczsiLCLilIAiOiImYm94aDsiLCLEpiI6IiZIc3Ryb2s7Iiwi4omPIjoiJmJ1bXBlcTsiLCLQlSI6IiZJRWN5OyIsIsSyIjoiJklKbGlnOyIsItCBIjoiJklPY3k7Iiwiw40iOiImSWFjdXRlOyIsIsOOIjoiJkljaXJjOyIsItCYIjoiJkljeTsiLCLEsCI6IiZJZG90OyIsIuKEkSI6IiZpbWFncGFydDsiLCLDjCI6IiZJZ3JhdmU7IiwixKoiOiImSW1hY3I7Iiwi4oWIIjoiJmlpOyIsIuKIrCI6IiZJbnQ7Iiwi4oirIjoiJmludDsiLCLii4IiOiImeGNhcDsiLCLigaMiOiImaWM7Iiwi4oGiIjoiJml0OyIsIsSuIjoiJklvZ29uOyIsIvCdlYAiOiImSW9wZjsiLCLOmSI6IiZJb3RhOyIsIuKEkCI6IiZpbWFnbGluZTsiLCLEqCI6IiZJdGlsZGU7Iiwi0IYiOiImSXVrY3k7Iiwiw48iOiImSXVtbDsiLCLEtCI6IiZKY2lyYzsiLCLQmSI6IiZKY3k7Iiwi8J2UjSI6IiZKZnI7Iiwi8J2VgSI6IiZKb3BmOyIsIvCdkqUiOiImSnNjcjsiLCLQiCI6IiZKc2VyY3k7Iiwi0IQiOiImSnVrY3k7Iiwi0KUiOiImS0hjeTsiLCLQjCI6IiZLSmN5OyIsIs6aIjoiJkthcHBhOyIsIsS2IjoiJktjZWRpbDsiLCLQmiI6IiZLY3k7Iiwi8J2UjiI6IiZLZnI7Iiwi8J2VgiI6IiZLb3BmOyIsIvCdkqYiOiImS3NjcjsiLCLQiSI6IiZMSmN5OyIsIjwiOiImbHQ7IiwixLkiOiImTGFjdXRlOyIsIs6bIjoiJkxhbWJkYTsiLCLin6oiOiImTGFuZzsiLCLihJIiOiImbGFncmFuOyIsIuKGniI6IiZ0d29oZWFkbGVmdGFycm93OyIsIsS9IjoiJkxjYXJvbjsiLCLEuyI6IiZMY2VkaWw7Iiwi0JsiOiImTGN5OyIsIuKfqCI6IiZsYW5nbGU7Iiwi4oaQIjoiJnNsYXJyOyIsIuKHpCI6IiZsYXJyYjsiLCLih4YiOiImbHJhcnI7Iiwi4oyIIjoiJmxjZWlsOyIsIuKfpiI6IiZsb2JyazsiLCLipaEiOiImTGVmdERvd25UZWVWZWN0b3I7Iiwi4oeDIjoiJmRvd25oYXJwb29ubGVmdDsiLCLipZkiOiImTGVmdERvd25WZWN0b3JCYXI7Iiwi4oyKIjoiJmxmbG9vcjsiLCLihpQiOiImbGVmdHJpZ2h0YXJyb3c7Iiwi4qWOIjoiJkxlZnRSaWdodFZlY3RvcjsiLCLiiqMiOiImZGFzaHY7Iiwi4oakIjoiJm1hcHN0b2xlZnQ7Iiwi4qWaIjoiJkxlZnRUZWVWZWN0b3I7Iiwi4oqyIjoiJnZsdHJpOyIsIuKnjyI6IiZMZWZ0VHJpYW5nbGVCYXI7Iiwi4oq0IjoiJnRyaWFuZ2xlbGVmdGVxOyIsIuKlkSI6IiZMZWZ0VXBEb3duVmVjdG9yOyIsIuKloCI6IiZMZWZ0VXBUZWVWZWN0b3I7Iiwi4oa/IjoiJnVwaGFycG9vbmxlZnQ7Iiwi4qWYIjoiJkxlZnRVcFZlY3RvckJhcjsiLCLihrwiOiImbGhhcnU7Iiwi4qWSIjoiJkxlZnRWZWN0b3JCYXI7Iiwi4ouaIjoiJmxlc3NlcWd0cjsiLCLiiaYiOiImbGVxcTsiLCLiibYiOiImbGc7Iiwi4qqhIjoiJkxlc3NMZXNzOyIsIuKpvSI6IiZsZXM7Iiwi4omyIjoiJmxzaW07Iiwi8J2UjyI6IiZMZnI7Iiwi4ouYIjoiJkxsOyIsIuKHmiI6IiZsQWFycjsiLCLEvyI6IiZMbWlkb3Q7Iiwi4p+1IjoiJnhsYXJyOyIsIuKftyI6IiZ4aGFycjsiLCLin7YiOiImeHJhcnI7Iiwi8J2VgyI6IiZMb3BmOyIsIuKGmSI6IiZzd2Fycm93OyIsIuKGmCI6IiZzZWFycm93OyIsIuKGsCI6IiZsc2g7IiwixYEiOiImTHN0cm9rOyIsIuKJqiI6IiZsbDsiLCLipIUiOiImTWFwOyIsItCcIjoiJk1jeTsiLCLigZ8iOiImTWVkaXVtU3BhY2U7Iiwi4oSzIjoiJnBobW1hdDsiLCLwnZSQIjoiJk1mcjsiLCLiiJMiOiImbXA7Iiwi8J2VhCI6IiZNb3BmOyIsIs6cIjoiJk11OyIsItCKIjoiJk5KY3k7IiwixYMiOiImTmFjdXRlOyIsIsWHIjoiJk5jYXJvbjsiLCLFhSI6IiZOY2VkaWw7Iiwi0J0iOiImTmN5OyIsIuKAiyI6IiZaZXJvV2lkdGhTcGFjZTsiLCJcbiI6IiZOZXdMaW5lOyIsIvCdlJEiOiImTmZyOyIsIuKBoCI6IiZOb0JyZWFrOyIsIsKgIjoiJm5ic3A7Iiwi4oSVIjoiJm5hdHVyYWxzOyIsIuKrrCI6IiZOb3Q7Iiwi4omiIjoiJm5lcXVpdjsiLCLiia0iOiImTm90Q3VwQ2FwOyIsIuKIpiI6IiZuc3BhcjsiLCLiiIkiOiImbm90aW52YTsiLCLiiaAiOiImbmU7Iiwi4omCzLgiOiImbmVzaW07Iiwi4oiEIjoiJm5leGlzdHM7Iiwi4omvIjoiJm5ndHI7Iiwi4omxIjoiJm5nZXE7Iiwi4omnzLgiOiImbmdlcXE7Iiwi4omrzLgiOiImbkd0djsiLCLiibkiOiImbnRnbDsiLCLiqb7MuCI6IiZuZ2VzOyIsIuKJtSI6IiZuZ3NpbTsiLCLiiY7MuCI6IiZuYnVtcDsiLCLiiY/MuCI6IiZuYnVtcGU7Iiwi4ouqIjoiJm50cmlhbmdsZWxlZnQ7Iiwi4qePzLgiOiImTm90TGVmdFRyaWFuZ2xlQmFyOyIsIuKLrCI6IiZudHJpYW5nbGVsZWZ0ZXE7Iiwi4omuIjoiJm5sdDsiLCLiibAiOiImbmxlcTsiLCLiibgiOiImbnRsZzsiLCLiiarMuCI6IiZuTHR2OyIsIuKpvcy4IjoiJm5sZXM7Iiwi4om0IjoiJm5sc2ltOyIsIuKqosy4IjoiJk5vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyOyIsIuKqocy4IjoiJk5vdE5lc3RlZExlc3NMZXNzOyIsIuKKgCI6IiZucHJlYzsiLCLiqq/MuCI6IiZucHJlY2VxOyIsIuKLoCI6IiZucHJjdWU7Iiwi4oiMIjoiJm5vdG5pdmE7Iiwi4ourIjoiJm50cmlhbmdsZXJpZ2h0OyIsIuKnkMy4IjoiJk5vdFJpZ2h0VHJpYW5nbGVCYXI7Iiwi4outIjoiJm50cmlhbmdsZXJpZ2h0ZXE7Iiwi4oqPzLgiOiImTm90U3F1YXJlU3Vic2V0OyIsIuKLoiI6IiZuc3FzdWJlOyIsIuKKkMy4IjoiJk5vdFNxdWFyZVN1cGVyc2V0OyIsIuKLoyI6IiZuc3FzdXBlOyIsIuKKguKDkiI6IiZ2bnN1YjsiLCLiiogiOiImbnN1YnNldGVxOyIsIuKKgSI6IiZuc3VjYzsiLCLiqrDMuCI6IiZuc3VjY2VxOyIsIuKLoSI6IiZuc2NjdWU7Iiwi4om/zLgiOiImTm90U3VjY2VlZHNUaWxkZTsiLCLiioPig5IiOiImdm5zdXA7Iiwi4oqJIjoiJm5zdXBzZXRlcTsiLCLiiYEiOiImbnNpbTsiLCLiiYQiOiImbnNpbWVxOyIsIuKJhyI6IiZuY29uZzsiLCLiiYkiOiImbmFwcHJveDsiLCLiiKQiOiImbnNtaWQ7Iiwi8J2SqSI6IiZOc2NyOyIsIsORIjoiJk50aWxkZTsiLCLOnSI6IiZOdTsiLCLFkiI6IiZPRWxpZzsiLCLDkyI6IiZPYWN1dGU7Iiwiw5QiOiImT2NpcmM7Iiwi0J4iOiImT2N5OyIsIsWQIjoiJk9kYmxhYzsiLCLwnZSSIjoiJk9mcjsiLCLDkiI6IiZPZ3JhdmU7IiwixYwiOiImT21hY3I7IiwizqkiOiImb2htOyIsIs6fIjoiJk9taWNyb247Iiwi8J2VhiI6IiZPb3BmOyIsIuKAnCI6IiZsZHF1bzsiLCLigJgiOiImbHNxdW87Iiwi4qmUIjoiJk9yOyIsIvCdkqoiOiImT3NjcjsiLCLDmCI6IiZPc2xhc2g7Iiwiw5UiOiImT3RpbGRlOyIsIuKotyI6IiZPdGltZXM7Iiwiw5YiOiImT3VtbDsiLCLigL4iOiImb2xpbmU7Iiwi4o+eIjoiJk92ZXJCcmFjZTsiLCLijrQiOiImdGJyazsiLCLij5wiOiImT3ZlclBhcmVudGhlc2lzOyIsIuKIgiI6IiZwYXJ0OyIsItCfIjoiJlBjeTsiLCLwnZSTIjoiJlBmcjsiLCLOpiI6IiZQaGk7IiwizqAiOiImUGk7IiwiwrEiOiImcG07Iiwi4oSZIjoiJnByaW1lczsiLCLiqrsiOiImUHI7Iiwi4om6IjoiJnByZWM7Iiwi4qqvIjoiJnByZWNlcTsiLCLiibwiOiImcHJlY2N1cmx5ZXE7Iiwi4om+IjoiJnByc2ltOyIsIuKAsyI6IiZQcmltZTsiLCLiiI8iOiImcHJvZDsiLCLiiJ0iOiImdnByb3A7Iiwi8J2SqyI6IiZQc2NyOyIsIs6oIjoiJlBzaTsiLCciJzoiJnF1b3Q7Iiwi8J2UlCI6IiZRZnI7Iiwi4oSaIjoiJnJhdGlvbmFsczsiLCLwnZKsIjoiJlFzY3I7Iiwi4qSQIjoiJmRyYmthcm93OyIsIsKuIjoiJnJlZzsiLCLFlCI6IiZSYWN1dGU7Iiwi4p+rIjoiJlJhbmc7Iiwi4oagIjoiJnR3b2hlYWRyaWdodGFycm93OyIsIuKkliI6IiZSYXJydGw7IiwixZgiOiImUmNhcm9uOyIsIsWWIjoiJlJjZWRpbDsiLCLQoCI6IiZSY3k7Iiwi4oScIjoiJnJlYWxwYXJ0OyIsIuKIiyI6IiZuaXY7Iiwi4oeLIjoiJmxyaGFyOyIsIuKlryI6IiZkdWhhcjsiLCLOoSI6IiZSaG87Iiwi4p+pIjoiJnJhbmdsZTsiLCLihpIiOiImc3JhcnI7Iiwi4oelIjoiJnJhcnJiOyIsIuKHhCI6IiZybGFycjsiLCLijIkiOiImcmNlaWw7Iiwi4p+nIjoiJnJvYnJrOyIsIuKlnSI6IiZSaWdodERvd25UZWVWZWN0b3I7Iiwi4oeCIjoiJmRvd25oYXJwb29ucmlnaHQ7Iiwi4qWVIjoiJlJpZ2h0RG93blZlY3RvckJhcjsiLCLijIsiOiImcmZsb29yOyIsIuKKoiI6IiZ2ZGFzaDsiLCLihqYiOiImbWFwc3RvOyIsIuKlmyI6IiZSaWdodFRlZVZlY3RvcjsiLCLiirMiOiImdnJ0cmk7Iiwi4qeQIjoiJlJpZ2h0VHJpYW5nbGVCYXI7Iiwi4oq1IjoiJnRyaWFuZ2xlcmlnaHRlcTsiLCLipY8iOiImUmlnaHRVcERvd25WZWN0b3I7Iiwi4qWcIjoiJlJpZ2h0VXBUZWVWZWN0b3I7Iiwi4oa+IjoiJnVwaGFycG9vbnJpZ2h0OyIsIuKllCI6IiZSaWdodFVwVmVjdG9yQmFyOyIsIuKHgCI6IiZyaWdodGhhcnBvb251cDsiLCLipZMiOiImUmlnaHRWZWN0b3JCYXI7Iiwi4oSdIjoiJnJlYWxzOyIsIuKlsCI6IiZSb3VuZEltcGxpZXM7Iiwi4oebIjoiJnJBYXJyOyIsIuKEmyI6IiZyZWFsaW5lOyIsIuKGsSI6IiZyc2g7Iiwi4qe0IjoiJlJ1bGVEZWxheWVkOyIsItCpIjoiJlNIQ0hjeTsiLCLQqCI6IiZTSGN5OyIsItCsIjoiJlNPRlRjeTsiLCLFmiI6IiZTYWN1dGU7Iiwi4qq8IjoiJlNjOyIsIsWgIjoiJlNjYXJvbjsiLCLFniI6IiZTY2VkaWw7IiwixZwiOiImU2NpcmM7Iiwi0KEiOiImU2N5OyIsIvCdlJYiOiImU2ZyOyIsIuKGkSI6IiZ1cGFycm93OyIsIs6jIjoiJlNpZ21hOyIsIuKImCI6IiZjb21wZm47Iiwi8J2ViiI6IiZTb3BmOyIsIuKImiI6IiZyYWRpYzsiLCLilqEiOiImc3F1YXJlOyIsIuKKkyI6IiZzcWNhcDsiLCLiio8iOiImc3FzdWJzZXQ7Iiwi4oqRIjoiJnNxc3Vic2V0ZXE7Iiwi4oqQIjoiJnNxc3Vwc2V0OyIsIuKKkiI6IiZzcXN1cHNldGVxOyIsIuKKlCI6IiZzcWN1cDsiLCLwnZKuIjoiJlNzY3I7Iiwi4ouGIjoiJnNzdGFyZjsiLCLii5AiOiImU3Vic2V0OyIsIuKKhiI6IiZzdWJzZXRlcTsiLCLiibsiOiImc3VjYzsiLCLiqrAiOiImc3VjY2VxOyIsIuKJvSI6IiZzdWNjY3VybHllcTsiLCLiib8iOiImc3VjY3NpbTsiLCLiiJEiOiImc3VtOyIsIuKLkSI6IiZTdXBzZXQ7Iiwi4oqDIjoiJnN1cHNldDsiLCLiiociOiImc3Vwc2V0ZXE7Iiwiw54iOiImVEhPUk47Iiwi4oSiIjoiJnRyYWRlOyIsItCLIjoiJlRTSGN5OyIsItCmIjoiJlRTY3k7IiwiXHQiOiImVGFiOyIsIs6kIjoiJlRhdTsiLCLFpCI6IiZUY2Fyb247IiwixaIiOiImVGNlZGlsOyIsItCiIjoiJlRjeTsiLCLwnZSXIjoiJlRmcjsiLCLiiLQiOiImdGhlcmVmb3JlOyIsIs6YIjoiJlRoZXRhOyIsIuKBn+KAiiI6IiZUaGlja1NwYWNlOyIsIuKAiSI6IiZ0aGluc3A7Iiwi4oi8IjoiJnRoa3NpbTsiLCLiiYMiOiImc2ltZXE7Iiwi4omFIjoiJmNvbmc7Iiwi4omIIjoiJnRoa2FwOyIsIvCdlYsiOiImVG9wZjsiLCLig5siOiImdGRvdDsiLCLwnZKvIjoiJlRzY3I7IiwixaYiOiImVHN0cm9rOyIsIsOaIjoiJlVhY3V0ZTsiLCLihp8iOiImVWFycjsiLCLipYkiOiImVWFycm9jaXI7Iiwi0I4iOiImVWJyY3k7IiwixawiOiImVWJyZXZlOyIsIsObIjoiJlVjaXJjOyIsItCjIjoiJlVjeTsiLCLFsCI6IiZVZGJsYWM7Iiwi8J2UmCI6IiZVZnI7Iiwiw5kiOiImVWdyYXZlOyIsIsWqIjoiJlVtYWNyOyIsXzoiJmxvd2JhcjsiLCLij58iOiImVW5kZXJCcmFjZTsiLCLijrUiOiImYmJyazsiLCLij50iOiImVW5kZXJQYXJlbnRoZXNpczsiLCLii4MiOiImeGN1cDsiLCLiio4iOiImdXBsdXM7IiwixbIiOiImVW9nb247Iiwi8J2VjCI6IiZVb3BmOyIsIuKkkiI6IiZVcEFycm93QmFyOyIsIuKHhSI6IiZ1ZGFycjsiLCLihpUiOiImdmFycjsiLCLipa4iOiImdWRoYXI7Iiwi4oqlIjoiJnBlcnA7Iiwi4oalIjoiJm1hcHN0b3VwOyIsIuKGliI6IiZud2Fycm93OyIsIuKGlyI6IiZuZWFycm93OyIsIs+SIjoiJnVwc2loOyIsIs6lIjoiJlVwc2lsb247Iiwixa4iOiImVXJpbmc7Iiwi8J2SsCI6IiZVc2NyOyIsIsWoIjoiJlV0aWxkZTsiLCLDnCI6IiZVdW1sOyIsIuKKqyI6IiZWRGFzaDsiLCLiq6siOiImVmJhcjsiLCLQkiI6IiZWY3k7Iiwi4oqpIjoiJlZkYXNoOyIsIuKrpiI6IiZWZGFzaGw7Iiwi4ouBIjoiJnh2ZWU7Iiwi4oCWIjoiJlZlcnQ7Iiwi4oijIjoiJnNtaWQ7IiwifCI6IiZ2ZXJ0OyIsIuKdmCI6IiZWZXJ0aWNhbFNlcGFyYXRvcjsiLCLiiYAiOiImd3JlYXRoOyIsIuKAiiI6IiZoYWlyc3A7Iiwi8J2UmSI6IiZWZnI7Iiwi8J2VjSI6IiZWb3BmOyIsIvCdkrEiOiImVnNjcjsiLCLiiqoiOiImVnZkYXNoOyIsIsW0IjoiJldjaXJjOyIsIuKLgCI6IiZ4d2VkZ2U7Iiwi8J2UmiI6IiZXZnI7Iiwi8J2VjiI6IiZXb3BmOyIsIvCdkrIiOiImV3NjcjsiLCLwnZSbIjoiJlhmcjsiLCLOniI6IiZYaTsiLCLwnZWPIjoiJlhvcGY7Iiwi8J2SsyI6IiZYc2NyOyIsItCvIjoiJllBY3k7Iiwi0IciOiImWUljeTsiLCLQriI6IiZZVWN5OyIsIsOdIjoiJllhY3V0ZTsiLCLFtiI6IiZZY2lyYzsiLCLQqyI6IiZZY3k7Iiwi8J2UnCI6IiZZZnI7Iiwi8J2VkCI6IiZZb3BmOyIsIvCdkrQiOiImWXNjcjsiLCLFuCI6IiZZdW1sOyIsItCWIjoiJlpIY3k7IiwixbkiOiImWmFjdXRlOyIsIsW9IjoiJlpjYXJvbjsiLCLQlyI6IiZaY3k7IiwixbsiOiImWmRvdDsiLCLOliI6IiZaZXRhOyIsIuKEqCI6IiZ6ZWV0cmY7Iiwi4oSkIjoiJmludGVnZXJzOyIsIvCdkrUiOiImWnNjcjsiLCLDoSI6IiZhYWN1dGU7IiwixIMiOiImYWJyZXZlOyIsIuKIviI6IiZtc3Rwb3M7Iiwi4oi+zLMiOiImYWNFOyIsIuKIvyI6IiZhY2Q7Iiwiw6IiOiImYWNpcmM7Iiwi0LAiOiImYWN5OyIsIsOmIjoiJmFlbGlnOyIsIvCdlJ4iOiImYWZyOyIsIsOgIjoiJmFncmF2ZTsiLCLihLUiOiImYWxlcGg7IiwizrEiOiImYWxwaGE7IiwixIEiOiImYW1hY3I7Iiwi4qi/IjoiJmFtYWxnOyIsIuKIpyI6IiZ3ZWRnZTsiLCLiqZUiOiImYW5kYW5kOyIsIuKpnCI6IiZhbmRkOyIsIuKpmCI6IiZhbmRzbG9wZTsiLCLiqZoiOiImYW5kdjsiLCLiiKAiOiImYW5nbGU7Iiwi4qakIjoiJmFuZ2U7Iiwi4oihIjoiJm1lYXN1cmVkYW5nbGU7Iiwi4qaoIjoiJmFuZ21zZGFhOyIsIuKmqSI6IiZhbmdtc2RhYjsiLCLipqoiOiImYW5nbXNkYWM7Iiwi4qarIjoiJmFuZ21zZGFkOyIsIuKmrCI6IiZhbmdtc2RhZTsiLCLipq0iOiImYW5nbXNkYWY7Iiwi4qauIjoiJmFuZ21zZGFnOyIsIuKmryI6IiZhbmdtc2RhaDsiLCLiiJ8iOiImYW5ncnQ7Iiwi4oq+IjoiJmFuZ3J0dmI7Iiwi4qadIjoiJmFuZ3J0dmJkOyIsIuKIoiI6IiZhbmdzcGg7Iiwi4o28IjoiJmFuZ3phcnI7IiwixIUiOiImYW9nb247Iiwi8J2VkiI6IiZhb3BmOyIsIuKpsCI6IiZhcEU7Iiwi4qmvIjoiJmFwYWNpcjsiLCLiiYoiOiImYXBwcm94ZXE7Iiwi4omLIjoiJmFwaWQ7IiwiJyI6IiZhcG9zOyIsIsOlIjoiJmFyaW5nOyIsIvCdkrYiOiImYXNjcjsiLCIqIjoiJm1pZGFzdDsiLCLDoyI6IiZhdGlsZGU7Iiwiw6QiOiImYXVtbDsiLCLiqJEiOiImYXdpbnQ7Iiwi4qutIjoiJmJOb3Q7Iiwi4omMIjoiJmJjb25nOyIsIs+2IjoiJmJlcHNpOyIsIuKAtSI6IiZicHJpbWU7Iiwi4oi9IjoiJmJzaW07Iiwi4ouNIjoiJmJzaW1lOyIsIuKKvSI6IiZiYXJ2ZWU7Iiwi4oyFIjoiJmJhcndlZGdlOyIsIuKOtiI6IiZiYnJrdGJyazsiLCLQsSI6IiZiY3k7Iiwi4oCeIjoiJmxkcXVvcjsiLCLiprAiOiImYmVtcHR5djsiLCLOsiI6IiZiZXRhOyIsIuKEtiI6IiZiZXRoOyIsIuKJrCI6IiZ0d2l4dDsiLCLwnZSfIjoiJmJmcjsiLCLil68iOiImeGNpcmM7Iiwi4qiAIjoiJnhvZG90OyIsIuKogSI6IiZ4b3BsdXM7Iiwi4qiCIjoiJnhvdGltZTsiLCLiqIYiOiImeHNxY3VwOyIsIuKYhSI6IiZzdGFyZjsiLCLilr0iOiImeGR0cmk7Iiwi4pazIjoiJnh1dHJpOyIsIuKohCI6IiZ4dXBsdXM7Iiwi4qSNIjoiJnJiYXJyOyIsIuKnqyI6IiZsb3pmOyIsIuKWtCI6IiZ1dHJpZjsiLCLilr4iOiImZHRyaWY7Iiwi4peCIjoiJmx0cmlmOyIsIuKWuCI6IiZydHJpZjsiLCLikKMiOiImYmxhbms7Iiwi4paSIjoiJmJsazEyOyIsIuKWkSI6IiZibGsxNDsiLCLilpMiOiImYmxrMzQ7Iiwi4paIIjoiJmJsb2NrOyIsIj3ig6UiOiImYm5lOyIsIuKJoeKDpSI6IiZibmVxdWl2OyIsIuKMkCI6IiZibm90OyIsIvCdlZMiOiImYm9wZjsiLCLii4giOiImYm93dGllOyIsIuKVlyI6IiZib3hETDsiLCLilZQiOiImYm94RFI7Iiwi4pWWIjoiJmJveERsOyIsIuKVkyI6IiZib3hEcjsiLCLilZAiOiImYm94SDsiLCLilaYiOiImYm94SEQ7Iiwi4pWpIjoiJmJveEhVOyIsIuKVpCI6IiZib3hIZDsiLCLilaciOiImYm94SHU7Iiwi4pWdIjoiJmJveFVMOyIsIuKVmiI6IiZib3hVUjsiLCLilZwiOiImYm94VWw7Iiwi4pWZIjoiJmJveFVyOyIsIuKVkSI6IiZib3hWOyIsIuKVrCI6IiZib3hWSDsiLCLilaMiOiImYm94Vkw7Iiwi4pWgIjoiJmJveFZSOyIsIuKVqyI6IiZib3hWaDsiLCLilaIiOiImYm94Vmw7Iiwi4pWfIjoiJmJveFZyOyIsIuKniSI6IiZib3hib3g7Iiwi4pWVIjoiJmJveGRMOyIsIuKVkiI6IiZib3hkUjsiLCLilJAiOiImYm94ZGw7Iiwi4pSMIjoiJmJveGRyOyIsIuKVpSI6IiZib3hoRDsiLCLilagiOiImYm94aFU7Iiwi4pSsIjoiJmJveGhkOyIsIuKUtCI6IiZib3hodTsiLCLiip8iOiImbWludXNiOyIsIuKKniI6IiZwbHVzYjsiLCLiiqAiOiImdGltZXNiOyIsIuKVmyI6IiZib3h1TDsiLCLilZgiOiImYm94dVI7Iiwi4pSYIjoiJmJveHVsOyIsIuKUlCI6IiZib3h1cjsiLCLilIIiOiImYm94djsiLCLilaoiOiImYm94dkg7Iiwi4pWhIjoiJmJveHZMOyIsIuKVniI6IiZib3h2UjsiLCLilLwiOiImYm94dmg7Iiwi4pSkIjoiJmJveHZsOyIsIuKUnCI6IiZib3h2cjsiLCLCpiI6IiZicnZiYXI7Iiwi8J2StyI6IiZic2NyOyIsIuKBjyI6IiZic2VtaTsiLCJcXCI6IiZic29sOyIsIuKnhSI6IiZic29sYjsiLCLin4giOiImYnNvbGhzdWI7Iiwi4oCiIjoiJmJ1bGxldDsiLCLiqq4iOiImYnVtcEU7IiwixIciOiImY2FjdXRlOyIsIuKIqSI6IiZjYXA7Iiwi4qmEIjoiJmNhcGFuZDsiLCLiqYkiOiImY2FwYnJjdXA7Iiwi4qmLIjoiJmNhcGNhcDsiLCLiqYciOiImY2FwY3VwOyIsIuKpgCI6IiZjYXBkb3Q7Iiwi4oip77iAIjoiJmNhcHM7Iiwi4oGBIjoiJmNhcmV0OyIsIuKpjSI6IiZjY2FwczsiLCLEjSI6IiZjY2Fyb247Iiwiw6ciOiImY2NlZGlsOyIsIsSJIjoiJmNjaXJjOyIsIuKpjCI6IiZjY3VwczsiLCLiqZAiOiImY2N1cHNzbTsiLCLEiyI6IiZjZG90OyIsIuKmsiI6IiZjZW1wdHl2OyIsIsKiIjoiJmNlbnQ7Iiwi8J2UoCI6IiZjZnI7Iiwi0YciOiImY2hjeTsiLCLinJMiOiImY2hlY2ttYXJrOyIsIs+HIjoiJmNoaTsiLCLil4siOiImY2lyOyIsIuKngyI6IiZjaXJFOyIsIsuGIjoiJmNpcmM7Iiwi4omXIjoiJmNpcmU7Iiwi4oa6IjoiJm9sYXJyOyIsIuKGuyI6IiZvcmFycjsiLCLik4giOiImb1M7Iiwi4oqbIjoiJm9hc3Q7Iiwi4oqaIjoiJm9jaXI7Iiwi4oqdIjoiJm9kYXNoOyIsIuKokCI6IiZjaXJmbmludDsiLCLiq68iOiImY2lybWlkOyIsIuKngiI6IiZjaXJzY2lyOyIsIuKZoyI6IiZjbHVic3VpdDsiLCI6IjoiJmNvbG9uOyIsIiwiOiImY29tbWE7IiwiQCI6IiZjb21tYXQ7Iiwi4oiBIjoiJmNvbXBsZW1lbnQ7Iiwi4qmtIjoiJmNvbmdkb3Q7Iiwi8J2VlCI6IiZjb3BmOyIsIuKElyI6IiZjb3B5c3I7Iiwi4oa1IjoiJmNyYXJyOyIsIuKclyI6IiZjcm9zczsiLCLwnZK4IjoiJmNzY3I7Iiwi4quPIjoiJmNzdWI7Iiwi4quRIjoiJmNzdWJlOyIsIuKrkCI6IiZjc3VwOyIsIuKrkiI6IiZjc3VwZTsiLCLii68iOiImY3Rkb3Q7Iiwi4qS4IjoiJmN1ZGFycmw7Iiwi4qS1IjoiJmN1ZGFycnI7Iiwi4oueIjoiJmN1cmx5ZXFwcmVjOyIsIuKLnyI6IiZjdXJseWVxc3VjYzsiLCLihrYiOiImY3VydmVhcnJvd2xlZnQ7Iiwi4qS9IjoiJmN1bGFycnA7Iiwi4oiqIjoiJmN1cDsiLCLiqYgiOiImY3VwYnJjYXA7Iiwi4qmGIjoiJmN1cGNhcDsiLCLiqYoiOiImY3VwY3VwOyIsIuKKjSI6IiZjdXBkb3Q7Iiwi4qmFIjoiJmN1cG9yOyIsIuKIqu+4gCI6IiZjdXBzOyIsIuKGtyI6IiZjdXJ2ZWFycm93cmlnaHQ7Iiwi4qS8IjoiJmN1cmFycm07Iiwi4ouOIjoiJmN1dmVlOyIsIuKLjyI6IiZjdXdlZDsiLCLCpCI6IiZjdXJyZW47Iiwi4oixIjoiJmN3aW50OyIsIuKMrSI6IiZjeWxjdHk7Iiwi4qWlIjoiJmRIYXI7Iiwi4oCgIjoiJmRhZ2dlcjsiLCLihLgiOiImZGFsZXRoOyIsIuKAkCI6IiZoeXBoZW47Iiwi4qSPIjoiJnJCYXJyOyIsIsSPIjoiJmRjYXJvbjsiLCLQtCI6IiZkY3k7Iiwi4oeKIjoiJmRvd25kb3duYXJyb3dzOyIsIuKptyI6IiZlRERvdDsiLCLCsCI6IiZkZWc7IiwizrQiOiImZGVsdGE7Iiwi4qaxIjoiJmRlbXB0eXY7Iiwi4qW/IjoiJmRmaXNodDsiLCLwnZShIjoiJmRmcjsiLCLimaYiOiImZGlhbXM7Iiwiz50iOiImZ2FtbWFkOyIsIuKLsiI6IiZkaXNpbjsiLCLDtyI6IiZkaXZpZGU7Iiwi4ouHIjoiJmRpdm9ueDsiLCLRkiI6IiZkamN5OyIsIuKMniI6IiZsbGNvcm5lcjsiLCLijI0iOiImZGxjcm9wOyIsJDoiJmRvbGxhcjsiLCLwnZWVIjoiJmRvcGY7Iiwi4omRIjoiJmVEb3Q7Iiwi4oi4IjoiJm1pbnVzZDsiLCLiiJQiOiImcGx1c2RvOyIsIuKKoSI6IiZzZG90YjsiLCLijJ8iOiImbHJjb3JuZXI7Iiwi4oyMIjoiJmRyY3JvcDsiLCLwnZK5IjoiJmRzY3I7Iiwi0ZUiOiImZHNjeTsiLCLip7YiOiImZHNvbDsiLCLEkSI6IiZkc3Ryb2s7Iiwi4ouxIjoiJmR0ZG90OyIsIuKWvyI6IiZ0cmlhbmdsZWRvd247Iiwi4qamIjoiJmR3YW5nbGU7Iiwi0Z8iOiImZHpjeTsiLCLin78iOiImZHppZ3JhcnI7Iiwiw6kiOiImZWFjdXRlOyIsIuKpriI6IiZlYXN0ZXI7IiwixJsiOiImZWNhcm9uOyIsIuKJliI6IiZlcWNpcmM7Iiwiw6oiOiImZWNpcmM7Iiwi4omVIjoiJmVxY29sb247Iiwi0Y0iOiImZWN5OyIsIsSXIjoiJmVkb3Q7Iiwi4omSIjoiJmZhbGxpbmdkb3RzZXE7Iiwi8J2UoiI6IiZlZnI7Iiwi4qqaIjoiJmVnOyIsIsOoIjoiJmVncmF2ZTsiLCLiqpYiOiImZXFzbGFudGd0cjsiLCLiqpgiOiImZWdzZG90OyIsIuKqmSI6IiZlbDsiLCLij6ciOiImZWxpbnRlcnM7Iiwi4oSTIjoiJmVsbDsiLCLiqpUiOiImZXFzbGFudGxlc3M7Iiwi4qqXIjoiJmVsc2RvdDsiLCLEkyI6IiZlbWFjcjsiLCLiiIUiOiImdmFybm90aGluZzsiLCLigIQiOiImZW1zcDEzOyIsIuKAhSI6IiZlbXNwMTQ7Iiwi4oCDIjoiJmVtc3A7IiwixYsiOiImZW5nOyIsIuKAgiI6IiZlbnNwOyIsIsSZIjoiJmVvZ29uOyIsIvCdlZYiOiImZW9wZjsiLCLii5UiOiImZXBhcjsiLCLip6MiOiImZXBhcnNsOyIsIuKpsSI6IiZlcGx1czsiLCLOtSI6IiZlcHNpbG9uOyIsIs+1IjoiJnZhcmVwc2lsb247IiwiPSI6IiZlcXVhbHM7Iiwi4omfIjoiJnF1ZXN0ZXE7Iiwi4qm4IjoiJmVxdWl2REQ7Iiwi4qelIjoiJmVxdnBhcnNsOyIsIuKJkyI6IiZyaXNpbmdkb3RzZXE7Iiwi4qWxIjoiJmVyYXJyOyIsIuKEryI6IiZlc2NyOyIsIs63IjoiJmV0YTsiLCLDsCI6IiZldGg7Iiwiw6siOiImZXVtbDsiLCLigqwiOiImZXVybzsiLCIhIjoiJmV4Y2w7Iiwi0YQiOiImZmN5OyIsIuKZgCI6IiZmZW1hbGU7Iiwi76yDIjoiJmZmaWxpZzsiLCLvrIAiOiImZmZsaWc7Iiwi76yEIjoiJmZmbGxpZzsiLCLwnZSjIjoiJmZmcjsiLCLvrIEiOiImZmlsaWc7IixmajoiJmZqbGlnOyIsIuKZrSI6IiZmbGF0OyIsIu+sgiI6IiZmbGxpZzsiLCLilrEiOiImZmx0bnM7IiwixpIiOiImZm5vZjsiLCLwnZWXIjoiJmZvcGY7Iiwi4ouUIjoiJnBpdGNoZm9yazsiLCLiq5kiOiImZm9ya3Y7Iiwi4qiNIjoiJmZwYXJ0aW50OyIsIsK9IjoiJmhhbGY7Iiwi4oWTIjoiJmZyYWMxMzsiLCLCvCI6IiZmcmFjMTQ7Iiwi4oWVIjoiJmZyYWMxNTsiLCLihZkiOiImZnJhYzE2OyIsIuKFmyI6IiZmcmFjMTg7Iiwi4oWUIjoiJmZyYWMyMzsiLCLihZYiOiImZnJhYzI1OyIsIsK+IjoiJmZyYWMzNDsiLCLihZciOiImZnJhYzM1OyIsIuKFnCI6IiZmcmFjMzg7Iiwi4oWYIjoiJmZyYWM0NTsiLCLihZoiOiImZnJhYzU2OyIsIuKFnSI6IiZmcmFjNTg7Iiwi4oWeIjoiJmZyYWM3ODsiLCLigYQiOiImZnJhc2w7Iiwi4oyiIjoiJnNmcm93bjsiLCLwnZK7IjoiJmZzY3I7Iiwi4qqMIjoiJmd0cmVxcWxlc3M7Iiwix7UiOiImZ2FjdXRlOyIsIs6zIjoiJmdhbW1hOyIsIuKqhiI6IiZndHJhcHByb3g7IiwixJ8iOiImZ2JyZXZlOyIsIsSdIjoiJmdjaXJjOyIsItCzIjoiJmdjeTsiLCLEoSI6IiZnZG90OyIsIuKqqSI6IiZnZXNjYzsiLCLiqoAiOiImZ2VzZG90OyIsIuKqgiI6IiZnZXNkb3RvOyIsIuKqhCI6IiZnZXNkb3RvbDsiLCLii5vvuIAiOiImZ2VzbDsiLCLiqpQiOiImZ2VzbGVzOyIsIvCdlKQiOiImZ2ZyOyIsIuKEtyI6IiZnaW1lbDsiLCLRkyI6IiZnamN5OyIsIuKqkiI6IiZnbEU7Iiwi4qqlIjoiJmdsYTsiLCLiqqQiOiImZ2xqOyIsIuKJqSI6IiZnbmVxcTsiLCLiqooiOiImZ25hcHByb3g7Iiwi4qqIIjoiJmduZXE7Iiwi4ounIjoiJmduc2ltOyIsIvCdlZgiOiImZ29wZjsiLCLihIoiOiImZ3NjcjsiLCLiqo4iOiImZ3NpbWU7Iiwi4qqQIjoiJmdzaW1sOyIsIuKqpyI6IiZndGNjOyIsIuKpuiI6IiZndGNpcjsiLCLii5ciOiImZ3RyZG90OyIsIuKmlSI6IiZndGxQYXI7Iiwi4qm8IjoiJmd0cXVlc3Q7Iiwi4qW4IjoiJmd0cmFycjsiLCLiianvuIAiOiImZ3ZuRTsiLCLRiiI6IiZoYXJkY3k7Iiwi4qWIIjoiJmhhcnJjaXI7Iiwi4oatIjoiJmxlZnRyaWdodHNxdWlnYXJyb3c7Iiwi4oSPIjoiJnBsYW5rdjsiLCLEpSI6IiZoY2lyYzsiLCLimaUiOiImaGVhcnRzdWl0OyIsIuKApiI6IiZtbGRyOyIsIuKKuSI6IiZoZXJjb247Iiwi8J2UpSI6IiZoZnI7Iiwi4qSlIjoiJnNlYXJoazsiLCLipKYiOiImc3dhcmhrOyIsIuKHvyI6IiZob2FycjsiLCLiiLsiOiImaG9tdGh0OyIsIuKGqSI6IiZsYXJyaGs7Iiwi4oaqIjoiJnJhcnJoazsiLCLwnZWZIjoiJmhvcGY7Iiwi4oCVIjoiJmhvcmJhcjsiLCLwnZK9IjoiJmhzY3I7IiwixKciOiImaHN0cm9rOyIsIuKBgyI6IiZoeWJ1bGw7Iiwiw60iOiImaWFjdXRlOyIsIsOuIjoiJmljaXJjOyIsItC4IjoiJmljeTsiLCLQtSI6IiZpZWN5OyIsIsKhIjoiJmlleGNsOyIsIvCdlKYiOiImaWZyOyIsIsOsIjoiJmlncmF2ZTsiLCLiqIwiOiImcWludDsiLCLiiK0iOiImdGludDsiLCLip5wiOiImaWluZmluOyIsIuKEqSI6IiZpaW90YTsiLCLEsyI6IiZpamxpZzsiLCLEqyI6IiZpbWFjcjsiLCLEsSI6IiZpbm9kb3Q7Iiwi4oq3IjoiJmltb2Y7IiwixrUiOiImaW1wZWQ7Iiwi4oSFIjoiJmluY2FyZTsiLCLiiJ4iOiImaW5maW47Iiwi4qedIjoiJmluZmludGllOyIsIuKKuiI6IiZpbnRlcmNhbDsiLCLiqJciOiImaW50bGFyaGs7Iiwi4qi8IjoiJmlwcm9kOyIsItGRIjoiJmlvY3k7IiwixK8iOiImaW9nb247Iiwi8J2VmiI6IiZpb3BmOyIsIs65IjoiJmlvdGE7Iiwiwr8iOiImaXF1ZXN0OyIsIvCdkr4iOiImaXNjcjsiLCLii7kiOiImaXNpbkU7Iiwi4ou1IjoiJmlzaW5kb3Q7Iiwi4ou0IjoiJmlzaW5zOyIsIuKLsyI6IiZpc2luc3Y7IiwixKkiOiImaXRpbGRlOyIsItGWIjoiJml1a2N5OyIsIsOvIjoiJml1bWw7IiwixLUiOiImamNpcmM7Iiwi0LkiOiImamN5OyIsIvCdlKciOiImamZyOyIsIsi3IjoiJmptYXRoOyIsIvCdlZsiOiImam9wZjsiLCLwnZK/IjoiJmpzY3I7Iiwi0ZgiOiImanNlcmN5OyIsItGUIjoiJmp1a2N5OyIsIs66IjoiJmthcHBhOyIsIs+wIjoiJnZhcmthcHBhOyIsIsS3IjoiJmtjZWRpbDsiLCLQuiI6IiZrY3k7Iiwi8J2UqCI6IiZrZnI7IiwixLgiOiIma2dyZWVuOyIsItGFIjoiJmtoY3k7Iiwi0ZwiOiIma2pjeTsiLCLwnZWcIjoiJmtvcGY7Iiwi8J2TgCI6IiZrc2NyOyIsIuKkmyI6IiZsQXRhaWw7Iiwi4qSOIjoiJmxCYXJyOyIsIuKqiyI6IiZsZXNzZXFxZ3RyOyIsIuKloiI6IiZsSGFyOyIsIsS6IjoiJmxhY3V0ZTsiLCLiprQiOiImbGFlbXB0eXY7IiwizrsiOiImbGFtYmRhOyIsIuKmkSI6IiZsYW5nZDsiLCLiqoUiOiImbGVzc2FwcHJveDsiLCLCqyI6IiZsYXF1bzsiLCLipJ8iOiImbGFycmJmczsiLCLipJ0iOiImbGFycmZzOyIsIuKGqyI6IiZsb29wYXJyb3dsZWZ0OyIsIuKkuSI6IiZsYXJycGw7Iiwi4qWzIjoiJmxhcnJzaW07Iiwi4oaiIjoiJmxlZnRhcnJvd3RhaWw7Iiwi4qqrIjoiJmxhdDsiLCLipJkiOiImbGF0YWlsOyIsIuKqrSI6IiZsYXRlOyIsIuKqre+4gCI6IiZsYXRlczsiLCLipIwiOiImbGJhcnI7Iiwi4p2yIjoiJmxiYnJrOyIsInsiOiImbGN1YjsiLCJbIjoiJmxzcWI7Iiwi4qaLIjoiJmxicmtlOyIsIuKmjyI6IiZsYnJrc2xkOyIsIuKmjSI6IiZsYnJrc2x1OyIsIsS+IjoiJmxjYXJvbjsiLCLEvCI6IiZsY2VkaWw7Iiwi0LsiOiImbGN5OyIsIuKktiI6IiZsZGNhOyIsIuKlpyI6IiZsZHJkaGFyOyIsIuKliyI6IiZsZHJ1c2hhcjsiLCLihrIiOiImbGRzaDsiLCLiiaQiOiImbGVxOyIsIuKHhyI6IiZsbGFycjsiLCLii4siOiImbHRocmVlOyIsIuKqqCI6IiZsZXNjYzsiLCLiqb8iOiImbGVzZG90OyIsIuKqgSI6IiZsZXNkb3RvOyIsIuKqgyI6IiZsZXNkb3RvcjsiLCLii5rvuIAiOiImbGVzZzsiLCLiqpMiOiImbGVzZ2VzOyIsIuKLliI6IiZsdGRvdDsiLCLipbwiOiImbGZpc2h0OyIsIvCdlKkiOiImbGZyOyIsIuKqkSI6IiZsZ0U7Iiwi4qWqIjoiJmxoYXJ1bDsiLCLiloQiOiImbGhibGs7Iiwi0ZkiOiImbGpjeTsiLCLipasiOiImbGxoYXJkOyIsIuKXuiI6IiZsbHRyaTsiLCLFgCI6IiZsbWlkb3Q7Iiwi4o6wIjoiJmxtb3VzdGFjaGU7Iiwi4omoIjoiJmxuZXFxOyIsIuKqiSI6IiZsbmFwcHJveDsiLCLiqociOiImbG5lcTsiLCLii6YiOiImbG5zaW07Iiwi4p+sIjoiJmxvYW5nOyIsIuKHvSI6IiZsb2FycjsiLCLin7wiOiImeG1hcDsiLCLihqwiOiImcmFycmxwOyIsIuKmhSI6IiZsb3BhcjsiLCLwnZWdIjoiJmxvcGY7Iiwi4qitIjoiJmxvcGx1czsiLCLiqLQiOiImbG90aW1lczsiLCLiiJciOiImbG93YXN0OyIsIuKXiiI6IiZsb3plbmdlOyIsIigiOiImbHBhcjsiLCLippMiOiImbHBhcmx0OyIsIuKlrSI6IiZscmhhcmQ7Iiwi4oCOIjoiJmxybTsiLCLiir8iOiImbHJ0cmk7Iiwi4oC5IjoiJmxzYXF1bzsiLCLwnZOBIjoiJmxzY3I7Iiwi4qqNIjoiJmxzaW1lOyIsIuKqjyI6IiZsc2ltZzsiLCLigJoiOiImc2JxdW87IiwixYIiOiImbHN0cm9rOyIsIuKqpiI6IiZsdGNjOyIsIuKpuSI6IiZsdGNpcjsiLCLii4kiOiImbHRpbWVzOyIsIuKltiI6IiZsdGxhcnI7Iiwi4qm7IjoiJmx0cXVlc3Q7Iiwi4qaWIjoiJmx0clBhcjsiLCLil4MiOiImdHJpYW5nbGVsZWZ0OyIsIuKliiI6IiZsdXJkc2hhcjsiLCLipaYiOiImbHVydWhhcjsiLCLiiajvuIAiOiImbHZuRTsiLCLiiLoiOiImbUREb3Q7Iiwiwq8iOiImc3RybnM7Iiwi4pmCIjoiJm1hbGU7Iiwi4pygIjoiJm1hbHRlc2U7Iiwi4pauIjoiJm1hcmtlcjsiLCLiqKkiOiImbWNvbW1hOyIsItC8IjoiJm1jeTsiLCLigJQiOiImbWRhc2g7Iiwi8J2UqiI6IiZtZnI7Iiwi4oSnIjoiJm1obzsiLCLCtSI6IiZtaWNybzsiLCLiq7AiOiImbWlkY2lyOyIsIuKIkiI6IiZtaW51czsiLCLiqKoiOiImbWludXNkdTsiLCLiq5siOiImbWxjcDsiLCLiiqciOiImbW9kZWxzOyIsIvCdlZ4iOiImbW9wZjsiLCLwnZOCIjoiJm1zY3I7IiwizrwiOiImbXU7Iiwi4oq4IjoiJm11bWFwOyIsIuKLmcy4IjoiJm5HZzsiLCLiiavig5IiOiImbkd0OyIsIuKHjSI6IiZubEFycjsiLCLih44iOiImbmhBcnI7Iiwi4ouYzLgiOiImbkxsOyIsIuKJquKDkiI6IiZuTHQ7Iiwi4oePIjoiJm5yQXJyOyIsIuKKryI6IiZuVkRhc2g7Iiwi4oquIjoiJm5WZGFzaDsiLCLFhCI6IiZuYWN1dGU7Iiwi4oig4oOSIjoiJm5hbmc7Iiwi4qmwzLgiOiImbmFwRTsiLCLiiYvMuCI6IiZuYXBpZDsiLCLFiSI6IiZuYXBvczsiLCLima4iOiImbmF0dXJhbDsiLCLiqYMiOiImbmNhcDsiLCLFiCI6IiZuY2Fyb247IiwixYYiOiImbmNlZGlsOyIsIuKprcy4IjoiJm5jb25nZG90OyIsIuKpgiI6IiZuY3VwOyIsItC9IjoiJm5jeTsiLCLigJMiOiImbmRhc2g7Iiwi4oeXIjoiJm5lQXJyOyIsIuKkpCI6IiZuZWFyaGs7Iiwi4omQzLgiOiImbmVkb3Q7Iiwi4qSoIjoiJnRvZWE7Iiwi8J2UqyI6IiZuZnI7Iiwi4oauIjoiJm5sZWZ0cmlnaHRhcnJvdzsiLCLiq7IiOiImbmhwYXI7Iiwi4ou8IjoiJm5pczsiLCLii7oiOiImbmlzZDsiLCLRmiI6IiZuamN5OyIsIuKJpsy4IjoiJm5sZXFxOyIsIuKGmiI6IiZubGVmdGFycm93OyIsIuKApSI6IiZubGRyOyIsIvCdlZ8iOiImbm9wZjsiLCLCrCI6IiZub3Q7Iiwi4ou5zLgiOiImbm90aW5FOyIsIuKLtcy4IjoiJm5vdGluZG90OyIsIuKLtyI6IiZub3RpbnZiOyIsIuKLtiI6IiZub3RpbnZjOyIsIuKLviI6IiZub3RuaXZiOyIsIuKLvSI6IiZub3RuaXZjOyIsIuKrveKDpSI6IiZucGFyc2w7Iiwi4oiCzLgiOiImbnBhcnQ7Iiwi4qiUIjoiJm5wb2xpbnQ7Iiwi4oabIjoiJm5yaWdodGFycm93OyIsIuKks8y4IjoiJm5yYXJyYzsiLCLihp3MuCI6IiZucmFycnc7Iiwi8J2TgyI6IiZuc2NyOyIsIuKKhCI6IiZuc3ViOyIsIuKrhcy4IjoiJm5zdWJzZXRlcXE7Iiwi4oqFIjoiJm5zdXA7Iiwi4quGzLgiOiImbnN1cHNldGVxcTsiLCLDsSI6IiZudGlsZGU7Iiwizr0iOiImbnU7IiwiIyI6IiZudW07Iiwi4oSWIjoiJm51bWVybzsiLCLigIciOiImbnVtc3A7Iiwi4oqtIjoiJm52RGFzaDsiLCLipIQiOiImbnZIYXJyOyIsIuKJjeKDkiI6IiZudmFwOyIsIuKKrCI6IiZudmRhc2g7Iiwi4oml4oOSIjoiJm52Z2U7IiwiPuKDkiI6IiZudmd0OyIsIuKnniI6IiZudmluZmluOyIsIuKkgiI6IiZudmxBcnI7Iiwi4omk4oOSIjoiJm52bGU7IiwiPOKDkiI6IiZudmx0OyIsIuKKtOKDkiI6IiZudmx0cmllOyIsIuKkgyI6IiZudnJBcnI7Iiwi4oq14oOSIjoiJm52cnRyaWU7Iiwi4oi84oOSIjoiJm52c2ltOyIsIuKHliI6IiZud0FycjsiLCLipKMiOiImbndhcmhrOyIsIuKkpyI6IiZud25lYXI7Iiwiw7MiOiImb2FjdXRlOyIsIsO0IjoiJm9jaXJjOyIsItC+IjoiJm9jeTsiLCLFkSI6IiZvZGJsYWM7Iiwi4qi4IjoiJm9kaXY7Iiwi4qa8IjoiJm9kc29sZDsiLCLFkyI6IiZvZWxpZzsiLCLipr8iOiImb2ZjaXI7Iiwi8J2UrCI6IiZvZnI7Iiwiy5siOiImb2dvbjsiLCLDsiI6IiZvZ3JhdmU7Iiwi4qeBIjoiJm9ndDsiLCLiprUiOiImb2hiYXI7Iiwi4qa+IjoiJm9sY2lyOyIsIuKmuyI6IiZvbGNyb3NzOyIsIuKngCI6IiZvbHQ7IiwixY0iOiImb21hY3I7Iiwiz4kiOiImb21lZ2E7Iiwizr8iOiImb21pY3JvbjsiLCLiprYiOiImb21pZDsiLCLwnZWgIjoiJm9vcGY7Iiwi4qa3IjoiJm9wYXI7Iiwi4qa5IjoiJm9wZXJwOyIsIuKIqCI6IiZ2ZWU7Iiwi4qmdIjoiJm9yZDsiLCLihLQiOiImb3NjcjsiLCLCqiI6IiZvcmRmOyIsIsK6IjoiJm9yZG07Iiwi4oq2IjoiJm9yaWdvZjsiLCLiqZYiOiImb3JvcjsiLCLiqZciOiImb3JzbG9wZTsiLCLiqZsiOiImb3J2OyIsIsO4IjoiJm9zbGFzaDsiLCLiipgiOiImb3NvbDsiLCLDtSI6IiZvdGlsZGU7Iiwi4qi2IjoiJm90aW1lc2FzOyIsIsO2IjoiJm91bWw7Iiwi4oy9IjoiJm92YmFyOyIsIsK2IjoiJnBhcmE7Iiwi4quzIjoiJnBhcnNpbTsiLCLiq70iOiImcGFyc2w7Iiwi0L8iOiImcGN5OyIsIiUiOiImcGVyY250OyIsIi4iOiImcGVyaW9kOyIsIuKAsCI6IiZwZXJtaWw7Iiwi4oCxIjoiJnBlcnRlbms7Iiwi8J2UrSI6IiZwZnI7Iiwiz4YiOiImcGhpOyIsIs+VIjoiJnZhcnBoaTsiLCLimI4iOiImcGhvbmU7Iiwiz4AiOiImcGk7Iiwiz5YiOiImdmFycGk7Iiwi4oSOIjoiJnBsYW5ja2g7IiwiKyI6IiZwbHVzOyIsIuKooyI6IiZwbHVzYWNpcjsiLCLiqKIiOiImcGx1c2NpcjsiLCLiqKUiOiImcGx1c2R1OyIsIuKpsiI6IiZwbHVzZTsiLCLiqKYiOiImcGx1c3NpbTsiLCLiqKciOiImcGx1c3R3bzsiLCLiqJUiOiImcG9pbnRpbnQ7Iiwi8J2VoSI6IiZwb3BmOyIsIsKjIjoiJnBvdW5kOyIsIuKqsyI6IiZwckU7Iiwi4qq3IjoiJnByZWNhcHByb3g7Iiwi4qq5IjoiJnBybmFwOyIsIuKqtSI6IiZwcm5FOyIsIuKLqCI6IiZwcm5zaW07Iiwi4oCyIjoiJnByaW1lOyIsIuKMriI6IiZwcm9mYWxhcjsiLCLijJIiOiImcHJvZmxpbmU7Iiwi4oyTIjoiJnByb2ZzdXJmOyIsIuKKsCI6IiZwcnVyZWw7Iiwi8J2ThSI6IiZwc2NyOyIsIs+IIjoiJnBzaTsiLCLigIgiOiImcHVuY3NwOyIsIvCdlK4iOiImcWZyOyIsIvCdlaIiOiImcW9wZjsiLCLigZciOiImcXByaW1lOyIsIvCdk4YiOiImcXNjcjsiLCLiqJYiOiImcXVhdGludDsiLCI/IjoiJnF1ZXN0OyIsIuKknCI6IiZyQXRhaWw7Iiwi4qWkIjoiJnJIYXI7Iiwi4oi9zLEiOiImcmFjZTsiLCLFlSI6IiZyYWN1dGU7Iiwi4qazIjoiJnJhZW1wdHl2OyIsIuKmkiI6IiZyYW5nZDsiLCLipqUiOiImcmFuZ2U7IiwiwrsiOiImcmFxdW87Iiwi4qW1IjoiJnJhcnJhcDsiLCLipKAiOiImcmFycmJmczsiLCLipLMiOiImcmFycmM7Iiwi4qSeIjoiJnJhcnJmczsiLCLipYUiOiImcmFycnBsOyIsIuKltCI6IiZyYXJyc2ltOyIsIuKGoyI6IiZyaWdodGFycm93dGFpbDsiLCLihp0iOiImcmlnaHRzcXVpZ2Fycm93OyIsIuKkmiI6IiZyYXRhaWw7Iiwi4oi2IjoiJnJhdGlvOyIsIuKdsyI6IiZyYmJyazsiLCJ9IjoiJnJjdWI7IiwiXSI6IiZyc3FiOyIsIuKmjCI6IiZyYnJrZTsiLCLipo4iOiImcmJya3NsZDsiLCLippAiOiImcmJya3NsdTsiLCLFmSI6IiZyY2Fyb247IiwixZciOiImcmNlZGlsOyIsItGAIjoiJnJjeTsiLCLipLciOiImcmRjYTsiLCLipakiOiImcmRsZGhhcjsiLCLihrMiOiImcmRzaDsiLCLilq0iOiImcmVjdDsiLCLipb0iOiImcmZpc2h0OyIsIvCdlK8iOiImcmZyOyIsIuKlrCI6IiZyaGFydWw7Iiwiz4EiOiImcmhvOyIsIs+xIjoiJnZhcnJobzsiLCLih4kiOiImcnJhcnI7Iiwi4ouMIjoiJnJ0aHJlZTsiLCLLmiI6IiZyaW5nOyIsIuKAjyI6IiZybG07Iiwi4o6xIjoiJnJtb3VzdGFjaGU7Iiwi4quuIjoiJnJubWlkOyIsIuKfrSI6IiZyb2FuZzsiLCLih74iOiImcm9hcnI7Iiwi4qaGIjoiJnJvcGFyOyIsIvCdlaMiOiImcm9wZjsiLCLiqK4iOiImcm9wbHVzOyIsIuKotSI6IiZyb3RpbWVzOyIsIikiOiImcnBhcjsiLCLippQiOiImcnBhcmd0OyIsIuKokiI6IiZycHBvbGludDsiLCLigLoiOiImcnNhcXVvOyIsIvCdk4ciOiImcnNjcjsiLCLii4oiOiImcnRpbWVzOyIsIuKWuSI6IiZ0cmlhbmdsZXJpZ2h0OyIsIuKnjiI6IiZydHJpbHRyaTsiLCLipagiOiImcnVsdWhhcjsiLCLihJ4iOiImcng7IiwixZsiOiImc2FjdXRlOyIsIuKqtCI6IiZzY0U7Iiwi4qq4IjoiJnN1Y2NhcHByb3g7IiwixaEiOiImc2Nhcm9uOyIsIsWfIjoiJnNjZWRpbDsiLCLFnSI6IiZzY2lyYzsiLCLiqrYiOiImc3VjY25lcXE7Iiwi4qq6IjoiJnN1Y2NuYXBwcm94OyIsIuKLqSI6IiZzdWNjbnNpbTsiLCLiqJMiOiImc2Nwb2xpbnQ7Iiwi0YEiOiImc2N5OyIsIuKLhSI6IiZzZG90OyIsIuKppiI6IiZzZG90ZTsiLCLih5giOiImc2VBcnI7IiwiwqciOiImc2VjdDsiLCI7IjoiJnNlbWk7Iiwi4qSpIjoiJnRvc2E7Iiwi4py2IjoiJnNleHQ7Iiwi8J2UsCI6IiZzZnI7Iiwi4pmvIjoiJnNoYXJwOyIsItGJIjoiJnNoY2hjeTsiLCLRiCI6IiZzaGN5OyIsIsKtIjoiJnNoeTsiLCLPgyI6IiZzaWdtYTsiLCLPgiI6IiZ2YXJzaWdtYTsiLCLiqaoiOiImc2ltZG90OyIsIuKqniI6IiZzaW1nOyIsIuKqoCI6IiZzaW1nRTsiLCLiqp0iOiImc2ltbDsiLCLiqp8iOiImc2ltbEU7Iiwi4omGIjoiJnNpbW5lOyIsIuKopCI6IiZzaW1wbHVzOyIsIuKlsiI6IiZzaW1yYXJyOyIsIuKosyI6IiZzbWFzaHA7Iiwi4qekIjoiJnNtZXBhcnNsOyIsIuKMoyI6IiZzc21pbGU7Iiwi4qqqIjoiJnNtdDsiLCLiqqwiOiImc210ZTsiLCLiqqzvuIAiOiImc210ZXM7Iiwi0YwiOiImc29mdGN5OyIsIi8iOiImc29sOyIsIuKnhCI6IiZzb2xiOyIsIuKMvyI6IiZzb2xiYXI7Iiwi8J2VpCI6IiZzb3BmOyIsIuKZoCI6IiZzcGFkZXN1aXQ7Iiwi4oqT77iAIjoiJnNxY2FwczsiLCLiipTvuIAiOiImc3FjdXBzOyIsIvCdk4giOiImc3NjcjsiLCLimIYiOiImc3RhcjsiLCLiioIiOiImc3Vic2V0OyIsIuKrhSI6IiZzdWJzZXRlcXE7Iiwi4qq9IjoiJnN1YmRvdDsiLCLiq4MiOiImc3ViZWRvdDsiLCLiq4EiOiImc3VibXVsdDsiLCLiq4siOiImc3Vic2V0bmVxcTsiLCLiiooiOiImc3Vic2V0bmVxOyIsIuKqvyI6IiZzdWJwbHVzOyIsIuKluSI6IiZzdWJyYXJyOyIsIuKrhyI6IiZzdWJzaW07Iiwi4quVIjoiJnN1YnN1YjsiLCLiq5MiOiImc3Vic3VwOyIsIuKZqiI6IiZzdW5nOyIsIsK5IjoiJnN1cDE7IiwiwrIiOiImc3VwMjsiLCLCsyI6IiZzdXAzOyIsIuKrhiI6IiZzdXBzZXRlcXE7Iiwi4qq+IjoiJnN1cGRvdDsiLCLiq5giOiImc3VwZHN1YjsiLCLiq4QiOiImc3VwZWRvdDsiLCLin4kiOiImc3VwaHNvbDsiLCLiq5ciOiImc3VwaHN1YjsiLCLipbsiOiImc3VwbGFycjsiLCLiq4IiOiImc3VwbXVsdDsiLCLiq4wiOiImc3Vwc2V0bmVxcTsiLCLiiosiOiImc3Vwc2V0bmVxOyIsIuKrgCI6IiZzdXBwbHVzOyIsIuKriCI6IiZzdXBzaW07Iiwi4quUIjoiJnN1cHN1YjsiLCLiq5YiOiImc3Vwc3VwOyIsIuKHmSI6IiZzd0FycjsiLCLipKoiOiImc3dud2FyOyIsIsOfIjoiJnN6bGlnOyIsIuKMliI6IiZ0YXJnZXQ7Iiwiz4QiOiImdGF1OyIsIsWlIjoiJnRjYXJvbjsiLCLFoyI6IiZ0Y2VkaWw7Iiwi0YIiOiImdGN5OyIsIuKMlSI6IiZ0ZWxyZWM7Iiwi8J2UsSI6IiZ0ZnI7IiwizrgiOiImdGhldGE7Iiwiz5EiOiImdmFydGhldGE7Iiwiw74iOiImdGhvcm47Iiwiw5ciOiImdGltZXM7Iiwi4qixIjoiJnRpbWVzYmFyOyIsIuKosCI6IiZ0aW1lc2Q7Iiwi4oy2IjoiJnRvcGJvdDsiLCLiq7EiOiImdG9wY2lyOyIsIvCdlaUiOiImdG9wZjsiLCLiq5oiOiImdG9wZm9yazsiLCLigLQiOiImdHByaW1lOyIsIuKWtSI6IiZ1dHJpOyIsIuKJnCI6IiZ0cmllOyIsIuKXrCI6IiZ0cmlkb3Q7Iiwi4qi6IjoiJnRyaW1pbnVzOyIsIuKouSI6IiZ0cmlwbHVzOyIsIuKnjSI6IiZ0cmlzYjsiLCLiqLsiOiImdHJpdGltZTsiLCLij6IiOiImdHJwZXppdW07Iiwi8J2TiSI6IiZ0c2NyOyIsItGGIjoiJnRzY3k7Iiwi0ZsiOiImdHNoY3k7IiwixaciOiImdHN0cm9rOyIsIuKloyI6IiZ1SGFyOyIsIsO6IjoiJnVhY3V0ZTsiLCLRniI6IiZ1YnJjeTsiLCLFrSI6IiZ1YnJldmU7Iiwiw7siOiImdWNpcmM7Iiwi0YMiOiImdWN5OyIsIsWxIjoiJnVkYmxhYzsiLCLipb4iOiImdWZpc2h0OyIsIvCdlLIiOiImdWZyOyIsIsO5IjoiJnVncmF2ZTsiLCLiloAiOiImdWhibGs7Iiwi4oycIjoiJnVsY29ybmVyOyIsIuKMjyI6IiZ1bGNyb3A7Iiwi4pe4IjoiJnVsdHJpOyIsIsWrIjoiJnVtYWNyOyIsIsWzIjoiJnVvZ29uOyIsIvCdlaYiOiImdW9wZjsiLCLPhSI6IiZ1cHNpbG9uOyIsIuKHiCI6IiZ1dWFycjsiLCLijJ0iOiImdXJjb3JuZXI7Iiwi4oyOIjoiJnVyY3JvcDsiLCLFryI6IiZ1cmluZzsiLCLil7kiOiImdXJ0cmk7Iiwi8J2TiiI6IiZ1c2NyOyIsIuKLsCI6IiZ1dGRvdDsiLCLFqSI6IiZ1dGlsZGU7Iiwiw7wiOiImdXVtbDsiLCLipqciOiImdXdhbmdsZTsiLCLiq6giOiImdkJhcjsiLCLiq6kiOiImdkJhcnY7Iiwi4qacIjoiJnZhbmdydDsiLCLiiorvuIAiOiImdnN1Ym5lOyIsIuKri++4gCI6IiZ2c3VibkU7Iiwi4oqL77iAIjoiJnZzdXBuZTsiLCLiq4zvuIAiOiImdnN1cG5FOyIsItCyIjoiJnZjeTsiLCLiirsiOiImdmVlYmFyOyIsIuKJmiI6IiZ2ZWVlcTsiLCLii64iOiImdmVsbGlwOyIsIvCdlLMiOiImdmZyOyIsIvCdlaciOiImdm9wZjsiLCLwnZOLIjoiJnZzY3I7Iiwi4qaaIjoiJnZ6aWd6YWc7IiwixbUiOiImd2NpcmM7Iiwi4qmfIjoiJndlZGJhcjsiLCLiiZkiOiImd2VkZ2VxOyIsIuKEmCI6IiZ3cDsiLCLwnZS0IjoiJndmcjsiLCLwnZWoIjoiJndvcGY7Iiwi8J2TjCI6IiZ3c2NyOyIsIvCdlLUiOiImeGZyOyIsIs6+IjoiJnhpOyIsIuKLuyI6IiZ4bmlzOyIsIvCdlakiOiImeG9wZjsiLCLwnZONIjoiJnhzY3I7Iiwiw70iOiImeWFjdXRlOyIsItGPIjoiJnlhY3k7IiwixbciOiImeWNpcmM7Iiwi0YsiOiImeWN5OyIsIsKlIjoiJnllbjsiLCLwnZS2IjoiJnlmcjsiLCLRlyI6IiZ5aWN5OyIsIvCdlaoiOiImeW9wZjsiLCLwnZOOIjoiJnlzY3I7Iiwi0Y4iOiImeXVjeTsiLCLDvyI6IiZ5dW1sOyIsIsW6IjoiJnphY3V0ZTsiLCLFviI6IiZ6Y2Fyb247Iiwi0LciOiImemN5OyIsIsW8IjoiJnpkb3Q7IiwizrYiOiImemV0YTsiLCLwnZS3IjoiJnpmcjsiLCLQtiI6IiZ6aGN5OyIsIuKHnSI6IiZ6aWdyYXJyOyIsIvCdlasiOiImem9wZjsiLCLwnZOPIjoiJnpzY3I7Iiwi4oCNIjoiJnp3ajsiLCLigIwiOiImenduajsifX19OwoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vY2FjaGUvaHRtbC1lbnRpdGllcy1ucG0tMi4zLjMtZTBhYWM2NTZhZi05MjUyMTUwMWRhLnppcC9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvbnVtZXJpYy11bmljb2RlLW1hcC5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vY2FjaGUvaHRtbC1lbnRpdGllcy1ucG0tMi4zLjMtZTBhYWM2NTZhZi05MjUyMTUwMWRhLnppcC9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvbnVtZXJpYy11bmljb2RlLW1hcC5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4gewoKInVzZSBzdHJpY3QiOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCAoe3ZhbHVlOnRydWV9KSk7ZXhwb3J0cy5udW1lcmljVW5pY29kZU1hcD17MDo2NTUzMywxMjg6ODM2NCwxMzA6ODIxOCwxMzE6NDAyLDEzMjo4MjIyLDEzMzo4MjMwLDEzNDo4MjI0LDEzNTo4MjI1LDEzNjo3MTAsMTM3OjgyNDAsMTM4OjM1MiwxMzk6ODI0OSwxNDA6MzM4LDE0MjozODEsMTQ1OjgyMTYsMTQ2OjgyMTcsMTQ3OjgyMjAsMTQ4OjgyMjEsMTQ5OjgyMjYsMTUwOjgyMTEsMTUxOjgyMTIsMTUyOjczMiwxNTM6ODQ4MiwxNTQ6MzUzLDE1NTo4MjUwLDE1NjozMzksMTU4OjM4MiwxNTk6Mzc2fTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL2NhY2hlL2h0bWwtZW50aXRpZXMtbnBtLTIuMy4zLWUwYWFjNjU2YWYtOTI1MjE1MDFkYS56aXAvbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL3N1cnJvZ2F0ZS1wYWlycy5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiAuLi8uLi8ueWFybi9jYWNoZS9odG1sLWVudGl0aWVzLW5wbS0yLjMuMy1lMGFhYzY1NmFmLTkyNTIxNTAxZGEuemlwL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9zdXJyb2dhdGUtcGFpcnMuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChfX3VudXNlZF93ZWJwYWNrX21vZHVsZSwgZXhwb3J0cykgPT4gewoKInVzZSBzdHJpY3QiOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCAoe3ZhbHVlOnRydWV9KSk7ZXhwb3J0cy5mcm9tQ29kZVBvaW50PVN0cmluZy5mcm9tQ29kZVBvaW50fHxmdW5jdGlvbihhc3RyYWxDb2RlUG9pbnQpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKE1hdGguZmxvb3IoKGFzdHJhbENvZGVQb2ludC02NTUzNikvMTAyNCkrNTUyOTYsKGFzdHJhbENvZGVQb2ludC02NTUzNiklMTAyNCs1NjMyMCl9O2V4cG9ydHMuZ2V0Q29kZVBvaW50PVN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXQ/ZnVuY3Rpb24oaW5wdXQscG9zaXRpb24pe3JldHVybiBpbnB1dC5jb2RlUG9pbnRBdChwb3NpdGlvbil9OmZ1bmN0aW9uKGlucHV0LHBvc2l0aW9uKXtyZXR1cm4oaW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbiktNTUyOTYpKjEwMjQraW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbisxKS01NjMyMCs2NTUzNn07ZXhwb3J0cy5oaWdoU3Vycm9nYXRlRnJvbT01NTI5NjtleHBvcnRzLmhpZ2hTdXJyb2dhdGVUbz01NjMxOTsKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL2NhY2hlL29iamVjdC1hc3NpZ24tbnBtLTQuMS4xLTEwMDRhZDZkZWMtZmNjNmU0ZWE4Yy56aXAvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiOgovKiEqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiohKlwKICAhKioqIC4uLy4uLy55YXJuL2NhY2hlL29iamVjdC1hc3NpZ24tbnBtLTQuMS4xLTEwMDRhZDZkZWMtZmNjNmU0ZWE4Yy56aXAvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKiovICgobW9kdWxlKSA9PiB7CgoidXNlIHN0cmljdCI7Ci8qCm9iamVjdC1hc3NpZ24KKGMpIFNpbmRyZSBTb3JodXMKQGxpY2Vuc2UgTUlUCiovCgoKLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi8KdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7CnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTsKCmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkgewoJaWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkgewoJCXRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7Cgl9CgoJcmV0dXJuIE9iamVjdCh2YWwpOwp9CgpmdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7Cgl0cnkgewoJCWlmICghT2JqZWN0LmFzc2lnbikgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuCgoJCS8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMTgKCQl2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzCgkJdGVzdDFbNV0gPSAnZGUnOwoJCWlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1JykgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2CgkJdmFyIHRlc3QyID0ge307CgkJZm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7CgkJCXRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTsKCQl9CgkJdmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHsKCQkJcmV0dXJuIHRlc3QyW25dOwoJCX0pOwoJCWlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5JykgewoJCQlyZXR1cm4gZmFsc2U7CgkJfQoKCQkvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2CgkJdmFyIHRlc3QzID0ge307CgkJJ2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7CgkJCXRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7CgkJfSk7CgkJaWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09CgkJCQknYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7CgkJCXJldHVybiBmYWxzZTsKCQl9CgoJCXJldHVybiB0cnVlOwoJfSBjYXRjaCAoZXJyKSB7CgkJLy8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS4KCQlyZXR1cm4gZmFsc2U7Cgl9Cn0KCm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7Cgl2YXIgZnJvbTsKCXZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7Cgl2YXIgc3ltYm9sczsKCglmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykgewoJCWZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTsKCgkJZm9yICh2YXIga2V5IGluIGZyb20pIHsKCQkJaWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkgewoJCQkJdG9ba2V5XSA9IGZyb21ba2V5XTsKCQkJfQoJCX0KCgkJaWYgKGdldE93blByb3BlcnR5U3ltYm9scykgewoJCQlzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pOwoJCQlmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHsKCQkJCWlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHsKCQkJCQl0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07CgkJCQl9CgkJCX0KCQl9Cgl9CgoJcmV0dXJuIHRvOwp9OwoKCi8qKiovIH0pLAoKLyoqKi8gIi4uLy4uLy55YXJuL2NhY2hlL3JlYWN0LW5wbS0xNy4wLjItOTliYTM3ZDkzMS1iMjU0Y2MxN2NlLnppcC9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzIjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vY2FjaGUvcmVhY3QtbnBtLTE3LjAuMi05OWJhMzdkOTMxLWIyNTRjYzE3Y2UuemlwL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMgKioqIQogIFwqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKF9fdW51c2VkX3dlYnBhY2tfbW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSA9PiB7CgoidXNlIHN0cmljdCI7Ci8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yCiAqIHJlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzCiAqCiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLgogKgogKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGUKICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLgogKi8KCgoKaWYgKHRydWUpIHsKICAoZnVuY3Rpb24oKSB7Cid1c2Ugc3RyaWN0JzsKCnZhciBSZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIHJlYWN0ICovICJyZWFjdCIpOwp2YXIgX2Fzc2lnbiA9IF9fd2VicGFja19yZXF1aXJlX18oLyohIG9iamVjdC1hc3NpZ24gKi8gIi4uLy4uLy55YXJuL2NhY2hlL29iamVjdC1hc3NpZ24tbnBtLTQuMS4xLTEwMDRhZDZkZWMtZmNjNmU0ZWE4Yy56aXAvbm9kZV9tb2R1bGVzL29iamVjdC1hc3NpZ24vaW5kZXguanMiKTsKCi8vIEFUVEVOVElPTgovLyBXaGVuIGFkZGluZyBuZXcgc3ltYm9scyB0byB0aGlzIGZpbGUsCi8vIFBsZWFzZSBjb25zaWRlciBhbHNvIGFkZGluZyB0byAncmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL1JlYWN0U3ltYm9scycKLy8gVGhlIFN5bWJvbCB1c2VkIHRvIHRhZyB0aGUgUmVhY3RFbGVtZW50LWxpa2UgdHlwZXMuIElmIHRoZXJlIGlzIG5vIG5hdGl2ZSBTeW1ib2wKLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLgp2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gMHhlYWM3Owp2YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSAweGVhY2E7CmV4cG9ydHMuRnJhZ21lbnQgPSAweGVhY2I7CnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gMHhlYWNjOwp2YXIgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IDB4ZWFkMjsKdmFyIFJFQUNUX1BST1ZJREVSX1RZUEUgPSAweGVhY2Q7CnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSAweGVhY2U7CnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gMHhlYWQwOwp2YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IDB4ZWFkMTsKdmFyIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRSA9IDB4ZWFkODsKdmFyIFJFQUNUX01FTU9fVFlQRSA9IDB4ZWFkMzsKdmFyIFJFQUNUX0xBWllfVFlQRSA9IDB4ZWFkNDsKdmFyIFJFQUNUX0JMT0NLX1RZUEUgPSAweGVhZDk7CnZhciBSRUFDVF9TRVJWRVJfQkxPQ0tfVFlQRSA9IDB4ZWFkYTsKdmFyIFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgPSAweGVhZDU7CnZhciBSRUFDVF9TQ09QRV9UWVBFID0gMHhlYWQ3Owp2YXIgUkVBQ1RfT1BBUVVFX0lEX1RZUEUgPSAweGVhZTA7CnZhciBSRUFDVF9ERUJVR19UUkFDSU5HX01PREVfVFlQRSA9IDB4ZWFlMTsKdmFyIFJFQUNUX09GRlNDUkVFTl9UWVBFID0gMHhlYWUyOwp2YXIgUkVBQ1RfTEVHQUNZX0hJRERFTl9UWVBFID0gMHhlYWUzOwoKaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcikgewogIHZhciBzeW1ib2xGb3IgPSBTeW1ib2wuZm9yOwogIFJFQUNUX0VMRU1FTlRfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuZWxlbWVudCcpOwogIFJFQUNUX1BPUlRBTF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5wb3J0YWwnKTsKICBleHBvcnRzLkZyYWdtZW50ID0gc3ltYm9sRm9yKCdyZWFjdC5mcmFnbWVudCcpOwogIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnN0cmljdF9tb2RlJyk7CiAgUkVBQ1RfUFJPRklMRVJfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QucHJvZmlsZXInKTsKICBSRUFDVF9QUk9WSURFUl9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5wcm92aWRlcicpOwogIFJFQUNUX0NPTlRFWFRfVFlQRSA9IHN5bWJvbEZvcigncmVhY3QuY29udGV4dCcpOwogIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmZvcndhcmRfcmVmJyk7CiAgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IHN5bWJvbEZvcigncmVhY3Quc3VzcGVuc2UnKTsKICBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnN1c3BlbnNlX2xpc3QnKTsKICBSRUFDVF9NRU1PX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0Lm1lbW8nKTsKICBSRUFDVF9MQVpZX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LmxhenknKTsKICBSRUFDVF9CTE9DS19UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5ibG9jaycpOwogIFJFQUNUX1NFUlZFUl9CTE9DS19UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5zZXJ2ZXIuYmxvY2snKTsKICBSRUFDVF9GVU5EQU1FTlRBTF9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5mdW5kYW1lbnRhbCcpOwogIFJFQUNUX1NDT1BFX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0LnNjb3BlJyk7CiAgUkVBQ1RfT1BBUVVFX0lEX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0Lm9wYXF1ZS5pZCcpOwogIFJFQUNUX0RFQlVHX1RSQUNJTkdfTU9ERV9UWVBFID0gc3ltYm9sRm9yKCdyZWFjdC5kZWJ1Z190cmFjZV9tb2RlJyk7CiAgUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgPSBzeW1ib2xGb3IoJ3JlYWN0Lm9mZnNjcmVlbicpOwogIFJFQUNUX0xFR0FDWV9ISURERU5fVFlQRSA9IHN5bWJvbEZvcigncmVhY3QubGVnYWN5X2hpZGRlbicpOwp9Cgp2YXIgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7CnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJzsKZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7CiAgaWYgKG1heWJlSXRlcmFibGUgPT09IG51bGwgfHwgdHlwZW9mIG1heWJlSXRlcmFibGUgIT09ICdvYmplY3QnKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIHZhciBtYXliZUl0ZXJhdG9yID0gTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXTsKCiAgaWYgKHR5cGVvZiBtYXliZUl0ZXJhdG9yID09PSAnZnVuY3Rpb24nKSB7CiAgICByZXR1cm4gbWF5YmVJdGVyYXRvcjsKICB9CgogIHJldHVybiBudWxsOwp9Cgp2YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSBSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDsKCmZ1bmN0aW9uIGVycm9yKGZvcm1hdCkgewogIHsKICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7CiAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07CiAgICB9CgogICAgcHJpbnRXYXJuaW5nKCdlcnJvcicsIGZvcm1hdCwgYXJncyk7CiAgfQp9CgpmdW5jdGlvbiBwcmludFdhcm5pbmcobGV2ZWwsIGZvcm1hdCwgYXJncykgewogIC8vIFdoZW4gY2hhbmdpbmcgdGhpcyBsb2dpYywgeW91IG1pZ2h0IHdhbnQgdG8gYWxzbwogIC8vIHVwZGF0ZSBjb25zb2xlV2l0aFN0YWNrRGV2Lnd3dy5qcyBhcyB3ZWxsLgogIHsKICAgIHZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTsKICAgIHZhciBzdGFjayA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSgpOwoKICAgIGlmIChzdGFjayAhPT0gJycpIHsKICAgICAgZm9ybWF0ICs9ICclcyc7CiAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChbc3RhY2tdKTsKICAgIH0KCiAgICB2YXIgYXJnc1dpdGhGb3JtYXQgPSBhcmdzLm1hcChmdW5jdGlvbiAoaXRlbSkgewogICAgICByZXR1cm4gJycgKyBpdGVtOwogICAgfSk7IC8vIENhcmVmdWw6IFJOIGN1cnJlbnRseSBkZXBlbmRzIG9uIHRoaXMgcHJlZml4CgogICAgYXJnc1dpdGhGb3JtYXQudW5zaGlmdCgnV2FybmluZzogJyArIGZvcm1hdCk7IC8vIFdlIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIHNwcmVhZCAob3IgLmFwcGx5KSBkaXJlY3RseSBiZWNhdXNlIGl0CiAgICAvLyBicmVha3MgSUU5OiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEzNjEwCiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nCgogICAgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZVtsZXZlbF0sIGNvbnNvbGUsIGFyZ3NXaXRoRm9ybWF0KTsKICB9Cn0KCi8vIEZpbHRlciBjZXJ0YWluIERPTSBhdHRyaWJ1dGVzIChlLmcuIHNyYywgaHJlZikgaWYgdGhlaXIgdmFsdWVzIGFyZSBlbXB0eSBzdHJpbmdzLgoKdmFyIGVuYWJsZVNjb3BlQVBJID0gZmFsc2U7IC8vIEV4cGVyaW1lbnRhbCBDcmVhdGUgRXZlbnQgSGFuZGxlIEFQSS4KCmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKSB7CiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgcmV0dXJuIHRydWU7CiAgfSAvLyBOb3RlOiB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyAoZS5nLiBpZiBpdCdzIGEgcG9seWZpbGwpLgoKCiAgaWYgKHR5cGUgPT09IGV4cG9ydHMuRnJhZ21lbnQgfHwgdHlwZSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9ERUJVR19UUkFDSU5HX01PREVfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX1NVU1BFTlNFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFIHx8IHR5cGUgPT09IFJFQUNUX0xFR0FDWV9ISURERU5fVFlQRSB8fCBlbmFibGVTY29wZUFQSSApIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsKSB7CiAgICBpZiAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTEFaWV9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9QUk9WSURFUl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0NPTlRFWFRfVFlQRSB8fCB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZVTkRBTUVOVEFMX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQkxPQ0tfVFlQRSB8fCB0eXBlWzBdID09PSBSRUFDVF9TRVJWRVJfQkxPQ0tfVFlQRSkgewogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CgogIHJldHVybiBmYWxzZTsKfQoKZnVuY3Rpb24gZ2V0V3JhcHBlZE5hbWUob3V0ZXJUeXBlLCBpbm5lclR5cGUsIHdyYXBwZXJOYW1lKSB7CiAgdmFyIGZ1bmN0aW9uTmFtZSA9IGlubmVyVHlwZS5kaXNwbGF5TmFtZSB8fCBpbm5lclR5cGUubmFtZSB8fCAnJzsKICByZXR1cm4gb3V0ZXJUeXBlLmRpc3BsYXlOYW1lIHx8IChmdW5jdGlvbk5hbWUgIT09ICcnID8gd3JhcHBlck5hbWUgKyAiKCIgKyBmdW5jdGlvbk5hbWUgKyAiKSIgOiB3cmFwcGVyTmFtZSk7Cn0KCmZ1bmN0aW9uIGdldENvbnRleHROYW1lKHR5cGUpIHsKICByZXR1cm4gdHlwZS5kaXNwbGF5TmFtZSB8fCAnQ29udGV4dCc7Cn0KCmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUodHlwZSkgewogIGlmICh0eXBlID09IG51bGwpIHsKICAgIC8vIEhvc3Qgcm9vdCwgdGV4dCBub2RlIG9yIGp1c3QgaW52YWxpZCB0eXBlLgogICAgcmV0dXJuIG51bGw7CiAgfQoKICB7CiAgICBpZiAodHlwZW9mIHR5cGUudGFnID09PSAnbnVtYmVyJykgewogICAgICBlcnJvcignUmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBvYmplY3QgaW4gZ2V0Q29tcG9uZW50TmFtZSgpLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTsKICAgIH0KICB9CgogIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IG51bGw7CiAgfQoKICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7CiAgICByZXR1cm4gdHlwZTsKICB9CgogIHN3aXRjaCAodHlwZSkgewogICAgY2FzZSBleHBvcnRzLkZyYWdtZW50OgogICAgICByZXR1cm4gJ0ZyYWdtZW50JzsKCiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOgogICAgICByZXR1cm4gJ1BvcnRhbCc7CgogICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOgogICAgICByZXR1cm4gJ1Byb2ZpbGVyJzsKCiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6CiAgICAgIHJldHVybiAnU3RyaWN0TW9kZSc7CgogICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOgogICAgICByZXR1cm4gJ1N1c3BlbnNlJzsKCiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRToKICAgICAgcmV0dXJuICdTdXNwZW5zZUxpc3QnOwogIH0KCiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JykgewogICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7CiAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOgogICAgICAgIHZhciBjb250ZXh0ID0gdHlwZTsKICAgICAgICByZXR1cm4gZ2V0Q29udGV4dE5hbWUoY29udGV4dCkgKyAnLkNvbnN1bWVyJzsKCiAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRToKICAgICAgICB2YXIgcHJvdmlkZXIgPSB0eXBlOwogICAgICAgIHJldHVybiBnZXRDb250ZXh0TmFtZShwcm92aWRlci5fY29udGV4dCkgKyAnLlByb3ZpZGVyJzsKCiAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRToKICAgICAgICByZXR1cm4gZ2V0V3JhcHBlZE5hbWUodHlwZSwgdHlwZS5yZW5kZXIsICdGb3J3YXJkUmVmJyk7CgogICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRToKICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZSh0eXBlLnR5cGUpOwoKICAgICAgY2FzZSBSRUFDVF9CTE9DS19UWVBFOgogICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lKHR5cGUuX3JlbmRlcik7CgogICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRToKICAgICAgICB7CiAgICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IHR5cGU7CiAgICAgICAgICB2YXIgcGF5bG9hZCA9IGxhenlDb21wb25lbnQuX3BheWxvYWQ7CiAgICAgICAgICB2YXIgaW5pdCA9IGxhenlDb21wb25lbnQuX2luaXQ7CgogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWUoaW5pdChwYXlsb2FkKSk7CiAgICAgICAgICB9IGNhdGNoICh4KSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBudWxsOwp9CgovLyBIZWxwZXJzIHRvIHBhdGNoIGNvbnNvbGUubG9ncyB0byBhdm9pZCBsb2dnaW5nIGR1cmluZyBzaWRlLWVmZmVjdCBmcmVlCi8vIHJlcGxheWluZyBvbiByZW5kZXIgZnVuY3Rpb24uIFRoaXMgY3VycmVudGx5IG9ubHkgcGF0Y2hlcyB0aGUgb2JqZWN0Ci8vIGxhemlseSB3aGljaCB3b24ndCBjb3ZlciBpZiB0aGUgbG9nIGZ1bmN0aW9uIHdhcyBleHRyYWN0ZWQgZWFnZXJseS4KLy8gV2UgY291bGQgYWxzbyBlYWdlcmx5IHBhdGNoIHRoZSBtZXRob2QuCnZhciBkaXNhYmxlZERlcHRoID0gMDsKdmFyIHByZXZMb2c7CnZhciBwcmV2SW5mbzsKdmFyIHByZXZXYXJuOwp2YXIgcHJldkVycm9yOwp2YXIgcHJldkdyb3VwOwp2YXIgcHJldkdyb3VwQ29sbGFwc2VkOwp2YXIgcHJldkdyb3VwRW5kOwoKZnVuY3Rpb24gZGlzYWJsZWRMb2coKSB7fQoKZGlzYWJsZWRMb2cuX19yZWFjdERpc2FibGVkTG9nID0gdHJ1ZTsKZnVuY3Rpb24gZGlzYWJsZUxvZ3MoKSB7CiAgewogICAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHsKICAgICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovCiAgICAgIHByZXZMb2cgPSBjb25zb2xlLmxvZzsKICAgICAgcHJldkluZm8gPSBjb25zb2xlLmluZm87CiAgICAgIHByZXZXYXJuID0gY29uc29sZS53YXJuOwogICAgICBwcmV2RXJyb3IgPSBjb25zb2xlLmVycm9yOwogICAgICBwcmV2R3JvdXAgPSBjb25zb2xlLmdyb3VwOwogICAgICBwcmV2R3JvdXBDb2xsYXBzZWQgPSBjb25zb2xlLmdyb3VwQ29sbGFwc2VkOwogICAgICBwcmV2R3JvdXBFbmQgPSBjb25zb2xlLmdyb3VwRW5kOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE5MDk5CgogICAgICB2YXIgcHJvcHMgPSB7CiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgICAgdmFsdWU6IGRpc2FibGVkTG9nLAogICAgICAgIHdyaXRhYmxlOiB0cnVlCiAgICAgIH07IC8vICRGbG93Rml4TWUgRmxvdyB0aGlua3MgY29uc29sZSBpcyBpbW11dGFibGUuCgogICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjb25zb2xlLCB7CiAgICAgICAgaW5mbzogcHJvcHMsCiAgICAgICAgbG9nOiBwcm9wcywKICAgICAgICB3YXJuOiBwcm9wcywKICAgICAgICBlcnJvcjogcHJvcHMsCiAgICAgICAgZ3JvdXA6IHByb3BzLAogICAgICAgIGdyb3VwQ29sbGFwc2VkOiBwcm9wcywKICAgICAgICBncm91cEVuZDogcHJvcHMKICAgICAgfSk7CiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovCiAgICB9CgogICAgZGlzYWJsZWREZXB0aCsrOwogIH0KfQpmdW5jdGlvbiByZWVuYWJsZUxvZ3MoKSB7CiAgewogICAgZGlzYWJsZWREZXB0aC0tOwoKICAgIGlmIChkaXNhYmxlZERlcHRoID09PSAwKSB7CiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqLwogICAgICB2YXIgcHJvcHMgPSB7CiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgICAgd3JpdGFibGU6IHRydWUKICAgICAgfTsgLy8gJEZsb3dGaXhNZSBGbG93IHRoaW5rcyBjb25zb2xlIGlzIGltbXV0YWJsZS4KCiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNvbnNvbGUsIHsKICAgICAgICBsb2c6IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkxvZwogICAgICAgIH0pLAogICAgICAgIGluZm86IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkluZm8KICAgICAgICB9KSwKICAgICAgICB3YXJuOiBfYXNzaWduKHt9LCBwcm9wcywgewogICAgICAgICAgdmFsdWU6IHByZXZXYXJuCiAgICAgICAgfSksCiAgICAgICAgZXJyb3I6IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkVycm9yCiAgICAgICAgfSksCiAgICAgICAgZ3JvdXA6IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwCiAgICAgICAgfSksCiAgICAgICAgZ3JvdXBDb2xsYXBzZWQ6IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwQ29sbGFwc2VkCiAgICAgICAgfSksCiAgICAgICAgZ3JvdXBFbmQ6IF9hc3NpZ24oe30sIHByb3BzLCB7CiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwRW5kCiAgICAgICAgfSkKICAgICAgfSk7CiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovCiAgICB9CgogICAgaWYgKGRpc2FibGVkRGVwdGggPCAwKSB7CiAgICAgIGVycm9yKCdkaXNhYmxlZERlcHRoIGZlbGwgYmVsb3cgemVyby4gJyArICdUaGlzIGlzIGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTsKICAgIH0KICB9Cn0KCnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjsKdmFyIHByZWZpeDsKZnVuY3Rpb24gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUobmFtZSwgc291cmNlLCBvd25lckZuKSB7CiAgewogICAgaWYgKHByZWZpeCA9PT0gdW5kZWZpbmVkKSB7CiAgICAgIC8vIEV4dHJhY3QgdGhlIFZNIHNwZWNpZmljIHByZWZpeCB1c2VkIGJ5IGVhY2ggbGluZS4KICAgICAgdHJ5IHsKICAgICAgICB0aHJvdyBFcnJvcigpOwogICAgICB9IGNhdGNoICh4KSB7CiAgICAgICAgdmFyIG1hdGNoID0geC5zdGFjay50cmltKCkubWF0Y2goL1xuKCAqKGF0ICk/KS8pOwogICAgICAgIHByZWZpeCA9IG1hdGNoICYmIG1hdGNoWzFdIHx8ICcnOwogICAgICB9CiAgICB9IC8vIFdlIHVzZSB0aGUgcHJlZml4IHRvIGVuc3VyZSBvdXIgc3RhY2tzIGxpbmUgdXAgd2l0aCBuYXRpdmUgc3RhY2sgZnJhbWVzLgoKCiAgICByZXR1cm4gJ1xuJyArIHByZWZpeCArIG5hbWU7CiAgfQp9CnZhciByZWVudHJ5ID0gZmFsc2U7CnZhciBjb21wb25lbnRGcmFtZUNhY2hlOwoKewogIHZhciBQb3NzaWJseVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBNYXA7CiAgY29tcG9uZW50RnJhbWVDYWNoZSA9IG5ldyBQb3NzaWJseVdlYWtNYXAoKTsKfQoKZnVuY3Rpb24gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShmbiwgY29uc3RydWN0KSB7CiAgLy8gSWYgc29tZXRoaW5nIGFza2VkIGZvciBhIHN0YWNrIGluc2lkZSBhIGZha2UgcmVuZGVyLCBpdCBzaG91bGQgZ2V0IGlnbm9yZWQuCiAgaWYgKCFmbiB8fCByZWVudHJ5KSB7CiAgICByZXR1cm4gJyc7CiAgfQoKICB7CiAgICB2YXIgZnJhbWUgPSBjb21wb25lbnRGcmFtZUNhY2hlLmdldChmbik7CgogICAgaWYgKGZyYW1lICE9PSB1bmRlZmluZWQpIHsKICAgICAgcmV0dXJuIGZyYW1lOwogICAgfQogIH0KCiAgdmFyIGNvbnRyb2w7CiAgcmVlbnRyeSA9IHRydWU7CiAgdmFyIHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTsgLy8gJEZsb3dGaXhNZSBJdCBkb2VzIGFjY2VwdCB1bmRlZmluZWQuCgogIEVycm9yLnByZXBhcmVTdGFja1RyYWNlID0gdW5kZWZpbmVkOwogIHZhciBwcmV2aW91c0Rpc3BhdGNoZXI7CgogIHsKICAgIHByZXZpb3VzRGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudDsgLy8gU2V0IHRoZSBkaXNwYXRjaGVyIGluIERFViBiZWNhdXNlIHRoaXMgbWlnaHQgYmUgY2FsbCBpbiB0aGUgcmVuZGVyIGZ1bmN0aW9uCiAgICAvLyBmb3Igd2FybmluZ3MuCgogICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50ID0gbnVsbDsKICAgIGRpc2FibGVMb2dzKCk7CiAgfQoKICB0cnkgewogICAgLy8gVGhpcyBzaG91bGQgdGhyb3cuCiAgICBpZiAoY29uc3RydWN0KSB7CiAgICAgIC8vIFNvbWV0aGluZyBzaG91bGQgYmUgc2V0dGluZyB0aGUgcHJvcHMgaW4gdGhlIGNvbnN0cnVjdG9yLgogICAgICB2YXIgRmFrZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICB0aHJvdyBFcnJvcigpOwogICAgICB9OyAvLyAkRmxvd0ZpeE1lCgoKICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZha2UucHJvdG90eXBlLCAncHJvcHMnLCB7CiAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAvLyBXZSB1c2UgYSB0aHJvd2luZyBzZXR0ZXIgaW5zdGVhZCBvZiBmcm96ZW4gb3Igbm9uLXdyaXRhYmxlIHByb3BzCiAgICAgICAgICAvLyBiZWNhdXNlIHRoYXQgd29uJ3QgdGhyb3cgaW4gYSBub24tc3RyaWN0IG1vZGUgZnVuY3Rpb24uCiAgICAgICAgICB0aHJvdyBFcnJvcigpOwogICAgICAgIH0KICAgICAgfSk7CgogICAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnICYmIFJlZmxlY3QuY29uc3RydWN0KSB7CiAgICAgICAgLy8gV2UgY29uc3RydWN0IGEgZGlmZmVyZW50IGNvbnRyb2wgZm9yIHRoaXMgY2FzZSB0byBpbmNsdWRlIGFueSBleHRyYQogICAgICAgIC8vIGZyYW1lcyBhZGRlZCBieSB0aGUgY29uc3RydWN0IGNhbGwuCiAgICAgICAgdHJ5IHsKICAgICAgICAgIFJlZmxlY3QuY29uc3RydWN0KEZha2UsIFtdKTsKICAgICAgICB9IGNhdGNoICh4KSB7CiAgICAgICAgICBjb250cm9sID0geDsKICAgICAgICB9CgogICAgICAgIFJlZmxlY3QuY29uc3RydWN0KGZuLCBbXSwgRmFrZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIEZha2UuY2FsbCgpOwogICAgICAgIH0gY2F0Y2ggKHgpIHsKICAgICAgICAgIGNvbnRyb2wgPSB4OwogICAgICAgIH0KCiAgICAgICAgZm4uY2FsbChGYWtlLnByb3RvdHlwZSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHRyeSB7CiAgICAgICAgdGhyb3cgRXJyb3IoKTsKICAgICAgfSBjYXRjaCAoeCkgewogICAgICAgIGNvbnRyb2wgPSB4OwogICAgICB9CgogICAgICBmbigpOwogICAgfQogIH0gY2F0Y2ggKHNhbXBsZSkgewogICAgLy8gVGhpcyBpcyBpbmxpbmVkIG1hbnVhbGx5IGJlY2F1c2UgY2xvc3VyZSBkb2Vzbid0IGRvIGl0IGZvciB1cy4KICAgIGlmIChzYW1wbGUgJiYgY29udHJvbCAmJiB0eXBlb2Ygc2FtcGxlLnN0YWNrID09PSAnc3RyaW5nJykgewogICAgICAvLyBUaGlzIGV4dHJhY3RzIHRoZSBmaXJzdCBmcmFtZSBmcm9tIHRoZSBzYW1wbGUgdGhhdCBpc24ndCBhbHNvIGluIHRoZSBjb250cm9sLgogICAgICAvLyBTa2lwcGluZyBvbmUgZnJhbWUgdGhhdCB3ZSBhc3N1bWUgaXMgdGhlIGZyYW1lIHRoYXQgY2FsbHMgdGhlIHR3by4KICAgICAgdmFyIHNhbXBsZUxpbmVzID0gc2FtcGxlLnN0YWNrLnNwbGl0KCdcbicpOwogICAgICB2YXIgY29udHJvbExpbmVzID0gY29udHJvbC5zdGFjay5zcGxpdCgnXG4nKTsKICAgICAgdmFyIHMgPSBzYW1wbGVMaW5lcy5sZW5ndGggLSAxOwogICAgICB2YXIgYyA9IGNvbnRyb2xMaW5lcy5sZW5ndGggLSAxOwoKICAgICAgd2hpbGUgKHMgPj0gMSAmJiBjID49IDAgJiYgc2FtcGxlTGluZXNbc10gIT09IGNvbnRyb2xMaW5lc1tjXSkgewogICAgICAgIC8vIFdlIGV4cGVjdCBhdCBsZWFzdCBvbmUgc3RhY2sgZnJhbWUgdG8gYmUgc2hhcmVkLgogICAgICAgIC8vIFR5cGljYWxseSB0aGlzIHdpbGwgYmUgdGhlIHJvb3QgbW9zdCBvbmUuIEhvd2V2ZXIsIHN0YWNrIGZyYW1lcyBtYXkgYmUKICAgICAgICAvLyBjdXQgb2ZmIGR1ZSB0byBtYXhpbXVtIHN0YWNrIGxpbWl0cy4gSW4gdGhpcyBjYXNlLCBvbmUgbWF5YmUgY3V0IG9mZgogICAgICAgIC8vIGVhcmxpZXIgdGhhbiB0aGUgb3RoZXIuIFdlIGFzc3VtZSB0aGF0IHRoZSBzYW1wbGUgaXMgbG9uZ2VyIG9yIHRoZSBzYW1lCiAgICAgICAgLy8gYW5kIHRoZXJlIGZvciBjdXQgb2ZmIGVhcmxpZXIuIFNvIHdlIHNob3VsZCBmaW5kIHRoZSByb290IG1vc3QgZnJhbWUgaW4KICAgICAgICAvLyB0aGUgc2FtcGxlIHNvbWV3aGVyZSBpbiB0aGUgY29udHJvbC4KICAgICAgICBjLS07CiAgICAgIH0KCiAgICAgIGZvciAoOyBzID49IDEgJiYgYyA+PSAwOyBzLS0sIGMtLSkgewogICAgICAgIC8vIE5leHQgd2UgZmluZCB0aGUgZmlyc3Qgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgd2hpY2ggc2hvdWxkIGJlIHRoZQogICAgICAgIC8vIGZyYW1lIHRoYXQgY2FsbGVkIG91ciBzYW1wbGUgZnVuY3Rpb24gYW5kIHRoZSBjb250cm9sLgogICAgICAgIGlmIChzYW1wbGVMaW5lc1tzXSAhPT0gY29udHJvbExpbmVzW2NdKSB7CiAgICAgICAgICAvLyBJbiBWOCwgdGhlIGZpcnN0IGxpbmUgaXMgZGVzY3JpYmluZyB0aGUgbWVzc2FnZSBidXQgb3RoZXIgVk1zIGRvbid0LgogICAgICAgICAgLy8gSWYgd2UncmUgYWJvdXQgdG8gcmV0dXJuIHRoZSBmaXJzdCBsaW5lLCBhbmQgdGhlIGNvbnRyb2wgaXMgYWxzbyBvbiB0aGUgc2FtZQogICAgICAgICAgLy8gbGluZSwgdGhhdCdzIGEgcHJldHR5IGdvb2QgaW5kaWNhdG9yIHRoYXQgb3VyIHNhbXBsZSB0aHJldyBhdCBzYW1lIGxpbmUgYXMKICAgICAgICAgIC8vIHRoZSBjb250cm9sLiBJLmUuIGJlZm9yZSB3ZSBlbnRlcmVkIHRoZSBzYW1wbGUgZnJhbWUuIFNvIHdlIGlnbm9yZSB0aGlzIHJlc3VsdC4KICAgICAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgcGFzc2VkIGEgY2xhc3MgdG8gZnVuY3Rpb24gY29tcG9uZW50LCBvciBub24tZnVuY3Rpb24uCiAgICAgICAgICBpZiAocyAhPT0gMSB8fCBjICE9PSAxKSB7CiAgICAgICAgICAgIGRvIHsKICAgICAgICAgICAgICBzLS07CiAgICAgICAgICAgICAgYy0tOyAvLyBXZSBtYXkgc3RpbGwgaGF2ZSBzaW1pbGFyIGludGVybWVkaWF0ZSBmcmFtZXMgZnJvbSB0aGUgY29uc3RydWN0IGNhbGwuCiAgICAgICAgICAgICAgLy8gVGhlIG5leHQgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgc2hvdWxkIGJlIG91ciBtYXRjaCB0aG91Z2guCgogICAgICAgICAgICAgIGlmIChjIDwgMCB8fCBzYW1wbGVMaW5lc1tzXSAhPT0gY29udHJvbExpbmVzW2NdKSB7CiAgICAgICAgICAgICAgICAvLyBWOCBhZGRzIGEgIm5ldyIgcHJlZml4IGZvciBuYXRpdmUgY2xhc3Nlcy4gTGV0J3MgcmVtb3ZlIGl0IHRvIG1ha2UgaXQgcHJldHRpZXIuCiAgICAgICAgICAgICAgICB2YXIgX2ZyYW1lID0gJ1xuJyArIHNhbXBsZUxpbmVzW3NdLnJlcGxhY2UoJyBhdCBuZXcgJywgJyBhdCAnKTsKCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRGcmFtZUNhY2hlLnNldChmbiwgX2ZyYW1lKTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSAvLyBSZXR1cm4gdGhlIGxpbmUgd2UgZm91bmQuCgoKICAgICAgICAgICAgICAgIHJldHVybiBfZnJhbWU7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IHdoaWxlIChzID49IDEgJiYgYyA+PSAwKTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9IGZpbmFsbHkgewogICAgcmVlbnRyeSA9IGZhbHNlOwoKICAgIHsKICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50ID0gcHJldmlvdXNEaXNwYXRjaGVyOwogICAgICByZWVuYWJsZUxvZ3MoKTsKICAgIH0KCiAgICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2U7CiAgfSAvLyBGYWxsYmFjayB0byBqdXN0IHVzaW5nIHRoZSBuYW1lIGlmIHdlIGNvdWxkbid0IG1ha2UgaXQgdGhyb3cuCgoKICB2YXIgbmFtZSA9IGZuID8gZm4uZGlzcGxheU5hbWUgfHwgZm4ubmFtZSA6ICcnOwogIHZhciBzeW50aGV0aWNGcmFtZSA9IG5hbWUgPyBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lKSA6ICcnOwoKICB7CiAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIGNvbXBvbmVudEZyYW1lQ2FjaGUuc2V0KGZuLCBzeW50aGV0aWNGcmFtZSk7CiAgICB9CiAgfQoKICByZXR1cm4gc3ludGhldGljRnJhbWU7Cn0KZnVuY3Rpb24gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKGZuLCBzb3VyY2UsIG93bmVyRm4pIHsKICB7CiAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShmbiwgZmFsc2UpOwogIH0KfQoKZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkgewogIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlOwogIHJldHVybiAhIShwcm90b3R5cGUgJiYgcHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpOwp9CgpmdW5jdGlvbiBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYodHlwZSwgc291cmNlLCBvd25lckZuKSB7CgogIGlmICh0eXBlID09IG51bGwpIHsKICAgIHJldHVybiAnJzsKICB9CgogIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgewogICAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZSh0eXBlLCBzaG91bGRDb25zdHJ1Y3QodHlwZSkpOwogICAgfQogIH0KCiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykgewogICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKHR5cGUpOwogIH0KCiAgc3dpdGNoICh0eXBlKSB7CiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6CiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSgnU3VzcGVuc2UnKTsKCiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRToKICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKCdTdXNwZW5zZUxpc3QnKTsKICB9CgogIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHsKICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikgewogICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6CiAgICAgICAgcmV0dXJuIGRlc2NyaWJlRnVuY3Rpb25Db21wb25lbnRGcmFtZSh0eXBlLnJlbmRlcik7CgogICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRToKICAgICAgICAvLyBNZW1vIG1heSBjb250YWluIGFueSBjb21wb25lbnQgdHlwZSBzbyB3ZSByZWN1cnNpdmVseSByZXNvbHZlIGl0LgogICAgICAgIHJldHVybiBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYodHlwZS50eXBlLCBzb3VyY2UsIG93bmVyRm4pOwoKICAgICAgY2FzZSBSRUFDVF9CTE9DS19UWVBFOgogICAgICAgIHJldHVybiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUodHlwZS5fcmVuZGVyKTsKCiAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOgogICAgICAgIHsKICAgICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gdHlwZTsKICAgICAgICAgIHZhciBwYXlsb2FkID0gbGF6eUNvbXBvbmVudC5fcGF5bG9hZDsKICAgICAgICAgIHZhciBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDsKCiAgICAgICAgICB0cnkgewogICAgICAgICAgICAvLyBMYXp5IG1heSBjb250YWluIGFueSBjb21wb25lbnQgdHlwZSBzbyB3ZSByZWN1cnNpdmVseSByZXNvbHZlIGl0LgogICAgICAgICAgICByZXR1cm4gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGluaXQocGF5bG9hZCksIHNvdXJjZSwgb3duZXJGbik7CiAgICAgICAgICB9IGNhdGNoICh4KSB7fQogICAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiAnJzsKfQoKdmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9Owp2YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7CgpmdW5jdGlvbiBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KSB7CiAgewogICAgaWYgKGVsZW1lbnQpIHsKICAgICAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7CiAgICAgIHZhciBzdGFjayA9IGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVihlbGVtZW50LnR5cGUsIGVsZW1lbnQuX3NvdXJjZSwgb3duZXIgPyBvd25lci50eXBlIDogbnVsbCk7CiAgICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuc2V0RXh0cmFTdGFja0ZyYW1lKHN0YWNrKTsKICAgIH0gZWxzZSB7CiAgICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuc2V0RXh0cmFTdGFja0ZyYW1lKG51bGwpOwogICAgfQogIH0KfQoKZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBlbGVtZW50KSB7CiAgewogICAgLy8gJEZsb3dGaXhNZSBUaGlzIGlzIG9rYXkgYnV0IEZsb3cgZG9lc24ndCBrbm93IGl0LgogICAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5KTsKCiAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7CiAgICAgIGlmIChoYXModHlwZVNwZWNzLCB0eXBlU3BlY05hbWUpKSB7CiAgICAgICAgdmFyIGVycm9yJDEgPSB2b2lkIDA7IC8vIFByb3AgdHlwZSB2YWxpZGF0aW9uIG1heSB0aHJvdy4gSW4gY2FzZSB0aGV5IGRvLCB3ZSBkb24ndCB3YW50IHRvCiAgICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LgogICAgICAgIC8vIEFmdGVyIHRoZXNlIGhhdmUgYmVlbiBjbGVhbmVkIHVwLCB3ZSdsbCBsZXQgdGhlbSB0aHJvdy4KCiAgICAgICAgdHJ5IHsKICAgICAgICAgIC8vIFRoaXMgaXMgaW50ZW50aW9uYWxseSBhbiBpbnZhcmlhbnQgdGhhdCBnZXRzIGNhdWdodC4gSXQncyB0aGUgc2FtZQogICAgICAgICAgLy8gYmVoYXZpb3IgYXMgd2l0aG91dCB0aGlzIHN0YXRlbWVudCBleGNlcHQgd2l0aCBhIGJldHRlciBtZXNzYWdlLgogICAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICB2YXIgZXJyID0gRXJyb3IoKGNvbXBvbmVudE5hbWUgfHwgJ1JlYWN0IGNsYXNzJykgKyAnOiAnICsgbG9jYXRpb24gKyAnIHR5cGUgYCcgKyB0eXBlU3BlY05hbWUgKyAnYCBpcyBpbnZhbGlkOyAnICsgJ2l0IG11c3QgYmUgYSBmdW5jdGlvbiwgdXN1YWxseSBmcm9tIHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZSwgYnV0IHJlY2VpdmVkIGAnICsgdHlwZW9mIHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdICsgJ2AuJyArICdUaGlzIG9mdGVuIGhhcHBlbnMgYmVjYXVzZSBvZiB0eXBvcyBzdWNoIGFzIGBQcm9wVHlwZXMuZnVuY3Rpb25gIGluc3RlYWQgb2YgYFByb3BUeXBlcy5mdW5jYC4nKTsKICAgICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7CiAgICAgICAgICAgIHRocm93IGVycjsKICAgICAgICAgIH0KCiAgICAgICAgICBlcnJvciQxID0gdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0odmFsdWVzLCB0eXBlU3BlY05hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBudWxsLCAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnKTsKICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgICAgZXJyb3IkMSA9IGV4OwogICAgICAgIH0KCiAgICAgICAgaWYgKGVycm9yJDEgJiYgIShlcnJvciQxIGluc3RhbmNlb2YgRXJyb3IpKSB7CiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KTsKCiAgICAgICAgICBlcnJvcignJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcycgKyAnIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvciQxKTsKCiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTsKICAgICAgICB9CgogICAgICAgIGlmIChlcnJvciQxIGluc3RhbmNlb2YgRXJyb3IgJiYgIShlcnJvciQxLm1lc3NhZ2UgaW4gbG9nZ2VkVHlwZUZhaWx1cmVzKSkgewogICAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlCiAgICAgICAgICAvLyBzYW1lIGVycm9yLgogICAgICAgICAgbG9nZ2VkVHlwZUZhaWx1cmVzW2Vycm9yJDEubWVzc2FnZV0gPSB0cnVlOwogICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCk7CgogICAgICAgICAgZXJyb3IoJ0ZhaWxlZCAlcyB0eXBlOiAlcycsIGxvY2F0aW9uLCBlcnJvciQxLm1lc3NhZ2UpOwoKICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KG51bGwpOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQoKdmFyIFJlYWN0Q3VycmVudE93bmVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7CnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7CnZhciBSRVNFUlZFRF9QUk9QUyA9IHsKICBrZXk6IHRydWUsCiAgcmVmOiB0cnVlLAogIF9fc2VsZjogdHJ1ZSwKICBfX3NvdXJjZTogdHJ1ZQp9Owp2YXIgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd247CnZhciBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bjsKdmFyIGRpZFdhcm5BYm91dFN0cmluZ1JlZnM7Cgp7CiAgZGlkV2FybkFib3V0U3RyaW5nUmVmcyA9IHt9Owp9CgpmdW5jdGlvbiBoYXNWYWxpZFJlZihjb25maWcpIHsKICB7CiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsICdyZWYnKSkgewogICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdyZWYnKS5nZXQ7CgogICAgICBpZiAoZ2V0dGVyICYmIGdldHRlci5pc1JlYWN0V2FybmluZykgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfQogIH0KCiAgcmV0dXJuIGNvbmZpZy5yZWYgIT09IHVuZGVmaW5lZDsKfQoKZnVuY3Rpb24gaGFzVmFsaWRLZXkoY29uZmlnKSB7CiAgewogICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCAna2V5JykpIHsKICAgICAgdmFyIGdldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY29uZmlnLCAna2V5JykuZ2V0OwoKICAgICAgaWYgKGdldHRlciAmJiBnZXR0ZXIuaXNSZWFjdFdhcm5pbmcpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBjb25maWcua2V5ICE9PSB1bmRlZmluZWQ7Cn0KCmZ1bmN0aW9uIHdhcm5JZlN0cmluZ1JlZkNhbm5vdEJlQXV0b0NvbnZlcnRlZChjb25maWcsIHNlbGYpIHsKICB7CiAgICBpZiAodHlwZW9mIGNvbmZpZy5yZWYgPT09ICdzdHJpbmcnICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgc2VsZiAmJiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnN0YXRlTm9kZSAhPT0gc2VsZikgewogICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC50eXBlKTsKCiAgICAgIGlmICghZGlkV2FybkFib3V0U3RyaW5nUmVmc1tjb21wb25lbnROYW1lXSkgewogICAgICAgIGVycm9yKCdDb21wb25lbnQgIiVzIiBjb250YWlucyB0aGUgc3RyaW5nIHJlZiAiJXMiLiAnICsgJ1N1cHBvcnQgZm9yIHN0cmluZyByZWZzIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiAnICsgJ1RoaXMgY2FzZSBjYW5ub3QgYmUgYXV0b21hdGljYWxseSBjb252ZXJ0ZWQgdG8gYW4gYXJyb3cgZnVuY3Rpb24uICcgKyAnV2UgYXNrIHlvdSB0byBtYW51YWxseSBmaXggdGhpcyBjYXNlIGJ5IHVzaW5nIHVzZVJlZigpIG9yIGNyZWF0ZVJlZigpIGluc3RlYWQuICcgKyAnTGVhcm4gbW9yZSBhYm91dCB1c2luZyByZWZzIHNhZmVseSBoZXJlOiAnICsgJ2h0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9zdHJpY3QtbW9kZS1zdHJpbmctcmVmJywgZ2V0Q29tcG9uZW50TmFtZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpLCBjb25maWcucmVmKTsKCiAgICAgICAgZGlkV2FybkFib3V0U3RyaW5nUmVmc1tjb21wb25lbnROYW1lXSA9IHRydWU7CiAgICAgIH0KICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkgewogIHsKICAgIHZhciB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICghc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24pIHsKICAgICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHRydWU7CgogICAgICAgIGVycm9yKCclczogYGtleWAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9zcGVjaWFsLXByb3BzKScsIGRpc3BsYXlOYW1lKTsKICAgICAgfQogICAgfTsKCiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkuaXNSZWFjdFdhcm5pbmcgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAna2V5JywgewogICAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ0tleSwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9KTsKICB9Cn0KCmZ1bmN0aW9uIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkgewogIHsKICAgIHZhciB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGlmICghc3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24pIHsKICAgICAgICBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHRydWU7CgogICAgICAgIGVycm9yKCclczogYHJlZmAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9zcGVjaWFsLXByb3BzKScsIGRpc3BsYXlOYW1lKTsKICAgICAgfQogICAgfTsKCiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYuaXNSZWFjdFdhcm5pbmcgPSB0cnVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAncmVmJywgewogICAgICBnZXQ6IHdhcm5BYm91dEFjY2Vzc2luZ1JlZiwKICAgICAgY29uZmlndXJhYmxlOiB0cnVlCiAgICB9KTsKICB9Cn0KLyoqCiAqIEZhY3RvcnkgbWV0aG9kIHRvIGNyZWF0ZSBhIG5ldyBSZWFjdCBlbGVtZW50LiBUaGlzIG5vIGxvbmdlciBhZGhlcmVzIHRvCiAqIHRoZSBjbGFzcyBwYXR0ZXJuLCBzbyBkbyBub3QgdXNlIG5ldyB0byBjYWxsIGl0LiBBbHNvLCBpbnN0YW5jZW9mIGNoZWNrCiAqIHdpbGwgbm90IHdvcmsuIEluc3RlYWQgdGVzdCAkJHR5cGVvZiBmaWVsZCBhZ2FpbnN0IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSB0byBjaGVjawogKiBpZiBzb21ldGhpbmcgaXMgYSBSZWFjdCBFbGVtZW50LgogKgogKiBAcGFyYW0geyp9IHR5cGUKICogQHBhcmFtIHsqfSBwcm9wcwogKiBAcGFyYW0geyp9IGtleQogKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlZgogKiBAcGFyYW0geyp9IG93bmVyCiAqIEBwYXJhbSB7Kn0gc2VsZiBBICp0ZW1wb3JhcnkqIGhlbHBlciB0byBkZXRlY3QgcGxhY2VzIHdoZXJlIGB0aGlzYCBpcwogKiBkaWZmZXJlbnQgZnJvbSB0aGUgYG93bmVyYCB3aGVuIFJlYWN0LmNyZWF0ZUVsZW1lbnQgaXMgY2FsbGVkLCBzbyB0aGF0IHdlCiAqIGNhbiB3YXJuLiBXZSB3YW50IHRvIGdldCByaWQgb2Ygb3duZXIgYW5kIHJlcGxhY2Ugc3RyaW5nIGByZWZgcyB3aXRoIGFycm93CiAqIGZ1bmN0aW9ucywgYW5kIGFzIGxvbmcgYXMgYHRoaXNgIGFuZCBvd25lciBhcmUgdGhlIHNhbWUsIHRoZXJlIHdpbGwgYmUgbm8KICogY2hhbmdlIGluIGJlaGF2aW9yLgogKiBAcGFyYW0geyp9IHNvdXJjZSBBbiBhbm5vdGF0aW9uIG9iamVjdCAoYWRkZWQgYnkgYSB0cmFuc3BpbGVyIG9yIG90aGVyd2lzZSkKICogaW5kaWNhdGluZyBmaWxlbmFtZSwgbGluZSBudW1iZXIsIGFuZC9vciBvdGhlciBpbmZvcm1hdGlvbi4KICogQGludGVybmFsCiAqLwoKCnZhciBSZWFjdEVsZW1lbnQgPSBmdW5jdGlvbiAodHlwZSwga2V5LCByZWYsIHNlbGYsIHNvdXJjZSwgb3duZXIsIHByb3BzKSB7CiAgdmFyIGVsZW1lbnQgPSB7CiAgICAvLyBUaGlzIHRhZyBhbGxvd3MgdXMgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyBhcyBhIFJlYWN0IEVsZW1lbnQKICAgICQkdHlwZW9mOiBSRUFDVF9FTEVNRU5UX1RZUEUsCiAgICAvLyBCdWlsdC1pbiBwcm9wZXJ0aWVzIHRoYXQgYmVsb25nIG9uIHRoZSBlbGVtZW50CiAgICB0eXBlOiB0eXBlLAogICAga2V5OiBrZXksCiAgICByZWY6IHJlZiwKICAgIHByb3BzOiBwcm9wcywKICAgIC8vIFJlY29yZCB0aGUgY29tcG9uZW50IHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGlzIGVsZW1lbnQuCiAgICBfb3duZXI6IG93bmVyCiAgfTsKCiAgewogICAgLy8gVGhlIHZhbGlkYXRpb24gZmxhZyBpcyBjdXJyZW50bHkgbXV0YXRpdmUuIFdlIHB1dCBpdCBvbgogICAgLy8gYW4gZXh0ZXJuYWwgYmFja2luZyBzdG9yZSBzbyB0aGF0IHdlIGNhbiBmcmVlemUgdGhlIHdob2xlIG9iamVjdC4KICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW4KICAgIC8vIGNvbW1vbmx5IHVzZWQgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzLgogICAgZWxlbWVudC5fc3RvcmUgPSB7fTsgLy8gVG8gbWFrZSBjb21wYXJpbmcgUmVhY3RFbGVtZW50cyBlYXNpZXIgZm9yIHRlc3RpbmcgcHVycG9zZXMsIHdlIG1ha2UKICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGQKICAgIC8vIGluY2x1ZGUgZXZlcnkgZW52aXJvbm1lbnQgd2UgcnVuIHRlc3RzIGluKSwgc28gdGhlIHRlc3QgZnJhbWV3b3JrCiAgICAvLyBpZ25vcmVzIGl0LgoKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50Ll9zdG9yZSwgJ3ZhbGlkYXRlZCcsIHsKICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSwKICAgICAgZW51bWVyYWJsZTogZmFsc2UsCiAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICB2YWx1ZTogZmFsc2UKICAgIH0pOyAvLyBzZWxmIGFuZCBzb3VyY2UgYXJlIERFViBvbmx5IHByb3BlcnRpZXMuCgogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc2VsZicsIHsKICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSwKICAgICAgZW51bWVyYWJsZTogZmFsc2UsCiAgICAgIHdyaXRhYmxlOiBmYWxzZSwKICAgICAgdmFsdWU6IHNlbGYKICAgIH0pOyAvLyBUd28gZWxlbWVudHMgY3JlYXRlZCBpbiB0d28gZGlmZmVyZW50IHBsYWNlcyBzaG91bGQgYmUgY29uc2lkZXJlZAogICAgLy8gZXF1YWwgZm9yIHRlc3RpbmcgcHVycG9zZXMgYW5kIHRoZXJlZm9yZSB3ZSBoaWRlIGl0IGZyb20gZW51bWVyYXRpb24uCgogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc291cmNlJywgewogICAgICBjb25maWd1cmFibGU6IGZhbHNlLAogICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgICAgd3JpdGFibGU6IGZhbHNlLAogICAgICB2YWx1ZTogc291cmNlCiAgICB9KTsKCiAgICBpZiAoT2JqZWN0LmZyZWV6ZSkgewogICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpOwogICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQpOwogICAgfQogIH0KCiAgcmV0dXJuIGVsZW1lbnQ7Cn07Ci8qKgogKiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZmNzL3B1bGwvMTA3CiAqIEBwYXJhbSB7Kn0gdHlwZQogKiBAcGFyYW0ge29iamVjdH0gcHJvcHMKICogQHBhcmFtIHtzdHJpbmd9IGtleQogKi8KCmZ1bmN0aW9uIGpzeERFVih0eXBlLCBjb25maWcsIG1heWJlS2V5LCBzb3VyY2UsIHNlbGYpIHsKICB7CiAgICB2YXIgcHJvcE5hbWU7IC8vIFJlc2VydmVkIG5hbWVzIGFyZSBleHRyYWN0ZWQKCiAgICB2YXIgcHJvcHMgPSB7fTsKICAgIHZhciBrZXkgPSBudWxsOwogICAgdmFyIHJlZiA9IG51bGw7IC8vIEN1cnJlbnRseSwga2V5IGNhbiBiZSBzcHJlYWQgaW4gYXMgYSBwcm9wLiBUaGlzIGNhdXNlcyBhIHBvdGVudGlhbAogICAgLy8gaXNzdWUgaWYga2V5IGlzIGFsc28gZXhwbGljaXRseSBkZWNsYXJlZCAoaWUuIDxkaXYgey4uLnByb3BzfSBrZXk9IkhpIiAvPgogICAgLy8gb3IgPGRpdiBrZXk9IkhpIiB7Li4ucHJvcHN9IC8+ICkuIFdlIHdhbnQgdG8gZGVwcmVjYXRlIGtleSBzcHJlYWQsCiAgICAvLyBidXQgYXMgYW4gaW50ZXJtZWRpYXJ5IHN0ZXAsIHdlIHdpbGwgdXNlIGpzeERFViBmb3IgZXZlcnl0aGluZyBleGNlcHQKICAgIC8vIDxkaXYgey4uLnByb3BzfSBrZXk9IkhpIiAvPiwgYmVjYXVzZSB3ZSBhcmVuJ3QgY3VycmVudGx5IGFibGUgdG8gdGVsbCBpZgogICAgLy8ga2V5IGlzIGV4cGxpY2l0bHkgZGVjbGFyZWQgdG8gYmUgdW5kZWZpbmVkIG9yIG5vdC4KCiAgICBpZiAobWF5YmVLZXkgIT09IHVuZGVmaW5lZCkgewogICAgICBrZXkgPSAnJyArIG1heWJlS2V5OwogICAgfQoKICAgIGlmIChoYXNWYWxpZEtleShjb25maWcpKSB7CiAgICAgIGtleSA9ICcnICsgY29uZmlnLmtleTsKICAgIH0KCiAgICBpZiAoaGFzVmFsaWRSZWYoY29uZmlnKSkgewogICAgICByZWYgPSBjb25maWcucmVmOwogICAgICB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnLCBzZWxmKTsKICAgIH0gLy8gUmVtYWluaW5nIHByb3BlcnRpZXMgYXJlIGFkZGVkIHRvIGEgbmV3IHByb3BzIG9iamVjdAoKCiAgICBmb3IgKHByb3BOYW1lIGluIGNvbmZpZykgewogICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7CiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTsKICAgICAgfQogICAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHMKCgogICAgaWYgKHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHMpIHsKICAgICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzOwoKICAgICAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHsKICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKGtleSB8fCByZWYpIHsKICAgICAgdmFyIGRpc3BsYXlOYW1lID0gdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgPyB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCAnVW5rbm93bicgOiB0eXBlOwoKICAgICAgaWYgKGtleSkgewogICAgICAgIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7CiAgICAgIH0KCiAgICAgIGlmIChyZWYpIHsKICAgICAgICBkZWZpbmVSZWZQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LCBwcm9wcyk7CiAgfQp9Cgp2YXIgUmVhY3RDdXJyZW50T3duZXIkMSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0Q3VycmVudE93bmVyOwp2YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTsKCmZ1bmN0aW9uIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEoZWxlbWVudCkgewogIHsKICAgIGlmIChlbGVtZW50KSB7CiAgICAgIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyOwogICAgICB2YXIgc3RhY2sgPSBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYoZWxlbWVudC50eXBlLCBlbGVtZW50Ll9zb3VyY2UsIG93bmVyID8gb3duZXIudHlwZSA6IG51bGwpOwogICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuc2V0RXh0cmFTdGFja0ZyYW1lKHN0YWNrKTsKICAgIH0gZWxzZSB7CiAgICAgIFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMS5zZXRFeHRyYVN0YWNrRnJhbWUobnVsbCk7CiAgICB9CiAgfQp9Cgp2YXIgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd247Cgp7CiAgcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24gPSBmYWxzZTsKfQovKioKICogVmVyaWZpZXMgdGhlIG9iamVjdCBpcyBhIFJlYWN0RWxlbWVudC4KICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNpc3ZhbGlkZWxlbWVudAogKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdAogKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGBvYmplY3RgIGlzIGEgUmVhY3RFbGVtZW50LgogKiBAZmluYWwKICovCgpmdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChvYmplY3QpIHsKICB7CiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFOwogIH0KfQoKZnVuY3Rpb24gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkgewogIHsKICAgIGlmIChSZWFjdEN1cnJlbnRPd25lciQxLmN1cnJlbnQpIHsKICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKFJlYWN0Q3VycmVudE93bmVyJDEuY3VycmVudC50eXBlKTsKCiAgICAgIGlmIChuYW1lKSB7CiAgICAgICAgcmV0dXJuICdcblxuQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBuYW1lICsgJ2AuJzsKICAgICAgfQogICAgfQoKICAgIHJldHVybiAnJzsKICB9Cn0KCmZ1bmN0aW9uIGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKHNvdXJjZSkgewogIHsKICAgIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCkgewogICAgICB2YXIgZmlsZU5hbWUgPSBzb3VyY2UuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXC9dLywgJycpOwogICAgICB2YXIgbGluZU51bWJlciA9IHNvdXJjZS5saW5lTnVtYmVyOwogICAgICByZXR1cm4gJ1xuXG5DaGVjayB5b3VyIGNvZGUgYXQgJyArIGZpbGVOYW1lICsgJzonICsgbGluZU51bWJlciArICcuJzsKICAgIH0KCiAgICByZXR1cm4gJyc7CiAgfQp9Ci8qKgogKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yCiAqIG9iamVjdCBrZXlzIGFyZSBub3QgdmFsaWQuIFRoaXMgYWxsb3dzIHVzIHRvIGtlZXAgdHJhY2sgb2YgY2hpbGRyZW4gYmV0d2VlbgogKiB1cGRhdGVzLgogKi8KCgp2YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307CgpmdW5jdGlvbiBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpIHsKICB7CiAgICB2YXIgaW5mbyA9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpOwoKICAgIGlmICghaW5mbykgewogICAgICB2YXIgcGFyZW50TmFtZSA9IHR5cGVvZiBwYXJlbnRUeXBlID09PSAnc3RyaW5nJyA/IHBhcmVudFR5cGUgOiBwYXJlbnRUeXBlLmRpc3BsYXlOYW1lIHx8IHBhcmVudFR5cGUubmFtZTsKCiAgICAgIGlmIChwYXJlbnROYW1lKSB7CiAgICAgICAgaW5mbyA9ICJcblxuQ2hlY2sgdGhlIHRvcC1sZXZlbCByZW5kZXIgY2FsbCB1c2luZyA8IiArIHBhcmVudE5hbWUgKyAiPi4iOwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIGluZm87CiAgfQp9Ci8qKgogKiBXYXJuIGlmIHRoZSBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhbiBleHBsaWNpdCBrZXkgYXNzaWduZWQgdG8gaXQuCiAqIFRoaXMgZWxlbWVudCBpcyBpbiBhbiBhcnJheS4gVGhlIGFycmF5IGNvdWxkIGdyb3cgYW5kIHNocmluayBvciBiZQogKiByZW9yZGVyZWQuIEFsbCBjaGlsZHJlbiB0aGF0IGhhdmVuJ3QgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCBhcmUgcmVxdWlyZWQgdG8KICogaGF2ZSBhICJrZXkiIHByb3BlcnR5IGFzc2lnbmVkIHRvIGl0LiBFcnJvciBzdGF0dXNlcyBhcmUgY2FjaGVkIHNvIGEgd2FybmluZwogKiB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS4KICoKICogQGludGVybmFsCiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGhhdCByZXF1aXJlcyBhIGtleS4KICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGVsZW1lbnQncyBwYXJlbnQncyB0eXBlLgogKi8KCgpmdW5jdGlvbiB2YWxpZGF0ZUV4cGxpY2l0S2V5KGVsZW1lbnQsIHBhcmVudFR5cGUpIHsKICB7CiAgICBpZiAoIWVsZW1lbnQuX3N0b3JlIHx8IGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCB8fCBlbGVtZW50LmtleSAhPSBudWxsKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlOwogICAgdmFyIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8gPSBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpOwoKICAgIGlmIChvd25lckhhc0tleVVzZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10pIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7IC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhCiAgICAvLyBwcm9wZXJ0eSwgaXQgbWF5IGJlIHRoZSBjcmVhdG9yIG9mIHRoZSBjaGlsZCB0aGF0J3MgcmVzcG9uc2libGUgZm9yCiAgICAvLyBhc3NpZ25pbmcgaXQgYSBrZXkuCgogICAgdmFyIGNoaWxkT3duZXIgPSAnJzsKCiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIkMS5jdXJyZW50KSB7CiAgICAgIC8vIEdpdmUgdGhlIGNvbXBvbmVudCB0aGF0IG9yaWdpbmFsbHkgY3JlYXRlZCB0aGlzIGNoaWxkLgogICAgICBjaGlsZE93bmVyID0gIiBJdCB3YXMgcGFzc2VkIGEgY2hpbGQgZnJvbSAiICsgZ2V0Q29tcG9uZW50TmFtZShlbGVtZW50Ll9vd25lci50eXBlKSArICIuIjsKICAgIH0KCiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGVsZW1lbnQpOwoKICAgIGVycm9yKCdFYWNoIGNoaWxkIGluIGEgbGlzdCBzaG91bGQgaGF2ZSBhIHVuaXF1ZSAia2V5IiBwcm9wLicgKyAnJXMlcyBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3dhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLCBjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvLCBjaGlsZE93bmVyKTsKCiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKG51bGwpOwogIH0KfQovKioKICogRW5zdXJlIHRoYXQgZXZlcnkgZWxlbWVudCBlaXRoZXIgaXMgcGFzc2VkIGluIGEgc3RhdGljIGxvY2F0aW9uLCBpbiBhbgogKiBhcnJheSB3aXRoIGFuIGV4cGxpY2l0IGtleXMgcHJvcGVydHkgZGVmaW5lZCwgb3IgaW4gYW4gb2JqZWN0IGxpdGVyYWwKICogd2l0aCB2YWxpZCBrZXkgcHJvcGVydHkuCiAqCiAqIEBpbnRlcm5hbAogKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZSBTdGF0aWNhbGx5IHBhc3NlZCBjaGlsZCBvZiBhbnkgdHlwZS4KICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIG5vZGUncyBwYXJlbnQncyB0eXBlLgogKi8KCgpmdW5jdGlvbiB2YWxpZGF0ZUNoaWxkS2V5cyhub2RlLCBwYXJlbnRUeXBlKSB7CiAgewogICAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0JykgewogICAgICByZXR1cm47CiAgICB9CgogICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZSkpIHsKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTsKCiAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KGNoaWxkKSkgewogICAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShjaGlsZCwgcGFyZW50VHlwZSk7CiAgICAgICAgfQogICAgICB9CiAgICB9IGVsc2UgaWYgKGlzVmFsaWRFbGVtZW50KG5vZGUpKSB7CiAgICAgIC8vIFRoaXMgZWxlbWVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uCiAgICAgIGlmIChub2RlLl9zdG9yZSkgewogICAgICAgIG5vZGUuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAobm9kZSkgewogICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obm9kZSk7CgogICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAvLyBFbnRyeSBpdGVyYXRvcnMgdXNlZCB0byBwcm92aWRlIGltcGxpY2l0IGtleXMsCiAgICAgICAgLy8gYnV0IG5vdyB3ZSBwcmludCBhIHNlcGFyYXRlIHdhcm5pbmcgZm9yIHRoZW0gbGF0ZXIuCiAgICAgICAgaWYgKGl0ZXJhdG9yRm4gIT09IG5vZGUuZW50cmllcykgewogICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpOwogICAgICAgICAgdmFyIHN0ZXA7CgogICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkgewogICAgICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoc3RlcC52YWx1ZSkpIHsKICAgICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUsIHBhcmVudFR5cGUpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQp9Ci8qKgogKiBHaXZlbiBhbiBlbGVtZW50LCB2YWxpZGF0ZSB0aGF0IGl0cyBwcm9wcyBmb2xsb3cgdGhlIHByb3BUeXBlcyBkZWZpbml0aW9uLAogKiBwcm92aWRlZCBieSB0aGUgdHlwZS4KICoKICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQKICovCgoKZnVuY3Rpb24gdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCkgewogIHsKICAgIHZhciB0eXBlID0gZWxlbWVudC50eXBlOwoKICAgIGlmICh0eXBlID09PSBudWxsIHx8IHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBwcm9wVHlwZXM7CgogICAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzOwogICAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgLy8gTm90ZTogTWVtbyBvbmx5IGNoZWNrcyBvdXRlciBwcm9wcyBoZXJlLgogICAgLy8gSW5uZXIgcHJvcHMgYXJlIGNoZWNrZWQgaW4gdGhlIHJlY29uY2lsZXIuCiAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUpKSB7CiAgICAgIHByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzOwogICAgfSBlbHNlIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGlmIChwcm9wVHlwZXMpIHsKICAgICAgLy8gSW50ZW50aW9uYWxseSBpbnNpZGUgdG8gYXZvaWQgdHJpZ2dlcmluZyBsYXp5IGluaXRpYWxpemVyczoKICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKHR5cGUpOwogICAgICBjaGVja1Byb3BUeXBlcyhwcm9wVHlwZXMsIGVsZW1lbnQucHJvcHMsICdwcm9wJywgbmFtZSwgZWxlbWVudCk7CiAgICB9IGVsc2UgaWYgKHR5cGUuUHJvcFR5cGVzICE9PSB1bmRlZmluZWQgJiYgIXByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duKSB7CiAgICAgIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duID0gdHJ1ZTsgLy8gSW50ZW50aW9uYWxseSBpbnNpZGUgdG8gYXZvaWQgdHJpZ2dlcmluZyBsYXp5IGluaXRpYWxpemVyczoKCiAgICAgIHZhciBfbmFtZSA9IGdldENvbXBvbmVudE5hbWUodHlwZSk7CgogICAgICBlcnJvcignQ29tcG9uZW50ICVzIGRlY2xhcmVkIGBQcm9wVHlwZXNgIGluc3RlYWQgb2YgYHByb3BUeXBlc2AuIERpZCB5b3UgbWlzc3BlbGwgdGhlIHByb3BlcnR5IGFzc2lnbm1lbnQ/JywgX25hbWUgfHwgJ1Vua25vd24nKTsKICAgIH0KCiAgICBpZiAodHlwZW9mIHR5cGUuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nICYmICF0eXBlLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCkgewogICAgICBlcnJvcignZ2V0RGVmYXVsdFByb3BzIGlzIG9ubHkgdXNlZCBvbiBjbGFzc2ljIFJlYWN0LmNyZWF0ZUNsYXNzICcgKyAnZGVmaW5pdGlvbnMuIFVzZSBhIHN0YXRpYyBwcm9wZXJ0eSBuYW1lZCBgZGVmYXVsdFByb3BzYCBpbnN0ZWFkLicpOwogICAgfQogIH0KfQovKioKICogR2l2ZW4gYSBmcmFnbWVudCwgdmFsaWRhdGUgdGhhdCBpdCBjYW4gb25seSBiZSBwcm92aWRlZCB3aXRoIGZyYWdtZW50IHByb3BzCiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBmcmFnbWVudAogKi8KCgpmdW5jdGlvbiB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZnJhZ21lbnQpIHsKICB7CiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZyYWdtZW50LnByb3BzKTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGtleSA9IGtleXNbaV07CgogICAgICBpZiAoa2V5ICE9PSAnY2hpbGRyZW4nICYmIGtleSAhPT0gJ2tleScpIHsKICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGZyYWdtZW50KTsKCiAgICAgICAgZXJyb3IoJ0ludmFsaWQgcHJvcCBgJXNgIHN1cHBsaWVkIHRvIGBSZWFjdC5GcmFnbWVudGAuICcgKyAnUmVhY3QuRnJhZ21lbnQgY2FuIG9ubHkgaGF2ZSBga2V5YCBhbmQgYGNoaWxkcmVuYCBwcm9wcy4nLCBrZXkpOwoKICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKG51bGwpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CgogICAgaWYgKGZyYWdtZW50LnJlZiAhPT0gbnVsbCkgewogICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGZyYWdtZW50KTsKCiAgICAgIGVycm9yKCdJbnZhbGlkIGF0dHJpYnV0ZSBgcmVmYCBzdXBwbGllZCB0byBgUmVhY3QuRnJhZ21lbnRgLicpOwoKICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQkMShudWxsKTsKICAgIH0KICB9Cn0KCmZ1bmN0aW9uIGpzeFdpdGhWYWxpZGF0aW9uKHR5cGUsIHByb3BzLCBrZXksIGlzU3RhdGljQ2hpbGRyZW4sIHNvdXJjZSwgc2VsZikgewogIHsKICAgIHZhciB2YWxpZFR5cGUgPSBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSk7IC8vIFdlIHdhcm4gaW4gdGhpcyBjYXNlIGJ1dCBkb24ndCB0aHJvdy4gV2UgZXhwZWN0IHRoZSBlbGVtZW50IGNyZWF0aW9uIHRvCiAgICAvLyBzdWNjZWVkIGFuZCB0aGVyZSB3aWxsIGxpa2VseSBiZSBlcnJvcnMgaW4gcmVuZGVyLgoKICAgIGlmICghdmFsaWRUeXBlKSB7CiAgICAgIHZhciBpbmZvID0gJyc7CgogICAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JyAmJiB0eXBlICE9PSBudWxsICYmIE9iamVjdC5rZXlzKHR5cGUpLmxlbmd0aCA9PT0gMCkgewogICAgICAgIGluZm8gKz0gJyBZb3UgbGlrZWx5IGZvcmdvdCB0byBleHBvcnQgeW91ciBjb21wb25lbnQgZnJvbSB0aGUgZmlsZSAnICsgIml0J3MgZGVmaW5lZCBpbiwgb3IgeW91IG1pZ2h0IGhhdmUgbWl4ZWQgdXAgZGVmYXVsdCBhbmQgbmFtZWQgaW1wb3J0cy4iOwogICAgICB9CgogICAgICB2YXIgc291cmNlSW5mbyA9IGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtKHNvdXJjZSk7CgogICAgICBpZiAoc291cmNlSW5mbykgewogICAgICAgIGluZm8gKz0gc291cmNlSW5mbzsKICAgICAgfSBlbHNlIHsKICAgICAgICBpbmZvICs9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpOwogICAgICB9CgogICAgICB2YXIgdHlwZVN0cmluZzsKCiAgICAgIGlmICh0eXBlID09PSBudWxsKSB7CiAgICAgICAgdHlwZVN0cmluZyA9ICdudWxsJzsKICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHR5cGUpKSB7CiAgICAgICAgdHlwZVN0cmluZyA9ICdhcnJheSc7CiAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRSkgewogICAgICAgIHR5cGVTdHJpbmcgPSAiPCIgKyAoZ2V0Q29tcG9uZW50TmFtZSh0eXBlLnR5cGUpIHx8ICdVbmtub3duJykgKyAiIC8+IjsKICAgICAgICBpbmZvID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBleHBvcnQgYSBKU1ggbGl0ZXJhbCBpbnN0ZWFkIG9mIGEgY29tcG9uZW50Pyc7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHlwZVN0cmluZyA9IHR5cGVvZiB0eXBlOwogICAgICB9CgogICAgICBlcnJvcignUmVhY3QuanN4OiB0eXBlIGlzIGludmFsaWQgLS0gZXhwZWN0ZWQgYSBzdHJpbmcgKGZvciAnICsgJ2J1aWx0LWluIGNvbXBvbmVudHMpIG9yIGEgY2xhc3MvZnVuY3Rpb24gKGZvciBjb21wb3NpdGUgJyArICdjb21wb25lbnRzKSBidXQgZ290OiAlcy4lcycsIHR5cGVTdHJpbmcsIGluZm8pOwogICAgfQoKICAgIHZhciBlbGVtZW50ID0ganN4REVWKHR5cGUsIHByb3BzLCBrZXksIHNvdXJjZSwgc2VsZik7IC8vIFRoZSByZXN1bHQgY2FuIGJlIG51bGxpc2ggaWYgYSBtb2NrIG9yIGEgY3VzdG9tIGZ1bmN0aW9uIGlzIHVzZWQuCiAgICAvLyBUT0RPOiBEcm9wIHRoaXMgd2hlbiB0aGVzZSBhcmUgbm8gbG9uZ2VyIGFsbG93ZWQgYXMgdGhlIHR5cGUgYXJndW1lbnQuCgogICAgaWYgKGVsZW1lbnQgPT0gbnVsbCkgewogICAgICByZXR1cm4gZWxlbWVudDsKICAgIH0gLy8gU2tpcCBrZXkgd2FybmluZyBpZiB0aGUgdHlwZSBpc24ndCB2YWxpZCBzaW5jZSBvdXIga2V5IHZhbGlkYXRpb24gbG9naWMKICAgIC8vIGRvZXNuJ3QgZXhwZWN0IGEgbm9uLXN0cmluZy9mdW5jdGlvbiB0eXBlIGFuZCBjYW4gdGhyb3cgY29uZnVzaW5nIGVycm9ycy4KICAgIC8vIFdlIGRvbid0IHdhbnQgZXhjZXB0aW9uIGJlaGF2aW9yIHRvIGRpZmZlciBiZXR3ZWVuIGRldiBhbmQgcHJvZC4KICAgIC8vIChSZW5kZXJpbmcgd2lsbCB0aHJvdyB3aXRoIGEgaGVscGZ1bCBtZXNzYWdlIGFuZCBhcyBzb29uIGFzIHRoZSB0eXBlIGlzCiAgICAvLyBmaXhlZCwgdGhlIGtleSB3YXJuaW5ncyB3aWxsIGFwcGVhci4pCgoKICAgIGlmICh2YWxpZFR5cGUpIHsKICAgICAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW47CgogICAgICBpZiAoY2hpbGRyZW4gIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChpc1N0YXRpY0NoaWxkcmVuKSB7CiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGNoaWxkcmVuW2ldLCB0eXBlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKE9iamVjdC5mcmVlemUpIHsKICAgICAgICAgICAgICBPYmplY3QuZnJlZXplKGNoaWxkcmVuKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZXJyb3IoJ1JlYWN0LmpzeDogU3RhdGljIGNoaWxkcmVuIHNob3VsZCBhbHdheXMgYmUgYW4gYXJyYXkuICcgKyAnWW91IGFyZSBsaWtlbHkgZXhwbGljaXRseSBjYWxsaW5nIFJlYWN0LmpzeHMgb3IgUmVhY3QuanN4REVWLiAnICsgJ1VzZSB0aGUgQmFiZWwgdHJhbnNmb3JtIGluc3RlYWQuJyk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGNoaWxkcmVuLCB0eXBlKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZiAodHlwZSA9PT0gZXhwb3J0cy5GcmFnbWVudCkgewogICAgICB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZWxlbWVudCk7CiAgICB9IGVsc2UgewogICAgICB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KTsKICAgIH0KCiAgICByZXR1cm4gZWxlbWVudDsKICB9Cn0gLy8gVGhlc2UgdHdvIGZ1bmN0aW9ucyBleGlzdCB0byBzdGlsbCBnZXQgY2hpbGQgd2FybmluZ3MgaW4gZGV2Ci8vIGV2ZW4gd2l0aCB0aGUgcHJvZCB0cmFuc2Zvcm0uIFRoaXMgbWVhbnMgdGhhdCBqc3hERVYgaXMgcHVyZWx5Ci8vIG9wdC1pbiBiZWhhdmlvciBmb3IgYmV0dGVyIG1lc3NhZ2VzIGJ1dCB0aGF0IHdlIHdvbid0IHN0b3AKLy8gZ2l2aW5nIHlvdSB3YXJuaW5ncyBpZiB5b3UgdXNlIHByb2R1Y3Rpb24gYXBpcy4KCmZ1bmN0aW9uIGpzeFdpdGhWYWxpZGF0aW9uU3RhdGljKHR5cGUsIHByb3BzLCBrZXkpIHsKICB7CiAgICByZXR1cm4ganN4V2l0aFZhbGlkYXRpb24odHlwZSwgcHJvcHMsIGtleSwgdHJ1ZSk7CiAgfQp9CmZ1bmN0aW9uIGpzeFdpdGhWYWxpZGF0aW9uRHluYW1pYyh0eXBlLCBwcm9wcywga2V5KSB7CiAgewogICAgcmV0dXJuIGpzeFdpdGhWYWxpZGF0aW9uKHR5cGUsIHByb3BzLCBrZXksIGZhbHNlKTsKICB9Cn0KCnZhciBqc3ggPSAganN4V2l0aFZhbGlkYXRpb25EeW5hbWljIDsgLy8gd2UgbWF5IHdhbnQgdG8gc3BlY2lhbCBjYXNlIGpzeHMgaW50ZXJuYWxseSB0byB0YWtlIGFkdmFudGFnZSBvZiBzdGF0aWMgY2hpbGRyZW4uCi8vIGZvciBub3cgd2UgY2FuIHNoaXAgaWRlbnRpY2FsIHByb2QgZnVuY3Rpb25zCgp2YXIganN4cyA9ICBqc3hXaXRoVmFsaWRhdGlvblN0YXRpYyA7CgpleHBvcnRzLmpzeCA9IGpzeDsKZXhwb3J0cy5qc3hzID0ganN4czsKICB9KSgpOwp9CgoKLyoqKi8gfSksCgovKioqLyAiLi4vLi4vLnlhcm4vY2FjaGUvcmVhY3QtbnBtLTE3LjAuMi05OWJhMzdkOTMxLWIyNTRjYzE3Y2UuemlwL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyI6Ci8qISoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiEqXAogICEqKiogLi4vLi4vLnlhcm4vY2FjaGUvcmVhY3QtbnBtLTE3LjAuMi05OWJhMzdkOTMxLWIyNTRjYzE3Y2UuemlwL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyAqKiohCiAgXCoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKi8gKChtb2R1bGUsIF9fdW51c2VkX3dlYnBhY2tfZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgPT4gewoKInVzZSBzdHJpY3QiOwoKCmlmIChmYWxzZSkge30gZWxzZSB7CiAgbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKC8qISAuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcyAqLyAiLi4vLi4vLnlhcm4vY2FjaGUvcmVhY3QtbnBtLTE3LjAuMi05OWJhMzdkOTMxLWIyNTRjYzE3Y2UuemlwL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMiKTsKfQoKCi8qKiovIH0pLAoKLyoqKi8gInJlYWN0IjoKLyohKioqKioqKioqKioqKioqKioqKioqKioqISpcCiAgISoqKiBleHRlcm5hbCAicmVhY3QiICoqKiEKICBcKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqLyAoKG1vZHVsZSkgPT4gewoKInVzZSBzdHJpY3QiOwptb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcmVhY3RfXzsKCi8qKiovIH0pCgovKioqKioqLyAJfSk7Ci8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKiovIAkvLyBUaGUgbW9kdWxlIGNhY2hlCi8qKioqKiovIAl2YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307Ci8qKioqKiovIAkKLyoqKioqKi8gCS8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uCi8qKioqKiovIAlmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7Ci8qKioqKiovIAkJLy8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlCi8qKioqKiovIAkJdmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07Ci8qKioqKiovIAkJaWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7Ci8qKioqKiovIAkJCWlmIChjYWNoZWRNb2R1bGUuZXJyb3IgIT09IHVuZGVmaW5lZCkgdGhyb3cgY2FjaGVkTW9kdWxlLmVycm9yOwovKioqKioqLyAJCQlyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCS8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpCi8qKioqKiovIAkJdmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7Ci8qKioqKiovIAkJCS8vIG5vIG1vZHVsZS5pZCBuZWVkZWQKLyoqKioqKi8gCQkJLy8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWQKLyoqKioqKi8gCQkJZXhwb3J0czoge30KLyoqKioqKi8gCQl9OwovKioqKioqLyAJCi8qKioqKiovIAkJLy8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uCi8qKioqKiovIAkJdHJ5IHsKLyoqKioqKi8gCQkJdmFyIGV4ZWNPcHRpb25zID0geyBpZDogbW9kdWxlSWQsIG1vZHVsZTogbW9kdWxlLCBmYWN0b3J5OiBfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXSwgcmVxdWlyZTogX193ZWJwYWNrX3JlcXVpcmVfXyB9OwovKioqKioqLyAJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmkuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVyKSB7IGhhbmRsZXIoZXhlY09wdGlvbnMpOyB9KTsKLyoqKioqKi8gCQkJbW9kdWxlID0gZXhlY09wdGlvbnMubW9kdWxlOwovKioqKioqLyAJCQlleGVjT3B0aW9ucy5mYWN0b3J5LmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGV4ZWNPcHRpb25zLnJlcXVpcmUpOwovKioqKioqLyAJCX0gY2F0Y2goZSkgewovKioqKioqLyAJCQltb2R1bGUuZXJyb3IgPSBlOwovKioqKioqLyAJCQl0aHJvdyBlOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQovKioqKioqLyAJCS8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlCi8qKioqKiovIAkJcmV0dXJuIG1vZHVsZS5leHBvcnRzOwovKioqKioqLyAJfQovKioqKioqLyAJCi8qKioqKiovIAkvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKQovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXy5tID0gX193ZWJwYWNrX21vZHVsZXNfXzsKLyoqKioqKi8gCQovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGUKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18uYyA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfXzsKLyoqKioqKi8gCQovKioqKioqLyAJLy8gZXhwb3NlIHRoZSBtb2R1bGUgZXhlY3V0aW9uIGludGVyY2VwdG9yCi8qKioqKiovIAlfX3dlYnBhY2tfcmVxdWlyZV9fLmkgPSBbXTsKLyoqKioqKi8gCQovKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwovKioqKioqLyAJLyogd2VicGFjay9ydW50aW1lL19fc3lzdGVtX2NvbnRleHRfXyAqLwovKioqKioqLyAJKCgpID0+IHsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLnkgPSBfX3N5c3RlbV9jb250ZXh0X187Ci8qKioqKiovIAl9KSgpOwovKioqKioqLyAJCi8qKioqKiovIAkvKiB3ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCAqLwovKioqKioqLyAJKCgpID0+IHsKLyoqKioqKi8gCQkvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlcwovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHsKLyoqKioqKi8gCQkJdmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/Ci8qKioqKiovIAkJCQkoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDoKLyoqKioqKi8gCQkJCSgpID0+IChtb2R1bGUpOwovKioqKioqLyAJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTsKLyoqKioqKi8gCQkJcmV0dXJuIGdldHRlcjsKLyoqKioqKi8gCQl9OwovKioqKioqLyAJfSkoKTsKLyoqKioqKi8gCQovKioqKioqLyAJLyogd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzICovCi8qKioqKiovIAkoKCkgPT4gewovKioqKioqLyAJCS8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHMKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4gewovKioqKioqLyAJCQlmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7Ci8qKioqKiovIAkJCQlpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHsKLyoqKioqKi8gCQkJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pOwovKioqKioqLyAJCQkJfQovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCX0pKCk7Ci8qKioqKiovIAkKLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCB1cGRhdGUgY2h1bmsgZmlsZW5hbWUgKi8KLyoqKioqKi8gCSgoKSA9PiB7Ci8qKioqKiovIAkJLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYWxsIGNodW5rcwovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uaHUgPSAoY2h1bmtJZCkgPT4gewovKioqKioqLyAJCQkvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGUKLyoqKioqKi8gCQkJcmV0dXJuICIiICsgY2h1bmtJZCArICIuIiArIF9fd2VicGFja19yZXF1aXJlX18uaCgpICsgIi5ob3QtdXBkYXRlLmpzIjsKLyoqKioqKi8gCQl9OwovKioqKioqLyAJfSkoKTsKLyoqKioqKi8gCQovKioqKioqLyAJLyogd2VicGFjay9ydW50aW1lL2dldCB1cGRhdGUgbWFuaWZlc3QgZmlsZW5hbWUgKi8KLyoqKioqKi8gCSgoKSA9PiB7Ci8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGID0gKCkgPT4gKCJtYWluLiIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArICIuaG90LXVwZGF0ZS5qc29uIik7Ci8qKioqKiovIAl9KSgpOwovKioqKioqLyAJCi8qKioqKiovIAkvKiB3ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2ggKi8KLyoqKioqKi8gCSgoKSA9PiB7Ci8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5oID0gKCkgPT4gKCI1MTBkOTQ1OWNiMTcyNzliYmEyMCIpCi8qKioqKiovIAl9KSgpOwovKioqKioqLyAJCi8qKioqKiovIAkvKiB3ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kICovCi8qKioqKiovIAkoKCkgPT4gewovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkKLyoqKioqKi8gCX0pKCk7Ci8qKioqKiovIAkKLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9sb2FkIHNjcmlwdCAqLwovKioqKioqLyAJKCgpID0+IHsKLyoqKioqKi8gCQl2YXIgaW5Qcm9ncmVzcyA9IHt9OwovKioqKioqLyAJCXZhciBkYXRhV2VicGFja1ByZWZpeCA9ICJ1dGlsczI6IjsKLyoqKioqKi8gCQkvLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWcKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmwgPSAodXJsLCBkb25lLCBrZXksIGNodW5rSWQpID0+IHsKLyoqKioqKi8gCQkJaWYoaW5Qcm9ncmVzc1t1cmxdKSB7IGluUHJvZ3Jlc3NbdXJsXS5wdXNoKGRvbmUpOyByZXR1cm47IH0KLyoqKioqKi8gCQkJdmFyIHNjcmlwdCwgbmVlZEF0dGFjaDsKLyoqKioqKi8gCQkJaWYoa2V5ICE9PSB1bmRlZmluZWQpIHsKLyoqKioqKi8gCQkJCXZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoInNjcmlwdCIpOwovKioqKioqLyAJCQkJZm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHsKLyoqKioqKi8gCQkJCQl2YXIgcyA9IHNjcmlwdHNbaV07Ci8qKioqKiovIAkJCQkJaWYocy5nZXRBdHRyaWJ1dGUoInNyYyIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZSgiZGF0YS13ZWJwYWNrIikgPT0gZGF0YVdlYnBhY2tQcmVmaXggKyBrZXkpIHsgc2NyaXB0ID0gczsgYnJlYWs7IH0KLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQlpZighc2NyaXB0KSB7Ci8qKioqKiovIAkJCQluZWVkQXR0YWNoID0gdHJ1ZTsKLyoqKioqKi8gCQkJCXNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwovKioqKioqLyAJCQovKioqKioqLyAJCQkJc2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnOwovKioqKioqLyAJCQkJc2NyaXB0LnRpbWVvdXQgPSAxMjA7Ci8qKioqKiovIAkJCQlpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykgewovKioqKioqLyAJCQkJCXNjcmlwdC5zZXRBdHRyaWJ1dGUoIm5vbmNlIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7Ci8qKioqKiovIAkJCQl9Ci8qKioqKiovIAkJCQlzY3JpcHQuc2V0QXR0cmlidXRlKCJkYXRhLXdlYnBhY2siLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7Ci8qKioqKiovIAkJCQlzY3JpcHQuc3JjID0gdXJsOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJCWluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTsKLyoqKioqKi8gCQkJdmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHsKLyoqKioqKi8gCQkJCS8vIGF2b2lkIG1lbSBsZWFrcyBpbiBJRS4KLyoqKioqKi8gCQkJCXNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7Ci8qKioqKiovIAkJCQljbGVhclRpbWVvdXQodGltZW91dCk7Ci8qKioqKiovIAkJCQl2YXIgZG9uZUZucyA9IGluUHJvZ3Jlc3NbdXJsXTsKLyoqKioqKi8gCQkJCWRlbGV0ZSBpblByb2dyZXNzW3VybF07Ci8qKioqKiovIAkJCQlzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpOwovKioqKioqLyAJCQkJZG9uZUZucyAmJiBkb25lRm5zLmZvckVhY2goKGZuKSA9PiAoZm4oZXZlbnQpKSk7Ci8qKioqKiovIAkJCQlpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7Ci8qKioqKiovIAkJCX0KLyoqKioqKi8gCQkJdmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCB1bmRlZmluZWQsIHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KSwgMTIwMDAwKTsKLyoqKioqKi8gCQkJc2NyaXB0Lm9uZXJyb3IgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9uZXJyb3IpOwovKioqKioqLyAJCQlzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmxvYWQpOwovKioqKioqLyAJCQluZWVkQXR0YWNoICYmIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKLyoqKioqKi8gCQl9OwovKioqKioqLyAJfSkoKTsKLyoqKioqKi8gCQovKioqKioqLyAJLyogd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCAqLwovKioqKioqLyAJKCgpID0+IHsKLyoqKioqKi8gCQkvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzCi8qKioqKiovIAkJX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHsKLyoqKioqKi8gCQkJaWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7Ci8qKioqKiovIAkJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTsKLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pOwovKioqKioqLyAJCX07Ci8qKioqKiovIAl9KSgpOwovKioqKioqLyAJCi8qKioqKiovIAkvKiB3ZWJwYWNrL3J1bnRpbWUvaG90IG1vZHVsZSByZXBsYWNlbWVudCAqLwovKioqKioqLyAJKCgpID0+IHsKLyoqKioqKi8gCQl2YXIgY3VycmVudE1vZHVsZURhdGEgPSB7fTsKLyoqKioqKi8gCQl2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IF9fd2VicGFja19yZXF1aXJlX18uYzsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkvLyBtb2R1bGUgYW5kIHJlcXVpcmUgY3JlYXRpb24KLyoqKioqKi8gCQl2YXIgY3VycmVudENoaWxkTW9kdWxlOwovKioqKioqLyAJCXZhciBjdXJyZW50UGFyZW50cyA9IFtdOwovKioqKioqLyAJCQovKioqKioqLyAJCS8vIHN0YXR1cwovKioqKioqLyAJCXZhciByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMgPSBbXTsKLyoqKioqKi8gCQl2YXIgY3VycmVudFN0YXR1cyA9ICJpZGxlIjsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkvLyB3aGlsZSBkb3dubG9hZGluZwovKioqKioqLyAJCXZhciBibG9ja2luZ1Byb21pc2VzID0gMDsKLyoqKioqKi8gCQl2YXIgYmxvY2tpbmdQcm9taXNlc1dhaXRpbmcgPSBbXTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkvLyBUaGUgdXBkYXRlIGluZm8KLyoqKioqKi8gCQl2YXIgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnM7Ci8qKioqKiovIAkJdmFyIHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlczsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckQgPSBjdXJyZW50TW9kdWxlRGF0YTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmkucHVzaChmdW5jdGlvbiAob3B0aW9ucykgewovKioqKioqLyAJCQl2YXIgbW9kdWxlID0gb3B0aW9ucy5tb2R1bGU7Ci8qKioqKiovIAkJCXZhciByZXF1aXJlID0gY3JlYXRlUmVxdWlyZShvcHRpb25zLnJlcXVpcmUsIG9wdGlvbnMuaWQpOwovKioqKioqLyAJCQltb2R1bGUuaG90ID0gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG9wdGlvbnMuaWQsIG1vZHVsZSk7Ci8qKioqKiovIAkJCW1vZHVsZS5wYXJlbnRzID0gY3VycmVudFBhcmVudHM7Ci8qKioqKiovIAkJCW1vZHVsZS5jaGlsZHJlbiA9IFtdOwovKioqKioqLyAJCQljdXJyZW50UGFyZW50cyA9IFtdOwovKioqKioqLyAJCQlvcHRpb25zLnJlcXVpcmUgPSByZXF1aXJlOwovKioqKioqLyAJCX0pOwovKioqKioqLyAJCQovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uaG1yQyA9IHt9OwovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18uaG1ySSA9IHt9OwovKioqKioqLyAJCQovKioqKioqLyAJCWZ1bmN0aW9uIGNyZWF0ZVJlcXVpcmUocmVxdWlyZSwgbW9kdWxlSWQpIHsKLyoqKioqKi8gCQkJdmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07Ci8qKioqKiovIAkJCWlmICghbWUpIHJldHVybiByZXF1aXJlOwovKioqKioqLyAJCQl2YXIgZm4gPSBmdW5jdGlvbiAocmVxdWVzdCkgewovKioqKioqLyAJCQkJaWYgKG1lLmhvdC5hY3RpdmUpIHsKLyoqKioqKi8gCQkJCQlpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkgewovKioqKioqLyAJCQkJCQl2YXIgcGFyZW50cyA9IGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50czsKLyoqKioqKi8gCQkJCQkJaWYgKHBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7Ci8qKioqKiovIAkJCQkJCQlwYXJlbnRzLnB1c2gobW9kdWxlSWQpOwovKioqKioqLyAJCQkJCQl9Ci8qKioqKiovIAkJCQkJfSBlbHNlIHsKLyoqKioqKi8gCQkJCQkJY3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdOwovKioqKioqLyAJCQkJCQljdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0OwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCQlpZiAobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA9PT0gLTEpIHsKLyoqKioqKi8gCQkJCQkJbWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTsKLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQl9IGVsc2UgewovKioqKioqLyAJCQkJCWNvbnNvbGUud2FybigKLyoqKioqKi8gCQkJCQkJIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZSgiICsKLyoqKioqKi8gCQkJCQkJCXJlcXVlc3QgKwovKioqKioqLyAJCQkJCQkJIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgIiArCi8qKioqKiovIAkJCQkJCQltb2R1bGVJZAovKioqKioqLyAJCQkJCSk7Ci8qKioqKiovIAkJCQkJY3VycmVudFBhcmVudHMgPSBbXTsKLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJCXJldHVybiByZXF1aXJlKHJlcXVlc3QpOwovKioqKioqLyAJCQl9OwovKioqKioqLyAJCQl2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gKG5hbWUpIHsKLyoqKioqKi8gCQkJCXJldHVybiB7Ci8qKioqKiovIAkJCQkJY29uZmlndXJhYmxlOiB0cnVlLAovKioqKioqLyAJCQkJCWVudW1lcmFibGU6IHRydWUsCi8qKioqKiovIAkJCQkJZ2V0OiBmdW5jdGlvbiAoKSB7Ci8qKioqKiovIAkJCQkJCXJldHVybiByZXF1aXJlW25hbWVdOwovKioqKioqLyAJCQkJCX0sCi8qKioqKiovIAkJCQkJc2V0OiBmdW5jdGlvbiAodmFsdWUpIHsKLyoqKioqKi8gCQkJCQkJcmVxdWlyZVtuYW1lXSA9IHZhbHVlOwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCX07Ci8qKioqKiovIAkJCX07Ci8qKioqKiovIAkJCWZvciAodmFyIG5hbWUgaW4gcmVxdWlyZSkgewovKioqKioqLyAJCQkJaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXF1aXJlLCBuYW1lKSAmJiBuYW1lICE9PSAiZSIpIHsKLyoqKioqKi8gCQkJCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcihuYW1lKSk7Ci8qKioqKiovIAkJCQl9Ci8qKioqKiovIAkJCX0KLyoqKioqKi8gCQkJZm4uZSA9IGZ1bmN0aW9uIChjaHVua0lkKSB7Ci8qKioqKiovIAkJCQlyZXR1cm4gdHJhY2tCbG9ja2luZ1Byb21pc2UocmVxdWlyZS5lKGNodW5rSWQpKTsKLyoqKioqKi8gCQkJfTsKLyoqKioqKi8gCQkJcmV0dXJuIGZuOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQlmdW5jdGlvbiBjcmVhdGVNb2R1bGVIb3RPYmplY3QobW9kdWxlSWQsIG1lKSB7Ci8qKioqKiovIAkJCXZhciBfbWFpbiA9IGN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQ7Ci8qKioqKiovIAkJCXZhciBob3QgPSB7Ci8qKioqKiovIAkJCQkvLyBwcml2YXRlIHN0dWZmCi8qKioqKiovIAkJCQlfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LAovKioqKioqLyAJCQkJX2FjY2VwdGVkRXJyb3JIYW5kbGVyczoge30sCi8qKioqKiovIAkJCQlfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LAovKioqKioqLyAJCQkJX3NlbGZBY2NlcHRlZDogZmFsc2UsCi8qKioqKiovIAkJCQlfc2VsZkRlY2xpbmVkOiBmYWxzZSwKLyoqKioqKi8gCQkJCV9zZWxmSW52YWxpZGF0ZWQ6IGZhbHNlLAovKioqKioqLyAJCQkJX2Rpc3Bvc2VIYW5kbGVyczogW10sCi8qKioqKiovIAkJCQlfbWFpbjogX21haW4sCi8qKioqKiovIAkJCQlfcmVxdWlyZVNlbGY6IGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQljdXJyZW50UGFyZW50cyA9IG1lLnBhcmVudHMuc2xpY2UoKTsKLyoqKioqKi8gCQkJCQljdXJyZW50Q2hpbGRNb2R1bGUgPSBfbWFpbiA/IHVuZGVmaW5lZCA6IG1vZHVsZUlkOwovKioqKioqLyAJCQkJCV9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpOwovKioqKioqLyAJCQkJfSwKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCS8vIE1vZHVsZSBBUEkKLyoqKioqKi8gCQkJCWFjdGl2ZTogdHJ1ZSwKLyoqKioqKi8gCQkJCWFjY2VwdDogZnVuY3Rpb24gKGRlcCwgY2FsbGJhY2ssIGVycm9ySGFuZGxlcikgewovKioqKioqLyAJCQkJCWlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlOwovKioqKioqLyAJCQkJCWVsc2UgaWYgKHR5cGVvZiBkZXAgPT09ICJmdW5jdGlvbiIpIGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwOwovKioqKioqLyAJCQkJCWVsc2UgaWYgKHR5cGVvZiBkZXAgPT09ICJvYmplY3QiICYmIGRlcCAhPT0gbnVsbCkgewovKioqKioqLyAJCQkJCQlmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykgewovKioqKioqLyAJCQkJCQkJaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBbaV1dID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307Ci8qKioqKiovIAkJCQkJCQlob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBbaV1dID0gZXJyb3JIYW5kbGVyOwovKioqKioqLyAJCQkJCQl9Ci8qKioqKiovIAkJCQkJfSBlbHNlIHsKLyoqKioqKi8gCQkJCQkJaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24gKCkge307Ci8qKioqKiovIAkJCQkJCWhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcF0gPSBlcnJvckhhbmRsZXI7Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJfSwKLyoqKioqKi8gCQkJCWRlY2xpbmU6IGZ1bmN0aW9uIChkZXApIHsKLyoqKioqKi8gCQkJCQlpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTsKLyoqKioqKi8gCQkJCQllbHNlIGlmICh0eXBlb2YgZGVwID09PSAib2JqZWN0IiAmJiBkZXAgIT09IG51bGwpCi8qKioqKiovIAkJCQkJCWZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKQovKioqKioqLyAJCQkJCQkJaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTsKLyoqKioqKi8gCQkJCQllbHNlIGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7Ci8qKioqKiovIAkJCQl9LAovKioqKioqLyAJCQkJZGlzcG9zZTogZnVuY3Rpb24gKGNhbGxiYWNrKSB7Ci8qKioqKiovIAkJCQkJaG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7Ci8qKioqKiovIAkJCQl9LAovKioqKioqLyAJCQkJYWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uIChjYWxsYmFjaykgewovKioqKioqLyAJCQkJCWhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spOwovKioqKioqLyAJCQkJfSwKLyoqKioqKi8gCQkJCXJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHsKLyoqKioqKi8gCQkJCQl2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7Ci8qKioqKiovIAkJCQkJaWYgKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTsKLyoqKioqKi8gCQkJCX0sCi8qKioqKiovIAkJCQlpbnZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7Ci8qKioqKiovIAkJCQkJdGhpcy5fc2VsZkludmFsaWRhdGVkID0gdHJ1ZTsKLyoqKioqKi8gCQkJCQlzd2l0Y2ggKGN1cnJlbnRTdGF0dXMpIHsKLyoqKioqKi8gCQkJCQkJY2FzZSAiaWRsZSI6Ci8qKioqKiovIAkJCQkJCQljdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdOwovKioqKioqLyAJCQkJCQkJT2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKLyoqKioqKi8gCQkJCQkJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtcklba2V5XSgKLyoqKioqKi8gCQkJCQkJCQkJbW9kdWxlSWQsCi8qKioqKiovIAkJCQkJCQkJCWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzCi8qKioqKiovIAkJCQkJCQkJKTsKLyoqKioqKi8gCQkJCQkJCX0pOwovKioqKioqLyAJCQkJCQkJc2V0U3RhdHVzKCJyZWFkeSIpOwovKioqKioqLyAJCQkJCQkJYnJlYWs7Ci8qKioqKiovIAkJCQkJCWNhc2UgInJlYWR5IjoKLyoqKioqKi8gCQkJCQkJCU9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7Ci8qKioqKiovIAkJCQkJCQkJX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oCi8qKioqKiovIAkJCQkJCQkJCW1vZHVsZUlkLAovKioqKioqLyAJCQkJCQkJCQljdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycwovKioqKioqLyAJCQkJCQkJCSk7Ci8qKioqKiovIAkJCQkJCQl9KTsKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCQljYXNlICJwcmVwYXJlIjoKLyoqKioqKi8gCQkJCQkJY2FzZSAiY2hlY2siOgovKioqKioqLyAJCQkJCQljYXNlICJkaXNwb3NlIjoKLyoqKioqKi8gCQkJCQkJY2FzZSAiYXBwbHkiOgovKioqKioqLyAJCQkJCQkJKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyB8fCBbXSkucHVzaCgKLyoqKioqKi8gCQkJCQkJCQltb2R1bGVJZAovKioqKioqLyAJCQkJCQkJKTsKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCQlkZWZhdWx0OgovKioqKioqLyAJCQkJCQkJLy8gaWdub3JlIHJlcXVlc3RzIGluIGVycm9yIHN0YXRlcwovKioqKioqLyAJCQkJCQkJYnJlYWs7Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJfSwKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCS8vIE1hbmFnZW1lbnQgQVBJCi8qKioqKiovIAkJCQljaGVjazogaG90Q2hlY2ssCi8qKioqKiovIAkJCQlhcHBseTogaG90QXBwbHksCi8qKioqKiovIAkJCQlzdGF0dXM6IGZ1bmN0aW9uIChsKSB7Ci8qKioqKiovIAkJCQkJaWYgKCFsKSByZXR1cm4gY3VycmVudFN0YXR1czsKLyoqKioqKi8gCQkJCQlyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTsKLyoqKioqKi8gCQkJCX0sCi8qKioqKiovIAkJCQlhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbiAobCkgewovKioqKioqLyAJCQkJCXJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5wdXNoKGwpOwovKioqKioqLyAJCQkJfSwKLyoqKioqKi8gCQkJCXJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7Ci8qKioqKiovIAkJCQkJdmFyIGlkeCA9IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpOwovKioqKioqLyAJCQkJCWlmIChpZHggPj0gMCkgcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpOwovKioqKioqLyAJCQkJfSwKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCS8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbAovKioqKioqLyAJCQkJZGF0YTogY3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdCi8qKioqKiovIAkJCX07Ci8qKioqKiovIAkJCWN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDsKLyoqKioqKi8gCQkJcmV0dXJuIGhvdDsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJZnVuY3Rpb24gc2V0U3RhdHVzKG5ld1N0YXR1cykgewovKioqKioqLyAJCQljdXJyZW50U3RhdHVzID0gbmV3U3RhdHVzOwovKioqKioqLyAJCQl2YXIgcmVzdWx0cyA9IFtdOwovKioqKioqLyAJCQovKioqKioqLyAJCQlmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKykKLyoqKioqKi8gCQkJCXJlc3VsdHNbaV0gPSByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpOwovKioqKioqLyAJCQovKioqKioqLyAJCQlyZXR1cm4gUHJvbWlzZS5hbGwocmVzdWx0cyk7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCQovKioqKioqLyAJCWZ1bmN0aW9uIHVuYmxvY2soKSB7Ci8qKioqKiovIAkJCWlmICgtLWJsb2NraW5nUHJvbWlzZXMgPT09IDApIHsKLyoqKioqKi8gCQkJCXNldFN0YXR1cygicmVhZHkiKS50aGVuKGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQlpZiAoYmxvY2tpbmdQcm9taXNlcyA9PT0gMCkgewovKioqKioqLyAJCQkJCQl2YXIgbGlzdCA9IGJsb2NraW5nUHJvbWlzZXNXYWl0aW5nOwovKioqKioqLyAJCQkJCQlibG9ja2luZ1Byb21pc2VzV2FpdGluZyA9IFtdOwovKioqKioqLyAJCQkJCQlmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHsKLyoqKioqKi8gCQkJCQkJCWxpc3RbaV0oKTsKLyoqKioqKi8gCQkJCQkJfQovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCX0pOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJfQovKioqKioqLyAJCQovKioqKioqLyAJCWZ1bmN0aW9uIHRyYWNrQmxvY2tpbmdQcm9taXNlKHByb21pc2UpIHsKLyoqKioqKi8gCQkJc3dpdGNoIChjdXJyZW50U3RhdHVzKSB7Ci8qKioqKiovIAkJCQljYXNlICJyZWFkeSI6Ci8qKioqKiovIAkJCQkJc2V0U3RhdHVzKCJwcmVwYXJlIik7Ci8qKioqKiovIAkJCQkvKiBmYWxsdGhyb3VnaCAqLwovKioqKioqLyAJCQkJY2FzZSAicHJlcGFyZSI6Ci8qKioqKiovIAkJCQkJYmxvY2tpbmdQcm9taXNlcysrOwovKioqKioqLyAJCQkJCXByb21pc2UudGhlbih1bmJsb2NrLCB1bmJsb2NrKTsKLyoqKioqKi8gCQkJCQlyZXR1cm4gcHJvbWlzZTsKLyoqKioqKi8gCQkJCWRlZmF1bHQ6Ci8qKioqKiovIAkJCQkJcmV0dXJuIHByb21pc2U7Ci8qKioqKiovIAkJCX0KLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJZnVuY3Rpb24gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZm4pIHsKLyoqKioqKi8gCQkJaWYgKGJsb2NraW5nUHJvbWlzZXMgPT09IDApIHJldHVybiBmbigpOwovKioqKioqLyAJCQlyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKLyoqKioqKi8gCQkJCWJsb2NraW5nUHJvbWlzZXNXYWl0aW5nLnB1c2goZnVuY3Rpb24gKCkgewovKioqKioqLyAJCQkJCXJlc29sdmUoZm4oKSk7Ci8qKioqKiovIAkJCQl9KTsKLyoqKioqKi8gCQkJfSk7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCQovKioqKioqLyAJCWZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5T25VcGRhdGUpIHsKLyoqKioqKi8gCQkJaWYgKGN1cnJlbnRTdGF0dXMgIT09ICJpZGxlIikgewovKioqKioqLyAJCQkJdGhyb3cgbmV3IEVycm9yKCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1cyIpOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJCXJldHVybiBzZXRTdGF0dXMoImNoZWNrIikKLyoqKioqKi8gCQkJCS50aGVuKF9fd2VicGFja19yZXF1aXJlX18uaG1yTSkKLyoqKioqKi8gCQkJCS50aGVuKGZ1bmN0aW9uICh1cGRhdGUpIHsKLyoqKioqKi8gCQkJCQlpZiAoIXVwZGF0ZSkgewovKioqKioqLyAJCQkJCQlyZXR1cm4gc2V0U3RhdHVzKGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkgPyAicmVhZHkiIDogImlkbGUiKS50aGVuKAovKioqKioqLyAJCQkJCQkJZnVuY3Rpb24gKCkgewovKioqKioqLyAJCQkJCQkJCXJldHVybiBudWxsOwovKioqKioqLyAJCQkJCQkJfQovKioqKioqLyAJCQkJCQkpOwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQlyZXR1cm4gc2V0U3RhdHVzKCJwcmVwYXJlIikudGhlbihmdW5jdGlvbiAoKSB7Ci8qKioqKiovIAkJCQkJCXZhciB1cGRhdGVkTW9kdWxlcyA9IFtdOwovKioqKioqLyAJCQkJCQljdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IFtdOwovKioqKioqLyAJCQovKioqKioqLyAJCQkJCQlyZXR1cm4gUHJvbWlzZS5hbGwoCi8qKioqKiovIAkJCQkJCQlPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMpLnJlZHVjZShmdW5jdGlvbiAoCi8qKioqKiovIAkJCQkJCQkJcHJvbWlzZXMsCi8qKioqKiovIAkJCQkJCQkJa2V5Ci8qKioqKiovIAkJCQkJCQkpIHsKLyoqKioqKi8gCQkJCQkJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckNba2V5XSgKLyoqKioqKi8gCQkJCQkJCQkJdXBkYXRlLmMsCi8qKioqKiovIAkJCQkJCQkJCXVwZGF0ZS5yLAovKioqKioqLyAJCQkJCQkJCQl1cGRhdGUubSwKLyoqKioqKi8gCQkJCQkJCQkJcHJvbWlzZXMsCi8qKioqKiovIAkJCQkJCQkJCWN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLAovKioqKioqLyAJCQkJCQkJCQl1cGRhdGVkTW9kdWxlcwovKioqKioqLyAJCQkJCQkJCSk7Ci8qKioqKiovIAkJCQkJCQkJcmV0dXJuIHByb21pc2VzOwovKioqKioqLyAJCQkJCQkJfSwKLyoqKioqKi8gCQkJCQkJCVtdKQovKioqKioqLyAJCQkJCQkpLnRoZW4oZnVuY3Rpb24gKCkgewovKioqKioqLyAJCQkJCQkJcmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQkJCQlpZiAoYXBwbHlPblVwZGF0ZSkgewovKioqKioqLyAJCQkJCQkJCQlyZXR1cm4gaW50ZXJuYWxBcHBseShhcHBseU9uVXBkYXRlKTsKLyoqKioqKi8gCQkJCQkJCQl9IGVsc2UgewovKioqKioqLyAJCQkJCQkJCQlyZXR1cm4gc2V0U3RhdHVzKCJyZWFkeSIpLnRoZW4oZnVuY3Rpb24gKCkgewovKioqKioqLyAJCQkJCQkJCQkJcmV0dXJuIHVwZGF0ZWRNb2R1bGVzOwovKioqKioqLyAJCQkJCQkJCQl9KTsKLyoqKioqKi8gCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQl9KTsKLyoqKioqKi8gCQkJCQkJfSk7Ci8qKioqKiovIAkJCQkJfSk7Ci8qKioqKiovIAkJCQl9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykgewovKioqKioqLyAJCQlpZiAoY3VycmVudFN0YXR1cyAhPT0gInJlYWR5IikgewovKioqKioqLyAJCQkJcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkgewovKioqKioqLyAJCQkJCXRocm93IG5ldyBFcnJvcigKLyoqKioqKi8gCQkJCQkJImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1cyAoc3RhdGU6ICIgKwovKioqKioqLyAJCQkJCQkJY3VycmVudFN0YXR1cyArCi8qKioqKiovIAkJCQkJCQkiKSIKLyoqKioqKi8gCQkJCQkpOwovKioqKioqLyAJCQkJfSk7Ci8qKioqKiovIAkJCX0KLyoqKioqKi8gCQkJcmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucyk7Ci8qKioqKiovIAkJfQovKioqKioqLyAJCQovKioqKioqLyAJCWZ1bmN0aW9uIGludGVybmFsQXBwbHkob3B0aW9ucykgewovKioqKioqLyAJCQlvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJdmFyIHJlc3VsdHMgPSBjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycy5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsKLyoqKioqKi8gCQkJCXJldHVybiBoYW5kbGVyKG9wdGlvbnMpOwovKioqKioqLyAJCQl9KTsKLyoqKioqKi8gCQkJY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSB1bmRlZmluZWQ7Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCXZhciBlcnJvcnMgPSByZXN1bHRzCi8qKioqKiovIAkJCQkubWFwKGZ1bmN0aW9uIChyKSB7Ci8qKioqKiovIAkJCQkJcmV0dXJuIHIuZXJyb3I7Ci8qKioqKiovIAkJCQl9KQovKioqKioqLyAJCQkJLmZpbHRlcihCb29sZWFuKTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7Ci8qKioqKiovIAkJCQlyZXR1cm4gc2V0U3RhdHVzKCJhYm9ydCIpLnRoZW4oZnVuY3Rpb24gKCkgewovKioqKioqLyAJCQkJCXRocm93IGVycm9yc1swXTsKLyoqKioqKi8gCQkJCX0pOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCS8vIE5vdyBpbiAiZGlzcG9zZSIgcGhhc2UKLyoqKioqKi8gCQkJdmFyIGRpc3Bvc2VQcm9taXNlID0gc2V0U3RhdHVzKCJkaXNwb3NlIik7Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCXJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7Ci8qKioqKiovIAkJCQlpZiAocmVzdWx0LmRpc3Bvc2UpIHJlc3VsdC5kaXNwb3NlKCk7Ci8qKioqKiovIAkJCX0pOwovKioqKioqLyAJCQovKioqKioqLyAJCQkvLyBOb3cgaW4gImFwcGx5IiBwaGFzZQovKioqKioqLyAJCQl2YXIgYXBwbHlQcm9taXNlID0gc2V0U3RhdHVzKCJhcHBseSIpOwovKioqKioqLyAJCQovKioqKioqLyAJCQl2YXIgZXJyb3I7Ci8qKioqKiovIAkJCXZhciByZXBvcnRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHsKLyoqKioqKi8gCQkJCWlmICghZXJyb3IpIGVycm9yID0gZXJyOwovKioqKioqLyAJCQl9OwovKioqKioqLyAJCQovKioqKioqLyAJCQl2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107Ci8qKioqKiovIAkJCXJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7Ci8qKioqKiovIAkJCQlpZiAocmVzdWx0LmFwcGx5KSB7Ci8qKioqKiovIAkJCQkJdmFyIG1vZHVsZXMgPSByZXN1bHQuYXBwbHkocmVwb3J0RXJyb3IpOwovKioqKioqLyAJCQkJCWlmIChtb2R1bGVzKSB7Ci8qKioqKiovIAkJCQkJCWZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykgewovKioqKioqLyAJCQkJCQkJb3V0ZGF0ZWRNb2R1bGVzLnB1c2gobW9kdWxlc1tpXSk7Ci8qKioqKiovIAkJCQkJCX0KLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQl9Ci8qKioqKiovIAkJCX0pOwovKioqKioqLyAJCQovKioqKioqLyAJCQlyZXR1cm4gUHJvbWlzZS5hbGwoW2Rpc3Bvc2VQcm9taXNlLCBhcHBseVByb21pc2VdKS50aGVuKGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCS8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkCi8qKioqKiovIAkJCQlpZiAoZXJyb3IpIHsKLyoqKioqKi8gCQkJCQlyZXR1cm4gc2V0U3RhdHVzKCJmYWlsIikudGhlbihmdW5jdGlvbiAoKSB7Ci8qKioqKiovIAkJCQkJCXRocm93IGVycm9yOwovKioqKioqLyAJCQkJCX0pOwovKioqKioqLyAJCQkJfQovKioqKioqLyAJCQovKioqKioqLyAJCQkJaWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykgewovKioqKioqLyAJCQkJCXJldHVybiBpbnRlcm5hbEFwcGx5KG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGxpc3QpIHsKLyoqKioqKi8gCQkJCQkJb3V0ZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7Ci8qKioqKiovIAkJCQkJCQlpZiAobGlzdC5pbmRleE9mKG1vZHVsZUlkKSA8IDApIGxpc3QucHVzaChtb2R1bGVJZCk7Ci8qKioqKiovIAkJCQkJCX0pOwovKioqKioqLyAJCQkJCQlyZXR1cm4gbGlzdDsKLyoqKioqKi8gCQkJCQl9KTsKLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCXJldHVybiBzZXRTdGF0dXMoImlkbGUiKS50aGVuKGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQlyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzOwovKioqKioqLyAJCQkJfSk7Ci8qKioqKiovIAkJCX0pOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQlmdW5jdGlvbiBhcHBseUludmFsaWRhdGVkTW9kdWxlcygpIHsKLyoqKioqKi8gCQkJaWYgKHF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcykgewovKioqKioqLyAJCQkJaWYgKCFjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycykgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTsKLyoqKioqKi8gCQkJCU9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1ySSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7Ci8qKioqKiovIAkJCQkJcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7Ci8qKioqKiovIAkJCQkJCV9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKAovKioqKioqLyAJCQkJCQkJbW9kdWxlSWQsCi8qKioqKiovIAkJCQkJCQljdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycwovKioqKioqLyAJCQkJCQkpOwovKioqKioqLyAJCQkJCX0pOwovKioqKioqLyAJCQkJfSk7Ci8qKioqKiovIAkJCQlxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSB1bmRlZmluZWQ7Ci8qKioqKiovIAkJCQlyZXR1cm4gdHJ1ZTsKLyoqKioqKi8gCQkJfQovKioqKioqLyAJCX0KLyoqKioqKi8gCX0pKCk7Ci8qKioqKiovIAkKLyoqKioqKi8gCS8qIHdlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoICovCi8qKioqKiovIAkoKCkgPT4gewovKioqKioqLyAJCV9fd2VicGFja19yZXF1aXJlX18ucCA9ICIiOwovKioqKioqLyAJfSkoKTsKLyoqKioqKi8gCQovKioqKioqLyAJLyogd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmcgKi8KLyoqKioqKi8gCSgoKSA9PiB7Ci8qKioqKiovIAkJLy8gbm8gYmFzZVVSSQovKioqKioqLyAJCQovKioqKioqLyAJCS8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzCi8qKioqKiovIAkJLy8gdW5kZWZpbmVkID0gY2h1bmsgbm90IGxvYWRlZCwgbnVsbCA9IGNodW5rIHByZWxvYWRlZC9wcmVmZXRjaGVkCi8qKioqKiovIAkJLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkCi8qKioqKiovIAkJdmFyIGluc3RhbGxlZENodW5rcyA9IF9fd2VicGFja19yZXF1aXJlX18uaG1yU19qc29ucCA9IF9fd2VicGFja19yZXF1aXJlX18uaG1yU19qc29ucCB8fCB7Ci8qKioqKiovIAkJCSJtYWluIjogMAovKioqKioqLyAJCX07Ci8qKioqKiovIAkJCi8qKioqKiovIAkJLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmcKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkvLyBubyBwcmVmZXRjaGluZwovKioqKioqLyAJCQovKioqKioqLyAJCS8vIG5vIHByZWxvYWRlZAovKioqKioqLyAJCQovKioqKioqLyAJCXZhciBjdXJyZW50VXBkYXRlZE1vZHVsZXNMaXN0OwovKioqKioqLyAJCXZhciB3YWl0aW5nVXBkYXRlUmVzb2x2ZXMgPSB7fTsKLyoqKioqKi8gCQlmdW5jdGlvbiBsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgdXBkYXRlZE1vZHVsZXNMaXN0KSB7Ci8qKioqKiovIAkJCWN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QgPSB1cGRhdGVkTW9kdWxlc0xpc3Q7Ci8qKioqKiovIAkJCXJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7Ci8qKioqKiovIAkJCQl3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0gPSByZXNvbHZlOwovKioqKioqLyAJCQkJLy8gc3RhcnQgdXBkYXRlIGNodW5rIGxvYWRpbmcKLyoqKioqKi8gCQkJCXZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmh1KGNodW5rSWQpOwovKioqKioqLyAJCQkJLy8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlcgovKioqKioqLyAJCQkJdmFyIGVycm9yID0gbmV3IEVycm9yKCk7Ci8qKioqKiovIAkJCQl2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7Ci8qKioqKiovIAkJCQkJaWYod2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdKSB7Ci8qKioqKiovIAkJCQkJCXdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZAovKioqKioqLyAJCQkJCQl2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpOwovKioqKioqLyAJCQkJCQl2YXIgcmVhbFNyYyA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjOwovKioqKioqLyAJCQkJCQllcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgaG90IHVwZGF0ZSBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJzsKLyoqKioqKi8gCQkJCQkJZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7Ci8qKioqKiovIAkJCQkJCWVycm9yLnR5cGUgPSBlcnJvclR5cGU7Ci8qKioqKiovIAkJCQkJCWVycm9yLnJlcXVlc3QgPSByZWFsU3JjOwovKioqKioqLyAJCQkJCQlyZWplY3QoZXJyb3IpOwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCX07Ci8qKioqKiovIAkJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmwodXJsLCBsb2FkaW5nRW5kZWQpOwovKioqKioqLyAJCQl9KTsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJc2VsZlsid2VicGFja0hvdFVwZGF0ZXV0aWxzMiJdID0gKGNodW5rSWQsIG1vcmVNb2R1bGVzLCBydW50aW1lKSA9PiB7Ci8qKioqKiovIAkJCWZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHsKLyoqKioqKi8gCQkJCWlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7Ci8qKioqKiovIAkJCQkJY3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07Ci8qKioqKiovIAkJCQkJaWYoY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdCkgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdC5wdXNoKG1vZHVsZUlkKTsKLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQlpZihydW50aW1lKSBjdXJyZW50VXBkYXRlUnVudGltZS5wdXNoKHJ1bnRpbWUpOwovKioqKioqLyAJCQlpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHsKLyoqKioqKi8gCQkJCXdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpOwovKioqKioqLyAJCQkJd2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQl2YXIgY3VycmVudFVwZGF0ZUNodW5rczsKLyoqKioqKi8gCQl2YXIgY3VycmVudFVwZGF0ZTsKLyoqKioqKi8gCQl2YXIgY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3M7Ci8qKioqKiovIAkJdmFyIGN1cnJlbnRVcGRhdGVSdW50aW1lOwovKioqKioqLyAJCWZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7Ci8qKioqKiovIAkJCWlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7Ci8qKioqKiovIAkJCWN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7Ci8qKioqKiovIAkJCWZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkgewovKioqKioqLyAJCQkJdmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07Ci8qKioqKiovIAkJCQl2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCXZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5tYXAoZnVuY3Rpb24gKGlkKSB7Ci8qKioqKiovIAkJCQkJcmV0dXJuIHsKLyoqKioqKi8gCQkJCQkJY2hhaW46IFtpZF0sCi8qKioqKiovIAkJCQkJCWlkOiBpZAovKioqKioqLyAJCQkJCX07Ci8qKioqKiovIAkJCQl9KTsKLyoqKioqKi8gCQkJCXdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7Ci8qKioqKiovIAkJCQkJdmFyIHF1ZXVlSXRlbSA9IHF1ZXVlLnBvcCgpOwovKioqKioqLyAJCQkJCXZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDsKLyoqKioqKi8gCQkJCQl2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47Ci8qKioqKiovIAkJCQkJdmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07Ci8qKioqKiovIAkJCQkJaWYgKAovKioqKioqLyAJCQkJCQkhbW9kdWxlIHx8Ci8qKioqKiovIAkJCQkJCShtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZCkKLyoqKioqKi8gCQkJCQkpCi8qKioqKiovIAkJCQkJCWNvbnRpbnVlOwovKioqKioqLyAJCQkJCWlmIChtb2R1bGUuaG90Ll9zZWxmRGVjbGluZWQpIHsKLyoqKioqKi8gCQkJCQkJcmV0dXJuIHsKLyoqKioqKi8gCQkJCQkJCXR5cGU6ICJzZWxmLWRlY2xpbmVkIiwKLyoqKioqKi8gCQkJCQkJCWNoYWluOiBjaGFpbiwKLyoqKioqKi8gCQkJCQkJCW1vZHVsZUlkOiBtb2R1bGVJZAovKioqKioqLyAJCQkJCQl9OwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCQlpZiAobW9kdWxlLmhvdC5fbWFpbikgewovKioqKioqLyAJCQkJCQlyZXR1cm4gewovKioqKioqLyAJCQkJCQkJdHlwZTogInVuYWNjZXB0ZWQiLAovKioqKioqLyAJCQkJCQkJY2hhaW46IGNoYWluLAovKioqKioqLyAJCQkJCQkJbW9kdWxlSWQ6IG1vZHVsZUlkCi8qKioqKiovIAkJCQkJCX07Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJCWZvciAodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHsKLyoqKioqKi8gCQkJCQkJdmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07Ci8qKioqKiovIAkJCQkJCXZhciBwYXJlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbcGFyZW50SWRdOwovKioqKioqLyAJCQkJCQlpZiAoIXBhcmVudCkgY29udGludWU7Ci8qKioqKiovIAkJCQkJCWlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHsKLyoqKioqKi8gCQkJCQkJCXJldHVybiB7Ci8qKioqKiovIAkJCQkJCQkJdHlwZTogImRlY2xpbmVkIiwKLyoqKioqKi8gCQkJCQkJCQljaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLAovKioqKioqLyAJCQkJCQkJCW1vZHVsZUlkOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJCQkJCQlwYXJlbnRJZDogcGFyZW50SWQKLyoqKioqKi8gCQkJCQkJCX07Ci8qKioqKiovIAkJCQkJCX0KLyoqKioqKi8gCQkJCQkJaWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlOwovKioqKioqLyAJCQkJCQlpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7Ci8qKioqKiovIAkJCQkJCQlpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSkKLyoqKioqKi8gCQkJCQkJCQlvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTsKLyoqKioqKi8gCQkJCQkJCWFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7Ci8qKioqKiovIAkJCQkJCQljb250aW51ZTsKLyoqKioqKi8gCQkJCQkJfQovKioqKioqLyAJCQkJCQlkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdOwovKioqKioqLyAJCQkJCQlvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7Ci8qKioqKiovIAkJCQkJCXF1ZXVlLnB1c2goewovKioqKioqLyAJCQkJCQkJY2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSwKLyoqKioqKi8gCQkJCQkJCWlkOiBwYXJlbnRJZAovKioqKioqLyAJCQkJCQl9KTsKLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCQlyZXR1cm4gewovKioqKioqLyAJCQkJCXR5cGU6ICJhY2NlcHRlZCIsCi8qKioqKiovIAkJCQkJbW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLAovKioqKioqLyAJCQkJCW91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLAovKioqKioqLyAJCQkJCW91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llcwovKioqKioqLyAJCQkJfTsKLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQovKioqKioqLyAJCQlmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7Ci8qKioqKiovIAkJCQlmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHsKLyoqKioqKi8gCQkJCQl2YXIgaXRlbSA9IGJbaV07Ci8qKioqKiovIAkJCQkJaWYgKGEuaW5kZXhPZihpdGVtKSA9PT0gLTEpIGEucHVzaChpdGVtKTsKLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQovKioqKioqLyAJCQkvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZAovKioqKioqLyAJCQkvLyB0aGUgIm91dGRhdGVkIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlbgovKioqKioqLyAJCQl2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTsKLyoqKioqKi8gCQkJdmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdOwovKioqKioqLyAJCQl2YXIgYXBwbGllZFVwZGF0ZSA9IHt9OwovKioqKioqLyAJCQovKioqKioqLyAJCQl2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkgewovKioqKioqLyAJCQkJY29uc29sZS53YXJuKAovKioqKioqLyAJCQkJCSJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoIiArIG1vZHVsZS5pZCArICIpIHRvIGRpc3Bvc2VkIG1vZHVsZSIKLyoqKioqKi8gCQkJCSk7Ci8qKioqKiovIAkJCX07Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCWZvciAodmFyIG1vZHVsZUlkIGluIGN1cnJlbnRVcGRhdGUpIHsKLyoqKioqKi8gCQkJCWlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZSwgbW9kdWxlSWQpKSB7Ci8qKioqKiovIAkJCQkJdmFyIG5ld01vZHVsZUZhY3RvcnkgPSBjdXJyZW50VXBkYXRlW21vZHVsZUlkXTsKLyoqKioqKi8gCQkJCQkvKiogQHR5cGUge1RPRE99ICovCi8qKioqKiovIAkJCQkJdmFyIHJlc3VsdDsKLyoqKioqKi8gCQkJCQlpZiAobmV3TW9kdWxlRmFjdG9yeSkgewovKioqKioqLyAJCQkJCQlyZXN1bHQgPSBnZXRBZmZlY3RlZE1vZHVsZUVmZmVjdHMobW9kdWxlSWQpOwovKioqKioqLyAJCQkJCX0gZWxzZSB7Ci8qKioqKiovIAkJCQkJCXJlc3VsdCA9IHsKLyoqKioqKi8gCQkJCQkJCXR5cGU6ICJkaXNwb3NlZCIsCi8qKioqKiovIAkJCQkJCQltb2R1bGVJZDogbW9kdWxlSWQKLyoqKioqKi8gCQkJCQkJfTsKLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQkJLyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi8KLyoqKioqKi8gCQkJCQl2YXIgYWJvcnRFcnJvciA9IGZhbHNlOwovKioqKioqLyAJCQkJCXZhciBkb0FwcGx5ID0gZmFsc2U7Ci8qKioqKiovIAkJCQkJdmFyIGRvRGlzcG9zZSA9IGZhbHNlOwovKioqKioqLyAJCQkJCXZhciBjaGFpbkluZm8gPSAiIjsKLyoqKioqKi8gCQkJCQlpZiAocmVzdWx0LmNoYWluKSB7Ci8qKioqKiovIAkJCQkJCWNoYWluSW5mbyA9ICJcblVwZGF0ZSBwcm9wYWdhdGlvbjogIiArIHJlc3VsdC5jaGFpbi5qb2luKCIgLT4gIik7Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJCXN3aXRjaCAocmVzdWx0LnR5cGUpIHsKLyoqKioqKi8gCQkJCQkJY2FzZSAic2VsZi1kZWNsaW5lZCI6Ci8qKioqKiovIAkJCQkJCQlpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTsKLyoqKioqKi8gCQkJCQkJCWlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZCkKLyoqKioqKi8gCQkJCQkJCQlhYm9ydEVycm9yID0gbmV3IEVycm9yKAovKioqKioqLyAJCQkJCQkJCQkiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogIiArCi8qKioqKiovIAkJCQkJCQkJCQlyZXN1bHQubW9kdWxlSWQgKwovKioqKioqLyAJCQkJCQkJCQkJY2hhaW5JbmZvCi8qKioqKiovIAkJCQkJCQkJKTsKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCQljYXNlICJkZWNsaW5lZCI6Ci8qKioqKiovIAkJCQkJCQlpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTsKLyoqKioqKi8gCQkJCQkJCWlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZCkKLyoqKioqKi8gCQkJCQkJCQlhYm9ydEVycm9yID0gbmV3IEVycm9yKAovKioqKioqLyAJCQkJCQkJCQkiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6ICIgKwovKioqKioqLyAJCQkJCQkJCQkJcmVzdWx0Lm1vZHVsZUlkICsKLyoqKioqKi8gCQkJCQkJCQkJCSIgaW4gIiArCi8qKioqKiovIAkJCQkJCQkJCQlyZXN1bHQucGFyZW50SWQgKwovKioqKioqLyAJCQkJCQkJCQkJY2hhaW5JbmZvCi8qKioqKiovIAkJCQkJCQkJKTsKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCQljYXNlICJ1bmFjY2VwdGVkIjoKLyoqKioqKi8gCQkJCQkJCWlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTsKLyoqKioqKi8gCQkJCQkJCWlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKQovKioqKioqLyAJCQkJCQkJCWFib3J0RXJyb3IgPSBuZXcgRXJyb3IoCi8qKioqKiovIAkJCQkJCQkJCSJBYm9ydGVkIGJlY2F1c2UgIiArIG1vZHVsZUlkICsgIiBpcyBub3QgYWNjZXB0ZWQiICsgY2hhaW5JbmZvCi8qKioqKiovIAkJCQkJCQkJKTsKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCQljYXNlICJhY2NlcHRlZCI6Ci8qKioqKiovIAkJCQkJCQlpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTsKLyoqKioqKi8gCQkJCQkJCWRvQXBwbHkgPSB0cnVlOwovKioqKioqLyAJCQkJCQkJYnJlYWs7Ci8qKioqKiovIAkJCQkJCWNhc2UgImRpc3Bvc2VkIjoKLyoqKioqKi8gCQkJCQkJCWlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpOwovKioqKioqLyAJCQkJCQkJZG9EaXNwb3NlID0gdHJ1ZTsKLyoqKioqKi8gCQkJCQkJCWJyZWFrOwovKioqKioqLyAJCQkJCQlkZWZhdWx0OgovKioqKioqLyAJCQkJCQkJdGhyb3cgbmV3IEVycm9yKCJVbmV4Y2VwdGlvbiB0eXBlICIgKyByZXN1bHQudHlwZSk7Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJCWlmIChhYm9ydEVycm9yKSB7Ci8qKioqKiovIAkJCQkJCXJldHVybiB7Ci8qKioqKiovIAkJCQkJCQllcnJvcjogYWJvcnRFcnJvcgovKioqKioqLyAJCQkJCQl9OwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCQlpZiAoZG9BcHBseSkgewovKioqKioqLyAJCQkJCQlhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IG5ld01vZHVsZUZhY3Rvcnk7Ci8qKioqKiovIAkJCQkJCWFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7Ci8qKioqKiovIAkJCQkJCWZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7Ci8qKioqKiovIAkJCQkJCQlpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7Ci8qKioqKiovIAkJCQkJCQkJaWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pCi8qKioqKiovIAkJCQkJCQkJCW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdOwovKioqKioqLyAJCQkJCQkJCWFkZEFsbFRvU2V0KAovKioqKioqLyAJCQkJCQkJCQlvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sCi8qKioqKiovIAkJCQkJCQkJCXJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0KLyoqKioqKi8gCQkJCQkJCQkpOwovKioqKioqLyAJCQkJCQkJfQovKioqKioqLyAJCQkJCQl9Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQkJCWlmIChkb0Rpc3Bvc2UpIHsKLyoqKioqKi8gCQkJCQkJYWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCBbcmVzdWx0Lm1vZHVsZUlkXSk7Ci8qKioqKiovIAkJCQkJCWFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlOwovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfQovKioqKioqLyAJCQljdXJyZW50VXBkYXRlID0gdW5kZWZpbmVkOwovKioqKioqLyAJCQovKioqKioqLyAJCQkvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtCi8qKioqKiovIAkJCXZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTsKLyoqKioqKi8gCQkJZm9yICh2YXIgaiA9IDA7IGogPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBqKyspIHsKLyoqKioqKi8gCQkJCXZhciBvdXRkYXRlZE1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2pdOwovKioqKioqLyAJCQkJdmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTsKLyoqKioqKi8gCQkJCWlmICgKLyoqKioqKi8gCQkJCQltb2R1bGUgJiYKLyoqKioqKi8gCQkJCQkobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkIHx8IG1vZHVsZS5ob3QuX21haW4pICYmCi8qKioqKiovIAkJCQkJLy8gcmVtb3ZlZCBzZWxmLWFjY2VwdGVkIG1vZHVsZXMgc2hvdWxkIG5vdCBiZSByZXF1aXJlZAovKioqKioqLyAJCQkJCWFwcGxpZWRVcGRhdGVbb3V0ZGF0ZWRNb2R1bGVJZF0gIT09IHdhcm5VbmV4cGVjdGVkUmVxdWlyZSAmJgovKioqKioqLyAJCQkJCS8vIHdoZW4gY2FsbGVkIGludmFsaWRhdGUgc2VsZi1hY2NlcHRpbmcgaXMgbm90IHBvc3NpYmxlCi8qKioqKiovIAkJCQkJIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZAovKioqKioqLyAJCQkJKSB7Ci8qKioqKiovIAkJCQkJb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goewovKioqKioqLyAJCQkJCQltb2R1bGU6IG91dGRhdGVkTW9kdWxlSWQsCi8qKioqKiovIAkJCQkJCXJlcXVpcmU6IG1vZHVsZS5ob3QuX3JlcXVpcmVTZWxmLAovKioqKioqLyAJCQkJCQllcnJvckhhbmRsZXI6IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZAovKioqKioqLyAJCQkJCX0pOwovKioqKioqLyAJCQkJfQovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCXZhciBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llczsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJcmV0dXJuIHsKLyoqKioqKi8gCQkJCWRpc3Bvc2U6IGZ1bmN0aW9uICgpIHsKLyoqKioqKi8gCQkJCQljdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7Ci8qKioqKiovIAkJCQkJCWRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07Ci8qKioqKiovIAkJCQkJfSk7Ci8qKioqKiovIAkJCQkJY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSB1bmRlZmluZWQ7Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCQkJdmFyIGlkeDsKLyoqKioqKi8gCQkJCQl2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTsKLyoqKioqKi8gCQkJCQl3aGlsZSAocXVldWUubGVuZ3RoID4gMCkgewovKioqKioqLyAJCQkJCQl2YXIgbW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTsKLyoqKioqKi8gCQkJCQkJdmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07Ci8qKioqKiovIAkJCQkJCWlmICghbW9kdWxlKSBjb250aW51ZTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQkJdmFyIGRhdGEgPSB7fTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQkJLy8gQ2FsbCBkaXNwb3NlIGhhbmRsZXJzCi8qKioqKiovIAkJCQkJCXZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7Ci8qKioqKiovIAkJCQkJCWZvciAoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHsKLyoqKioqKi8gCQkJCQkJCWRpc3Bvc2VIYW5kbGVyc1tqXS5jYWxsKG51bGwsIGRhdGEpOwovKioqKioqLyAJCQkJCQl9Ci8qKioqKiovIAkJCQkJCV9fd2VicGFja19yZXF1aXJlX18uaG1yRFttb2R1bGVJZF0gPSBkYXRhOwovKioqKioqLyAJCQovKioqKioqLyAJCQkJCQkvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKQovKioqKioqLyAJCQkJCQltb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlOwovKioqKioqLyAJCQovKioqKioqLyAJCQkJCQkvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGUKLyoqKioqKi8gCQkJCQkJZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCQkJCS8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXIKLyoqKioqKi8gCQkJCQkJZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQkJLy8gcmVtb3ZlICJwYXJlbnRzIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuCi8qKioqKiovIAkJCQkJCWZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHsKLyoqKioqKi8gCQkJCQkJCXZhciBjaGlsZCA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGUuY2hpbGRyZW5bal1dOwovKioqKioqLyAJCQkJCQkJaWYgKCFjaGlsZCkgY29udGludWU7Ci8qKioqKiovIAkJCQkJCQlpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpOwovKioqKioqLyAJCQkJCQkJaWYgKGlkeCA+PSAwKSB7Ci8qKioqKiovIAkJCQkJCQkJY2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTsKLyoqKioqKi8gCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJfQovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQkvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlbgovKioqKioqLyAJCQkJCXZhciBkZXBlbmRlbmN5OwovKioqKioqLyAJCQkJCWZvciAodmFyIG91dGRhdGVkTW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHsKLyoqKioqKi8gCQkJCQkJaWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhvdXRkYXRlZERlcGVuZGVuY2llcywgb3V0ZGF0ZWRNb2R1bGVJZCkpIHsKLyoqKioqKi8gCQkJCQkJCW1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTsKLyoqKioqKi8gCQkJCQkJCWlmIChtb2R1bGUpIHsKLyoqKioqKi8gCQkJCQkJCQltb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9Ci8qKioqKiovIAkJCQkJCQkJCW91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdOwovKioqKioqLyAJCQkJCQkJCWZvciAoaiA9IDA7IGogPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGorKykgewovKioqKioqLyAJCQkJCQkJCQlkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07Ci8qKioqKiovIAkJCQkJCQkJCWlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpOwovKioqKioqLyAJCQkJCQkJCQlpZiAoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTsKLyoqKioqKi8gCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCX0KLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQl9LAovKioqKioqLyAJCQkJYXBwbHk6IGZ1bmN0aW9uIChyZXBvcnRFcnJvcikgewovKioqKioqLyAJCQkJCS8vIGluc2VydCBuZXcgY29kZQovKioqKioqLyAJCQkJCWZvciAodmFyIHVwZGF0ZU1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHsKLyoqKioqKi8gCQkJCQkJaWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhhcHBsaWVkVXBkYXRlLCB1cGRhdGVNb2R1bGVJZCkpIHsKLyoqKioqKi8gCQkJCQkJCV9fd2VicGFja19yZXF1aXJlX18ubVt1cGRhdGVNb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW3VwZGF0ZU1vZHVsZUlkXTsKLyoqKioqKi8gCQkJCQkJfQovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQkvLyBydW4gbmV3IHJ1bnRpbWUgbW9kdWxlcwovKioqKioqLyAJCQkJCWZvciAodmFyIGkgPSAwOyBpIDwgY3VycmVudFVwZGF0ZVJ1bnRpbWUubGVuZ3RoOyBpKyspIHsKLyoqKioqKi8gCQkJCQkJY3VycmVudFVwZGF0ZVJ1bnRpbWVbaV0oX193ZWJwYWNrX3JlcXVpcmVfXyk7Ci8qKioqKiovIAkJCQkJfQovKioqKioqLyAJCQovKioqKioqLyAJCQkJCS8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzCi8qKioqKiovIAkJCQkJZm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykgewovKioqKioqLyAJCQkJCQlpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkgewovKioqKioqLyAJCQkJCQkJdmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTsKLyoqKioqKi8gCQkJCQkJCWlmIChtb2R1bGUpIHsKLyoqKioqKi8gCQkJCQkJCQltb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9Ci8qKioqKiovIAkJCQkJCQkJCW91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdOwovKioqKioqLyAJCQkJCQkJCXZhciBjYWxsYmFja3MgPSBbXTsKLyoqKioqKi8gCQkJCQkJCQl2YXIgZXJyb3JIYW5kbGVycyA9IFtdOwovKioqKioqLyAJCQkJCQkJCXZhciBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MgPSBbXTsKLyoqKioqKi8gCQkJCQkJCQlmb3IgKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7Ci8qKioqKiovIAkJCQkJCQkJCXZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07Ci8qKioqKiovIAkJCQkJCQkJCXZhciBhY2NlcHRDYWxsYmFjayA9Ci8qKioqKiovIAkJCQkJCQkJCQltb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTsKLyoqKioqKi8gCQkJCQkJCQkJdmFyIGVycm9ySGFuZGxlciA9Ci8qKioqKiovIAkJCQkJCQkJCQltb2R1bGUuaG90Ll9hY2NlcHRlZEVycm9ySGFuZGxlcnNbZGVwZW5kZW5jeV07Ci8qKioqKiovIAkJCQkJCQkJCWlmIChhY2NlcHRDYWxsYmFjaykgewovKioqKioqLyAJCQkJCQkJCQkJaWYgKGNhbGxiYWNrcy5pbmRleE9mKGFjY2VwdENhbGxiYWNrKSAhPT0gLTEpIGNvbnRpbnVlOwovKioqKioqLyAJCQkJCQkJCQkJY2FsbGJhY2tzLnB1c2goYWNjZXB0Q2FsbGJhY2spOwovKioqKioqLyAJCQkJCQkJCQkJZXJyb3JIYW5kbGVycy5wdXNoKGVycm9ySGFuZGxlcik7Ci8qKioqKiovIAkJCQkJCQkJCQlkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MucHVzaChkZXBlbmRlbmN5KTsKLyoqKioqKi8gCQkJCQkJCQkJfQovKioqKioqLyAJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQlmb3IgKHZhciBrID0gMDsgayA8IGNhbGxiYWNrcy5sZW5ndGg7IGsrKykgewovKioqKioqLyAJCQkJCQkJCQl0cnkgewovKioqKioqLyAJCQkJCQkJCQkJY2FsbGJhY2tzW2tdLmNhbGwobnVsbCwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpOwovKioqKioqLyAJCQkJCQkJCQl9IGNhdGNoIChlcnIpIHsKLyoqKioqKi8gCQkJCQkJCQkJCWlmICh0eXBlb2YgZXJyb3JIYW5kbGVyc1trXSA9PT0gImZ1bmN0aW9uIikgewovKioqKioqLyAJCQkJCQkJCQkJCXRyeSB7Ci8qKioqKiovIAkJCQkJCQkJCQkJCWVycm9ySGFuZGxlcnNba10oZXJyLCB7Ci8qKioqKiovIAkJCQkJCQkJCQkJCQltb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCwKLyoqKioqKi8gCQkJCQkJCQkJCQkJCWRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdCi8qKioqKiovIAkJCQkJCQkJCQkJCX0pOwovKioqKioqLyAJCQkJCQkJCQkJCX0gY2F0Y2ggKGVycjIpIHsKLyoqKioqKi8gCQkJCQkJCQkJCQkJaWYgKG9wdGlvbnMub25FcnJvcmVkKSB7Ci8qKioqKiovIAkJCQkJCQkJCQkJCQlvcHRpb25zLm9uRXJyb3JlZCh7Ci8qKioqKiovIAkJCQkJCQkJCQkJCQkJdHlwZTogImFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWQiLAovKioqKioqLyAJCQkJCQkJCQkJCQkJCW1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLAovKioqKioqLyAJCQkJCQkJCQkJCQkJCWRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLAovKioqKioqLyAJCQkJCQkJCQkJCQkJCWVycm9yOiBlcnIyLAovKioqKioqLyAJCQkJCQkJCQkJCQkJCW9yaWdpbmFsRXJyb3I6IGVycgovKioqKioqLyAJCQkJCQkJCQkJCQkJfSk7Ci8qKioqKiovIAkJCQkJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQkJCQkJaWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHsKLyoqKioqKi8gCQkJCQkJCQkJCQkJCXJlcG9ydEVycm9yKGVycjIpOwovKioqKioqLyAJCQkJCQkJCQkJCQkJcmVwb3J0RXJyb3IoZXJyKTsKLyoqKioqKi8gCQkJCQkJCQkJCQkJfQovKioqKioqLyAJCQkJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQkJCX0gZWxzZSB7Ci8qKioqKiovIAkJCQkJCQkJCQkJaWYgKG9wdGlvbnMub25FcnJvcmVkKSB7Ci8qKioqKiovIAkJCQkJCQkJCQkJCW9wdGlvbnMub25FcnJvcmVkKHsKLyoqKioqKi8gCQkJCQkJCQkJCQkJCXR5cGU6ICJhY2NlcHQtZXJyb3JlZCIsCi8qKioqKiovIAkJCQkJCQkJCQkJCQltb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCwKLyoqKioqKi8gCQkJCQkJCQkJCQkJCWRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdLAovKioqKioqLyAJCQkJCQkJCQkJCQkJZXJyb3I6IGVycgovKioqKioqLyAJCQkJCQkJCQkJCQl9KTsKLyoqKioqKi8gCQkJCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQkJCQkJaWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHsKLyoqKioqKi8gCQkJCQkJCQkJCQkJcmVwb3J0RXJyb3IoZXJyKTsKLyoqKioqKi8gCQkJCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCX0KLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCi8qKioqKiovIAkJCQkJLy8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXMKLyoqKioqKi8gCQkJCQlmb3IgKHZhciBvID0gMDsgbyA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IG8rKykgewovKioqKioqLyAJCQkJCQl2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tvXTsKLyoqKioqKi8gCQkJCQkJdmFyIG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7Ci8qKioqKiovIAkJCQkJCXRyeSB7Ci8qKioqKiovIAkJCQkJCQlpdGVtLnJlcXVpcmUobW9kdWxlSWQpOwovKioqKioqLyAJCQkJCQl9IGNhdGNoIChlcnIpIHsKLyoqKioqKi8gCQkJCQkJCWlmICh0eXBlb2YgaXRlbS5lcnJvckhhbmRsZXIgPT09ICJmdW5jdGlvbiIpIHsKLyoqKioqKi8gCQkJCQkJCQl0cnkgewovKioqKioqLyAJCQkJCQkJCQlpdGVtLmVycm9ySGFuZGxlcihlcnIsIHsKLyoqKioqKi8gCQkJCQkJCQkJCW1vZHVsZUlkOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJCQkJCQkJCW1vZHVsZTogX193ZWJwYWNrX3JlcXVpcmVfXy5jW21vZHVsZUlkXQovKioqKioqLyAJCQkJCQkJCQl9KTsKLyoqKioqKi8gCQkJCQkJCQl9IGNhdGNoIChlcnIyKSB7Ci8qKioqKiovIAkJCQkJCQkJCWlmIChvcHRpb25zLm9uRXJyb3JlZCkgewovKioqKioqLyAJCQkJCQkJCQkJb3B0aW9ucy5vbkVycm9yZWQoewovKioqKioqLyAJCQkJCQkJCQkJCXR5cGU6ICJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWQiLAovKioqKioqLyAJCQkJCQkJCQkJCW1vZHVsZUlkOiBtb2R1bGVJZCwKLyoqKioqKi8gCQkJCQkJCQkJCQllcnJvcjogZXJyMiwKLyoqKioqKi8gCQkJCQkJCQkJCQlvcmlnaW5hbEVycm9yOiBlcnIKLyoqKioqKi8gCQkJCQkJCQkJCX0pOwovKioqKioqLyAJCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQkJCWlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7Ci8qKioqKiovIAkJCQkJCQkJCQlyZXBvcnRFcnJvcihlcnIyKTsKLyoqKioqKi8gCQkJCQkJCQkJCXJlcG9ydEVycm9yKGVycik7Ci8qKioqKiovIAkJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQl9Ci8qKioqKiovIAkJCQkJCQl9IGVsc2UgewovKioqKioqLyAJCQkJCQkJCWlmIChvcHRpb25zLm9uRXJyb3JlZCkgewovKioqKioqLyAJCQkJCQkJCQlvcHRpb25zLm9uRXJyb3JlZCh7Ci8qKioqKiovIAkJCQkJCQkJCQl0eXBlOiAic2VsZi1hY2NlcHQtZXJyb3JlZCIsCi8qKioqKiovIAkJCQkJCQkJCQltb2R1bGVJZDogbW9kdWxlSWQsCi8qKioqKiovIAkJCQkJCQkJCQllcnJvcjogZXJyCi8qKioqKiovIAkJCQkJCQkJCX0pOwovKioqKioqLyAJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCQlpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkgewovKioqKioqLyAJCQkJCQkJCQlyZXBvcnRFcnJvcihlcnIpOwovKioqKioqLyAJCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJCX0KLyoqKioqKi8gCQkJCQkJfQovKioqKioqLyAJCQkJCX0KLyoqKioqKi8gCQkKLyoqKioqKi8gCQkJCQlyZXR1cm4gb3V0ZGF0ZWRNb2R1bGVzOwovKioqKioqLyAJCQkJfQovKioqKioqLyAJCQl9OwovKioqKioqLyAJCX0KLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkuanNvbnAgPSBmdW5jdGlvbiAobW9kdWxlSWQsIGFwcGx5SGFuZGxlcnMpIHsKLyoqKioqKi8gCQkJaWYgKCFjdXJyZW50VXBkYXRlKSB7Ci8qKioqKiovIAkJCQljdXJyZW50VXBkYXRlID0ge307Ci8qKioqKiovIAkJCQljdXJyZW50VXBkYXRlUnVudGltZSA9IFtdOwovKioqKioqLyAJCQkJY3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSBbXTsKLyoqKioqKi8gCQkJCWFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJCWlmICghX193ZWJwYWNrX3JlcXVpcmVfXy5vKGN1cnJlbnRVcGRhdGUsIG1vZHVsZUlkKSkgewovKioqKioqLyAJCQkJY3VycmVudFVwZGF0ZVttb2R1bGVJZF0gPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1bbW9kdWxlSWRdOwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMuanNvbnAgPSBmdW5jdGlvbiAoCi8qKioqKiovIAkJCWNodW5rSWRzLAovKioqKioqLyAJCQlyZW1vdmVkQ2h1bmtzLAovKioqKioqLyAJCQlyZW1vdmVkTW9kdWxlcywKLyoqKioqKi8gCQkJcHJvbWlzZXMsCi8qKioqKiovIAkJCWFwcGx5SGFuZGxlcnMsCi8qKioqKiovIAkJCXVwZGF0ZWRNb2R1bGVzTGlzdAovKioqKioqLyAJCSkgewovKioqKioqLyAJCQlhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTsKLyoqKioqKi8gCQkJY3VycmVudFVwZGF0ZUNodW5rcyA9IHt9OwovKioqKioqLyAJCQljdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcyA9IHJlbW92ZWRDaHVua3M7Ci8qKioqKiovIAkJCWN1cnJlbnRVcGRhdGUgPSByZW1vdmVkTW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7Ci8qKioqKiovIAkJCQlvYmpba2V5XSA9IGZhbHNlOwovKioqKioqLyAJCQkJcmV0dXJuIG9iajsKLyoqKioqKi8gCQkJfSwge30pOwovKioqKioqLyAJCQljdXJyZW50VXBkYXRlUnVudGltZSA9IFtdOwovKioqKioqLyAJCQljaHVua0lkcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7Ci8qKioqKiovIAkJCQlpZiAoCi8qKioqKiovIAkJCQkJX193ZWJwYWNrX3JlcXVpcmVfXy5vKGluc3RhbGxlZENodW5rcywgY2h1bmtJZCkgJiYKLyoqKioqKi8gCQkJCQlpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZAovKioqKioqLyAJCQkJKSB7Ci8qKioqKiovIAkJCQkJcHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgdXBkYXRlZE1vZHVsZXNMaXN0KSk7Ci8qKioqKiovIAkJCQkJY3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7Ci8qKioqKiovIAkJCQl9IGVsc2UgewovKioqKioqLyAJCQkJCWN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0gPSBmYWxzZTsKLyoqKioqKi8gCQkJCX0KLyoqKioqKi8gCQkJfSk7Ci8qKioqKiovIAkJCWlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIHsKLyoqKioqKi8gCQkJCV9fd2VicGFja19yZXF1aXJlX18uZi5qc29ucEhtciA9IGZ1bmN0aW9uIChjaHVua0lkLCBwcm9taXNlcykgewovKioqKioqLyAJCQkJCWlmICgKLyoqKioqKi8gCQkJCQkJY3VycmVudFVwZGF0ZUNodW5rcyAmJgovKioqKioqLyAJCQkJCQlfX3dlYnBhY2tfcmVxdWlyZV9fLm8oY3VycmVudFVwZGF0ZUNodW5rcywgY2h1bmtJZCkgJiYKLyoqKioqKi8gCQkJCQkJIWN1cnJlbnRVcGRhdGVDaHVua3NbY2h1bmtJZF0KLyoqKioqKi8gCQkJCQkpIHsKLyoqKioqKi8gCQkJCQkJcHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkpOwovKioqKioqLyAJCQkJCQljdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTsKLyoqKioqKi8gCQkJCQl9Ci8qKioqKiovIAkJCQl9OwovKioqKioqLyAJCQl9Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQlfX3dlYnBhY2tfcmVxdWlyZV9fLmhtck0gPSAoKSA9PiB7Ci8qKioqKiovIAkJCWlmICh0eXBlb2YgZmV0Y2ggPT09ICJ1bmRlZmluZWQiKSB0aHJvdyBuZXcgRXJyb3IoIk5vIGJyb3dzZXIgc3VwcG9ydDogbmVlZCBmZXRjaCBBUEkiKTsKLyoqKioqKi8gCQkJcmV0dXJuIGZldGNoKF9fd2VicGFja19yZXF1aXJlX18ucCArIF9fd2VicGFja19yZXF1aXJlX18uaG1yRigpKS50aGVuKChyZXNwb25zZSkgPT4gewovKioqKioqLyAJCQkJaWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybjsgLy8gbm8gdXBkYXRlIGF2YWlsYWJsZQovKioqKioqLyAJCQkJaWYoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoIkZhaWxlZCB0byBmZXRjaCB1cGRhdGUgbWFuaWZlc3QgIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpOwovKioqKioqLyAJCQkJcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKLyoqKioqKi8gCQkJfSk7Ci8qKioqKiovIAkJfTsKLyoqKioqKi8gCQkKLyoqKioqKi8gCQkvLyBubyBvbiBjaHVua3MgbG9hZGVkCi8qKioqKiovIAkJCi8qKioqKiovIAkJLy8gbm8ganNvbnAgZnVuY3Rpb24KLyoqKioqKi8gCX0pKCk7Ci8qKioqKiovIAkKLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLyoqKioqKi8gCQovKioqKioqLyAJLy8gbW9kdWxlIGNhY2hlIGFyZSB1c2VkIHNvIGVudHJ5IGlubGluaW5nIGlzIGRpc2FibGVkCi8qKioqKiovIAkvLyBzdGFydHVwCi8qKioqKiovIAkvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHMKLyoqKioqKi8gCV9fd2VicGFja19yZXF1aXJlX18oIi4uLy4uLy55YXJuL19fdmlydHVhbF9fL3dlYnBhY2stZGV2LXNlcnZlci12aXJ0dWFsLTM1NGEzNWNkMzAvMC9jYWNoZS93ZWJwYWNrLWRldi1zZXJ2ZXItbnBtLTQuMTMuMi03MmNjNTQ0YTg0LTliZjU3M2FiZjAuemlwL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvY2xpZW50L2luZGV4LmpzP3Byb3RvY29sPXdzJTNBJmhvc3RuYW1lPWxvY2FsaG9zdCZwb3J0PTkwMDMmcGF0aG5hbWU9JTJGd3MmbG9nZ2luZz1pbmZvJm92ZXJsYXk9dHJ1ZSZyZWNvbm5lY3Q9MTAmaG90PXRydWUmbGl2ZS1yZWxvYWQ9dHJ1ZSIpOwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXygiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vd2VicGFjay12aXJ0dWFsLTdlMTg3MTY3ZDEvMC9jYWNoZS93ZWJwYWNrLW5wbS01Ljc4LjAtYWRkNzYyYzk3Mi00MjEzZTViY2MyLnppcC9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvZGV2LXNlcnZlci5qcyIpOwovKioqKioqLyAJX193ZWJwYWNrX3JlcXVpcmVfXygiLi4vLi4vLnlhcm4vX192aXJ0dWFsX18vc3lzdGVtanMtd2VicGFjay1pbnRlcm9wLXZpcnR1YWwtMjAyOGFlMzEyYS8wL2NhY2hlL3N5c3RlbWpzLXdlYnBhY2staW50ZXJvcC1ucG0tMi4zLjctNWYwMDVjNjkzOS02YTI5NGFhNDUyLnppcC9ub2RlX21vZHVsZXMvc3lzdGVtanMtd2VicGFjay1pbnRlcm9wL2F1dG8tcHVibGljLXBhdGgvMS5qcyIpOwovKioqKioqLyAJdmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKCIuL3NyYy9tbWEtdXRpbHMyLnRzeCIpOwovKioqKioqLyAJCi8qKioqKiovIAlyZXR1cm4gX193ZWJwYWNrX2V4cG9ydHNfXzsKLyoqKioqKi8gfSkoKQoKCQkJKTsKCQl9Cgl9Owp9KTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9bW1hLXV0aWxzMi5qcy5tYXA=",
            "encoding": "base64"
          },
          "redirectURL": "",
          "headersSize": 278,
          "bodySize": -43,
          "_transferSize": 235,
          "_error": null
        },
        "serverIPAddress": "[::1]",
        "startedDateTime": "2023-04-10T17:57:17.002Z",
        "time": 30.64500000064576,
        "timings": {
          "blocked": 14.98200000021141,
          "dns": 0.010999999999999233,
          "ssl": -1,
          "connect": 0.7389999999999999,
          "send": 0.266,
          "wait": 12.96199999934528,
          "receive": 1.6850000010890653,
          "_blocked_queueing": 8.87700000021141
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "WebSocketClient",
                "scriptId": "1379",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 202,
                "columnNumber": 18
              },
              {
                "functionName": "initSocket",
                "scriptId": "1379",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 1930,
                "columnNumber": 11
              },
              {
                "functionName": "../../.yarn/__virtual__/webpack-dev-server-virtual-6e6a43ea5c/0/cache/webpack-dev-server-npm-4.13.2-72cc544a84-9bf573abf0.zip/node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=localhost&port=9002&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true",
                "scriptId": "1379",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 549,
                "columnNumber": 54
              },
              {
                "functionName": "__webpack_require__",
                "scriptId": "1379",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 3563,
                "columnNumber": 32
              },
              {
                "functionName": "",
                "scriptId": "1379",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 4611,
                "columnNumber": 10
              },
              {
                "functionName": "execute",
                "scriptId": "1379",
                "url": "http://localhost:9002/mma-utils1.js",
                "lineNumber": 4617,
                "columnNumber": 11
              },
              {
                "functionName": "doExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 468,
                "columnNumber": 33
              },
              {
                "functionName": "postOrderExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 464,
                "columnNumber": 11
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 450,
                "columnNumber": 29
              },
              {
                "functionName": "postOrderExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 448,
                "columnNumber": 11
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 421,
                "columnNumber": 13
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "topLevelLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 420,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 230,
                  "columnNumber": 23
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 228,
                    "columnNumber": 5
                  },
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 774,
                    "columnNumber": 18
                  },
                  {
                    "functionName": "app",
                    "scriptId": "1368",
                    "url": "http://localhost:9000/mma-root-config.js",
                    "lineNumber": 29,
                    "columnNumber": 27
                  },
                  {
                    "functionName": "",
                    "scriptId": "1372",
                    "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                    "lineNumber": 1,
                    "columnNumber": 9744
                  }
                ],
                "parent": {
                  "description": "Promise.then",
                  "callFrames": [
                    {
                      "functionName": "",
                      "scriptId": "1372",
                      "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                      "lineNumber": 1,
                      "columnNumber": 9719
                    }
                  ],
                  "parent": {
                    "description": "Promise.then",
                    "callFrames": [
                      {
                        "functionName": "X",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 9594
                      },
                      {
                        "functionName": "",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 17833
                      }
                    ],
                    "parent": {
                      "description": "Promise.then",
                      "callFrames": [
                        {
                          "functionName": "d",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 17808
                        },
                        {
                          "functionName": "Rt",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 17747
                        },
                        {
                          "functionName": "Pt",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 15763
                        },
                        {
                          "functionName": "./src/mma-root-config.ts",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 26,
                          "columnNumber": 63
                        },
                        {
                          "functionName": "__webpack_require__",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 3577,
                          "columnNumber": 32
                        },
                        {
                          "functionName": "",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 4628,
                          "columnNumber": 36
                        },
                        {
                          "functionName": "execute",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 4631,
                          "columnNumber": 11
                        },
                        {
                          "functionName": "doExec",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 468,
                          "columnNumber": 33
                        },
                        {
                          "functionName": "postOrderExec",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 464,
                          "columnNumber": 11
                        },
                        {
                          "functionName": "",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 421,
                          "columnNumber": 13
                        }
                      ],
                      "parent": {
                        "description": "Promise.then",
                        "callFrames": [
                          {
                            "functionName": "topLevelLoad",
                            "scriptId": "1359",
                            "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                            "lineNumber": 420,
                            "columnNumber": 5
                          },
                          {
                            "functionName": "",
                            "scriptId": "1359",
                            "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                            "lineNumber": 230,
                            "columnNumber": 23
                          }
                        ],
                        "parent": {
                          "description": "Promise.then",
                          "callFrames": [
                            {
                              "functionName": "systemJSPrototype.import",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 228,
                              "columnNumber": 5
                            },
                            {
                              "functionName": "systemJSPrototype.import",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 774,
                              "columnNumber": 18
                            },
                            {
                              "functionName": "",
                              "scriptId": "1365",
                              "url": "http://localhost:9000/",
                              "lineNumber": 81,
                              "columnNumber": 17
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "_priority": null,
        "_resourceType": "websocket",
        "_webSocketMessages": [
          {
            "type": "receive",
            "time": 1681149437.2180498,
            "opcode": 1,
            "data": "{\"type\":\"hot\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.2186568,
            "opcode": 1,
            "data": "{\"type\":\"liveReload\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.2187338,
            "opcode": 1,
            "data": "{\"type\":\"reconnect\",\"data\":10}"
          },
          {
            "type": "receive",
            "time": 1681149437.2188017,
            "opcode": 1,
            "data": "{\"type\":\"overlay\",\"data\":true}"
          },
          {
            "type": "receive",
            "time": 1681149437.2188888,
            "opcode": 1,
            "data": "{\"type\":\"hash\",\"data\":\"075e54133012e4c9c6b9\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.2189777,
            "opcode": 1,
            "data": "{\"type\":\"ok\"}"
          }
        ],
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "ws://localhost:9002/ws",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Origin",
              "value": "http://localhost:9000"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:9002"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Sec-WebSocket-Key",
              "value": "dmwKbYeucBso4xoS3YeoiA=="
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Version",
              "value": "13"
            },
            {
              "name": "Sec-WebSocket-Extensions",
              "value": "permessage-deflate; client_max_window_bits"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 554,
          "bodySize": 0
        },
        "response": {
          "status": 101,
          "statusText": "Switching Protocols",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Accept",
              "value": "OX8OjaproKIBSdfOWTr1ebBsY1Q="
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": 129
          },
          "redirectURL": "",
          "headersSize": 129,
          "bodySize": -129,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2023-04-10T17:57:17.214Z",
        "time": 4.759999999805586,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 4.759999999805586,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "WebSocketClient",
                "scriptId": "1380",
                "url": "http://localhost:9003/mma-utils2.js",
                "lineNumber": 210,
                "columnNumber": 18
              },
              {
                "functionName": "initSocket",
                "scriptId": "1380",
                "url": "http://localhost:9003/mma-utils2.js",
                "lineNumber": 1938,
                "columnNumber": 11
              },
              {
                "functionName": "../../.yarn/__virtual__/webpack-dev-server-virtual-354a35cd30/0/cache/webpack-dev-server-npm-4.13.2-72cc544a84-9bf573abf0.zip/node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=localhost&port=9003&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true",
                "scriptId": "1380",
                "url": "http://localhost:9003/mma-utils2.js",
                "lineNumber": 557,
                "columnNumber": 54
              },
              {
                "functionName": "__webpack_require__",
                "scriptId": "1380",
                "url": "http://localhost:9003/mma-utils2.js",
                "lineNumber": 4931,
                "columnNumber": 32
              },
              {
                "functionName": "",
                "scriptId": "1380",
                "url": "http://localhost:9003/mma-utils2.js",
                "lineNumber": 5979,
                "columnNumber": 10
              },
              {
                "functionName": "execute",
                "scriptId": "1380",
                "url": "http://localhost:9003/mma-utils2.js",
                "lineNumber": 5985,
                "columnNumber": 11
              },
              {
                "functionName": "doExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 468,
                "columnNumber": 33
              },
              {
                "functionName": "postOrderExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 464,
                "columnNumber": 11
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 450,
                "columnNumber": 29
              },
              {
                "functionName": "postOrderExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 448,
                "columnNumber": 11
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 421,
                "columnNumber": 13
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "topLevelLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 420,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 230,
                  "columnNumber": 23
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 228,
                    "columnNumber": 5
                  },
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 774,
                    "columnNumber": 18
                  },
                  {
                    "functionName": "app",
                    "scriptId": "1368",
                    "url": "http://localhost:9000/mma-root-config.js",
                    "lineNumber": 29,
                    "columnNumber": 27
                  },
                  {
                    "functionName": "",
                    "scriptId": "1372",
                    "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                    "lineNumber": 1,
                    "columnNumber": 9744
                  }
                ],
                "parent": {
                  "description": "Promise.then",
                  "callFrames": [
                    {
                      "functionName": "",
                      "scriptId": "1372",
                      "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                      "lineNumber": 1,
                      "columnNumber": 9719
                    }
                  ],
                  "parent": {
                    "description": "Promise.then",
                    "callFrames": [
                      {
                        "functionName": "X",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 9594
                      },
                      {
                        "functionName": "",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 17833
                      }
                    ],
                    "parent": {
                      "description": "Promise.then",
                      "callFrames": [
                        {
                          "functionName": "d",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 17808
                        },
                        {
                          "functionName": "Rt",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 17747
                        },
                        {
                          "functionName": "Pt",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 15763
                        },
                        {
                          "functionName": "./src/mma-root-config.ts",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 26,
                          "columnNumber": 63
                        },
                        {
                          "functionName": "__webpack_require__",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 3577,
                          "columnNumber": 32
                        },
                        {
                          "functionName": "",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 4628,
                          "columnNumber": 36
                        },
                        {
                          "functionName": "execute",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 4631,
                          "columnNumber": 11
                        },
                        {
                          "functionName": "doExec",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 468,
                          "columnNumber": 33
                        },
                        {
                          "functionName": "postOrderExec",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 464,
                          "columnNumber": 11
                        },
                        {
                          "functionName": "",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 421,
                          "columnNumber": 13
                        }
                      ],
                      "parent": {
                        "description": "Promise.then",
                        "callFrames": [
                          {
                            "functionName": "topLevelLoad",
                            "scriptId": "1359",
                            "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                            "lineNumber": 420,
                            "columnNumber": 5
                          },
                          {
                            "functionName": "",
                            "scriptId": "1359",
                            "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                            "lineNumber": 230,
                            "columnNumber": 23
                          }
                        ],
                        "parent": {
                          "description": "Promise.then",
                          "callFrames": [
                            {
                              "functionName": "systemJSPrototype.import",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 228,
                              "columnNumber": 5
                            },
                            {
                              "functionName": "systemJSPrototype.import",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 774,
                              "columnNumber": 18
                            },
                            {
                              "functionName": "",
                              "scriptId": "1365",
                              "url": "http://localhost:9000/",
                              "lineNumber": 81,
                              "columnNumber": 17
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "_priority": null,
        "_resourceType": "websocket",
        "_webSocketMessages": [
          {
            "type": "receive",
            "time": 1681149437.218209,
            "opcode": 1,
            "data": "{\"type\":\"hot\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.219343,
            "opcode": 1,
            "data": "{\"type\":\"liveReload\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.21942,
            "opcode": 1,
            "data": "{\"type\":\"reconnect\",\"data\":10}"
          },
          {
            "type": "receive",
            "time": 1681149437.219486,
            "opcode": 1,
            "data": "{\"type\":\"overlay\",\"data\":true}"
          },
          {
            "type": "receive",
            "time": 1681149437.219551,
            "opcode": 1,
            "data": "{\"type\":\"hash\",\"data\":\"510d9459cb17279bba20\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.21963,
            "opcode": 1,
            "data": "{\"type\":\"ok\"}"
          }
        ],
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "ws://localhost:9003/ws",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Origin",
              "value": "http://localhost:9000"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:9003"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Sec-WebSocket-Key",
              "value": "fgbfVWbuELXsyrmA3o4UIA=="
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Version",
              "value": "13"
            },
            {
              "name": "Sec-WebSocket-Extensions",
              "value": "permessage-deflate; client_max_window_bits"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 554,
          "bodySize": 0
        },
        "response": {
          "status": 101,
          "statusText": "Switching Protocols",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Accept",
              "value": "X3t23/5yKKHZgQHU7JNfcX/7j8U="
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": 129
          },
          "redirectURL": "",
          "headersSize": 129,
          "bodySize": -129,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2023-04-10T17:57:17.214Z",
        "time": 5.241000000751228,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 5.241000000751228,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "WebSocketClient",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 637,
                "columnNumber": 18
              },
              {
                "functionName": "initSocket",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 2365,
                "columnNumber": 11
              },
              {
                "functionName": "../../.yarn/__virtual__/webpack-dev-server-virtual-437b8b3d29/0/cache/webpack-dev-server-npm-4.13.2-72cc544a84-9bf573abf0.zip/node_modules/webpack-dev-server/client/index.js?protocol=ws%3A&hostname=localhost&port=9001&pathname=%2Fws&logging=info&overlay=true&reconnect=10&hot=true&live-reload=true",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 984,
                "columnNumber": 54
              },
              {
                "functionName": "options.factory",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 13481,
                "columnNumber": 30
              },
              {
                "functionName": "__webpack_require__",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 12934,
                "columnNumber": 32
              },
              {
                "functionName": "",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 14056,
                "columnNumber": 10
              },
              {
                "functionName": "execute",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 14063,
                "columnNumber": 11
              },
              {
                "functionName": "doExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 468,
                "columnNumber": 33
              },
              {
                "functionName": "postOrderExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 464,
                "columnNumber": 11
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 421,
                "columnNumber": 13
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "topLevelLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 420,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 230,
                  "columnNumber": 23
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 228,
                    "columnNumber": 5
                  },
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 774,
                    "columnNumber": 18
                  },
                  {
                    "functionName": "app",
                    "scriptId": "1368",
                    "url": "http://localhost:9000/mma-root-config.js",
                    "lineNumber": 29,
                    "columnNumber": 27
                  },
                  {
                    "functionName": "",
                    "scriptId": "1372",
                    "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                    "lineNumber": 1,
                    "columnNumber": 9744
                  }
                ],
                "parent": {
                  "description": "Promise.then",
                  "callFrames": [
                    {
                      "functionName": "",
                      "scriptId": "1372",
                      "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                      "lineNumber": 1,
                      "columnNumber": 9719
                    }
                  ],
                  "parent": {
                    "description": "Promise.then",
                    "callFrames": [
                      {
                        "functionName": "X",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 9594
                      },
                      {
                        "functionName": "",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 17833
                      }
                    ],
                    "parent": {
                      "description": "Promise.then",
                      "callFrames": [
                        {
                          "functionName": "d",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 17808
                        },
                        {
                          "functionName": "Rt",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 17747
                        },
                        {
                          "functionName": "Pt",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 15763
                        },
                        {
                          "functionName": "./src/mma-root-config.ts",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 26,
                          "columnNumber": 63
                        },
                        {
                          "functionName": "__webpack_require__",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 3577,
                          "columnNumber": 32
                        },
                        {
                          "functionName": "",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 4628,
                          "columnNumber": 36
                        },
                        {
                          "functionName": "execute",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 4631,
                          "columnNumber": 11
                        },
                        {
                          "functionName": "doExec",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 468,
                          "columnNumber": 33
                        },
                        {
                          "functionName": "postOrderExec",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 464,
                          "columnNumber": 11
                        },
                        {
                          "functionName": "",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 421,
                          "columnNumber": 13
                        }
                      ],
                      "parent": {
                        "description": "Promise.then",
                        "callFrames": [
                          {
                            "functionName": "topLevelLoad",
                            "scriptId": "1359",
                            "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                            "lineNumber": 420,
                            "columnNumber": 5
                          },
                          {
                            "functionName": "",
                            "scriptId": "1359",
                            "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                            "lineNumber": 230,
                            "columnNumber": 23
                          }
                        ],
                        "parent": {
                          "description": "Promise.then",
                          "callFrames": [
                            {
                              "functionName": "systemJSPrototype.import",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 228,
                              "columnNumber": 5
                            },
                            {
                              "functionName": "systemJSPrototype.import",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 774,
                              "columnNumber": 18
                            },
                            {
                              "functionName": "",
                              "scriptId": "1365",
                              "url": "http://localhost:9000/",
                              "lineNumber": 81,
                              "columnNumber": 17
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "_priority": null,
        "_resourceType": "websocket",
        "_webSocketMessages": [
          {
            "type": "receive",
            "time": 1681149437.2183251,
            "opcode": 1,
            "data": "{\"type\":\"hot\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.219954,
            "opcode": 1,
            "data": "{\"type\":\"liveReload\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.220056,
            "opcode": 1,
            "data": "{\"type\":\"reconnect\",\"data\":10}"
          },
          {
            "type": "receive",
            "time": 1681149437.220128,
            "opcode": 1,
            "data": "{\"type\":\"overlay\",\"data\":true}"
          },
          {
            "type": "receive",
            "time": 1681149437.220194,
            "opcode": 1,
            "data": "{\"type\":\"hash\",\"data\":\"fbdd0f4b7675208053be\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.220256,
            "opcode": 1,
            "data": "{\"type\":\"ok\"}"
          }
        ],
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "ws://localhost:9001/ws",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Origin",
              "value": "http://localhost:9000"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:9001"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Sec-WebSocket-Key",
              "value": "rMpR9clMksxo2LUOyyV0vQ=="
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Version",
              "value": "13"
            },
            {
              "name": "Sec-WebSocket-Extensions",
              "value": "permessage-deflate; client_max_window_bits"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 554,
          "bodySize": 0
        },
        "response": {
          "status": 101,
          "statusText": "Switching Protocols",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Accept",
              "value": "XWDKJ3jDafAlnFNeolNJw288its="
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": 129
          },
          "redirectURL": "",
          "headersSize": 129,
          "bodySize": -129,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2023-04-10T17:57:17.214Z",
        "time": 5.75600000047416,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 5.75600000047416,
          "receive": 0,
          "_blocked_queueing": -1
        }
      },
      {
        "_initiator": {
          "type": "script",
          "stack": {
            "callFrames": [
              {
                "functionName": "WebSocketClient",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 637,
                "columnNumber": 18
              },
              {
                "functionName": "initWDSSocket",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 12589,
                "columnNumber": 23
              },
              {
                "functionName": "initSocket",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 11247,
                "columnNumber": 35
              },
              {
                "functionName": "executeWithRetryAndTimeout",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 11584,
                "columnNumber": 6
              },
              {
                "functionName": "runWithRetry",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 11592,
                "columnNumber": 2
              },
              {
                "functionName": "setupOverlay",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 11246,
                "columnNumber": 8
              },
              {
                "functionName": "runWithPatchedUrl",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 11554,
                "columnNumber": 2
              },
              {
                "functionName": "../../.yarn/__virtual__/@pmmmwh-react-refresh-webpack-plugin-virtual-e515ad67a0/0/cache/@pmmmwh-react-refresh-webpack-plugin-npm-0.5.10-0928d1798a-c45beded9c.zip/node_modules/@pmmmwh/react-refresh-webpack-plugin/client/ErrorOverlayEntry.js?sockHost=localhost&sockProtocol=http",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 11241,
                "columnNumber": 4
              },
              {
                "functionName": "options.factory",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 13481,
                "columnNumber": 30
              },
              {
                "functionName": "__webpack_require__",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 12934,
                "columnNumber": 32
              },
              {
                "functionName": "",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 14058,
                "columnNumber": 10
              },
              {
                "functionName": "execute",
                "scriptId": "1374",
                "url": "http://localhost:9001/mma-app1.js",
                "lineNumber": 14063,
                "columnNumber": 11
              },
              {
                "functionName": "doExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 468,
                "columnNumber": 33
              },
              {
                "functionName": "postOrderExec",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 464,
                "columnNumber": 11
              },
              {
                "functionName": "",
                "scriptId": "1359",
                "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                "lineNumber": 421,
                "columnNumber": 13
              }
            ],
            "parent": {
              "description": "Promise.then",
              "callFrames": [
                {
                  "functionName": "topLevelLoad",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 420,
                  "columnNumber": 5
                },
                {
                  "functionName": "",
                  "scriptId": "1359",
                  "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                  "lineNumber": 230,
                  "columnNumber": 23
                }
              ],
              "parent": {
                "description": "Promise.then",
                "callFrames": [
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 228,
                    "columnNumber": 5
                  },
                  {
                    "functionName": "systemJSPrototype.import",
                    "scriptId": "1359",
                    "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                    "lineNumber": 774,
                    "columnNumber": 18
                  },
                  {
                    "functionName": "app",
                    "scriptId": "1368",
                    "url": "http://localhost:9000/mma-root-config.js",
                    "lineNumber": 29,
                    "columnNumber": 27
                  },
                  {
                    "functionName": "",
                    "scriptId": "1372",
                    "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                    "lineNumber": 1,
                    "columnNumber": 9744
                  }
                ],
                "parent": {
                  "description": "Promise.then",
                  "callFrames": [
                    {
                      "functionName": "",
                      "scriptId": "1372",
                      "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                      "lineNumber": 1,
                      "columnNumber": 9719
                    }
                  ],
                  "parent": {
                    "description": "Promise.then",
                    "callFrames": [
                      {
                        "functionName": "X",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 9594
                      },
                      {
                        "functionName": "",
                        "scriptId": "1372",
                        "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                        "lineNumber": 1,
                        "columnNumber": 17833
                      }
                    ],
                    "parent": {
                      "description": "Promise.then",
                      "callFrames": [
                        {
                          "functionName": "d",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 17808
                        },
                        {
                          "functionName": "Rt",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 17747
                        },
                        {
                          "functionName": "Pt",
                          "scriptId": "1372",
                          "url": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
                          "lineNumber": 1,
                          "columnNumber": 15763
                        },
                        {
                          "functionName": "./src/mma-root-config.ts",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 26,
                          "columnNumber": 63
                        },
                        {
                          "functionName": "__webpack_require__",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 3577,
                          "columnNumber": 32
                        },
                        {
                          "functionName": "",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 4628,
                          "columnNumber": 36
                        },
                        {
                          "functionName": "execute",
                          "scriptId": "1368",
                          "url": "http://localhost:9000/mma-root-config.js",
                          "lineNumber": 4631,
                          "columnNumber": 11
                        },
                        {
                          "functionName": "doExec",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 468,
                          "columnNumber": 33
                        },
                        {
                          "functionName": "postOrderExec",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 464,
                          "columnNumber": 11
                        },
                        {
                          "functionName": "",
                          "scriptId": "1359",
                          "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                          "lineNumber": 421,
                          "columnNumber": 13
                        }
                      ],
                      "parent": {
                        "description": "Promise.then",
                        "callFrames": [
                          {
                            "functionName": "topLevelLoad",
                            "scriptId": "1359",
                            "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                            "lineNumber": 420,
                            "columnNumber": 5
                          },
                          {
                            "functionName": "",
                            "scriptId": "1359",
                            "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                            "lineNumber": 230,
                            "columnNumber": 23
                          }
                        ],
                        "parent": {
                          "description": "Promise.then",
                          "callFrames": [
                            {
                              "functionName": "systemJSPrototype.import",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 228,
                              "columnNumber": 5
                            },
                            {
                              "functionName": "systemJSPrototype.import",
                              "scriptId": "1359",
                              "url": "https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js",
                              "lineNumber": 774,
                              "columnNumber": 18
                            },
                            {
                              "functionName": "",
                              "scriptId": "1365",
                              "url": "http://localhost:9000/",
                              "lineNumber": 81,
                              "columnNumber": 17
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "_priority": null,
        "_resourceType": "websocket",
        "_webSocketMessages": [
          {
            "type": "receive",
            "time": 1681149437.218511,
            "opcode": 1,
            "data": "{\"type\":\"hot\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.254651,
            "opcode": 1,
            "data": "{\"type\":\"liveReload\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.254793,
            "opcode": 1,
            "data": "{\"type\":\"reconnect\",\"data\":10}"
          },
          {
            "type": "receive",
            "time": 1681149437.255048,
            "opcode": 1,
            "data": "{\"type\":\"overlay\",\"data\":true}"
          },
          {
            "type": "receive",
            "time": 1681149437.255236,
            "opcode": 1,
            "data": "{\"type\":\"hash\",\"data\":\"aadb4150b7eb804e9c6e\"}"
          },
          {
            "type": "receive",
            "time": 1681149437.255285,
            "opcode": 1,
            "data": "{\"type\":\"ok\"}"
          }
        ],
        "cache": {},
        "pageref": "page_39",
        "request": {
          "method": "GET",
          "url": "ws://localhost:9000/ws",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Pragma",
              "value": "no-cache"
            },
            {
              "name": "Origin",
              "value": "http://localhost:9000"
            },
            {
              "name": "Accept-Encoding",
              "value": "gzip, deflate, br"
            },
            {
              "name": "Host",
              "value": "localhost:9000"
            },
            {
              "name": "Accept-Language",
              "value": "fr-FR,fr;q=0.9,es-ES;q=0.8,es;q=0.7,en-US;q=0.6,en;q=0.5"
            },
            {
              "name": "Sec-WebSocket-Key",
              "value": "1y8VgjHMBmRpytcnBptIqA=="
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36"
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            },
            {
              "name": "Cache-Control",
              "value": "no-cache"
            },
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Version",
              "value": "13"
            },
            {
              "name": "Sec-WebSocket-Extensions",
              "value": "permessage-deflate; client_max_window_bits"
            }
          ],
          "queryString": [],
          "cookies": [],
          "headersSize": 554,
          "bodySize": 0
        },
        "response": {
          "status": 101,
          "statusText": "Switching Protocols",
          "httpVersion": "HTTP/1.1",
          "headers": [
            {
              "name": "Connection",
              "value": "Upgrade"
            },
            {
              "name": "Sec-WebSocket-Accept",
              "value": "H4PFyj32DKeF37S+tucHeas9RPk="
            },
            {
              "name": "Upgrade",
              "value": "websocket"
            }
          ],
          "cookies": [],
          "content": {
            "size": 0,
            "mimeType": "x-unknown",
            "compression": 129
          },
          "redirectURL": "",
          "headersSize": 129,
          "bodySize": -129,
          "_transferSize": 0,
          "_error": null
        },
        "serverIPAddress": "",
        "startedDateTime": "2023-04-10T17:57:17.214Z",
        "time": 40.684999999939464,
        "timings": {
          "blocked": -1,
          "dns": -1,
          "ssl": -1,
          "connect": -1,
          "send": 0,
          "wait": 40.684999999939464,
          "receive": 0,
          "_blocked_queueing": -1
        }
      }
    ]
  }
}